// libmp3lame.js - port of libmp3lame to JavaScript using emscripten
// by Andreas Krennmair <ak@synflood.at>

var Lame = (function() {

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}




var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 146396;

assert(STATICTOP < TOTAL_MEMORY);








var _tabsel_123;








































var _stderr;
var _static_assert_tab_mask_add_delta;

































































var _freqs;





























































































































































































































































































var __ZTVSt9exception;


var __ZTVN10__cxxabiv120__si_class_type_infoE;


var __ZTISt9exception;











allocate(512, "i8", ALLOC_NONE, 5242880);
allocate(4096, "i8", ALLOC_NONE, 5243392);
allocate([0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,37,39,192,172,51,37,173,172,234,209,152,172,227,84,131,172,249,175,89,172,11,14,43,172,102,34,244,171,201,49,137,171,74,123,157,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,170,174,79,227,170,5,174,113,170,234,207,6,62,205,19,212,62,139,111,68,63,255,175,139,63,23,208,166,63,117,235,200,63,190,226,245,63,122,130,26,64,105,251,74,64,185,87,144,64,107,16,243,64,233,58,183,65,92,28,124,63,187,141,36,63,68,29,175,62,178,143,112,63,212,208,49,190,125,27,68,191,215,179,93,63,0,0,0,63,254,181,3,191,218,134,241,190,2,115,160,190,116,71,58,190,29,176,193,189,135,203,39,189,29,161,104,188,70,123,114,187,168,132,91,63,216,185,97,63,221,26,115,63,129,186,123,63,65,218,126,63,253,200,127,63,101,249,127,63,141,255,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,42,174,79,227,42,5,174,113,42,37,39,192,44,51,37,173,44,234,209,152,44,227,84,131,44,249,175,89,44,11,14,43,44,102,34,244,43,201,49,137,43,74,123,157,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170], "i8", ALLOC_NONE, 5247488);
allocate([137,158,227,63,229,83,236,63,167,94,245,63,155,20,249,63,14,217,252,63,123,143,234,63,218,151,217,63,226,132,191,63,124,145,168,63,0,0,128,63], "i8", ALLOC_NONE, 5248064);
allocate([43,152,159,163,27,134,139,188,168,241,120,163,7,62,43,61,81,63,155,164,158,120,179,189,139,51,14,164,232,209,62,62,176,169,254,164,226,172,32,191], "i8", ALLOC_NONE, 5248104);
allocate([0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,166,64,0,0,250,66,102,102,134,192,154,153,201,192,154,153,153,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,236,81,120,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,169,64,0,0,250,66,102,102,102,192,51,51,179,192,0,0,144,64,0,0,192,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,205,204,172,63,0,0,160,64,0,0,200,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,51,51,179,64,0,0,250,66,205,204,12,192,0,0,96,192,51,51,51,64,0,0,0,64,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,82,184,190,63,0,0,160,64,0,0,200,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,185,64,0,0,2,67,102,102,230,191,51,51,51,192,102,102,38,64,0,0,64,64,0,0,128,192,0,0,0,0,2,0,0,0,20,0,0,0,133,235,209,63,0,0,160,64,0,0,200,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,192,64,0,0,7,67,51,51,51,191,205,204,140,191,205,204,140,63,0,0,96,64,0,0,0,193,0,0,0,0,2,0,0,0,0,0,0,0,184,30,229,63,0,0,160,64,0,0,200,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,205,204,204,64,0,0,12,67,0,0,0,63,205,204,204,62,0,0,240,192,0,0,128,64,0,0,64,193,23,183,81,57,0,0,0,0,0,0,0,0,154,153,249,63,0,0,160,64,0,0,200,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,31,133,43,63,102,102,38,63,51,51,107,193,0,0,208,64,0,0,152,193,23,183,209,57,0,0,0,0,0,0,0,0,51,51,19,64,0,0,160,64,0,0,200,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,76,63,0,0,64,63,154,153,157,193,0,0,0,65,0,0,176,193,82,73,29,58,0,0,0,0,0,0,0,0,205,204,44,64,0,0,160,64,0,0,200,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,154,153,153,63,51,51,147,63,0,0,220,193,0,0,32,65,0,0,184,193,52,128,55,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,204,63,205,204,204,63,0,0,16,194,0,0,48,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,0,0,0,64,0,0,0,64,0,0,16,194,0,0,64,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66], "i8", ALLOC_NONE, 5248144);
allocate([0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,217,192,154,153,217,192,51,51,227,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,31,0,0,0,0,0,128,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,153,192,154,153,153,192,205,204,172,64,51,51,179,63,0,0,128,191,0,0,0,0,2,0,0,0,27,0,0,0,178,157,143,63,0,0,160,64,0,0,196,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,102,102,38,192,102,102,38,192,205,204,108,64,0,0,0,64,0,0,64,192,0,0,0,0,2,0,0,0,23,0,0,0,47,221,164,63,0,0,160,64,0,0,194,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,205,204,204,191,205,204,204,191,0,0,0,64,0,0,0,64,0,0,160,192,0,0,0,0,2,0,0,0,18,0,0,0,223,79,189,63,0,0,160,64,0,0,192,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,193,0,0,0,0,2,0,0,0,12,0,0,0,16,88,217,63,0,0,160,64,0,0,190,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,102,102,166,63,102,102,166,63,0,0,192,192,0,0,96,64,0,0,48,193,0,0,0,0,2,0,0,0,8,0,0,0,154,153,249,63,0,0,160,64,102,102,188,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,144,64,0,0,200,66,205,204,12,64,51,51,19,64,0,0,64,193,0,0,192,64,0,0,96,193,0,0,0,0,2,0,0,0,4,0,0,0,199,75,15,64,0,0,64,64,205,204,187,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,153,64,0,0,72,67,205,204,44,64,205,204,44,64,0,0,144,193,0,0,16,65,0,0,136,193,0,0,0,0,2,0,0,0,0,0,0,0,225,122,36,64,0,0,128,63,51,51,187,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,169,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,168,193,0,0,32,65,0,0,184,193,23,183,81,57,0,0,0,0,0,0,0,0,47,221,60,64,0,0,0,0,154,153,186,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,184,193,0,0,48,65,0,0,200,193,82,73,29,58,0,0,0,0,0,0,0,0,254,212,88,64,0,0,0,0,154,153,186,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,200,65,0,0,150,67,51,51,51,64,51,51,51,64,0,0,200,193,0,0,64,65,0,0,216,193,10,215,35,59,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,154,153,186,66], "i8", ALLOC_NONE, 5248892);
allocate([3,0,1,0,4,0,4,0,6,0,7,0,8,0,8,0,4,0,4,0,4,0,5,0,6,0,8,0,7,0,9,0,5,0,7,0,6,0,8,0,7,0,9,0,8,0,10,0,7,0,8,0,7,0,8,0,8,0,9,0,9,0,10,0], "i8", ALLOC_NONE, 5249640);
allocate([2,0,1,0,3,0,4,0,7,0,7,0,4,0,4,0,4,0,5,0,7,0,7,0,6,0,6,0,7,0,7,0,8,0,8,0], "i8", ALLOC_NONE, 5249704);
allocate([2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, 5249740);
allocate([0,0,128,63,54,89,75,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,250,155,128,62,153,158,240,61], "i8", ALLOC_NONE, 5249776);
allocate([3,4,6,7,9,10,4,5,6,7,8,10,5,6,7,8,9,10,7,7,8,9,9,10,8,8,9,9,10,11,9,9,10,10,11,11] /* \03\04\06\07\09\0A\0 */, "i8", ALLOC_NONE, 5249812);
allocate([7,0,5,0,9,0,14,0,15,0,7,0,6,0,4,0,5,0,5,0,6,0,7,0,7,0,6,0,8,0,8,0,8,0,5,0,15,0,6,0,9,0,10,0,5,0,1,0,11,0,7,0,9,0,6,0,4,0,1,0,14,0,4,0,6,0,2,0,6,0,0,0], "i8", ALLOC_NONE, 5249848);
allocate([2,4,7,9,9,10,4,4,6,10,10,10,7,6,8,10,10,11,9,10,10,11,11,12,9,9,10,11,12,12,10,10,11,11,13,13] /* \02\04\07\09\09\0A\0 */, "i8", ALLOC_NONE, 5249920);
allocate([3,0,4,0,6,0,18,0,12,0,5,0,5,0,1,0,2,0,16,0,9,0,3,0,7,0,3,0,5,0,14,0,7,0,3,0,19,0,17,0,15,0,13,0,10,0,4,0,13,0,5,0,8,0,11,0,5,0,1,0,12,0,4,0,4,0,1,0,1,0,0,0], "i8", ALLOC_NONE, 5249956);
allocate([1,4,7,9,9,10,4,6,8,9,9,10,7,7,9,10,10,11,8,9,10,11,11,11,8,9,10,11,11,12,9,10,11,12,12,12] /* \01\04\07\09\09\0A\0 */, "i8", ALLOC_NONE, 5250028);
allocate([1,0,2,0,10,0,19,0,16,0,10,0,3,0,3,0,7,0,10,0,5,0,3,0,11,0,4,0,13,0,17,0,8,0,4,0,12,0,11,0,18,0,15,0,11,0,2,0,7,0,6,0,9,0,14,0,3,0,1,0,6,0,4,0,5,0,3,0,2,0,0,0], "i8", ALLOC_NONE, 5250064);
allocate([3,4,6,8,4,4,6,7,5,6,7,8,7,7,8,9] /* \03\04\06\08\04\04\0 */, "i8", ALLOC_NONE, 5250136);
allocate([7,0,3,0,5,0,1,0,6,0,2,0,3,0,2,0,5,0,4,0,4,0,1,0,3,0,3,0,2,0,0,0], "i8", ALLOC_NONE, 5250152);
allocate([1,4,7,8,4,5,8,9,7,8,9,10,8,8,9,10] /* \01\04\07\08\04\05\0 */, "i8", ALLOC_NONE, 5250184);
allocate([1,0,2,0,6,0,5,0,3,0,1,0,4,0,4,0,7,0,5,0,7,0,1,0,6,0,1,0,1,0,0,0], "i8", ALLOC_NONE, 5250200);
allocate([2,3,7,4,4,7,6,7,8] /* \02\03\07\04\04\07\0 */, "i8", ALLOC_NONE, 5250232);
allocate([3,0,2,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0], "i8", ALLOC_NONE, 5250244);
allocate([4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8] /* \04\05\05\06\05\06\0 */, "i8", ALLOC_NONE, 5250264);
allocate([15,0,28,0,26,0,48,0,22,0,40,0,36,0,64,0,14,0,24,0,20,0,32,0,12,0,16,0,8,0,0,0], "i8", ALLOC_NONE, 5250280);
allocate([1,5,5,7,5,8,7,9,5,7,7,9,7,9,9,10] /* \01\05\05\07\05\08\0 */, "i8", ALLOC_NONE, 5250312);
allocate([1,0,10,0,8,0,20,0,12,0,20,0,16,0,32,0,14,0,12,0,24,0,0,0,28,0,16,0,24,0,16,0], "i8", ALLOC_NONE, 5250328);
allocate([1,4,7,4,5,7,6,7,8] /* \01\04\07\04\05\07\0 */, "i8", ALLOC_NONE, 5250360);
allocate([1,0,2,0,1,0,3,0,1,0,1,0,3,0,2,0,0,0], "i8", ALLOC_NONE, 5250372);
allocate([4,5,7,8,9,10,10,11,11,12,12,12,12,12,13,10,5,6,7,8,9,10,10,11,11,11,12,12,12,12,12,10,7,7,8,9,9,10,10,11,11,11,11,12,12,12,13,9,8,8,9,9,10,10,10,11,11,11,11,12,12,12,12,9,9,9,9,10,10,10,10,11,11,11,12,12,12,12,13,9,10,9,10,10,10,10,11,11,11,11,12,12,12,12,12,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,9,11,10,10,10,11,11,11,11,12,12,12,12,12,13,13,10,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,10,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,10,12,11,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,10,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,10,13,12,12,12,12,12,12,13,13,13,13,13,13,13,13,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,6] /* \04\05\07\08\09\0A\0 */, "i8", ALLOC_NONE, 5250392);
allocate([15,0,13,0,46,0,80,0,146,0,6,1,248,0,178,1,170,1,157,2,141,2,137,2,109,2,5,2,8,4,88,0,14,0,12,0,21,0,38,0,71,0,130,0,122,0,216,0,209,0,198,0,71,1,89,1,63,1,41,1,23,1,42,0,47,0,22,0,41,0,74,0,68,0,128,0,120,0,221,0,207,0,194,0,182,0,84,1,59,1,39,1,29,2,18,0,81,0,39,0,75,0,70,0,134,0,125,0,116,0,220,0,204,0,190,0,178,0,69,1,55,1,37,1,15,1,16,0,147,0,72,0,69,0,135,0,127,0,118,0,112,0,210,0,200,0,188,0,96,1,67,1,50,1,29,1,28,2,14,0,7,1,66,0,129,0,126,0,119,0,114,0,214,0,202,0,192,0,180,0,85,1,61,1,45,1,25,1,6,1,12,0,249,0,123,0,121,0,117,0,113,0,215,0,206,0,195,0,185,0,91,1,74,1,52,1,35,1,16,1,8,2,10,0,179,1,115,0,111,0,109,0,211,0,203,0,196,0,187,0,97,1,76,1,57,1,42,1,27,1,19,2,125,1,17,0,171,1,212,0,208,0,205,0,201,0,193,0,186,0,177,0,169,0,64,1,47,1,30,1,12,1,2,2,121,1,16,0,79,1,199,0,197,0,191,0,189,0,181,0,174,0,77,1,65,1,49,1,33,1,19,1,9,2,123,1,115,1,11,0,156,2,184,0,183,0,179,0,175,0,88,1,75,1,58,1,48,1,34,1,21,1,18,2,127,1,117,1,110,1,10,0,140,2,90,1,171,0,168,0,164,0,62,1,53,1,43,1,31,1,20,1,7,1,1,2,119,1,112,1,106,1,6,0,136,2,66,1,60,1,56,1,51,1,46,1,36,1,28,1,13,1,5,1,0,2,120,1,114,1,108,1,103,1,4,0,108,2,44,1,40,1,38,1,32,1,26,1,17,1,10,1,3,2,124,1,118,1,113,1,109,1,105,1,101,1,2,0,9,4,24,1,22,1,18,1,11,1,8,1,3,1,126,1,122,1,116,1,111,1,107,1,104,1,102,1,100,1,0,0,43,0,20,0,19,0,17,0,15,0,13,0,11,0,9,0,7,0,6,0,4,0,7,0,5,0,3,0,1,0,3,0], "i8", ALLOC_NONE, 5250648);
allocate([1,4,3,5] /* \01\04\03\05 */, "i8", ALLOC_NONE, 5251160);
allocate([1,0,1,0,1,0,0,0], "i8", ALLOC_NONE, 5251164);
allocate([1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,10,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,10,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,11,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,12,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,11,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,12,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,12,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,12,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,12,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,13,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,12,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,13,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,13,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,13,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,13,10,10,10,11,11,12,12,12,13,13,13,13,13,13,13,10] /* \01\05\07\09\0A\0A\0 */, "i8", ALLOC_NONE, 5251172);
allocate([1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,11,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,11,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,12,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,13,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,12,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,13,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,13,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,13,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,13,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,14,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,13,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,14,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,14,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,14,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,14,11,11,11,12,12,13,13,13,14,14,14,14,14,14,14,12] /* \01\05\07\09\0A\0A\0 */, "i8", ALLOC_NONE, 5251428);
allocate([1,0,5,0,14,0,44,0,74,0,63,0,110,0,93,0,172,0,149,0,138,0,242,0,225,0,195,0,120,1,17,0,3,0,4,0,12,0,20,0,35,0,62,0,53,0,47,0,83,0,75,0,68,0,119,0,201,0,107,0,207,0,9,0,15,0,13,0,23,0,38,0,67,0,58,0,103,0,90,0,161,0,72,0,127,0,117,0,110,0,209,0,206,0,16,0,45,0,21,0,39,0,69,0,64,0,114,0,99,0,87,0,158,0,140,0,252,0,212,0,199,0,131,1,109,1,26,0,75,0,36,0,68,0,65,0,115,0,101,0,179,0,164,0,155,0,8,1,246,0,226,0,139,1,126,1,106,1,9,0,66,0,30,0,59,0,56,0,102,0,185,0,173,0,9,1,142,0,253,0,232,0,144,1,132,1,122,1,189,1,16,0,111,0,54,0,52,0,100,0,184,0,178,0,160,0,133,0,1,1,244,0,228,0,217,0,129,1,110,1,203,2,10,0,98,0,48,0,91,0,88,0,165,0,157,0,148,0,5,1,248,0,151,1,141,1,116,1,124,1,121,3,116,3,8,0,85,0,84,0,81,0,159,0,156,0,143,0,4,1,249,0,171,1,145,1,136,1,127,1,215,2,201,2,196,2,7,0,154,0,76,0,73,0,141,0,131,0,0,1,245,0,170,1,150,1,138,1,128,1,223,2,103,1,198,2,96,1,11,0,139,0,129,0,67,0,125,0,247,0,233,0,229,0,219,0,137,1,231,2,225,2,208,2,117,3,114,3,183,1,4,0,243,0,120,0,118,0,115,0,227,0,223,0,140,1,234,2,230,2,224,2,209,2,200,2,194,2,223,0,180,1,6,0,202,0,224,0,222,0,218,0,216,0,133,1,130,1,125,1,108,1,120,3,187,1,195,2,184,1,181,1,192,6,4,0,235,2,211,0,210,0,208,0,114,1,123,1,222,2,211,2,202,2,199,6,115,3,109,3,108,3,131,13,97,3,2,0,121,1,113,1,102,0,187,0,214,2,210,2,102,1,199,2,197,2,98,3,198,6,103,3,130,13,102,3,178,1,0,0,12,0,10,0,7,0,11,0,10,0,17,0,11,0,9,0,13,0,12,0,10,0,7,0,5,0,3,0,1,0,3,0], "i8", ALLOC_NONE, 5251684);
allocate([3,5,6,8,8,9,10,10,10,11,11,12,12,12,13,14,5,5,7,8,9,9,10,10,10,11,11,12,12,12,13,13,6,7,7,8,9,9,10,10,10,11,11,12,12,13,13,13,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,8,8,9,9,10,10,11,11,11,11,12,12,12,13,13,13,9,9,9,10,10,10,11,11,11,11,12,12,13,13,13,14,10,9,10,10,10,11,11,11,11,12,12,12,13,13,14,14,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,14,10,10,10,11,11,11,11,12,12,12,12,13,13,14,14,14,10,10,11,11,11,11,12,12,12,13,13,13,13,14,14,14,11,11,11,11,12,12,12,12,12,13,13,13,13,14,15,14,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,12,12,11,12,12,12,13,13,13,13,13,13,14,14,15,15,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,13,13,13,13,13,13,13,13,14,14,14,14,15,15,14,15,13,13,13,13,13,13,13,14,14,14,14,14,15,15,15,15] /* \03\05\06\08\08\09\0 */, "i8", ALLOC_NONE, 5252196);
allocate([7,0,12,0,18,0,53,0,47,0,76,0,124,0,108,0,89,0,123,0,108,0,119,0,107,0,81,0,122,0,63,0,13,0,5,0,16,0,27,0,46,0,36,0,61,0,51,0,42,0,70,0,52,0,83,0,65,0,41,0,59,0,36,0,19,0,17,0,15,0,24,0,41,0,34,0,59,0,48,0,40,0,64,0,50,0,78,0,62,0,80,0,56,0,33,0,29,0,28,0,25,0,43,0,39,0,63,0,55,0,93,0,76,0,59,0,93,0,72,0,54,0,75,0,50,0,29,0,52,0,22,0,42,0,40,0,67,0,57,0,95,0,79,0,72,0,57,0,89,0,69,0,49,0,66,0,46,0,27,0,77,0,37,0,35,0,66,0,58,0,52,0,91,0,74,0,62,0,48,0,79,0,63,0,90,0,62,0,40,0,38,0,125,0,32,0,60,0,56,0,50,0,92,0,78,0,65,0,55,0,87,0,71,0,51,0,73,0,51,0,70,0,30,0,109,0,53,0,49,0,94,0,88,0,75,0,66,0,122,0,91,0,73,0,56,0,42,0,64,0,44,0,21,0,25,0,90,0,43,0,41,0,77,0,73,0,63,0,56,0,92,0,77,0,66,0,47,0,67,0,48,0,53,0,36,0,20,0,71,0,34,0,67,0,60,0,58,0,49,0,88,0,76,0,67,0,106,0,71,0,54,0,38,0,39,0,23,0,15,0,109,0,53,0,51,0,47,0,90,0,82,0,58,0,57,0,48,0,72,0,57,0,41,0,23,0,27,0,62,0,9,0,86,0,42,0,40,0,37,0,70,0,64,0,52,0,43,0,70,0,55,0,42,0,25,0,29,0,18,0,11,0,11,0,118,0,68,0,30,0,55,0,50,0,46,0,74,0,65,0,49,0,39,0,24,0,16,0,22,0,13,0,14,0,7,0,91,0,44,0,39,0,38,0,34,0,63,0,52,0,45,0,31,0,52,0,28,0,19,0,14,0,8,0,9,0,3,0,123,0,60,0,58,0,53,0,47,0,43,0,32,0,22,0,37,0,24,0,17,0,12,0,15,0,10,0,2,0,1,0,71,0,37,0,34,0,30,0,28,0,20,0,17,0,26,0,21,0,16,0,10,0,6,0,8,0,6,0,2,0,0,0], "i8", ALLOC_NONE, 5252452);
allocate([1,5,7,8,9,10,10,11,10,11,12,12,13,13,14,14,4,6,8,9,10,10,11,11,11,11,12,12,13,14,14,14,7,8,9,10,11,11,12,12,11,12,12,13,13,14,15,15,8,9,10,11,11,12,12,12,12,13,13,13,13,14,15,15,9,9,11,11,12,12,13,13,12,13,13,14,14,15,15,16,10,10,11,12,12,12,13,13,13,13,14,13,15,15,16,16,10,11,12,12,13,13,13,13,13,14,14,14,15,15,16,16,11,11,12,13,13,13,14,14,14,14,15,15,15,16,18,18,10,10,11,12,12,13,13,14,14,14,14,15,15,16,17,17,11,11,12,12,13,13,13,15,14,15,15,16,16,16,18,17,11,12,12,13,13,14,14,15,14,15,16,15,16,17,18,19,12,12,12,13,14,14,14,14,15,15,15,16,17,17,17,18,12,13,13,14,14,15,14,15,16,16,17,17,17,18,18,18,13,13,14,15,15,15,16,16,16,16,16,17,18,17,18,18,14,14,14,15,15,15,17,16,16,19,17,17,17,19,18,18,13,14,15,16,16,16,17,16,17,17,18,18,21,20,21,18] /* \01\05\07\08\09\0A\0 */, "i8", ALLOC_NONE, 5252964);
allocate([1,0,5,0,14,0,21,0,34,0,51,0,46,0,71,0,42,0,52,0,68,0,52,0,67,0,44,0,43,0,19,0,3,0,4,0,12,0,19,0,31,0,26,0,44,0,33,0,31,0,24,0,32,0,24,0,31,0,35,0,22,0,14,0,15,0,13,0,23,0,36,0,59,0,49,0,77,0,65,0,29,0,40,0,30,0,40,0,27,0,33,0,42,0,16,0,22,0,20,0,37,0,61,0,56,0,79,0,73,0,64,0,43,0,76,0,56,0,37,0,26,0,31,0,25,0,14,0,35,0,16,0,60,0,57,0,97,0,75,0,114,0,91,0,54,0,73,0,55,0,41,0,48,0,53,0,23,0,24,0,58,0,27,0,50,0,96,0,76,0,70,0,93,0,84,0,77,0,58,0,79,0,29,0,74,0,49,0,41,0,17,0,47,0,45,0,78,0,74,0,115,0,94,0,90,0,79,0,69,0,83,0,71,0,50,0,59,0,38,0,36,0,15,0,72,0,34,0,56,0,95,0,92,0,85,0,91,0,90,0,86,0,73,0,77,0,65,0,51,0,44,0,43,0,42,0,43,0,20,0,30,0,44,0,55,0,78,0,72,0,87,0,78,0,61,0,46,0,54,0,37,0,30,0,20,0,16,0,53,0,25,0,41,0,37,0,44,0,59,0,54,0,81,0,66,0,76,0,57,0,54,0,37,0,18,0,39,0,11,0,35,0,33,0,31,0,57,0,42,0,82,0,72,0,80,0,47,0,58,0,55,0,21,0,22,0,26,0,38,0,22,0,53,0,25,0,23,0,38,0,70,0,60,0,51,0,36,0,55,0,26,0,34,0,23,0,27,0,14,0,9,0,7,0,34,0,32,0,28,0,39,0,49,0,75,0,30,0,52,0,48,0,40,0,52,0,28,0,18,0,17,0,9,0,5,0,45,0,21,0,34,0,64,0,56,0,50,0,49,0,45,0,31,0,19,0,12,0,15,0,10,0,7,0,6,0,3,0,48,0,23,0,20,0,39,0,36,0,35,0,53,0,21,0,16,0,23,0,13,0,10,0,6,0,1,0,4,0,2,0,16,0,15,0,17,0,27,0,25,0,20,0,29,0,11,0,17,0,12,0,16,0,8,0,1,0,1,0,0,0,1,0], "i8", ALLOC_NONE, 5253220);
allocate([4,4,6,8,9,10,10,10,4,5,6,7,9,9,10,10,6,6,7,8,9,10,9,10,7,7,8,8,9,10,10,10,8,8,9,9,10,10,10,11,9,9,10,10,10,11,10,11,9,9,9,10,10,11,11,12,10,10,10,11,11,11,11,12] /* \04\04\06\08\09\0A\0 */, "i8", ALLOC_NONE, 5253732);
allocate([9,0,6,0,16,0,33,0,41,0,39,0,38,0,26,0,7,0,5,0,6,0,9,0,23,0,16,0,26,0,11,0,17,0,7,0,11,0,14,0,21,0,30,0,10,0,7,0,17,0,10,0,15,0,12,0,18,0,28,0,14,0,5,0,32,0,13,0,22,0,19,0,18,0,16,0,9,0,5,0,40,0,17,0,31,0,29,0,17,0,13,0,4,0,2,0,27,0,12,0,11,0,15,0,10,0,7,0,4,0,1,0,27,0,12,0,8,0,12,0,6,0,3,0,1,0,0,0], "i8", ALLOC_NONE, 5253796);
allocate([2,4,6,8,9,10,9,10,4,5,6,8,10,10,9,10,6,7,8,9,10,11,10,10,8,8,9,11,10,12,10,11,9,10,10,11,11,12,11,12,9,10,11,12,12,13,12,13,9,9,9,10,11,12,12,12,9,9,10,11,12,12,12,12] /* \02\04\06\08\09\0A\0 */, "i8", ALLOC_NONE, 5253924);
allocate([3,0,4,0,10,0,24,0,34,0,33,0,21,0,15,0,5,0,3,0,4,0,10,0,32,0,17,0,11,0,10,0,11,0,7,0,13,0,18,0,30,0,31,0,20,0,5,0,25,0,11,0,19,0,59,0,27,0,18,0,12,0,5,0,35,0,33,0,31,0,58,0,30,0,16,0,7,0,5,0,28,0,26,0,32,0,19,0,17,0,15,0,8,0,14,0,14,0,12,0,9,0,13,0,14,0,9,0,4,0,1,0,11,0,4,0,6,0,6,0,6,0,3,0,2,0,0,0], "i8", ALLOC_NONE, 5253988);
allocate([1,4,7,9,10,10,10,11,4,6,8,9,10,11,10,10,7,8,9,10,11,12,11,11,8,9,10,11,12,12,11,12,9,10,11,12,12,12,12,12,10,11,12,12,13,13,12,13,9,10,11,12,12,12,13,13,10,10,11,12,12,13,13,13] /* \01\04\07\09\0A\0A\0 */, "i8", ALLOC_NONE, 5254116);
allocate([1,0,2,0,10,0,23,0,35,0,30,0,12,0,17,0,3,0,3,0,8,0,12,0,18,0,21,0,12,0,7,0,11,0,9,0,15,0,21,0,32,0,40,0,19,0,6,0,14,0,13,0,22,0,34,0,46,0,23,0,18,0,7,0,20,0,19,0,33,0,47,0,27,0,22,0,9,0,3,0,31,0,22,0,41,0,26,0,21,0,20,0,5,0,3,0,14,0,13,0,10,0,11,0,16,0,6,0,5,0,1,0,9,0,8,0,7,0,8,0,4,0,4,0,2,0,0,0], "i8", ALLOC_NONE, 5254180);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0], "i8", ALLOC_NONE, 5254308);
allocate([0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0], "i8", ALLOC_NONE, 5254492);
allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0], "i8", ALLOC_NONE, 5254556);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0], "i8", ALLOC_NONE, 5254620);
allocate([1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0], "i8", ALLOC_NONE, 5254684);
allocate([0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,32,0,0,0,42,0,0,0,56,0,0,0,74,0,0,0,100,0,0,0,132,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,114,0,0,0,136,0,0,0,162,0,0,0,194,0,0,0,232,0,0,0,22,1,0,0,76,1,0,0,138,1,0,0,208,1,0,0,28,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,136,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,52,0,0,0,62,0,0,0,74,0,0,0,90,0,0,0,110,0,0,0,134,0,0,0,162,0,0,0,196,0,0,0,238,0,0,0,32,1,0,0,86,1,0,0,162,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,40,0,0,0,52,0,0,0,66,0,0,0,84,0,0,0,106,0,0,0,136,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,42,0,0,0,50,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,106,0,0,0,128,0,0,0,156,0,0,0,190,0,0,0,230,0,0,0,20,1,0,0,74,1,0,0,128,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,28,0,0,0,38,0,0,0,50,0,0,0,64,0,0,0,80,0,0,0,100,0,0,0,126,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,82,0,0,0,102,0,0,0,126,0,0,0,156,0,0,0,194,0,0,0,240,0,0,0,40,1,0,0,108,1,0,0,192,1,0,0,38,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,42,0,0,0,58,0,0,0,78,0,0,0,104,0,0,0,138,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,24,0,0,0,36,0,0,0,48,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,108,0,0,0,132,0,0,0,160,0,0,0,192,0,0,0,232,0,0,0,24,1,0,0,80,1,0,0,144,1,0,0,220,1,0,0,54,2,0,0,56,2,0,0,58,2,0,0,60,2,0,0,62,2,0,0,64,2,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,36,0,0,0,52,0,0,0,72,0,0,0,96,0,0,0,124,0,0,0,160,0,0,0,162,0,0,0,164,0,0,0,166,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5254748);
allocate([0,0,0,0,6,0,0,0,11,0,0,0,16,0,0,0,21,0,0,0], "i8", ALLOC_NONE, 5256584);
allocate([0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,54,0,0,0,36,0,0,0,54,0,0,0,72,0,0,0,54,0,0,0,72,0,0,0,90,0,0,0,72,0,0,0,90,0,0,0,108,0,0,0,108,0,0,0,126,0,0,0], "i8", ALLOC_NONE, 5256604);
allocate([0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,51,0,0,0,35,0,0,0,53,0,0,0,71,0,0,0,52,0,0,0,70,0,0,0,88,0,0,0,69,0,0,0,87,0,0,0,105,0,0,0,104,0,0,0,122,0,0,0], "i8", ALLOC_NONE, 5256668);
allocate([0,0,0,0,10,0,0,0,20,0,0,0,30,0,0,0,33,0,0,0,21,0,0,0,31,0,0,0,41,0,0,0,32,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,53,0,0,0,63,0,0,0,64,0,0,0,74,0,0,0], "i8", ALLOC_NONE, 5256732);
allocate([34,86,0,0,192,93,0,0,128,62,0,0,255,255,255,255,68,172,0,0,128,187,0,0,0,125,0,0,255,255,255,255,17,43,0,0,224,46,0,0,64,31,0,0,255,255,255,255], "i8", ALLOC_NONE, 5256796);
allocate([0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254] /* \00\80@\C0 \A0`\E0\1 */, "i8", ALLOC_NONE, 5256844);
allocate([205,204,236,192,205,204,236,192,205,204,236,192,0,0,24,193,205,204,236,192,51,51,195,192,0,0,176,192,102,102,150,192,102,102,150,192,102,102,150,192,102,102,150,192], "i8", ALLOC_NONE, 5256972);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5257016);
allocate(32832, "i8", ALLOC_NONE, 5257104);
allocate(1496, "i8", ALLOC_NONE, 5289936);
allocate([205,204,60,65,154,153,89,65,154,153,137,65,0,0,0,66,0,0,58,66,51,51,77,66,0,0,102,66,51,51,134,66,0,0,143,66,51,51,169,66,51,51,195,66,0,0,2,67], "i8", ALLOC_NONE, 5291432);
allocate([154,153,217,64,154,153,185,64,154,153,185,64,205,204,204,64,0,0,208,64,102,102,30,65,154,153,65,65,102,102,102,65,0,0,112,65,51,51,151,65,205,204,172,65,51,51,215,65,205,204,8,66,205,204,32,66,51,51,59,66,0,0,98,66,205,204,114,66,205,204,147,66,102,102,171,66,205,204,186,66,51,51,252,66], "i8", ALLOC_NONE, 5291480);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,128,191,205,204,76,189,0,0,0,63], "i8", ALLOC_NONE, 5291564);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,0,128,190,205,204,204,188,0,0,0,63], "i8", ALLOC_NONE, 5291596);
allocate([0,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,24,0,0,0,25,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,21,0,0,0,12,0,0,0,13,0,0,0,28,0,0,0,29,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,19,0,0,0,10,0,0,0,11,0,0,0,26,0,0,0,27,0,0,0,6,0,0,0,7,0,0,0,22,0,0,0,23,0,0,0,14,0,0,0,15,0,0,0,30,0,0,0,31,0,0,0], "i8", ALLOC_NONE, 5291628);
allocate([8,0,0,0,208,7,0,0,16,0,0,0,116,14,0,0,24,0,0,0,60,15,0,0,32,0,0,0,124,21,0,0,40,0,0,0,88,27,0,0,48,0,0,0,76,29,0,0,56,0,0,0,16,39,0,0,64,0,0,0,248,42,0,0,80,0,0,0,188,52,0,0,96,0,0,0,252,58,0,0,112,0,0,0,240,60,0,0,128,0,0,0,104,66,0,0,160,0,0,0,92,68,0,0,192,0,0,0,168,72,0,0,224,0,0,0,200,75,0,0,0,1,0,0,244,76,0,0,64,1,0,0,20,80,0,0], "i8", ALLOC_NONE, 5291756);
allocate([6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,9,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,11,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,15,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,15,0,0,0,12,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,9,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5291892);
allocate([8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0], "i8", ALLOC_NONE, 5292180);
allocate([0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0], "i8", ALLOC_NONE, 5292248);
allocate(24, "i8", ALLOC_NONE, 5292312);
allocate(22000, "i8", ALLOC_NONE, 5292336);
allocate([15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0] /* \0F\0F\0F\0F\0F\0F\0 */, "i8", ALLOC_NONE, 5314336);
allocate([15,0,0,0,15,0,0,0,7,0,0,0,7,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,31,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5314376);
allocate([7,7,7,7,7,7,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0] /* \07\07\07\07\07\07\0 */, "i8", ALLOC_NONE, 5314472);
allocate([15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,0] /* \0F\0F\0F\0F\0F\0F\0 */, "i8", ALLOC_NONE, 5314496);
allocate(4, "i8", ALLOC_NONE, 5314520);
allocate(4, "i8", ALLOC_NONE, 5314524);
allocate(4, "i8", ALLOC_NONE, 5314528);
allocate(2052, "i8", ALLOC_NONE, 5314532);
allocate([4,0,1,0,5,0,5,0,7,0,7,0,8,0,9,0,9,0,10,0,10,0,10,0,10,0,11,0,11,0,11,0,11,0,12,0,12,0,12,0,12,0,12,0,12,0,13,0,12,0,13,0,12,0,13,0,13,0,14,0,10,0,10,0,5,0,4,0,6,0,6,0,7,0,8,0,8,0,9,0,9,0,10,0,10,0,11,0,10,0,11,0,11,0,11,0,11,0,12,0,11,0,12,0,12,0,12,0,12,0,13,0,12,0,14,0,12,0,13,0,12,0,14,0,10,0,10,0,7,0,7,0,7,0,8,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,12,0,13,0,12,0,13,0,12,0,14,0,13,0,14,0,9,0,11,0,8,0,9,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,9,0,12,0,9,0,10,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,15,0,9,0,11,0,10,0,10,0,9,0,10,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,14,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,9,0,12,0,10,0,11,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,16,0,9,0,12,0,11,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,13,0,17,0,13,0,17,0,10,0,12,0,11,0,11,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,11,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,16,0,13,0,16,0,10,0,12,0,11,0,12,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,15,0,13,0,16,0,13,0,15,0,10,0,13,0,12,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,17,0,13,0,17,0,13,0,16,0,10,0,12,0,12,0,13,0,12,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,16,0,13,0,15,0,13,0,16,0,10,0,13,0,12,0,13,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,17,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,18,0,10,0,13,0,12,0,15,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,18,0,13,0,17,0,13,0,17,0,13,0,17,0,13,0,19,0,13,0,17,0,10,0,13,0,13,0,14,0,12,0,15,0,12,0,13,0,12,0,14,0,12,0,16,0,12,0,16,0,12,0,15,0,13,0,16,0,13,0,16,0,13,0,17,0,13,0,18,0,13,0,17,0,13,0,19,0,13,0,17,0,13,0,16,0,10,0,13,0,9,0,10,0,9,0,10,0,9,0,10,0,9,0,11,0,9,0,11,0,9,0,12,0,9,0,12,0,9,0,12,0,9,0,13,0,9,0,13,0,9,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,6,0,10,0], "i8", ALLOC_NONE, 5316584);
allocate([44,76,0,0,56,74,0,0,68,72,0,0,80,70,0,0,92,68,0,0,116,64,0,0,140,60,0,0,164,56,0,0,212,48,0,0,28,37,0,0,110,15,0,0], "i8", ALLOC_NONE, 5317608);
allocate([192,93,0,0,44,76,0,0,68,72,0,0,80,70,0,0,92,68,0,0,104,66,0,0,116,64,0,0,240,60,0,0,96,59,0,0,62,28,0,0,110,15,0,0], "i8", ALLOC_NONE, 5317652);
allocate([44,76,0,0,56,74,0,0,168,72,0,0,80,70,0,0,92,68,0,0,128,62,0,0,240,60,0,0,52,58,0,0,212,48,0,0,16,39,0,0,110,15,0,0], "i8", ALLOC_NONE, 5317696);
allocate([0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63], "i8", ALLOC_NONE, 5317740);
allocate([128,187,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,148,92,0,0,68,172,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,20,85,0,0,0,125,0,0,0,0,208,64,0,0,0,65,102,102,166,64,0,0,208,64,184,61,0,0,192,93,0,0,0,0,0,65,0,0,8,65,102,102,166,64,0,0,192,64,74,46,0,0,34,86,0,0,0,0,8,65,246,40,16,65,102,102,166,64,0,0,208,64,140,42,0,0,128,62,0,0,246,40,16,65,102,102,22,65,205,204,156,64,0,0,208,64,223,30,0,0,224,46,0,0,102,102,22,65,154,153,25,65,0,0,144,64,0,0,192,64,40,23,0,0,17,43,0,0,154,153,25,65,102,102,30,65,51,51,163,64,0,0,208,64,70,21,0,0,64,31,0,0,102,102,30,65,0,0,32,65,205,204,156,64,0,0,208,64,112,15,0,0], "i8", ALLOC_NONE, 5317756);
allocate([102,102,182,64,0,0,208,64,154,153,233,64,51,51,3,65,0,0,32,65,102,102,62,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,132,65], "i8", ALLOC_NONE, 5317972);
allocate(4, "i8", ALLOC_NONE, 5318012);
allocate(4, "i8", ALLOC_NONE, 5318016);
allocate(4, "i8", ALLOC_NONE, 5318020);
allocate([0,0,0,63,0,0,0,63], "i8", ALLOC_NONE, 5318024);
allocate([84,224,212,189,89,191,65,190,248,108,93,190,47,168,31,190,254,195,51,36,70,124,111,62,48,42,1,63,72,191,65,63,70,124,111,63], "i8", ALLOC_NONE, 5318032);
allocate(8192, "i8", ALLOC_NONE, 5318068);
allocate(1028, "i8", ALLOC_NONE, 5326260);
allocate(4, "i8", ALLOC_NONE, 5327288);
allocate([1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,10,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0], "i8", ALLOC_NONE, 5327292);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,13,0,0,0,255,31,0,0,0,0,0,0,0,0,0,0,4,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,255,1,0,0,0,0,0,0,0,0,0,0,11,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,13,0,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5327352);
allocate(9216, "i8", ALLOC_NONE, 5327896);
allocate(8192, "i8", ALLOC_NONE, 5337112);
allocate(4, "i8", ALLOC_NONE, 5345304);
allocate(4, "i8", ALLOC_NONE, 5345308);
allocate(4, "i8", ALLOC_NONE, 5345312);
allocate(4, "i8", ALLOC_NONE, 5345316);
allocate(4, "i8", ALLOC_NONE, 5345320);
allocate(4, "i8", ALLOC_NONE, 5345324);
allocate(4, "i8", ALLOC_NONE, 5345328);
allocate(4, "i8", ALLOC_NONE, 5345332);
allocate(4, "i8", ALLOC_NONE, 5345336);
allocate(4, "i8", ALLOC_NONE, 5345340);
allocate(592, "i8", ALLOC_NONE, 5345344);
allocate([123,0,0,0,34,0,0,0,74,0,0,0,73,0,0,0,99,0,0,0,20,0,0,0,40,0,0,0,26,0,0,0,145,0,0,0,90,0,0,0,116,0,0,0,41,0,0,0,135,0,0,0,85,0,0,0,96,0,0,0,138,0,0,0,89,0,0,0,0,0,0,0,107,0,0,0,132,0,0,0,65,0,0,0,88,0,0,0,104,0,0,0,102,0,0,0,97,0,0,0,136,0,0,0,61,0,0,0,141,0,0,0,32,0,0,0,1,0,0,0,112,0,0,0,128,0,0,0,57,0,0,0,140,0,0,0,2,0,0,0,139,0,0,0,58,0,0,0,3,0,0,0,125,0,0,0,50,0,0,0,22,0,0,0,4,0,0,0,55,0,0,0,127,0,0,0,122,0,0,0,120,0,0,0,98,0,0,0,52,0,0,0,48,0,0,0,54,0,0,0,124,0,0,0,25,0,0,0,84,0,0,0,80,0,0,0,115,0,0,0,81,0,0,0,119,0,0,0,5,0,0,0,30,0,0,0,36,0,0,0,59,0,0,0,126,0,0,0,38,0,0,0,49,0,0,0,91,0,0,0,6,0,0,0,129,0,0,0,79,0,0,0,137,0,0,0,7,0,0,0,35,0,0,0,100,0,0,0,131,0,0,0,19,0,0,0,33,0,0,0,46,0,0,0,47,0,0,0,8,0,0,0,29,0,0,0,146,0,0,0,63,0,0,0,86,0,0,0,71,0,0,0,45,0,0,0,142,0,0,0,9,0,0,0,77,0,0,0,82,0,0,0,64,0,0,0,133,0,0,0,10,0,0,0,66,0,0,0,39,0,0,0,11,0,0,0,103,0,0,0,12,0,0,0,75,0,0,0,134,0,0,0,13,0,0,0,53,0,0,0,62,0,0,0,109,0,0,0,117,0,0,0,23,0,0,0,108,0,0,0,92,0,0,0,67,0,0,0,93,0,0,0,43,0,0,0,121,0,0,0,15,0,0,0,68,0,0,0,14,0,0,0,16,0,0,0,76,0,0,0,87,0,0,0,118,0,0,0,17,0,0,0,78,0,0,0,143,0,0,0,114,0,0,0,110,0,0,0,69,0,0,0,21,0,0,0,111,0,0,0,95,0,0,0,105,0,0,0,42,0,0,0,37,0,0,0,24,0,0,0,56,0,0,0,44,0,0,0,101,0,0,0,83,0,0,0,94,0,0,0,106,0,0,0,147,0,0,0,113,0,0,0,18,0,0,0,51,0,0,0,130,0,0,0,144,0,0,0,60,0,0,0,70,0,0,0,31,0,0,0,72,0,0,0,27,0,0,0,28,0,0,0], "i8", ALLOC_NONE, 5345936);
allocate([121,207,23,190,138,59,1,66,164,51,148,67,155,200,92,68,202,167,45,70,175,40,132,68,192,222,152,67,129,155,246,65,199,156,118,64,77,183,109,66,194,101,49,68,74,15,165,69,82,45,182,197,71,104,76,196,73,213,153,194,66,4,147,192,94,6,104,63,54,189,72,62,3,97,30,190,44,76,9,66,68,231,150,67,96,102,76,68,47,215,52,70,17,168,147,68,117,204,160,67,46,219,249,65,68,124,109,64,146,154,86,66,183,10,43,68,136,68,163,69,35,243,198,197,129,62,99,196,80,169,179,194,43,42,173,192,1,24,82,63,194,197,199,62,223,144,36,190,144,150,16,66,32,15,152,67,140,47,55,68,113,86,59,70,101,128,162,68,120,164,167,67,193,231,251,65,149,237,87,64,209,237,60,66,46,47,35,68,80,99,160,69,178,232,215,197,240,127,122,196,100,62,207,194,121,91,195,192,207,220,61,63,49,160,20,63,61,91,42,190,177,1,23,66,106,129,151,67,98,254,28,68,14,27,65,70,229,136,176,68,246,95,173,67,75,201,252,65,52,59,74,64,173,80,34,66,178,10,26,68,170,126,156,69,83,240,232,197,121,249,136,196,253,124,236,194,231,48,218,192,193,13,43,63,21,239,67,63,139,188,47,190,75,118,28,66,177,43,149,67,81,195,251,67,92,30,70,70,161,146,189,68,23,254,177,67,116,41,251,65,165,166,58,64,77,48,7,66,62,185,15,68,225,169,151,69,144,236,249,197,102,184,148,196,253,164,5,195,130,12,247,192,196,112,25,63,234,90,113,63,120,177,52,190,11,224,32,66,197,255,144,67,75,169,179,67,9,89,74,70,63,131,201,68,227,108,181,67,12,94,248,65,73,159,52,64,49,233,215,65,148,121,4,68,250,250,145,69,153,95,5,198,224,82,160,196,230,149,21,195,193,75,10,193,185,213,8,63,218,57,142,63,244,54,185,190,93,45,36,66,238,197,138,67,123,163,67,67,193,197,77,70,150,52,212,68,118,180,183,67,208,116,244,65,169,3,34,64,173,143,160,65,68,192,240,67,195,135,139,69,122,165,13,198,28,180,171,196,130,42,38,195,136,83,25,193,112,40,242,62,153,103,162,63,55,74,189,190,167,146,37,66,148,165,130,67,182,247,78,65,135,96,80,70,71,144,221,68,247,225,184,67,182,2,238,65,153,191,25,64,113,224,84,65,226,71,215,67,116,104,132,69,186,183,21,198,32,182,182,196,153,32,55,195,248,124,43,193,205,19,212,62,243,4,181,63,187,232,192,190,91,122,38,66,227,13,113,67,88,242,59,195,65,40,82,70,237,132,229,68,213,190,184,67,201,3,232,65,16,147,4,64,105,242,216,64,110,227,188,67,47,102,121,69,214,134,29,198,81,62,193,196,85,96,72,195,235,212,61,193,80,50,183,62,3,228,197,63,71,16,196,190,73,155,36,66,18,122,88,67,23,20,203,195,140,28,83,70,216,249,235,68,185,166,183,67,247,22,225,65,11,250,244,63,71,16,196,62,69,237,161,67,91,2,105,69,239,4,37,198,124,38,203,196,16,160,89,195,54,63,80,193,66,80,155,62,49,219,212,63,46,15,21,191,242,108,33,66,98,51,60,67,83,17,32,196,220,60,83,70,70,243,240,68,238,104,181,67,38,192,215,65,112,137,223,63,88,12,180,192,157,166,134,67,47,214,87,69,149,32,44,198,6,85,212,196,16,196,106,195,193,157,98,193,212,63,128,62,152,197,225,63,57,182,22,191,234,239,28,66,206,194,27,67,244,79,94,196,226,141,82,70,182,97,244,68,249,56,178,67,221,40,207,65,124,229,200,63,57,233,50,193,16,207,86,67,160,18,70,69,73,205,50,198,21,165,220,196,104,176,123,195,1,246,119,193,175,175,75,62,94,131,236,63,230,143,74,191,36,147,21,66,35,102,239,66,16,227,143,196,201,17,81,70,166,76,246,68,130,2,174,67,22,218,197,65,28,72,177,63,12,95,131,193,224,12,33,67,81,229,51,69,247,251,56,198,140,255,227,196,139,36,134,195,184,137,134,193,100,229,23,62,11,250,244,63,223,202,75,191,201,237,12,66,223,9,160,66,174,0,178,196,45,207,78,70,187,185,246,68,213,254,168,67,51,80,186,65,197,91,178,63,32,204,168,193,139,247,216,66,54,123,33,69,232,158,62,198,230,72,234,196,148,31,142,195,218,232,144,193,220,181,201,61,190,20,251,63,15,177,127,191,152,64,2,66,94,213,19,66,106,66,213,196,38,205,75,70,66,172,245,68,70,55,163,67,112,102,177,65,251,108,153,63,81,248,202,193,231,35,102,66,180,6,15,69,179,170,67,198,226,90,239,196,151,161,149,195,66,6,155,193,60,57,73,61,109,196,254,63,54,211,37,70,68,177,165,69,175,113,104,68,69,51,54,68,128,12,144,67,180,213,129,66,2,0,241,65,34,63,131,64,49,19,72,70,167,49,243,68,86,182,156,67,170,105,166,65,251,100,249,68,112,3,16,65,17,158,233,193], "i8", ALLOC_NONE, 5346528);
allocate([0,0,0,0,128,1,0,0,128,4,0,0,128,4,0,0,0,0,0,0,128,1,0,0,128,4,0,0,64,2,0,0], "i8", ALLOC_NONE, 5347668);
allocate([0,0,0,0,193,192,0,0,129,193,0,0,64,1,0,0,1,195,0,0,192,3,0,0,128,2,0,0,65,194,0,0,1,198,0,0,192,6,0,0,128,7,0,0,65,199,0,0,0,5,0,0,193,197,0,0,129,196,0,0,64,4,0,0,1,204,0,0,192,12,0,0,128,13,0,0,65,205,0,0,0,15,0,0,193,207,0,0,129,206,0,0,64,14,0,0,0,10,0,0,193,202,0,0,129,203,0,0,64,11,0,0,1,201,0,0,192,9,0,0,128,8,0,0,65,200,0,0,1,216,0,0,192,24,0,0,128,25,0,0,65,217,0,0,0,27,0,0,193,219,0,0,129,218,0,0,64,26,0,0,0,30,0,0,193,222,0,0,129,223,0,0,64,31,0,0,1,221,0,0,192,29,0,0,128,28,0,0,65,220,0,0,0,20,0,0,193,212,0,0,129,213,0,0,64,21,0,0,1,215,0,0,192,23,0,0,128,22,0,0,65,214,0,0,1,210,0,0,192,18,0,0,128,19,0,0,65,211,0,0,0,17,0,0,193,209,0,0,129,208,0,0,64,16,0,0,1,240,0,0,192,48,0,0,128,49,0,0,65,241,0,0,0,51,0,0,193,243,0,0,129,242,0,0,64,50,0,0,0,54,0,0,193,246,0,0,129,247,0,0,64,55,0,0,1,245,0,0,192,53,0,0,128,52,0,0,65,244,0,0,0,60,0,0,193,252,0,0,129,253,0,0,64,61,0,0,1,255,0,0,192,63,0,0,128,62,0,0,65,254,0,0,1,250,0,0,192,58,0,0,128,59,0,0,65,251,0,0,0,57,0,0,193,249,0,0,129,248,0,0,64,56,0,0,0,40,0,0,193,232,0,0,129,233,0,0,64,41,0,0,1,235,0,0,192,43,0,0,128,42,0,0,65,234,0,0,1,238,0,0,192,46,0,0,128,47,0,0,65,239,0,0,0,45,0,0,193,237,0,0,129,236,0,0,64,44,0,0,1,228,0,0,192,36,0,0,128,37,0,0,65,229,0,0,0,39,0,0,193,231,0,0,129,230,0,0,64,38,0,0,0,34,0,0,193,226,0,0,129,227,0,0,64,35,0,0,1,225,0,0,192,33,0,0,128,32,0,0,65,224,0,0,1,160,0,0,192,96,0,0,128,97,0,0,65,161,0,0,0,99,0,0,193,163,0,0,129,162,0,0,64,98,0,0,0,102,0,0,193,166,0,0,129,167,0,0,64,103,0,0,1,165,0,0,192,101,0,0,128,100,0,0,65,164,0,0,0,108,0,0,193,172,0,0,129,173,0,0,64,109,0,0,1,175,0,0,192,111,0,0,128,110,0,0,65,174,0,0,1,170,0,0,192,106,0,0,128,107,0,0,65,171,0,0,0,105,0,0,193,169,0,0,129,168,0,0,64,104,0,0,0,120,0,0,193,184,0,0,129,185,0,0,64,121,0,0,1,187,0,0,192,123,0,0,128,122,0,0,65,186,0,0,1,190,0,0,192,126,0,0,128,127,0,0,65,191,0,0,0,125,0,0,193,189,0,0,129,188,0,0,64,124,0,0,1,180,0,0,192,116,0,0,128,117,0,0,65,181,0,0,0,119,0,0,193,183,0,0,129,182,0,0,64,118,0,0,0,114,0,0,193,178,0,0,129,179,0,0,64,115,0,0,1,177,0,0,192,113,0,0,128,112,0,0,65,176,0,0,0,80,0,0,193,144,0,0,129,145,0,0,64,81,0,0,1,147,0,0,192,83,0,0,128,82,0,0,65,146,0,0,1,150,0,0,192,86,0,0,128,87,0,0,65,151,0,0,0,85,0,0,193,149,0,0,129,148,0,0,64,84,0,0,1,156,0,0,192,92,0,0,128,93,0,0,65,157,0,0,0,95,0,0,193,159,0,0,129,158,0,0,64,94,0,0,0,90,0,0,193,154,0,0,129,155,0,0,64,91,0,0,1,153,0,0,192,89,0,0,128,88,0,0,65,152,0,0,1,136,0,0,192,72,0,0,128,73,0,0,65,137,0,0,0,75,0,0,193,139,0,0,129,138,0,0,64,74,0,0,0,78,0,0,193,142,0,0,129,143,0,0,64,79,0,0,1,141,0,0,192,77,0,0,128,76,0,0,65,140,0,0,0,68,0,0,193,132,0,0,129,133,0,0,64,69,0,0,1,135,0,0,192,71,0,0,128,70,0,0,65,134,0,0,1,130,0,0,192,66,0,0,128,67,0,0,65,131,0,0,0,65,0,0,193,129,0,0,129,128,0,0,64,64,0,0], "i8", ALLOC_NONE, 5347700);
allocate([28,0,0,0,30,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5348724);
allocate([94,131,108,63,21,239,195,62,109,196,126,63,54,189,200,61,67,236,127,63,176,10,201,60,196,254,127,63,136,15,201,59], "i8", ALLOC_NONE, 5348788);
allocate([0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,144,0,0,0,160,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,255,255,255,255,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, 5348820);
allocate([8,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,240,193,0,0,48,65,82,73,157,58,1,0,0,0,16,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,200,193,0,0,48,65,111,18,131,58,1,0,0,0,24,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,160,193,0,0,48,65,111,18,131,58,1,0,0,0,32,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,112,193,0,0,48,65,111,18,131,58,1,0,0,0,40,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,48,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,56,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,192,192,0,0,48,65,23,183,81,58,1,0,0,0,64,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,192,0,0,48,65,23,183,81,58,1,0,0,0,80,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,0,0,0,0,65,52,128,55,58,1,0,0,0,96,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,32,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,128,63,0,0,176,64,82,73,29,58,1,0,0,0,112,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,16,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,64,0,0,144,64,111,18,3,58,1,0,0,0,128,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,249,63,205,204,204,64,0,0,12,67,51,51,115,63,0,0,0,0,0,0,64,64,0,0,128,64,23,183,81,57,1,0,0,0,160,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,184,30,229,63,0,0,192,64,0,0,7,67,51,51,115,63,0,0,0,192,0,0,160,64,0,0,96,64,0,0,0,0,1,0,0,0,192,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,82,184,190,63,51,51,179,64,0,0,250,66,236,81,120,63,0,0,128,192,0,0,224,64,0,0,64,64,0,0,0,0,0,0,0,0,224,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,160,63,102,102,166,64,0,0,250,66,72,225,122,63,0,0,192,192,0,0,16,65,0,0,0,64,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,236,81,120,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,0,193,0,0,32,65,0,0,128,63,0,0,0,0,0,0,0,0,64,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,102,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,32,193,0,0,64,65,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5349012);
allocate(32832, "i8", ALLOC_NONE, 5349896);
allocate([67,101,108,116,105,99,0] /* Celtic\00 */, "i8", ALLOC_NONE, 5382728);
allocate([82,101,118,105,118,97,108,0] /* Revival\00 */, "i8", ALLOC_NONE, 5382736);
allocate([76,97,116,105,110,0] /* Latin\00 */, "i8", ALLOC_NONE, 5382744);
allocate([66,101,98,111,98,0] /* Bebob\00 */, "i8", ALLOC_NONE, 5382752);
allocate([70,97,115,116,32,70,117,115,105,111,110,0] /* Fast Fusion\00 */, "i8", ALLOC_NONE, 5382760);
allocate([83,119,105,110,103,0] /* Swing\00 */, "i8", ALLOC_NONE, 5382772);
allocate([78,97,116,105,111,110,97,108,32,70,111,108,107,0] /* National Folk\00 */, "i8", ALLOC_NONE, 5382780);
allocate([87,97,114,110,105,110,103,58,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,46,32,32,104,105,103,104,112,97,115,115,32,102,114,101,113,117,101,110,99,121,32,116,111,111,32,115,109,97,108,108,10,0] /* Warning: highpass fi */, "i8", ALLOC_NONE, 5382796);
allocate([70,111,108,107,45,82,111,99,107,0] /* Folk-Rock\00 */, "i8", ALLOC_NONE, 5382864);
allocate([83,83,69,0] /* SSE\00 */, "i8", ALLOC_NONE, 5382876);
allocate([69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,105,110,95,98,117,102,102,101,114,32,98,117,102,102,101,114,10,0] /* Error: can't allocat */, "i8", ALLOC_NONE, 5382880);
allocate([70,111,108,107,0] /* Folk\00 */, "i8", ALLOC_NONE, 5382920);
allocate([69,114,114,111,114,58,32,99,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,76,65,77,69,32,116,97,103,44,32,102,105,108,101,32,110,111,116,32,114,101,97,100,97,98,108,101,46,10,0] /* Error: could not upd */, "i8", ALLOC_NONE, 5382928);
allocate([72,97,114,100,32,82,111,99,107,0] /* Hard Rock\00 */, "i8", ALLOC_NONE, 5382984);
allocate([76,65,77,69,32,37,115,32,118,101,114,115,105,111,110,32,37,115,32,40,37,115,41,0] /* LAME %s version %s ( */, "i8", ALLOC_NONE, 5382996);
allocate([69,114,114,111,114,58,32,99,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,76,65,77,69,32,116,97,103,44,32,102,105,108,101,32,110,111,116,32,115,101,101,107,97,98,108,101,46,10,0] /* Error: could not upd */, "i8", ALLOC_NONE, 5383020);
allocate([82,111,99,107,32,38,32,82,111,108,108,0] /* Rock & Roll\00 */, "i8", ALLOC_NONE, 5383076);
allocate([69,114,114,111,114,58,32,99,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,76,65,77,69,32,116,97,103,46,10,0] /* Error: could not upd */, "i8", ALLOC_NONE, 5383088);
allocate([77,117,115,105,99,97,108,0] /* Musical\00 */, "i8", ALLOC_NONE, 5383124);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5383132);
allocate([82,101,116,114,111,0] /* Retro\00 */, "i8", ALLOC_NONE, 5383136);
allocate([9,105,110,116,101,114,99,104,97,110,110,101,108,32,109,97,115,107,105,110,103,32,114,97,116,105,111,58,32,37,103,10,0] /* \09interchannel mask */, "i8", ALLOC_NONE, 5383144);
allocate([80,111,108,107,97,0] /* Polka\00 */, "i8", ALLOC_NONE, 5383180);
allocate([9,117,115,105,110,103,32,116,101,109,112,111,114,97,108,32,109,97,115,107,105,110,103,32,101,102,102,101,99,116,58,32,37,115,10,0] /* \09using temporal ma */, "i8", ALLOC_NONE, 5383188);
allocate([65,99,105,100,32,74,97,122,122,0] /* Acid Jazz\00 */, "i8", ALLOC_NONE, 5383224);
allocate([110,111,0] /* no\00 */, "i8", ALLOC_NONE, 5383236);
allocate([65,99,105,100,32,80,117,110,107,0] /* Acid Punk\00 */, "i8", ALLOC_NONE, 5383240);
allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_NONE, 5383252);
allocate([84,114,105,98,97,108,0] /* Tribal\00 */, "i8", ALLOC_NONE, 5383256);
allocate([9,32,32,32,97,100,106,117,115,116,32,109,97,115,107,105,110,103,32,98,97,115,115,61,37,103,32,100,66,44,32,97,108,116,111,61,37,103,32,100,66,44,32,116,114,101,98,108,101,61,37,103,32,100,66,44,32,115,102,98,50,49,61,37,103,32,100,66,10,0] /* \09   adjust masking */, "i8", ALLOC_NONE, 5383264);
allocate([76,111,45,70,105,0] /* Lo-Fi\00 */, "i8", ALLOC_NONE, 5383336);
allocate([83,83,69,32,40,65,83,77,32,117,115,101,100,41,0] /* SSE (ASM used)\00 */, "i8", ALLOC_NONE, 5383344);
allocate([9,101,120,112,101,114,105,109,101,110,116,97,108,32,112,115,121,32,116,117,110,105,110,103,115,32,98,121,32,78,97,111,107,105,32,83,104,105,98,97,116,97,10,0] /* \09experimental psy  */, "i8", ALLOC_NONE, 5383360);
allocate([84,114,97,105,108,101,114,0] /* Trailer\00 */, "i8", ALLOC_NONE, 5383404);
allocate([9,32,94,32,97,100,106,117,115,116,32,115,101,110,115,105,116,105,118,105,116,121,32,112,111,119,101,114,58,32,37,102,10,0] /* \09 ^ adjust sensiti */, "i8", ALLOC_NONE, 5383412);
allocate([83,104,111,119,116,117,110,101,115,0] /* Showtunes\00 */, "i8", ALLOC_NONE, 5383448);
allocate([37,108,117,0] /* %lu\00 */, "i8", ALLOC_NONE, 5383460);
allocate([9,32,94,32,97,100,106,117,115,116,32,116,121,112,101,58,32,37,100,10,0] /* \09 ^ adjust type: % */, "i8", ALLOC_NONE, 5383464);
allocate([82,97,118,101,0] /* Rave\00 */, "i8", ALLOC_NONE, 5383488);
allocate([9,32,94,32,108,101,118,101,108,32,97,100,106,117,115,116,101,109,101,110,116,58,32,37,103,32,100,66,10,0] /* \09 ^ level adjustem */, "i8", ALLOC_NONE, 5383496);
allocate([80,115,121,99,104,101,100,101,108,105,99,0] /* Psychedelic\00 */, "i8", ALLOC_NONE, 5383528);
allocate([32,40,111,110,108,121,32,102,111,114,32,116,121,112,101,32,52,41,0] /*  (only for type 4)\0 */, "i8", ALLOC_NONE, 5383540);
allocate([78,101,119,32,87,97,118,101,0] /* New Wave\00 */, "i8", ALLOC_NONE, 5383560);
allocate([9,32,94,32,115,104,97,112,101,58,32,37,103,37,115,10,0] /* \09 ^ shape: %g%s\0A */, "i8", ALLOC_NONE, 5383572);
allocate([67,97,98,97,114,101,116,0] /* Cabaret\00 */, "i8", ALLOC_NONE, 5383592);
allocate([9,32,94,32,116,121,112,101,58,32,37,100,10,0] /* \09 ^ type: %d\0A\00 */, "i8", ALLOC_NONE, 5383600);
allocate([78,97,116,105,118,101,32,85,83,0] /* Native US\00 */, "i8", ALLOC_NONE, 5383616);
allocate([54,52,98,105,116,115,0] /* 64bits\00 */, "i8", ALLOC_NONE, 5383628);
allocate([9,65,84,72,58,32,37,115,10,0] /* \09ATH: %s\0A\00 */, "i8", ALLOC_NONE, 5383636);
allocate([74,117,110,103,108,101,0] /* Jungle\00 */, "i8", ALLOC_NONE, 5383648);
allocate([110,111,116,32,117,115,101,100,0] /* not used\00 */, "i8", ALLOC_NONE, 5383656);
allocate([80,111,112,47,70,117,110,107,0] /* Pop/Funk\00 */, "i8", ALLOC_NONE, 5383668);
allocate([116,104,101,32,111,110,108,121,32,109,97,115,107,105,110,103,0] /* the only masking\00 */, "i8", ALLOC_NONE, 5383680);
allocate([67,104,114,105,115,116,105,97,110,32,82,97,112,0] /* Christian Rap\00 */, "i8", ALLOC_NONE, 5383700);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5383716);
allocate([51,68,78,111,119,33,0] /* 3DNow!\00 */, "i8", ALLOC_NONE, 5383720);
allocate([116,104,101,32,111,110,108,121,32,109,97,115,107,105,110,103,32,102,111,114,32,115,104,111,114,116,32,98,108,111,99,107,115,0] /* the only masking for */, "i8", ALLOC_NONE, 5383728);
allocate([84,111,112,32,52,48,0] /* Top 40\00 */, "i8", ALLOC_NONE, 5383764);
allocate([117,115,105,110,103,0] /* using\00 */, "i8", ALLOC_NONE, 5383772);
allocate([71,97,110,103,115,116,97,0] /* Gangsta\00 */, "i8", ALLOC_NONE, 5383780);
allocate([69,114,114,111,114,58,32,77,65,88,95,72,69,65,68,69,82,95,66,85,70,32,116,111,111,32,115,109,97,108,108,32,105,110,32,98,105,116,115,116,114,101,97,109,46,99,32,10,0] /* Error: MAX_HEADER_BU */, "i8", ALLOC_NONE, 5383788);
allocate([9,32,94,32,115,116,111,112,112,105,110,103,58,32,37,100,10,0] /* \09 ^ stopping: %d\0 */, "i8", ALLOC_NONE, 5383840);
allocate([67,117,108,116,0] /* Cult\00 */, "i8", ALLOC_NONE, 5383860);
allocate([9,32,94,32,97,109,112,108,105,102,105,99,97,116,105,111,110,58,32,37,100,10,0] /* \09 ^ amplification: */, "i8", ALLOC_NONE, 5383868);
allocate([67,111,109,101,100,121,0] /* Comedy\00 */, "i8", ALLOC_NONE, 5383892);
allocate([9,110,111,105,115,101,32,115,104,97,112,105,110,103,58,32,37,100,10,0] /* \09noise shaping: %d */, "i8", ALLOC_NONE, 5383900);
allocate([83,111,117,116,104,101,114,110,32,82,111,99,107,0] /* Southern Rock\00 */, "i8", ALLOC_NONE, 5383920);
allocate([9,32,94,32,99,111,109,112,97,114,105,115,111,110,32,115,104,111,114,116,32,98,108,111,99,107,115,58,32,37,100,10,0] /* \09 ^ comparison sho */, "i8", ALLOC_NONE, 5383936);
allocate([68,114,101,97,109,0] /* Dream\00 */, "i8", ALLOC_NONE, 5383972);
allocate([9,113,117,97,110,116,105,122,97,116,105,111,110,32,99,111,109,112,97,114,105,115,111,110,58,32,37,100,10,0] /* \09quantization comp */, "i8", ALLOC_NONE, 5383980);
allocate([69,117,114,111,100,97,110,99,101,0] /* Eurodance\00 */, "i8", ALLOC_NONE, 5384012);
allocate([51,50,98,105,116,115,0] /* 32bits\00 */, "i8", ALLOC_NONE, 5384024);
allocate([9,97,100,106,117,115,116,32,109,97,115,107,105,110,103,32,115,104,111,114,116,58,32,37,103,32,100,66,10,0] /* \09adjust masking sh */, "i8", ALLOC_NONE, 5384032);
allocate([80,111,112,45,70,111,108,107,0] /* Pop-Folk\00 */, "i8", ALLOC_NONE, 5384064);
allocate([9,97,100,106,117,115,116,32,109,97,115,107,105,110,103,58,32,37,103,32,100,66,10,0] /* \09adjust masking: % */, "i8", ALLOC_NONE, 5384076);
allocate([69,108,101,99,116,114,111,110,105,99,0] /* Electronic\00 */, "i8", ALLOC_NONE, 5384100);
allocate([9,115,117,98,98,108,111,99,107,32,103,97,105,110,58,32,37,100,10,0] /* \09subblock gain: %d */, "i8", ALLOC_NONE, 5384112);
allocate([84,101,99,104,110,111,45,73,110,100,117,115,116,114,105,97,108,0] /* Techno-Industrial\00 */, "i8", ALLOC_NONE, 5384132);
allocate([105,109,97,103,101,47,103,105,102,0] /* image/gif\00 */, "i8", ALLOC_NONE, 5384152);
allocate([51,68,78,111,119,33,32,40,65,83,77,32,117,115,101,100,41,0] /* 3DNow! (ASM used)\00 */, "i8", ALLOC_NONE, 5384164);
allocate([9,117,115,105,110,103,32,115,104,111,114,116,32,98,108,111,99,107,115,58,32,37,115,10,0] /* \09using short block */, "i8", ALLOC_NONE, 5384184);
allocate([68,97,114,107,119,97,118,101,0] /* Darkwave\00 */, "i8", ALLOC_NONE, 5384212);
allocate([102,111,114,99,101,100,0] /* forced\00 */, "i8", ALLOC_NONE, 5384224);
allocate([71,111,116,104,105,99,0] /* Gothic\00 */, "i8", ALLOC_NONE, 5384232);
allocate([32,49,37,37,32,32,98,117,103,32,105,110,32,76,65,77,69,32,101,110,99,111,100,105,110,103,32,108,105,98,114,97,114,121,0] /*  1%%  bug in LAME en */, "i8", ALLOC_NONE, 5384240);
allocate([100,105,115,112,101,110,115,101,100,0] /* dispensed\00 */, "i8", ALLOC_NONE, 5384276);
allocate([69,116,104,110,105,99,0] /* Ethnic\00 */, "i8", ALLOC_NONE, 5384288);
allocate([99,104,97,110,110,101,108,32,99,111,117,112,108,101,100,0] /* channel coupled\00 */, "i8", ALLOC_NONE, 5384296);
allocate([73,110,115,116,114,117,109,101,110,116,97,108,32,82,111,99,107,0] /* Instrumental Rock\00 */, "i8", ALLOC_NONE, 5384312);
allocate([97,108,108,111,119,101,100,0] /* allowed\00 */, "i8", ALLOC_NONE, 5384332);
allocate([73,110,115,116,114,117,109,101,110,116,97,108,32,80,111,112,0] /* Instrumental Pop\00 */, "i8", ALLOC_NONE, 5384340);
allocate([10,112,115,121,99,104,111,97,99,111,117,115,116,105,99,58,10,10,0] /* \0Apsychoacoustic:\0 */, "i8", ALLOC_NONE, 5384360);
allocate([77,101,100,105,116,97,116,105,118,101,0] /* Meditative\00 */, "i8", ALLOC_NONE, 5384380);
allocate([9,117,115,105,110,103,32,76,65,77,69,32,84,97,103,10,0] /* \09using LAME Tag\0A */, "i8", ALLOC_NONE, 5384392);
allocate([83,112,97,99,101,0] /* Space\00 */, "i8", ALLOC_NONE, 5384412);
allocate(1, "i8", ALLOC_NONE, 5384420);
allocate([9,32,63,63,32,111,111,112,115,44,32,115,111,109,101,32,110,101,119,32,111,110,101,32,63,63,32,10,0] /* \09 ?? oops, some ne */, "i8", ALLOC_NONE, 5384424);
allocate([80,117,110,107,0] /* Punk\00 */, "i8", ALLOC_NONE, 5384456);
allocate([9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,86,66,82,32,109,116,114,104,32,37,115,10,0] /* \09variable bitrate  */, "i8", ALLOC_NONE, 5384464);
allocate([83,111,117,108,0] /* Soul\00 */, "i8", ALLOC_NONE, 5384500);
allocate([9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,86,66,82,32,109,116,32,37,115,10,0] /* \09variable bitrate  */, "i8", ALLOC_NONE, 5384508);
allocate([66,97,115,115,0] /* Bass\00 */, "i8", ALLOC_NONE, 5384540);
allocate([77,77,88,0] /* MMX\00 */, "i8", ALLOC_NONE, 5384548);
allocate([105,109,97,103,101,47,112,110,103,0] /* image/png\00 */, "i8", ALLOC_NONE, 5384552);
allocate([9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,86,66,82,32,114,104,32,37,115,10,0] /* \09variable bitrate  */, "i8", ALLOC_NONE, 5384564);
allocate([65,108,116,101,114,110,97,116,105,118,101,32,82,111,99,107,0] /* Alternative Rock\00 */, "i8", ALLOC_NONE, 5384596);
allocate([9,118,97,114,105,97,98,108,101,32,98,105,116,114,97,116,101,32,45,32,65,66,82,32,37,115,10,0] /* \09variable bitrate  */, "i8", ALLOC_NONE, 5384616);
allocate([78,111,105,115,101,0] /* Noise\00 */, "i8", ALLOC_NONE, 5384644);
allocate([32,57,37,37,32,32,89,111,117,114,32,115,121,115,116,101,109,32,105,115,32,111,118,101,114,99,108,111,99,107,101,100,0] /*  9%%  Your system is */, "i8", ALLOC_NONE, 5384652);
allocate([9,99,111,110,115,116,97,110,116,32,98,105,116,114,97,116,101,32,45,32,67,66,82,32,37,115,10,0] /* \09constant bitrate  */, "i8", ALLOC_NONE, 5384688);
allocate([71,111,115,112,101,108,0] /* Gospel\00 */, "i8", ALLOC_NONE, 5384716);
allocate([40,102,114,101,101,32,102,111,114,109,97,116,41,0] /* (free format)\00 */, "i8", ALLOC_NONE, 5384724);
allocate([83,111,117,110,100,32,67,108,105,112,0] /* Sound Clip\00 */, "i8", ALLOC_NONE, 5384740);
allocate([40,100,101,102,97,117,108,116,41,0] /* (default)\00 */, "i8", ALLOC_NONE, 5384752);
allocate([71,97,109,101,0] /* Game\00 */, "i8", ALLOC_NONE, 5384764);
allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_NONE, 5384772);
allocate([9,112,97,100,100,105,110,103,58,32,37,115,10,0] /* \09padding: %s\0A\00 */, "i8", ALLOC_NONE, 5384800);
allocate([72,111,117,115,101,0] /* House\00 */, "i8", ALLOC_NONE, 5384816);
allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_NONE, 5384824);
allocate([65,99,105,100,0] /* Acid\00 */, "i8", ALLOC_NONE, 5384828);
allocate([51,46,57,57,46,53,0] /* 3.99.5\00 */, "i8", ALLOC_NONE, 5384836);
allocate([104,116,116,112,58,47,47,108,97,109,101,46,115,102,46,110,101,116,0] /* http://lame.sf.net\0 */, "i8", ALLOC_NONE, 5384844);
allocate([73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,49,51,49,51,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,109,97,120,98,105,116,115,61,37,100,32,117,115,101,100,98,105,116,115,61,37,100,10,0] /* INTERNAL ERROR IN VB */, "i8", ALLOC_NONE, 5384864);
allocate([111,102,102,0] /* off\00 */, "i8", ALLOC_NONE, 5384952);
allocate([73,110,115,116,114,117,109,101,110,116,97,108,0] /* Instrumental\00 */, "i8", ALLOC_NONE, 5384956);
allocate([9,37,100,32,99,104,97,110,110,101,108,32,45,32,37,115,10,0] /* \09%d channel - %s\0 */, "i8", ALLOC_NONE, 5384972);
allocate([67,108,97,115,115,105,99,97,108,0] /* Classical\00 */, "i8", ALLOC_NONE, 5384992);
allocate([117,110,107,110,111,119,110,32,40,101,114,114,111,114,41,0] /* unknown (error)\00 */, "i8", ALLOC_NONE, 5385004);
allocate([84,114,97,110,99,101,0] /* Trance\00 */, "i8", ALLOC_NONE, 5385020);
allocate([44,32,0] /* , \00 */, "i8", ALLOC_NONE, 5385028);
allocate([105,109,97,103,101,47,106,112,101,103,0] /* image/jpeg\00 */, "i8", ALLOC_NONE, 5385032);
allocate([110,111,116,32,115,101,116,32,40,101,114,114,111,114,41,0] /* not set (error)\00 */, "i8", ALLOC_NONE, 5385044);
allocate([70,117,115,105,111,110,0] /* Fusion\00 */, "i8", ALLOC_NONE, 5385060);
allocate([109,111,110,111,0] /* mono\00 */, "i8", ALLOC_NONE, 5385068);
allocate([74,97,122,122,43,70,117,110,107,0] /* Jazz+Funk\00 */, "i8", ALLOC_NONE, 5385076);
allocate([57,48,37,37,32,32,76,65,77,69,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,98,117,103,103,121,32,118,101,114,115,105,111,110,32,111,102,32,103,99,99,32,117,115,105,110,103,32,97,100,118,97,110,99,101,100,32,111,112,116,105,109,105,122,97,116,105,111,110,115,0] /* 90%%  LAME compiled  */, "i8", ALLOC_NONE, 5385088);
allocate([100,117,97,108,32,99,104,97,110,110,101,108,0] /* dual channel\00 */, "i8", ALLOC_NONE, 5385164);
allocate([86,111,99,97,108,0] /* Vocal\00 */, "i8", ALLOC_NONE, 5385180);
allocate([105,110,116,101,110,115,105,116,121,32,115,116,101,114,101,111,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,10,0] /* intensity stereo not */, "i8", ALLOC_NONE, 5385188);
allocate([115,116,101,114,101,111,0] /* stereo\00 */, "i8", ALLOC_NONE, 5385228);
allocate([84,114,105,112,45,72,111,112,0] /* Trip-Hop\00 */, "i8", ALLOC_NONE, 5385236);
allocate([106,111,105,110,116,32,115,116,101,114,101,111,0] /* joint stereo\00 */, "i8", ALLOC_NONE, 5385248);
allocate([65,109,98,105,101,110,116,0] /* Ambient\00 */, "i8", ALLOC_NONE, 5385264);
allocate([9,77,80,69,71,45,37,115,32,76,97,121,101,114,32,51,10,0] /* \09MPEG-%s Layer 3\0 */, "i8", ALLOC_NONE, 5385272);
allocate([69,117,114,111,45,84,101,99,104,110,111,0] /* Euro-Techno\00 */, "i8", ALLOC_NONE, 5385292);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 5385304);
allocate([83,111,117,110,100,116,114,97,99,107,0] /* Soundtrack\00 */, "i8", ALLOC_NONE, 5385308);
allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_NONE, 5385320);
allocate([49,46,48,0] /* 1.0\00 */, "i8", ALLOC_NONE, 5385336);
allocate([50,0] /* 2\00 */, "i8", ALLOC_NONE, 5385340);
allocate([80,114,97,110,107,115,0] /* Pranks\00 */, "i8", ALLOC_NONE, 5385344);
allocate([49,0] /* 1\00 */, "i8", ALLOC_NONE, 5385352);
allocate([68,101,97,116,104,32,77,101,116,97,108,0] /* Death Metal\00 */, "i8", ALLOC_NONE, 5385356);
allocate([50,46,53,0] /* 2.5\00 */, "i8", ALLOC_NONE, 5385368);
allocate([83,107,97,0] /* Ska\00 */, "i8", ALLOC_NONE, 5385372);
allocate(1, "i8", ALLOC_NONE, 5385376);
allocate([10,115,116,114,101,97,109,32,102,111,114,109,97,116,58,10,10,0] /* \0Astream format:\0A */, "i8", ALLOC_NONE, 5385380);
allocate([65,108,116,101,114,110,97,116,105,118,101,0] /* Alternative\00 */, "i8", ALLOC_NONE, 5385400);
allocate([9,46,46,46,10,0] /* \09...\0A\00 */, "i8", ALLOC_NONE, 5385412);
allocate([73,110,100,117,115,116,114,105,97,108,0] /* Industrial\00 */, "i8", ALLOC_NONE, 5385420);
allocate([84,104,105,115,32,105,115,32,97,32,102,97,116,97,108,32,101,114,114,111,114,46,32,32,73,116,32,104,97,115,32,115,101,118,101,114,97,108,32,112,111,115,115,105,98,108,101,32,99,97,117,115,101,115,58,0] /* This is a fatal erro */, "i8", ALLOC_NONE, 5385432);
allocate([9,101,120,112,101,114,105,109,101,110,116,97,108,32,89,61,37,100,10,0] /* \09experimental Y=%d */, "i8", ALLOC_NONE, 5385488);
allocate([84,101,99,104,110,111,0] /* Techno\00 */, "i8", ALLOC_NONE, 5385508);
allocate([9,104,117,102,102,109,97,110,32,115,101,97,114,99,104,58,32,37,115,10,0] /* \09huffman search: % */, "i8", ALLOC_NONE, 5385516);
allocate([82,111,99,107,0] /* Rock\00 */, "i8", ALLOC_NONE, 5385540);
allocate([98,101,115,116,32,40,105,110,115,105,100,101,32,108,111,111,112,44,32,115,108,111,119,41,0] /* best (inside loop, s */, "i8", ALLOC_NONE, 5385548);
allocate([82,101,103,103,97,101,0] /* Reggae\00 */, "i8", ALLOC_NONE, 5385576);
allocate([73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0] /* INTERNAL ERROR IN VB */, "i8", ALLOC_NONE, 5385584);
allocate([98,101,115,116,32,40,111,117,116,115,105,100,101,32,108,111,111,112,41,0] /* best (outside loop)\ */, "i8", ALLOC_NONE, 5385640);
allocate([82,97,112,0] /* Rap\00 */, "i8", ALLOC_NONE, 5385660);
allocate([110,111,114,109,97,108,0] /* normal\00 */, "i8", ALLOC_NONE, 5385664);
allocate([82,38,66,0] /* R&B\00 */, "i8", ALLOC_NONE, 5385672);
allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_NONE, 5385676);
allocate([76,65,77,69,51,46,57,57,114,0] /* LAME3.99r\00 */, "i8", ALLOC_NONE, 5385704);
allocate([80,111,112,0] /* Pop\00 */, "i8", ALLOC_NONE, 5385716);
allocate([9,99,104,49,32,40,114,105,103,104,116,41,32,115,99,97,108,105,110,103,58,32,37,103,10,0] /* \09ch1 (right) scali */, "i8", ALLOC_NONE, 5385720);
allocate([98,105,116,32,114,101,115,101,114,118,111,105,114,32,101,114,114,111,114,58,32,10,108,51,95,115,105,100,101,45,62,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,58,32,37,105,32,10,82,101,115,118,111,105,114,32,115,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,111,115,116,41,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,114,101,41,32,32,32,32,32,32,32,32,32,32,37,105,32,10,104,101,97,100,101,114,32,97,110,100,32,115,105,100,101,105,110,102,111,58,32,32,32,32,32,32,37,105,32,10,100,97,116,97,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,116,111,116,97,108,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,40,114,101,109,97,105,110,100,101,114,58,32,37,105,41,32,10,98,105,116,115,112,101,114,102,114,97,109,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,0] /* bit reservoir error: */, "i8", ALLOC_NONE, 5385748);
allocate([9,99,104,48,32,40,108,101,102,116,41,32,115,99,97,108,105,110,103,58,32,37,103,10,0] /* \09ch0 (left) scalin */, "i8", ALLOC_NONE, 5386028);
allocate([79,116,104,101,114,0] /* Other\00 */, "i8", ALLOC_NONE, 5386056);
allocate([9,115,99,97,108,105,110,103,58,32,37,103,10,0] /* \09scaling: %g\0A\00 */, "i8", ALLOC_NONE, 5386064);
allocate([79,108,100,105,101,115,0] /* Oldies\00 */, "i8", ALLOC_NONE, 5386080);
allocate([88,88,88,0] /* XXX\00 */, "i8", ALLOC_NONE, 5386088);
allocate([10,109,105,115,99,58,10,10,0] /* \0Amisc:\0A\0A\00 */, "i8", ALLOC_NONE, 5386092);
allocate([78,101,119,32,65,103,101,0] /* New Age\00 */, "i8", ALLOC_NONE, 5386104);
allocate(1, "i8", ALLOC_NONE, 5386112);
allocate([77,101,116,97,108,0] /* Metal\00 */, "i8", ALLOC_NONE, 5386116);
allocate([115,116,114,97,110,103,101,32,101,114,114,111,114,32,102,108,117,115,104,105,110,103,32,98,117,102,102,101,114,32,46,46,46,32,10,0] /* strange error flushi */, "i8", ALLOC_NONE, 5386124);
allocate([87,97,114,110,105,110,103,58,32,109,97,110,121,32,100,101,99,111,100,101,114,115,32,99,97,110,110,111,116,32,104,97,110,100,108,101,32,102,114,101,101,32,102,111,114,109,97,116,32,98,105,116,114,97,116,101,115,32,62,51,50,48,32,107,98,112,115,32,40,115,101,101,32,100,111,99,117,109,101,110,116,97,116,105,111,110,41,10,0] /* Warning: many decode */, "i8", ALLOC_NONE, 5386160);
allocate([74,97,122,122,0] /* Jazz\00 */, "i8", ALLOC_NONE, 5386252);
allocate([87,97,114,110,105,110,103,58,32,109,97,110,121,32,100,101,99,111,100,101,114,115,32,99,97,110,110,111,116,32,104,97,110,100,108,101,32,102,114,101,101,32,102,111,114,109,97,116,32,98,105,116,115,116,114,101,97,109,115,10,0] /* Warning: many decode */, "i8", ALLOC_NONE, 5386260);
allocate([72,105,112,45,72,111,112,0] /* Hip-Hop\00 */, "i8", ALLOC_NONE, 5386324);
allocate([112,111,108,121,112,104,97,115,101,32,108,111,119,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,10,0] /* polyphase lowpass fi */, "i8", ALLOC_NONE, 5386332);
allocate([71,114,117,110,103,101,0] /* Grunge\00 */, "i8", ALLOC_NONE, 5386368);
allocate([85,115,105,110,103,32,112,111,108,121,112,104,97,115,101,32,108,111,119,112,97,115,115,32,102,105,108,116,101,114,44,32,116,114,97,110,115,105,116,105,111,110,32,98,97,110,100,58,32,37,53,46,48,102,32,72,122,32,45,32,37,53,46,48,102,32,72,122,10,0] /* Using polyphase lowp */, "i8", ALLOC_NONE, 5386376);
allocate([70,117,110,107,0] /* Funk\00 */, "i8", ALLOC_NONE, 5386448);
allocate([76,65,77,69,32,37,115,32,37,115,32,40,37,115,41,10,0] /* LAME %s %s (%s)\0A\0 */, "i8", ALLOC_NONE, 5386456);
allocate([83,121,110,116,104,80,111,112,0] /* SynthPop\00 */, "i8", ALLOC_NONE, 5386476);
allocate([74,80,111,112,0] /* JPop\00 */, "i8", ALLOC_NONE, 5386488);
allocate([65,110,105,109,101,0] /* Anime\00 */, "i8", ALLOC_NONE, 5386496);
allocate([84,104,114,97,115,104,32,77,101,116,97,108,0] /* Thrash Metal\00 */, "i8", ALLOC_NONE, 5386504);
allocate([83,97,108,115,97,0] /* Salsa\00 */, "i8", ALLOC_NONE, 5386520);
allocate([77,101,114,101,110,103,117,101,0] /* Merengue\00 */, "i8", ALLOC_NONE, 5386528);
allocate([67,104,114,105,115,116,105,97,110,32,82,111,99,107,0] /* Christian Rock\00 */, "i8", ALLOC_NONE, 5386540);
allocate([85,115,105,110,103,32,112,111,108,121,112,104,97,115,101,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,44,32,116,114,97,110,115,105,116,105,111,110,32,98,97,110,100,58,32,37,53,46,48,102,32,72,122,32,45,32,37,53,46,48,102,32,72,122,10,0] /* Using polyphase high */, "i8", ALLOC_NONE, 5386556);
allocate([67,111,110,116,101,109,112,111,114,97,114,121,32,67,104,114,105,115,116,105,97,110,0] /* Contemporary Christi */, "i8", ALLOC_NONE, 5386628);
allocate([67,114,111,115,115,111,118,101,114,0] /* Crossover\00 */, "i8", ALLOC_NONE, 5386652);
allocate([68,105,115,99,111,0] /* Disco\00 */, "i8", ALLOC_NONE, 5386664);
allocate([66,108,97,99,107,32,77,101,116,97,108,0] /* Black Metal\00 */, "i8", ALLOC_NONE, 5386672);
allocate([72,101,97,118,121,32,77,101,116,97,108,0] /* Heavy Metal\00 */, "i8", ALLOC_NONE, 5386684);
allocate([67,104,114,105,115,116,105,97,110,32,71,97,110,103,115,116,97,0] /* Christian Gangsta\00 */, "i8", ALLOC_NONE, 5386696);
allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_NONE, 5386716);
allocate([66,101,97,116,0] /* Beat\00 */, "i8", ALLOC_NONE, 5386744);
allocate([80,111,108,115,107,32,80,117,110,107,0] /* Polsk Punk\00 */, "i8", ALLOC_NONE, 5386752);
allocate([76,65,77,69,51,46,57,57,114,53,0] /* LAME3.99r5\00 */, "i8", ALLOC_NONE, 5386764);
allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* bad_array_new_length */, "i8", ALLOC_NONE, 5386776);
allocate([73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,57,56,54,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0] /* INTERNAL ERROR IN VB */, "i8", ALLOC_NONE, 5386800);
allocate([78,101,103,101,114,112,117,110,107,0] /* Negerpunk\00 */, "i8", ALLOC_NONE, 5386864);
allocate([66,114,105,116,80,111,112,0] /* BritPop\00 */, "i8", ALLOC_NONE, 5386876);
allocate([73,110,100,105,101,0] /* Indie\00 */, "i8", ALLOC_NONE, 5386884);
allocate([82,101,115,97,109,112,108,105,110,103,58,32,32,105,110,112,117,116,32,37,103,32,107,72,122,32,32,111,117,116,112,117,116,32,37,103,32,107,72,122,10,0] /* Resampling:  input % */, "i8", ALLOC_NONE, 5386892);
allocate([84,101,114,114,111,114,0] /* Terror\00 */, "i8", ALLOC_NONE, 5386936);
allocate([72,97,114,100,99,111,114,101,0] /* Hardcore\00 */, "i8", ALLOC_NONE, 5386944);
allocate([68,97,110,99,101,0] /* Dance\00 */, "i8", ALLOC_NONE, 5386956);
allocate([67,108,117,98,45,72,111,117,115,101,0] /* Club-House\00 */, "i8", ALLOC_NONE, 5386964);
allocate([68,114,117,109,32,38,32,66,97,115,115,0] /* Drum & Bass\00 */, "i8", ALLOC_NONE, 5386976);
allocate([71,111,97,0] /* Goa\00 */, "i8", ALLOC_NONE, 5386988);
allocate([68,97,110,99,101,32,72,97,108,108,0] /* Dance Hall\00 */, "i8", ALLOC_NONE, 5386992);
allocate([69,117,114,111,45,72,111,117,115,101,0] /* Euro-House\00 */, "i8", ALLOC_NONE, 5387004);
allocate([65,32,67,97,112,112,101,108,108,97,0] /* A Cappella\00 */, "i8", ALLOC_NONE, 5387016);
allocate([68,114,117,109,32,83,111,108,111,0] /* Drum Solo\00 */, "i8", ALLOC_NONE, 5387028);
allocate([67,111,117,110,116,114,121,0] /* Country\00 */, "i8", ALLOC_NONE, 5387040);
allocate([80,117,110,107,32,82,111,99,107,0] /* Punk Rock\00 */, "i8", ALLOC_NONE, 5387048);
allocate([65,117,116,111,99,111,110,118,101,114,116,105,110,103,32,102,114,111,109,32,115,116,101,114,101,111,32,116,111,32,109,111,110,111,46,32,83,101,116,116,105,110,103,32,101,110,99,111,100,105,110,103,32,116,111,32,109,111,110,111,32,109,111,100,101,46,10,0] /* Autoconverting from  */, "i8", ALLOC_NONE, 5387060);
allocate([68,117,101,116,0] /* Duet\00 */, "i8", ALLOC_NONE, 5387128);
allocate([70,114,101,101,115,116,121,108,101,0] /* Freestyle\00 */, "i8", ALLOC_NONE, 5387136);
allocate([73,110,116,101,114,110,97,108,32,98,117,102,102,101,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,46,32,102,108,117,115,104,98,105,116,115,32,60,62,32,82,101,115,118,83,105,122,101,0] /* Internal buffer inco */, "i8", ALLOC_NONE, 5387148);
allocate([82,104,121,116,104,109,105,99,32,83,111,117,108,0] /* Rhythmic Soul\00 */, "i8", ALLOC_NONE, 5387204);
allocate([80,111,119,101,114,32,66,97,108,108,97,100,0] /* Power Ballad\00 */, "i8", ALLOC_NONE, 5387220);
allocate([66,97,108,108,97,100,0] /* Ballad\00 */, "i8", ALLOC_NONE, 5387236);
allocate([70,111,108,107,108,111,114,101,0] /* Folklore\00 */, "i8", ALLOC_NONE, 5387244);
allocate([83,97,109,98,97,0] /* Samba\00 */, "i8", ALLOC_NONE, 5387256);
allocate([84,97,110,103,111,0] /* Tango\00 */, "i8", ALLOC_NONE, 5387264);
allocate([67,108,117,98,0] /* Club\00 */, "i8", ALLOC_NONE, 5387272);
allocate([83,108,111,119,32,74,97,109,0] /* Slow Jam\00 */, "i8", ALLOC_NONE, 5387280);
allocate([67,80,85,32,102,101,97,116,117,114,101,115,58,32,37,115,10,0] /* CPU features: %s\0A\ */, "i8", ALLOC_NONE, 5387292);
allocate([83,97,116,105,114,101,0] /* Satire\00 */, "i8", ALLOC_NONE, 5387312);
allocate([80,111,114,110,32,71,114,111,111,118,101,0] /* Porn Groove\00 */, "i8", ALLOC_NONE, 5387320);
allocate([67,108,97,115,115,105,99,32,82,111,99,107,0] /* Classic Rock\00 */, "i8", ALLOC_NONE, 5387332);
allocate([80,114,105,109,117,115,0] /* Primus\00 */, "i8", ALLOC_NONE, 5387348);
allocate([66,111,111,116,121,32,66,97,115,115,0] /* Booty Bass\00 */, "i8", ALLOC_NONE, 5387356);
allocate([83,121,109,112,104,111,110,121,0] /* Symphony\00 */, "i8", ALLOC_NONE, 5387368);
allocate([83,111,110,97,116,97,0] /* Sonata\00 */, "i8", ALLOC_NONE, 5387380);
allocate([67,104,97,109,98,101,114,32,77,117,115,105,99,0] /* Chamber Music\00 */, "i8", ALLOC_NONE, 5387388);
allocate([79,112,101,114,97,0] /* Opera\00 */, "i8", ALLOC_NONE, 5387404);
allocate([67,104,97,110,115,111,110,0] /* Chanson\00 */, "i8", ALLOC_NONE, 5387412);
allocate([83,112,101,101,99,104,0] /* Speech\00 */, "i8", ALLOC_NONE, 5387420);
allocate([71,73,70,56,0] /* GIF8\00 */, "i8", ALLOC_NONE, 5387428);
allocate([66,108,117,101,115,0] /* Blues\00 */, "i8", ALLOC_NONE, 5387436);
allocate([83,83,69,50,0] /* SSE2\00 */, "i8", ALLOC_NONE, 5387444);
allocate([72,117,109,111,117,114,0] /* Humour\00 */, "i8", ALLOC_NONE, 5387452);
allocate([65,99,111,117,115,116,105,99,0] /* Acoustic\00 */, "i8", ALLOC_NONE, 5387460);
allocate([80,78,71,0] /* PNG\00 */, "i8", ALLOC_NONE, 5387472);
allocate([69,97,115,121,32,76,105,115,116,101,110,105,110,103,0] /* Easy Listening\00 */, "i8", ALLOC_NONE, 5387476);
allocate([67,104,111,114,117,115,0] /* Chorus\00 */, "i8", ALLOC_NONE, 5387492);
allocate([66,105,103,32,66,97,110,100,0] /* Big Band\00 */, "i8", ALLOC_NONE, 5387500);
allocate([83,108,111,119,32,82,111,99,107,0] /* Slow Rock\00 */, "i8", ALLOC_NONE, 5387512);
allocate([83,121,109,112,104,111,110,105,99,32,82,111,99,107,0] /* Symphonic Rock\00 */, "i8", ALLOC_NONE, 5387524);
allocate([80,115,121,99,104,101,100,101,108,105,99,32,82,111,99,107,0] /* Psychedelic Rock\00 */, "i8", ALLOC_NONE, 5387540);
allocate([80,114,111,103,114,101,115,115,105,118,101,32,82,111,99,107,0] /* Progressive Rock\00 */, "i8", ALLOC_NONE, 5387560);
allocate([71,111,116,104,105,99,32,82,111,99,107,0] /* Gothic Rock\00 */, "i8", ALLOC_NONE, 5387580);
allocate([83,83,69,50,32,40,65,83,77,32,117,115,101,100,41,0] /* SSE2 (ASM used)\00 */, "i8", ALLOC_NONE, 5387592);
allocate([65,118,97,110,116,103,97,114,100,101,0] /* Avantgarde\00 */, "i8", ALLOC_NONE, 5387608);
allocate([66,108,117,101,103,114,97,115,115,0] /* Bluegrass\00 */, "i8", ALLOC_NONE, 5387620);
allocate([76,65,77,69,32,118,101,114,115,105,111,110,32,37,115,32,40,37,115,41,0] /* LAME version %s (%s) */, "i8", ALLOC_NONE, 5387632);
allocate([73,68,51,0] /* ID3\00 */, "i8", ALLOC_NONE, 5387656);
allocate([69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,86,98,114,70,114,97,109,101,115,32,98,117,102,102,101,114,10,0] /* Error: can't allocat */, "i8", ALLOC_NONE, 5387660);
allocate(468, "i8", ALLOC_NONE, 5387700);
allocate([0,0,0,0,228,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5388168);
allocate(1, "i8", ALLOC_NONE, 5388188);
allocate([0,0,0,0,240,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5388192);
allocate(1, "i8", ALLOC_NONE, 5388212);
allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_NONE, 5388216);
allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* St20bad_array_new_le */, "i8", ALLOC_NONE, 5388232);
allocate(12, "i8", ALLOC_NONE, 5388260);
allocate([0,0,0,0,0,0,0,0,228,55,82,0], "i8", ALLOC_NONE, 5388272);
allocate(1, "i8", ALLOC_NONE, 5388284);
allocate(4, "i8", ALLOC_NONE, 5388288);
allocate([1,30,0,0,1,30,0,0], "i8", ALLOC_NONE, 5388292);
allocate([0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0], "i8", ALLOC_NONE, 5388300);
allocate([73,110,102,111,0] /* Info\00 */, "i8", ALLOC_NONE, 5388316);
allocate([88,105,110,103,0] /* Xing\00 */, "i8", ALLOC_NONE, 5388324);
allocate([1,5,3,2,4,0,3] /* \01\05\03\02\04\00\0 */, "i8", ALLOC_NONE, 5388332);
allocate([221,1,30,61,115,47,118,192,47,250,176,188,158,20,250,64,153,188,161,186,158,119,53,193,81,220,194,184,116,225,80,65,83,153,135,188,1,154,68,193,129,18,177,60,29,186,23,65,225,231,169,188,42,236,187,192,86,189,194,59,84,76,48,64,23,210,72,59,21,174,94,191,117,48,252,56,166,136,14,62,45,12,61,59,187,242,93,61,21,159,94,192,66,120,238,188,39,159,203,64,116,13,11,188,159,194,8,193,122,116,11,188,136,161,23,65,15,206,8,188,48,10,13,193,54,239,183,60,24,84,219,64,42,177,212,188,119,161,140,192,227,27,133,60,46,141,12,64,204,220,29,187,91,68,64,191,179,14,221,59,38,166,6,62,18,27,246,186,98,72,30,62,88,65,24,192,146,25,191,189,204,80,54,64,198,233,127,189,83,84,41,192,195,60,177,60,160,42,15,64,141,230,100,189,27,243,213,191,107,217,67,61,72,195,128,63,221,177,17,59,30,72,235,190,198,2,2,61,96,182,39,62,140,213,99,188,41,29,78,189,32,117,213,59,250,86,192,60,8,103,16,188,195,30,155,62,254,109,206,191,55,145,103,190,17,54,138,63,79,222,175,189,44,92,131,190,5,120,6,61,113,172,38,190,93,7,22,188,128,210,103,190,162,171,193,188,106,76,200,62,186,131,191,187,206,177,98,190,217,136,128,61,99,84,56,61,14,238,10,183,195,81,164,60,229,233,6,59,220,52,70,59,209,172,241,188,164,63,172,62,202,209,191,191,12,238,130,190,224,157,95,63,198,63,242,189,120,245,249,61,39,37,244,61,171,200,78,191,74,115,160,189,61,4,245,62,155,0,154,187,253,11,255,189,221,42,193,187,240,154,38,189,226,118,106,61,225,172,170,61,116,82,8,60,208,143,45,189,111,248,133,188,144,228,243,60,148,49,144,188,83,247,229,62,31,210,32,191,69,246,18,190,75,222,151,62,236,79,105,190,172,192,190,190,13,131,104,188,76,24,12,59,175,11,39,61,83,49,215,190,21,234,253,189,13,83,99,62,22,214,39,61,196,1,201,59,137,153,214,61,247,48,138,61,143,176,152,188,61,242,108,61,134,205,2,189,7,1,4,61,132,146,177,59,35,242,16,63,249,36,134,191,99,48,65,191,195,71,149,62,202,81,38,62,41,63,137,190,8,118,43,62,71,89,6,60,108,141,65,190,36,174,230,62,232,94,158,62,59,32,169,190,83,31,141,190,179,5,138,61,91,28,212,59,139,246,67,189,211,25,177,61,92,87,134,60,98,50,27,189,45,15,148,60,22,191,192,187,190,188,20,63,131,166,2,191,181,32,8,191,54,36,163,190,218,83,18,190,249,108,79,190,122,105,51,62,249,208,22,62,32,205,194,60,1,112,199,62,138,81,31,62,88,186,110,190,236,195,129,190,127,224,86,189,85,103,133,60,212,73,205,188,47,187,141,61,242,19,200,60,237,111,24,189,6,255,148,60,149,162,245,187,69,87,9,63,94,65,128,190,239,223,215,190,42,39,221,190,85,217,52,187,98,70,12,189,146,207,46,61,213,159,63,189,79,51,209,189,227,53,135,62,214,104,21,62,42,194,26,62,27,131,201,188,75,199,51,190,101,108,229,189,100,191,64,190,139,76,38,189,16,94,96,61,204,36,68,61,80,177,64,61,130,177,181,188], "i8", ALLOC_NONE, 5388340);
allocate([98,120,124,63,40,114,252,191,98,120,252,191,59,253,120,63,98,120,124,63,19,41,124,63,180,33,252,191,19,41,252,191,229,96,120,63,19,41,124,63,66,185,122,63,86,171,250,191,66,185,250,191,92,142,117,63,66,185,122,63,120,174,121,63,129,154,249,191,120,174,249,191,222,132,115,63,120,174,121,63,91,33,121,63,194,9,249,191,91,33,249,191,234,113,114,63,91,33,121,63,110,236,118,63,58,195,246,191,110,236,246,191,69,43,110,63,110,236,118,63,141,200,117,63,87,148,245,191,141,200,245,191,134,249,107,63,141,200,117,63,202,100,117,63,133,44,245,191,202,100,245,191,31,58,107,63,202,100,117,63,138,43,114,63,214,203,241,191,138,43,242,191,124,22,101,63,138,43,114,63], "i8", ALLOC_NONE, 5389096);
HEAP32[((5318012)>>2)]=((5384552)|0);
HEAP32[((5318016)>>2)]=((5385032)|0);
HEAP32[((5318020)>>2)]=((5384152)|0);
HEAP32[((5327376)>>2)]=((5251164)|0);
HEAP32[((5327380)>>2)]=((5251160)|0);
HEAP32[((5327392)>>2)]=((5250372)|0);
HEAP32[((5327396)>>2)]=((5250360)|0);
HEAP32[((5327408)>>2)]=((5250244)|0);
HEAP32[((5327412)>>2)]=((5250232)|0);
HEAP32[((5327440)>>2)]=((5250200)|0);
HEAP32[((5327444)>>2)]=((5250184)|0);
HEAP32[((5327456)>>2)]=((5250152)|0);
HEAP32[((5327460)>>2)]=((5250136)|0);
HEAP32[((5327472)>>2)]=((5250064)|0);
HEAP32[((5327476)>>2)]=((5250028)|0);
HEAP32[((5327488)>>2)]=((5249956)|0);
HEAP32[((5327492)>>2)]=((5249920)|0);
HEAP32[((5327504)>>2)]=((5249848)|0);
HEAP32[((5327508)>>2)]=((5249812)|0);
HEAP32[((5327520)>>2)]=((5254180)|0);
HEAP32[((5327524)>>2)]=((5254116)|0);
HEAP32[((5327536)>>2)]=((5253988)|0);
HEAP32[((5327540)>>2)]=((5253924)|0);
HEAP32[((5327552)>>2)]=((5253796)|0);
HEAP32[((5327556)>>2)]=((5253732)|0);
HEAP32[((5327568)>>2)]=((5253220)|0);
HEAP32[((5327572)>>2)]=((5252964)|0);
HEAP32[((5327588)>>2)]=((5251428)|0);
HEAP32[((5327600)>>2)]=((5252452)|0);
HEAP32[((5327604)>>2)]=((5252196)|0);
HEAP32[((5327616)>>2)]=((5251684)|0);
HEAP32[((5327620)>>2)]=((5251172)|0);
HEAP32[((5327632)>>2)]=((5251684)|0);
HEAP32[((5327636)>>2)]=((5251172)|0);
HEAP32[((5327648)>>2)]=((5251684)|0);
HEAP32[((5327652)>>2)]=((5251172)|0);
HEAP32[((5327664)>>2)]=((5251684)|0);
HEAP32[((5327668)>>2)]=((5251172)|0);
HEAP32[((5327680)>>2)]=((5251684)|0);
HEAP32[((5327684)>>2)]=((5251172)|0);
HEAP32[((5327696)>>2)]=((5251684)|0);
HEAP32[((5327700)>>2)]=((5251172)|0);
HEAP32[((5327712)>>2)]=((5251684)|0);
HEAP32[((5327716)>>2)]=((5251172)|0);
HEAP32[((5327728)>>2)]=((5251684)|0);
HEAP32[((5327732)>>2)]=((5251172)|0);
HEAP32[((5327744)>>2)]=((5250648)|0);
HEAP32[((5327748)>>2)]=((5250392)|0);
HEAP32[((5327760)>>2)]=((5250648)|0);
HEAP32[((5327764)>>2)]=((5250392)|0);
HEAP32[((5327776)>>2)]=((5250648)|0);
HEAP32[((5327780)>>2)]=((5250392)|0);
HEAP32[((5327792)>>2)]=((5250648)|0);
HEAP32[((5327796)>>2)]=((5250392)|0);
HEAP32[((5327808)>>2)]=((5250648)|0);
HEAP32[((5327812)>>2)]=((5250392)|0);
HEAP32[((5327824)>>2)]=((5250648)|0);
HEAP32[((5327828)>>2)]=((5250392)|0);
HEAP32[((5327840)>>2)]=((5250648)|0);
HEAP32[((5327844)>>2)]=((5250392)|0);
HEAP32[((5327856)>>2)]=((5250648)|0);
HEAP32[((5327860)>>2)]=((5250392)|0);
HEAP32[((5327872)>>2)]=((5250328)|0);
HEAP32[((5327876)>>2)]=((5250312)|0);
HEAP32[((5327888)>>2)]=((5250280)|0);
HEAP32[((5327892)>>2)]=((5250264)|0);
HEAP32[((5345304)>>2)]=((5385336)|0);
HEAP32[((5345308)>>2)]=((5386764)|0);
HEAP32[((5345312)>>2)]=((5384836)|0);
HEAP32[((5345316)>>2)]=((5384420)|0);
HEAP32[((5345320)>>2)]=((5384844)|0);
HEAP32[((5345324)>>2)]=((5385704)|0);
HEAP32[((5345328)>>2)]=((5384836)|0);
HEAP32[((5345332)>>2)]=((5384420)|0);
HEAP32[((5345336)>>2)]=((5383628)|0);
HEAP32[((5345340)>>2)]=((5384024)|0);
HEAP32[((5345344)>>2)]=((5387436)|0);
HEAP32[((5345348)>>2)]=((5387332)|0);
HEAP32[((5345352)>>2)]=((5387040)|0);
HEAP32[((5345356)>>2)]=((5386956)|0);
HEAP32[((5345360)>>2)]=((5386664)|0);
HEAP32[((5345364)>>2)]=((5386448)|0);
HEAP32[((5345368)>>2)]=((5386368)|0);
HEAP32[((5345372)>>2)]=((5386324)|0);
HEAP32[((5345376)>>2)]=((5386252)|0);
HEAP32[((5345380)>>2)]=((5386116)|0);
HEAP32[((5345384)>>2)]=((5386104)|0);
HEAP32[((5345388)>>2)]=((5386080)|0);
HEAP32[((5345392)>>2)]=((5386056)|0);
HEAP32[((5345396)>>2)]=((5385716)|0);
HEAP32[((5345400)>>2)]=((5385672)|0);
HEAP32[((5345404)>>2)]=((5385660)|0);
HEAP32[((5345408)>>2)]=((5385576)|0);
HEAP32[((5345412)>>2)]=((5385540)|0);
HEAP32[((5345416)>>2)]=((5385508)|0);
HEAP32[((5345420)>>2)]=((5385420)|0);
HEAP32[((5345424)>>2)]=((5385400)|0);
HEAP32[((5345428)>>2)]=((5385372)|0);
HEAP32[((5345432)>>2)]=((5385356)|0);
HEAP32[((5345436)>>2)]=((5385344)|0);
HEAP32[((5345440)>>2)]=((5385308)|0);
HEAP32[((5345444)>>2)]=((5385292)|0);
HEAP32[((5345448)>>2)]=((5385264)|0);
HEAP32[((5345452)>>2)]=((5385236)|0);
HEAP32[((5345456)>>2)]=((5385180)|0);
HEAP32[((5345460)>>2)]=((5385076)|0);
HEAP32[((5345464)>>2)]=((5385060)|0);
HEAP32[((5345468)>>2)]=((5385020)|0);
HEAP32[((5345472)>>2)]=((5384992)|0);
HEAP32[((5345476)>>2)]=((5384956)|0);
HEAP32[((5345480)>>2)]=((5384828)|0);
HEAP32[((5345484)>>2)]=((5384816)|0);
HEAP32[((5345488)>>2)]=((5384764)|0);
HEAP32[((5345492)>>2)]=((5384740)|0);
HEAP32[((5345496)>>2)]=((5384716)|0);
HEAP32[((5345500)>>2)]=((5384644)|0);
HEAP32[((5345504)>>2)]=((5384596)|0);
HEAP32[((5345508)>>2)]=((5384540)|0);
HEAP32[((5345512)>>2)]=((5384500)|0);
HEAP32[((5345516)>>2)]=((5384456)|0);
HEAP32[((5345520)>>2)]=((5384412)|0);
HEAP32[((5345524)>>2)]=((5384380)|0);
HEAP32[((5345528)>>2)]=((5384340)|0);
HEAP32[((5345532)>>2)]=((5384312)|0);
HEAP32[((5345536)>>2)]=((5384288)|0);
HEAP32[((5345540)>>2)]=((5384232)|0);
HEAP32[((5345544)>>2)]=((5384212)|0);
HEAP32[((5345548)>>2)]=((5384132)|0);
HEAP32[((5345552)>>2)]=((5384100)|0);
HEAP32[((5345556)>>2)]=((5384064)|0);
HEAP32[((5345560)>>2)]=((5384012)|0);
HEAP32[((5345564)>>2)]=((5383972)|0);
HEAP32[((5345568)>>2)]=((5383920)|0);
HEAP32[((5345572)>>2)]=((5383892)|0);
HEAP32[((5345576)>>2)]=((5383860)|0);
HEAP32[((5345580)>>2)]=((5383780)|0);
HEAP32[((5345584)>>2)]=((5383764)|0);
HEAP32[((5345588)>>2)]=((5383700)|0);
HEAP32[((5345592)>>2)]=((5383668)|0);
HEAP32[((5345596)>>2)]=((5383648)|0);
HEAP32[((5345600)>>2)]=((5383616)|0);
HEAP32[((5345604)>>2)]=((5383592)|0);
HEAP32[((5345608)>>2)]=((5383560)|0);
HEAP32[((5345612)>>2)]=((5383528)|0);
HEAP32[((5345616)>>2)]=((5383488)|0);
HEAP32[((5345620)>>2)]=((5383448)|0);
HEAP32[((5345624)>>2)]=((5383404)|0);
HEAP32[((5345628)>>2)]=((5383336)|0);
HEAP32[((5345632)>>2)]=((5383256)|0);
HEAP32[((5345636)>>2)]=((5383240)|0);
HEAP32[((5345640)>>2)]=((5383224)|0);
HEAP32[((5345644)>>2)]=((5383180)|0);
HEAP32[((5345648)>>2)]=((5383136)|0);
HEAP32[((5345652)>>2)]=((5383124)|0);
HEAP32[((5345656)>>2)]=((5383076)|0);
HEAP32[((5345660)>>2)]=((5382984)|0);
HEAP32[((5345664)>>2)]=((5382920)|0);
HEAP32[((5345668)>>2)]=((5382864)|0);
HEAP32[((5345672)>>2)]=((5382780)|0);
HEAP32[((5345676)>>2)]=((5382772)|0);
HEAP32[((5345680)>>2)]=((5382760)|0);
HEAP32[((5345684)>>2)]=((5382752)|0);
HEAP32[((5345688)>>2)]=((5382744)|0);
HEAP32[((5345692)>>2)]=((5382736)|0);
HEAP32[((5345696)>>2)]=((5382728)|0);
HEAP32[((5345700)>>2)]=((5387620)|0);
HEAP32[((5345704)>>2)]=((5387608)|0);
HEAP32[((5345708)>>2)]=((5387580)|0);
HEAP32[((5345712)>>2)]=((5387560)|0);
HEAP32[((5345716)>>2)]=((5387540)|0);
HEAP32[((5345720)>>2)]=((5387524)|0);
HEAP32[((5345724)>>2)]=((5387512)|0);
HEAP32[((5345728)>>2)]=((5387500)|0);
HEAP32[((5345732)>>2)]=((5387492)|0);
HEAP32[((5345736)>>2)]=((5387476)|0);
HEAP32[((5345740)>>2)]=((5387460)|0);
HEAP32[((5345744)>>2)]=((5387452)|0);
HEAP32[((5345748)>>2)]=((5387420)|0);
HEAP32[((5345752)>>2)]=((5387412)|0);
HEAP32[((5345756)>>2)]=((5387404)|0);
HEAP32[((5345760)>>2)]=((5387388)|0);
HEAP32[((5345764)>>2)]=((5387380)|0);
HEAP32[((5345768)>>2)]=((5387368)|0);
HEAP32[((5345772)>>2)]=((5387356)|0);
HEAP32[((5345776)>>2)]=((5387348)|0);
HEAP32[((5345780)>>2)]=((5387320)|0);
HEAP32[((5345784)>>2)]=((5387312)|0);
HEAP32[((5345788)>>2)]=((5387280)|0);
HEAP32[((5345792)>>2)]=((5387272)|0);
HEAP32[((5345796)>>2)]=((5387264)|0);
HEAP32[((5345800)>>2)]=((5387256)|0);
HEAP32[((5345804)>>2)]=((5387244)|0);
HEAP32[((5345808)>>2)]=((5387236)|0);
HEAP32[((5345812)>>2)]=((5387220)|0);
HEAP32[((5345816)>>2)]=((5387204)|0);
HEAP32[((5345820)>>2)]=((5387136)|0);
HEAP32[((5345824)>>2)]=((5387128)|0);
HEAP32[((5345828)>>2)]=((5387048)|0);
HEAP32[((5345832)>>2)]=((5387028)|0);
HEAP32[((5345836)>>2)]=((5387016)|0);
HEAP32[((5345840)>>2)]=((5387004)|0);
HEAP32[((5345844)>>2)]=((5386992)|0);
HEAP32[((5345848)>>2)]=((5386988)|0);
HEAP32[((5345852)>>2)]=((5386976)|0);
HEAP32[((5345856)>>2)]=((5386964)|0);
HEAP32[((5345860)>>2)]=((5386944)|0);
HEAP32[((5345864)>>2)]=((5386936)|0);
HEAP32[((5345868)>>2)]=((5386884)|0);
HEAP32[((5345872)>>2)]=((5386876)|0);
HEAP32[((5345876)>>2)]=((5386864)|0);
HEAP32[((5345880)>>2)]=((5386752)|0);
HEAP32[((5345884)>>2)]=((5386744)|0);
HEAP32[((5345888)>>2)]=((5386696)|0);
HEAP32[((5345892)>>2)]=((5386684)|0);
HEAP32[((5345896)>>2)]=((5386672)|0);
HEAP32[((5345900)>>2)]=((5386652)|0);
HEAP32[((5345904)>>2)]=((5386628)|0);
HEAP32[((5345908)>>2)]=((5386540)|0);
HEAP32[((5345912)>>2)]=((5386528)|0);
HEAP32[((5345916)>>2)]=((5386520)|0);
HEAP32[((5345920)>>2)]=((5386504)|0);
HEAP32[((5345924)>>2)]=((5386496)|0);
HEAP32[((5345928)>>2)]=((5386488)|0);
HEAP32[((5345932)>>2)]=((5386476)|0);
HEAP32[((5388176)>>2)]=(38);
HEAP32[((5388180)>>2)]=(10);
HEAP32[((5388184)>>2)]=(24);
HEAP32[((5388200)>>2)]=(14);
HEAP32[((5388204)>>2)]=(2);
HEAP32[((5388208)>>2)]=(42);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([2,0,0,0], "i8", ALLOC_STATIC);
HEAP32[((5388260)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5388264)>>2)]=((5388216)|0);
HEAP32[((5388268)>>2)]=__ZTISt9exception;
HEAP32[((5388272)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5388276)>>2)]=((5388232)|0);

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32;

  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  var _abs=Math.abs;

  var _llvm_pow_f64=Math.pow;

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  var _floor=Math.floor;

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  var _cos=Math.cos;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;

  var _ceil=Math.ceil;

  
  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }


  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  var _fabs=Math.abs;

  var _llvm_pow_f32=Math.pow;

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }
var _ExitMP3; // stub for _ExitMP3
var _InitMP3; // stub for _InitMP3
var _decodeMP3; // stub for _decodeMP3
var _decodeMP3_unclipped; // stub for _decodeMP3_unclipped

  var _log=Math.log;

  var _exp=Math.exp;

  var _sqrt=Math.sqrt;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var comparator = function(x, y) {
        return Runtime.dynCall('iii', cmp, [x, y]);
      }
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  var _atan=Math.atan;

  
  function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }var _vfprintf;

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  var _sin=Math.sin;

  var _fabsf=Math.abs;

  var _log10f;
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }


  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function ___gxx_personality_v0() {
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return (tempRet0 = typeArray[i],thrown);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return (tempRet0 = throwntype,thrown);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }

  function ___cxa_call_unexpected(exception) {
      ABORT = true;
      throw exception;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }

  function __ZNSt9exceptionD2Ev(){}





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', { alpha: false });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,__ZNSt20bad_array_new_lengthD0Ev,0,_ABR_iteration_loop,0,_count_bit_noESC_from2,0,_count_bit_noESC_from3,0,__ZNSt9bad_allocD0Ev,0,_VBR_old_iteration_loop,0,__ZNSt20bad_array_new_lengthD1Ev,0,_find_scalefac_x34,0,_floatcompare,0,_VBR_new_iteration_loop,0,_long_block_constrain,0,__ZNKSt9bad_alloc4whatEv,0,_CBR_iteration_loop,0,_count_bit_null,0,_count_bit_noESC,0,_short_block_constrain,0,_guess_scalefac_x34,0,_choose_table_nonMMX,0,__ZNSt9bad_allocD1Ev,0,_decodeMP3_unclipped,0,__ZNKSt20bad_array_new_length4whatEv,0,_decodeMP3,0,_init_xrpow_core_c,0,_fht,0,_lame_report_def,0];

function _addVbr($v, $bitrate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v_addr;
      var $bitrate_addr;
      var $i;
      $v_addr=$v;
      $bitrate_addr=$bitrate;
      var $0=$v_addr;
      var $nVbrNumFrames=(($0+24)|0);
      var $1=HEAP32[(($nVbrNumFrames)>>2)];
      var $inc=((($1)+(1))|0);
      HEAP32[(($nVbrNumFrames)>>2)]=$inc;
      var $2=$bitrate_addr;
      var $3=$v_addr;
      var $sum=(($3)|0);
      var $4=HEAP32[(($sum)>>2)];
      var $add=((($4)+($2))|0);
      HEAP32[(($sum)>>2)]=$add;
      var $5=$v_addr;
      var $seen=(($5+4)|0);
      var $6=HEAP32[(($seen)>>2)];
      var $inc1=((($6)+(1))|0);
      HEAP32[(($seen)>>2)]=$inc1;
      var $7=$v_addr;
      var $seen2=(($7+4)|0);
      var $8=HEAP32[(($seen2)>>2)];
      var $9=$v_addr;
      var $want=(($9+8)|0);
      var $10=HEAP32[(($want)>>2)];
      var $cmp=(($8)|0) < (($10)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 12; break;
    case 4: 
      var $11=$v_addr;
      var $pos=(($11+12)|0);
      var $12=HEAP32[(($pos)>>2)];
      var $13=$v_addr;
      var $size=(($13+16)|0);
      var $14=HEAP32[(($size)>>2)];
      var $cmp3=(($12)|0) < (($14)|0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$v_addr;
      var $sum5=(($15)|0);
      var $16=HEAP32[(($sum5)>>2)];
      var $17=$v_addr;
      var $pos6=(($17+12)|0);
      var $18=HEAP32[(($pos6)>>2)];
      var $19=$v_addr;
      var $bag=(($19+20)|0);
      var $20=HEAP32[(($bag)>>2)];
      var $arrayidx=(($20+($18<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$16;
      var $21=$v_addr;
      var $pos7=(($21+12)|0);
      var $22=HEAP32[(($pos7)>>2)];
      var $inc8=((($22)+(1))|0);
      HEAP32[(($pos7)>>2)]=$inc8;
      var $23=$v_addr;
      var $seen9=(($23+4)|0);
      HEAP32[(($seen9)>>2)]=0;
      label = 6; break;
    case 6: 
      var $24=$v_addr;
      var $pos11=(($24+12)|0);
      var $25=HEAP32[(($pos11)>>2)];
      var $26=$v_addr;
      var $size12=(($26+16)|0);
      var $27=HEAP32[(($size12)>>2)];
      var $cmp13=(($25)|0)==(($27)|0);
      if ($cmp13) { label = 7; break; } else { label = 12; break; }
    case 7: 
      $i=1;
      label = 8; break;
    case 8: 
      var $28=$i;
      var $29=$v_addr;
      var $size15=(($29+16)|0);
      var $30=HEAP32[(($size15)>>2)];
      var $cmp16=(($28)|0) < (($30)|0);
      if ($cmp16) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $31=$i;
      var $32=$v_addr;
      var $bag17=(($32+20)|0);
      var $33=HEAP32[(($bag17)>>2)];
      var $arrayidx18=(($33+($31<<2))|0);
      var $34=HEAP32[(($arrayidx18)>>2)];
      var $35=$i;
      var $div=((((($35)|0))/(2))&-1);
      var $36=$v_addr;
      var $bag19=(($36+20)|0);
      var $37=HEAP32[(($bag19)>>2)];
      var $arrayidx20=(($37+($div<<2))|0);
      HEAP32[(($arrayidx20)>>2)]=$34;
      label = 10; break;
    case 10: 
      var $38=$i;
      var $add21=((($38)+(2))|0);
      $i=$add21;
      label = 8; break;
    case 11: 
      var $39=$v_addr;
      var $want22=(($39+8)|0);
      var $40=HEAP32[(($want22)>>2)];
      var $mul=((($40<<1))&-1);
      HEAP32[(($want22)>>2)]=$mul;
      var $41=$v_addr;
      var $pos23=(($41+12)|0);
      var $42=HEAP32[(($pos23)>>2)];
      var $div24=((((($42)|0))/(2))&-1);
      HEAP32[(($pos23)>>2)]=$div24;
      label = 12; break;
    case 12: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_addVbr["X"]=1;

function _IsVbrTag($buf) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $buf_addr;
      var $isTag0;
      var $isTag1;
      $buf_addr=$buf;
      var $0=$buf_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAP8[($arrayidx)];
      var $conv=(($1)&255);
      var $2=HEAP8[(((5388324)|0))];
      var $conv1=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)==(($conv1)|0);
      if ($cmp) { label = 3; break; } else { var $12 = 0;label = 6; break; }
    case 3: 
      var $3=$buf_addr;
      var $arrayidx3=(($3+1)|0);
      var $4=HEAP8[($arrayidx3)];
      var $conv4=(($4)&255);
      var $5=HEAP8[(((5388325)|0))];
      var $conv5=(($5 << 24) >> 24);
      var $cmp6=(($conv4)|0)==(($conv5)|0);
      if ($cmp6) { label = 4; break; } else { var $12 = 0;label = 6; break; }
    case 4: 
      var $6=$buf_addr;
      var $arrayidx9=(($6+2)|0);
      var $7=HEAP8[($arrayidx9)];
      var $conv10=(($7)&255);
      var $8=HEAP8[(((5388326)|0))];
      var $conv11=(($8 << 24) >> 24);
      var $cmp12=(($conv10)|0)==(($conv11)|0);
      if ($cmp12) { label = 5; break; } else { var $12 = 0;label = 6; break; }
    case 5: 
      var $9=$buf_addr;
      var $arrayidx14=(($9+3)|0);
      var $10=HEAP8[($arrayidx14)];
      var $conv15=(($10)&255);
      var $11=HEAP8[(((5388327)|0))];
      var $conv16=(($11 << 24) >> 24);
      var $cmp17=(($conv15)|0)==(($conv16)|0);
      var $12 = $cmp17;label = 6; break;
    case 6: 
      var $12;
      var $land_ext=(($12)&1);
      $isTag0=$land_ext;
      var $13=$buf_addr;
      var $arrayidx19=(($13)|0);
      var $14=HEAP8[($arrayidx19)];
      var $conv20=(($14)&255);
      var $15=HEAP8[(((5388316)|0))];
      var $conv21=(($15 << 24) >> 24);
      var $cmp22=(($conv20)|0)==(($conv21)|0);
      if ($cmp22) { label = 7; break; } else { var $25 = 0;label = 10; break; }
    case 7: 
      var $16=$buf_addr;
      var $arrayidx25=(($16+1)|0);
      var $17=HEAP8[($arrayidx25)];
      var $conv26=(($17)&255);
      var $18=HEAP8[(((5388317)|0))];
      var $conv27=(($18 << 24) >> 24);
      var $cmp28=(($conv26)|0)==(($conv27)|0);
      if ($cmp28) { label = 8; break; } else { var $25 = 0;label = 10; break; }
    case 8: 
      var $19=$buf_addr;
      var $arrayidx31=(($19+2)|0);
      var $20=HEAP8[($arrayidx31)];
      var $conv32=(($20)&255);
      var $21=HEAP8[(((5388318)|0))];
      var $conv33=(($21 << 24) >> 24);
      var $cmp34=(($conv32)|0)==(($conv33)|0);
      if ($cmp34) { label = 9; break; } else { var $25 = 0;label = 10; break; }
    case 9: 
      var $22=$buf_addr;
      var $arrayidx37=(($22+3)|0);
      var $23=HEAP8[($arrayidx37)];
      var $conv38=(($23)&255);
      var $24=HEAP8[(((5388319)|0))];
      var $conv39=(($24 << 24) >> 24);
      var $cmp40=(($conv38)|0)==(($conv39)|0);
      var $25 = $cmp40;label = 10; break;
    case 10: 
      var $25;
      var $land_ext43=(($25)&1);
      $isTag1=$land_ext43;
      var $26=$isTag0;
      var $tobool=(($26)|0)!=0;
      if ($tobool) { var $28 = 1;label = 12; break; } else { label = 11; break; }
    case 11: 
      var $27=$isTag1;
      var $tobool44=(($27)|0)!=0;
      var $28 = $tobool44;label = 12; break;
    case 12: 
      var $28;
      var $lor_ext=(($28)&1);

      return $lor_ext;
    default: assert(0, "bad label: " + label);
  }

}
_IsVbrTag["X"]=1;

function _ExtractI4($buf) {
  var label = 0;


  var $buf_addr;
  var $x;
  $buf_addr=$buf;
  var $0=$buf_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1)&255);
  $x=$conv;
  var $2=$x;
  var $shl=$2 << 8;
  $x=$shl;
  var $3=$buf_addr;
  var $arrayidx1=(($3+1)|0);
  var $4=HEAP8[($arrayidx1)];
  var $conv2=(($4)&255);
  var $5=$x;
  var $or=$5 | $conv2;
  $x=$or;
  var $6=$x;
  var $shl3=$6 << 8;
  $x=$shl3;
  var $7=$buf_addr;
  var $arrayidx4=(($7+2)|0);
  var $8=HEAP8[($arrayidx4)];
  var $conv5=(($8)&255);
  var $9=$x;
  var $or6=$9 | $conv5;
  $x=$or6;
  var $10=$x;
  var $shl7=$10 << 8;
  $x=$shl7;
  var $11=$buf_addr;
  var $arrayidx8=(($11+3)|0);
  var $12=HEAP8[($arrayidx8)];
  var $conv9=(($12)&255);
  var $13=$x;
  var $or10=$13 | $conv9;
  $x=$or10;
  var $14=$x;

  return $14;
}


function _AddVbrFrame($gfc) {
  var label = 0;


  var $gfc_addr;
  var $kbps;
  $gfc_addr=$gfc;
  var $0=$gfc_addr;
  var $ov_enc=(($0+84036)|0);
  var $bitrate_index=(($ov_enc+704)|0);
  var $1=HEAP32[(($bitrate_index)>>2)];
  var $2=$gfc_addr;
  var $cfg=(($2+16)|0);
  var $version=(($cfg)|0);
  var $3=HEAP32[(($version)>>2)];
  var $arrayidx=((5348820+($3<<6))|0);
  var $arrayidx1=(($arrayidx+($1<<2))|0);
  var $4=HEAP32[(($arrayidx1)>>2)];
  $kbps=$4;
  var $5=$gfc_addr;
  var $VBR_seek_table=(($5+85756)|0);
  var $6=$kbps;
  _addVbr($VBR_seek_table, $6);

  return;
}


function _GetVbrTag($pTagData, $buf) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pTagData_addr;
      var $buf_addr;
      var $i;
      var $head_flags;
      var $h_bitrate;
      var $h_id;
      var $h_mode;
      var $h_sr_index;
      var $h_layer;
      var $enc_delay;
      var $enc_padding;
      $pTagData_addr=$pTagData;
      $buf_addr=$buf;
      var $0=$pTagData_addr;
      var $flags=(($0+8)|0);
      HEAP32[(($flags)>>2)]=0;
      var $1=$buf_addr;
      var $arrayidx=(($1+1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2)&255);
      var $shr=$conv >> 1;
      var $and=$shr & 3;
      $h_layer=$and;
      var $3=$h_layer;
      var $cmp=(($3)|0)!=1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 39; break;
    case 4: 
      var $4=$buf_addr;
      var $arrayidx2=(($4+1)|0);
      var $5=HEAP8[($arrayidx2)];
      var $conv3=(($5)&255);
      var $shr4=$conv3 >> 3;
      var $and5=$shr4 & 1;
      $h_id=$and5;
      var $6=$buf_addr;
      var $arrayidx6=(($6+2)|0);
      var $7=HEAP8[($arrayidx6)];
      var $conv7=(($7)&255);
      var $shr8=$conv7 >> 2;
      var $and9=$shr8 & 3;
      $h_sr_index=$and9;
      var $8=$buf_addr;
      var $arrayidx10=(($8+3)|0);
      var $9=HEAP8[($arrayidx10)];
      var $conv11=(($9)&255);
      var $shr12=$conv11 >> 6;
      var $and13=$shr12 & 3;
      $h_mode=$and13;
      var $10=$buf_addr;
      var $arrayidx14=(($10+2)|0);
      var $11=HEAP8[($arrayidx14)];
      var $conv15=(($11)&255);
      var $shr16=$conv15 >> 4;
      var $and17=$shr16 & 15;
      $h_bitrate=$and17;
      var $12=$h_bitrate;
      var $13=$h_id;
      var $arrayidx18=((5348820+($13<<6))|0);
      var $arrayidx19=(($arrayidx18+($12<<2))|0);
      var $14=HEAP32[(($arrayidx19)>>2)];
      $h_bitrate=$14;
      var $15=$buf_addr;
      var $arrayidx20=(($15+1)|0);
      var $16=HEAP8[($arrayidx20)];
      var $conv21=(($16)&255);
      var $shr22=$conv21 >> 4;
      var $cmp23=(($shr22)|0)==14;
      if ($cmp23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$h_sr_index;
      var $arrayidx26=((((5256828)|0)+($17<<2))|0);
      var $18=HEAP32[(($arrayidx26)>>2)];
      var $19=$pTagData_addr;
      var $samprate=(($19+4)|0);
      HEAP32[(($samprate)>>2)]=$18;
      label = 7; break;
    case 6: 
      var $20=$h_sr_index;
      var $21=$h_id;
      var $arrayidx27=((5256796+($21<<4))|0);
      var $arrayidx28=(($arrayidx27+($20<<2))|0);
      var $22=HEAP32[(($arrayidx28)>>2)];
      var $23=$pTagData_addr;
      var $samprate29=(($23+4)|0);
      HEAP32[(($samprate29)>>2)]=$22;
      label = 7; break;
    case 7: 
      var $24=$h_id;
      var $tobool=(($24)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $25=$h_mode;
      var $cmp32=(($25)|0)!=3;
      if ($cmp32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $26=$buf_addr;
      var $add_ptr=(($26+36)|0);
      $buf_addr=$add_ptr;
      label = 11; break;
    case 10: 
      var $27=$buf_addr;
      var $add_ptr36=(($27+21)|0);
      $buf_addr=$add_ptr36;
      label = 11; break;
    case 11: 
      label = 16; break;
    case 12: 
      var $28=$h_mode;
      var $cmp39=(($28)|0)!=3;
      if ($cmp39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $29=$buf_addr;
      var $add_ptr42=(($29+21)|0);
      $buf_addr=$add_ptr42;
      label = 15; break;
    case 14: 
      var $30=$buf_addr;
      var $add_ptr44=(($30+13)|0);
      $buf_addr=$add_ptr44;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $31=$buf_addr;
      var $call=_IsVbrTag($31);
      var $tobool47=(($call)|0)!=0;
      if ($tobool47) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $retval=0;
      label = 39; break;
    case 18: 
      var $32=$buf_addr;
      var $add_ptr50=(($32+4)|0);
      $buf_addr=$add_ptr50;
      var $33=$h_id;
      var $34=$pTagData_addr;
      var $h_id51=(($34)|0);
      HEAP32[(($h_id51)>>2)]=$33;
      var $35=$buf_addr;
      var $call52=_ExtractI4($35);
      var $36=$pTagData_addr;
      var $flags53=(($36+8)|0);
      HEAP32[(($flags53)>>2)]=$call52;
      $head_flags=$call52;
      var $37=$buf_addr;
      var $add_ptr54=(($37+4)|0);
      $buf_addr=$add_ptr54;
      var $38=$head_flags;
      var $and55=$38 & 1;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $39=$buf_addr;
      var $call58=_ExtractI4($39);
      var $40=$pTagData_addr;
      var $frames=(($40+12)|0);
      HEAP32[(($frames)>>2)]=$call58;
      var $41=$buf_addr;
      var $add_ptr59=(($41+4)|0);
      $buf_addr=$add_ptr59;
      label = 20; break;
    case 20: 
      var $42=$head_flags;
      var $and61=$42 & 2;
      var $tobool62=(($and61)|0)!=0;
      if ($tobool62) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $43=$buf_addr;
      var $call64=_ExtractI4($43);
      var $44=$pTagData_addr;
      var $bytes=(($44+16)|0);
      HEAP32[(($bytes)>>2)]=$call64;
      var $45=$buf_addr;
      var $add_ptr65=(($45+4)|0);
      $buf_addr=$add_ptr65;
      label = 22; break;
    case 22: 
      var $46=$head_flags;
      var $and67=$46 & 4;
      var $tobool68=(($and67)|0)!=0;
      if ($tobool68) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $47=$pTagData_addr;
      var $toc=(($47+24)|0);
      var $arraydecay=(($toc)|0);
      var $cmp70=(($arraydecay)|0)!=0;
      if ($cmp70) { label = 24; break; } else { label = 29; break; }
    case 24: 
      $i=0;
      label = 25; break;
    case 25: 
      var $48=$i;
      var $cmp73=(($48)|0) < 100;
      if ($cmp73) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $49=$i;
      var $50=$buf_addr;
      var $arrayidx75=(($50+$49)|0);
      var $51=HEAP8[($arrayidx75)];
      var $52=$i;
      var $53=$pTagData_addr;
      var $toc76=(($53+24)|0);
      var $arrayidx77=(($toc76+$52)|0);
      HEAP8[($arrayidx77)]=$51;
      label = 27; break;
    case 27: 
      var $54=$i;
      var $inc=((($54)+(1))|0);
      $i=$inc;
      label = 25; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $55=$buf_addr;
      var $add_ptr79=(($55+100)|0);
      $buf_addr=$add_ptr79;
      label = 30; break;
    case 30: 
      var $56=$pTagData_addr;
      var $vbr_scale=(($56+20)|0);
      HEAP32[(($vbr_scale)>>2)]=-1;
      var $57=$head_flags;
      var $and81=$57 & 8;
      var $tobool82=(($and81)|0)!=0;
      if ($tobool82) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $58=$buf_addr;
      var $call84=_ExtractI4($58);
      var $59=$pTagData_addr;
      var $vbr_scale85=(($59+20)|0);
      HEAP32[(($vbr_scale85)>>2)]=$call84;
      var $60=$buf_addr;
      var $add_ptr86=(($60+4)|0);
      $buf_addr=$add_ptr86;
      label = 32; break;
    case 32: 
      var $61=$h_id;
      var $add=((($61)+(1))|0);
      var $mul=((($add)*(72000))&-1);
      var $62=$h_bitrate;
      var $mul88=((($mul)*($62))&-1);
      var $63=$pTagData_addr;
      var $samprate89=(($63+4)|0);
      var $64=HEAP32[(($samprate89)>>2)];
      var $div=((((($mul88)|0))/((($64)|0)))&-1);
      var $65=$pTagData_addr;
      var $headersize=(($65+124)|0);
      HEAP32[(($headersize)>>2)]=$div;
      var $66=$buf_addr;
      var $add_ptr90=(($66+21)|0);
      $buf_addr=$add_ptr90;
      var $67=$buf_addr;
      var $arrayidx91=(($67)|0);
      var $68=HEAP8[($arrayidx91)];
      var $conv92=(($68)&255);
      var $shl=$conv92 << 4;
      $enc_delay=$shl;
      var $69=$buf_addr;
      var $arrayidx93=(($69+1)|0);
      var $70=HEAP8[($arrayidx93)];
      var $conv94=(($70)&255);
      var $shr95=$conv94 >> 4;
      var $71=$enc_delay;
      var $add96=((($71)+($shr95))|0);
      $enc_delay=$add96;
      var $72=$buf_addr;
      var $arrayidx97=(($72+1)|0);
      var $73=HEAP8[($arrayidx97)];
      var $conv98=(($73)&255);
      var $and99=$conv98 & 15;
      var $shl100=$and99 << 8;
      $enc_padding=$shl100;
      var $74=$buf_addr;
      var $arrayidx101=(($74+2)|0);
      var $75=HEAP8[($arrayidx101)];
      var $conv102=(($75)&255);
      var $76=$enc_padding;
      var $add103=((($76)+($conv102))|0);
      $enc_padding=$add103;
      var $77=$enc_delay;
      var $cmp104=(($77)|0) < 0;
      if ($cmp104) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $78=$enc_delay;
      var $cmp106=(($78)|0) > 3000;
      if ($cmp106) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $enc_delay=-1;
      label = 35; break;
    case 35: 
      var $79=$enc_padding;
      var $cmp110=(($79)|0) < 0;
      if ($cmp110) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $80=$enc_padding;
      var $cmp113=(($80)|0) > 3000;
      if ($cmp113) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $enc_padding=-1;
      label = 38; break;
    case 38: 
      var $81=$enc_delay;
      var $82=$pTagData_addr;
      var $enc_delay117=(($82+128)|0);
      HEAP32[(($enc_delay117)>>2)]=$81;
      var $83=$enc_padding;
      var $84=$pTagData_addr;
      var $enc_padding118=(($84+132)|0);
      HEAP32[(($enc_padding118)>>2)]=$83;
      $retval=1;
      label = 39; break;
    case 39: 
      var $85=$retval;

      return $85;
    default: assert(0, "bad label: " + label);
  }

}
_GetVbrTag["X"]=1;

function _InitVbrTag($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2880)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $cfg;
      var $kbps_header;
      var $total_frame_size;
      var $header_size;
      var $buffer=__stackBase__;
      var $i;
      var $n;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      var $3=$cfg;
      var $version=(($3)|0);
      var $4=HEAP32[(($version)>>2)];
      var $cmp=1==(($4)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $kbps_header=128;
      label = 8; break;
    case 4: 
      var $5=$cfg;
      var $samplerate_out=(($5+48)|0);
      var $6=HEAP32[(($samplerate_out)>>2)];
      var $cmp2=(($6)|0) < 16000;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $kbps_header=32;
      label = 7; break;
    case 6: 
      $kbps_header=64;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $7=$cfg;
      var $vbr=(($7+88)|0);
      var $8=HEAP32[(($vbr)>>2)];
      var $cmp6=(($8)|0)==0;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $9=$cfg;
      var $avg_bitrate=(($9+104)|0);
      var $10=HEAP32[(($avg_bitrate)>>2)];
      $kbps_header=$10;
      label = 10; break;
    case 10: 
      var $11=$cfg;
      var $version9=(($11)|0);
      var $12=HEAP32[(($version9)>>2)];
      var $add=((($12)+(1))|0);
      var $mul=((($add)*(72000))&-1);
      var $13=$kbps_header;
      var $mul10=((($mul)*($13))&-1);
      var $14=$cfg;
      var $samplerate_out11=(($14+48)|0);
      var $15=HEAP32[(($samplerate_out11)>>2)];
      var $div=((((($mul10)|0))/((($15)|0)))&-1);
      $total_frame_size=$div;
      var $16=$cfg;
      var $sideinfo_len=(($16+8)|0);
      var $17=HEAP32[(($sideinfo_len)>>2)];
      var $add12=((($17)+(156))|0);
      $header_size=$add12;
      var $18=$total_frame_size;
      var $19=$gfc;
      var $VBR_seek_table=(($19+85756)|0);
      var $TotalFrameSize=(($VBR_seek_table+32)|0);
      HEAP32[(($TotalFrameSize)>>2)]=$18;
      var $20=$total_frame_size;
      var $21=$header_size;
      var $cmp13=(($20)|0) < (($21)|0);
      if ($cmp13) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $22=$total_frame_size;
      var $cmp14=(($22)|0) > 2880;
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $23=$gfc;
      var $cfg16=(($23+16)|0);
      var $write_lame_tag=(($cfg16+140)|0);
      HEAP32[(($write_lame_tag)>>2)]=0;
      $retval=0;
      label = 23; break;
    case 13: 
      var $24=$gfc;
      var $VBR_seek_table18=(($24+85756)|0);
      var $nVbrNumFrames=(($VBR_seek_table18+24)|0);
      HEAP32[(($nVbrNumFrames)>>2)]=0;
      var $25=$gfc;
      var $VBR_seek_table19=(($25+85756)|0);
      var $nBytesWritten=(($VBR_seek_table19+28)|0);
      HEAP32[(($nBytesWritten)>>2)]=0;
      var $26=$gfc;
      var $VBR_seek_table20=(($26+85756)|0);
      var $sum=(($VBR_seek_table20)|0);
      HEAP32[(($sum)>>2)]=0;
      var $27=$gfc;
      var $VBR_seek_table21=(($27+85756)|0);
      var $seen=(($VBR_seek_table21+4)|0);
      HEAP32[(($seen)>>2)]=0;
      var $28=$gfc;
      var $VBR_seek_table22=(($28+85756)|0);
      var $want=(($VBR_seek_table22+8)|0);
      HEAP32[(($want)>>2)]=1;
      var $29=$gfc;
      var $VBR_seek_table23=(($29+85756)|0);
      var $pos=(($VBR_seek_table23+12)|0);
      HEAP32[(($pos)>>2)]=0;
      var $30=$gfc;
      var $VBR_seek_table24=(($30+85756)|0);
      var $bag=(($VBR_seek_table24+20)|0);
      var $31=HEAP32[(($bag)>>2)];
      var $cmp25=(($31)|0)==0;
      if ($cmp25) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $call=_malloc(1600);
      var $32=$call;
      var $33=$gfc;
      var $VBR_seek_table27=(($33+85756)|0);
      var $bag28=(($VBR_seek_table27+20)|0);
      HEAP32[(($bag28)>>2)]=$32;
      var $34=$gfc;
      var $VBR_seek_table29=(($34+85756)|0);
      var $bag30=(($VBR_seek_table29+20)|0);
      var $35=HEAP32[(($bag30)>>2)];
      var $cmp31=(($35)|0)!=0;
      if ($cmp31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $36=$gfc;
      var $VBR_seek_table33=(($36+85756)|0);
      var $size=(($VBR_seek_table33+16)|0);
      HEAP32[(($size)>>2)]=400;
      label = 17; break;
    case 16: 
      var $37=$gfc;
      var $VBR_seek_table35=(($37+85756)|0);
      var $size36=(($VBR_seek_table35+16)|0);
      HEAP32[(($size36)>>2)]=0;
      var $38=$gfc;
      _lame_errorf($38, ((5387660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $39=$gfc;
      var $cfg37=(($39+16)|0);
      var $write_lame_tag38=(($cfg37+140)|0);
      HEAP32[(($write_lame_tag38)>>2)]=0;
      $retval=-1;
      label = 23; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $40=$buffer;
      _memset($40, 0, 2880);
      var $41=$gfc;
      var $arraydecay=(($buffer)|0);
      _setLameTagFrameHeader($41, $arraydecay);
      var $42=$gfc;
      var $VBR_seek_table41=(($42+85756)|0);
      var $TotalFrameSize42=(($VBR_seek_table41+32)|0);
      var $43=HEAP32[(($TotalFrameSize42)>>2)];
      $n=$43;
      $i=0;
      label = 19; break;
    case 19: 
      var $44=$i;
      var $45=$n;
      var $cmp43=(($44)>>>0) < (($45)>>>0);
      if ($cmp43) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $46=$gfc;
      var $47=$i;
      var $arrayidx=(($buffer+$47)|0);
      var $48=HEAP8[($arrayidx)];
      _add_dummy_byte($46, $48, 1);
      label = 21; break;
    case 21: 
      var $49=$i;
      var $inc=((($49)+(1))|0);
      $i=$inc;
      label = 19; break;
    case 22: 
      $retval=0;
      label = 23; break;
    case 23: 
      var $50=$retval;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + label);
  }

}
_InitVbrTag["X"]=1;

function _CRC_update_lookup($value, $crc) {
  var label = 0;


  var $value_addr;
  var $crc_addr;
  var $tmp;
  $value_addr=$value;
  $crc_addr=$crc;
  var $0=$crc_addr;
  var $conv=(($0)&65535);
  var $1=$value_addr;
  var $conv1=(($1)&65535);
  var $xor=$conv ^ $conv1;
  var $conv2=(($xor) & 65535);
  $tmp=$conv2;
  var $2=$crc_addr;
  var $conv3=(($2)&65535);
  var $shr=$conv3 >> 8;
  var $3=$tmp;
  var $conv4=(($3)&65535);
  var $and=$conv4 & 255;
  var $arrayidx=((5347700+($and<<2))|0);
  var $4=HEAP32[(($arrayidx)>>2)];
  var $xor5=$shr ^ $4;
  var $conv6=(($xor5) & 65535);
  $crc_addr=$conv6;
  var $5=$crc_addr;

  return $5;
}


function _CreateI4($buf, $nValue) {
  var label = 0;


  var $buf_addr;
  var $nValue_addr;
  $buf_addr=$buf;
  $nValue_addr=$nValue;
  var $0=$nValue_addr;
  var $shr=$0 >>> 24;
  var $and=$shr & 255;
  var $conv=(($and) & 255);
  var $1=$buf_addr;
  var $arrayidx=(($1)|0);
  HEAP8[($arrayidx)]=$conv;
  var $2=$nValue_addr;
  var $shr1=$2 >>> 16;
  var $and2=$shr1 & 255;
  var $conv3=(($and2) & 255);
  var $3=$buf_addr;
  var $arrayidx4=(($3+1)|0);
  HEAP8[($arrayidx4)]=$conv3;
  var $4=$nValue_addr;
  var $shr5=$4 >>> 8;
  var $and6=$shr5 & 255;
  var $conv7=(($and6) & 255);
  var $5=$buf_addr;
  var $arrayidx8=(($5+2)|0);
  HEAP8[($arrayidx8)]=$conv7;
  var $6=$nValue_addr;
  var $and9=$6 & 255;
  var $conv10=(($and9) & 255);
  var $7=$buf_addr;
  var $arrayidx11=(($7+3)|0);
  HEAP8[($arrayidx11)]=$conv10;

  return;
}


function _setLameTagFrameHeader($gfc, $buffer) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $buffer_addr;
      var $cfg;
      var $eov;
      var $abyte;
      var $bbyte;
      var $bitrate;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$buffer_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3)&255);
      var $shl=$conv << 8;
      var $or=$shl | 255;
      var $conv2=(($or) & 255);
      var $4=$buffer_addr;
      var $arrayidx3=(($4)|0);
      HEAP8[($arrayidx3)]=$conv2;
      var $5=$buffer_addr;
      var $arrayidx4=(($5+1)|0);
      var $6=HEAP8[($arrayidx4)];
      var $conv5=(($6)&255);
      var $shl6=$conv5 << 3;
      var $or7=$shl6 | 7;
      var $conv8=(($or7) & 255);
      var $7=$buffer_addr;
      var $arrayidx9=(($7+1)|0);
      HEAP8[($arrayidx9)]=$conv8;
      var $8=$buffer_addr;
      var $arrayidx10=(($8+1)|0);
      var $9=HEAP8[($arrayidx10)];
      var $conv11=(($9)&255);
      var $shl12=$conv11 << 1;
      var $10=$cfg;
      var $samplerate_out=(($10+48)|0);
      var $11=HEAP32[(($samplerate_out)>>2)];
      var $cmp=(($11)|0) < 16000;
      var $cond=$cmp ? 0 : 1;
      var $and=$cond & 1;
      var $or14=$shl12 | $and;
      var $conv15=(($or14) & 255);
      var $12=$buffer_addr;
      var $arrayidx16=(($12+1)|0);
      HEAP8[($arrayidx16)]=$conv15;
      var $13=$buffer_addr;
      var $arrayidx17=(($13+1)|0);
      var $14=HEAP8[($arrayidx17)];
      var $conv18=(($14)&255);
      var $shl19=$conv18 << 1;
      var $15=$cfg;
      var $version=(($15)|0);
      var $16=HEAP32[(($version)>>2)];
      var $and20=$16 & 1;
      var $or21=$shl19 | $and20;
      var $conv22=(($or21) & 255);
      var $17=$buffer_addr;
      var $arrayidx23=(($17+1)|0);
      HEAP8[($arrayidx23)]=$conv22;
      var $18=$buffer_addr;
      var $arrayidx24=(($18+1)|0);
      var $19=HEAP8[($arrayidx24)];
      var $conv25=(($19)&255);
      var $shl26=$conv25 << 2;
      var $or27=$shl26 | 1;
      var $conv28=(($or27) & 255);
      var $20=$buffer_addr;
      var $arrayidx29=(($20+1)|0);
      HEAP8[($arrayidx29)]=$conv28;
      var $21=$buffer_addr;
      var $arrayidx30=(($21+1)|0);
      var $22=HEAP8[($arrayidx30)];
      var $conv31=(($22)&255);
      var $shl32=$conv31 << 1;
      var $23=$cfg;
      var $error_protection=(($23+144)|0);
      var $24=HEAP32[(($error_protection)>>2)];
      var $tobool=(($24)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $cond33=$lnot ? 1 : 0;
      var $and34=$cond33 & 1;
      var $or35=$shl32 | $and34;
      var $conv36=(($or35) & 255);
      var $25=$buffer_addr;
      var $arrayidx37=(($25+1)|0);
      HEAP8[($arrayidx37)]=$conv36;
      var $26=$buffer_addr;
      var $arrayidx38=(($26+2)|0);
      var $27=HEAP8[($arrayidx38)];
      var $conv39=(($27)&255);
      var $shl40=$conv39 << 4;
      var $28=$eov;
      var $bitrate_index=(($28+704)|0);
      var $29=HEAP32[(($bitrate_index)>>2)];
      var $and41=$29 & 15;
      var $or42=$shl40 | $and41;
      var $conv43=(($or42) & 255);
      var $30=$buffer_addr;
      var $arrayidx44=(($30+2)|0);
      HEAP8[($arrayidx44)]=$conv43;
      var $31=$buffer_addr;
      var $arrayidx45=(($31+2)|0);
      var $32=HEAP8[($arrayidx45)];
      var $conv46=(($32)&255);
      var $shl47=$conv46 << 2;
      var $33=$cfg;
      var $samplerate_index=(($33+4)|0);
      var $34=HEAP32[(($samplerate_index)>>2)];
      var $and48=$34 & 3;
      var $or49=$shl47 | $and48;
      var $conv50=(($or49) & 255);
      var $35=$buffer_addr;
      var $arrayidx51=(($35+2)|0);
      HEAP8[($arrayidx51)]=$conv50;
      var $36=$buffer_addr;
      var $arrayidx52=(($36+2)|0);
      var $37=HEAP8[($arrayidx52)];
      var $conv53=(($37)&255);
      var $shl54=$conv53 << 1;
      var $conv55=(($shl54) & 255);
      var $38=$buffer_addr;
      var $arrayidx56=(($38+2)|0);
      HEAP8[($arrayidx56)]=$conv55;
      var $39=$buffer_addr;
      var $arrayidx57=(($39+2)|0);
      var $40=HEAP8[($arrayidx57)];
      var $conv58=(($40)&255);
      var $shl59=$conv58 << 1;
      var $41=$cfg;
      var $extension=(($41+156)|0);
      var $42=HEAP32[(($extension)>>2)];
      var $and60=$42 & 1;
      var $or61=$shl59 | $and60;
      var $conv62=(($or61) & 255);
      var $43=$buffer_addr;
      var $arrayidx63=(($43+2)|0);
      HEAP8[($arrayidx63)]=$conv62;
      var $44=$buffer_addr;
      var $arrayidx64=(($44+3)|0);
      var $45=HEAP8[($arrayidx64)];
      var $conv65=(($45)&255);
      var $shl66=$conv65 << 2;
      var $46=$cfg;
      var $mode=(($46+164)|0);
      var $47=HEAP32[(($mode)>>2)];
      var $and67=$47 & 3;
      var $or68=$shl66 | $and67;
      var $conv69=(($or68) & 255);
      var $48=$buffer_addr;
      var $arrayidx70=(($48+3)|0);
      HEAP8[($arrayidx70)]=$conv69;
      var $49=$buffer_addr;
      var $arrayidx71=(($49+3)|0);
      var $50=HEAP8[($arrayidx71)];
      var $conv72=(($50)&255);
      var $shl73=$conv72 << 2;
      var $51=$eov;
      var $mode_ext=(($51+716)|0);
      var $52=HEAP32[(($mode_ext)>>2)];
      var $and74=$52 & 3;
      var $or75=$shl73 | $and74;
      var $conv76=(($or75) & 255);
      var $53=$buffer_addr;
      var $arrayidx77=(($53+3)|0);
      HEAP8[($arrayidx77)]=$conv76;
      var $54=$buffer_addr;
      var $arrayidx78=(($54+3)|0);
      var $55=HEAP8[($arrayidx78)];
      var $conv79=(($55)&255);
      var $shl80=$conv79 << 1;
      var $56=$cfg;
      var $copyright=(($56+148)|0);
      var $57=HEAP32[(($copyright)>>2)];
      var $and81=$57 & 1;
      var $or82=$shl80 | $and81;
      var $conv83=(($or82) & 255);
      var $58=$buffer_addr;
      var $arrayidx84=(($58+3)|0);
      HEAP8[($arrayidx84)]=$conv83;
      var $59=$buffer_addr;
      var $arrayidx85=(($59+3)|0);
      var $60=HEAP8[($arrayidx85)];
      var $conv86=(($60)&255);
      var $shl87=$conv86 << 1;
      var $61=$cfg;
      var $original=(($61+152)|0);
      var $62=HEAP32[(($original)>>2)];
      var $and88=$62 & 1;
      var $or89=$shl87 | $and88;
      var $conv90=(($or89) & 255);
      var $63=$buffer_addr;
      var $arrayidx91=(($63+3)|0);
      HEAP8[($arrayidx91)]=$conv90;
      var $64=$buffer_addr;
      var $arrayidx92=(($64+3)|0);
      var $65=HEAP8[($arrayidx92)];
      var $conv93=(($65)&255);
      var $shl94=$conv93 << 2;
      var $66=$cfg;
      var $emphasis=(($66+160)|0);
      var $67=HEAP32[(($emphasis)>>2)];
      var $and95=$67 & 3;
      var $or96=$shl94 | $and95;
      var $conv97=(($or96) & 255);
      var $68=$buffer_addr;
      var $arrayidx98=(($68+3)|0);
      HEAP8[($arrayidx98)]=$conv97;
      var $69=$buffer_addr;
      var $arrayidx99=(($69)|0);
      HEAP8[($arrayidx99)]=-1;
      var $70=$buffer_addr;
      var $arrayidx100=(($70+1)|0);
      var $71=HEAP8[($arrayidx100)];
      var $conv101=(($71)&255);
      var $and102=$conv101 & 241;
      var $conv103=(($and102) & 255);
      $abyte=$conv103;
      var $72=$cfg;
      var $version104=(($72)|0);
      var $73=HEAP32[(($version104)>>2)];
      var $cmp105=1==(($73)|0);
      if ($cmp105) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $bitrate=128;
      label = 8; break;
    case 4: 
      var $74=$cfg;
      var $samplerate_out107=(($74+48)|0);
      var $75=HEAP32[(($samplerate_out107)>>2)];
      var $cmp108=(($75)|0) < 16000;
      if ($cmp108) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $bitrate=32;
      label = 7; break;
    case 6: 
      $bitrate=64;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $76=$cfg;
      var $vbr=(($76+88)|0);
      var $77=HEAP32[(($vbr)>>2)];
      var $cmp113=(($77)|0)==0;
      if ($cmp113) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $78=$cfg;
      var $avg_bitrate=(($78+104)|0);
      var $79=HEAP32[(($avg_bitrate)>>2)];
      $bitrate=$79;
      label = 10; break;
    case 10: 
      var $80=$cfg;
      var $free_format=(($80+136)|0);
      var $81=HEAP32[(($free_format)>>2)];
      var $tobool117=(($81)|0)!=0;
      if ($tobool117) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $bbyte=0;
      label = 13; break;
    case 12: 
      var $82=$bitrate;
      var $83=$cfg;
      var $version120=(($83)|0);
      var $84=HEAP32[(($version120)>>2)];
      var $85=$cfg;
      var $samplerate_out121=(($85+48)|0);
      var $86=HEAP32[(($samplerate_out121)>>2)];
      var $call=_BitrateIndex($82, $84, $86);
      var $mul=((($call<<4))&-1);
      var $conv122=(($mul) & 255);
      $bbyte=$conv122;
      label = 13; break;
    case 13: 
      var $87=$cfg;
      var $version124=(($87)|0);
      var $88=HEAP32[(($version124)>>2)];
      var $cmp125=(($88)|0)==1;
      if ($cmp125) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $89=$abyte;
      var $conv128=(($89 << 24) >> 24);
      var $or129=$conv128 | 10;
      var $conv130=(($or129) & 255);
      var $90=$buffer_addr;
      var $arrayidx131=(($90+1)|0);
      HEAP8[($arrayidx131)]=$conv130;
      var $91=$buffer_addr;
      var $arrayidx132=(($91+2)|0);
      var $92=HEAP8[($arrayidx132)];
      var $conv133=(($92)&255);
      var $and134=$conv133 & 13;
      var $conv135=(($and134) & 255);
      $abyte=$conv135;
      var $93=$bbyte;
      var $conv136=(($93 << 24) >> 24);
      var $94=$abyte;
      var $conv137=(($94 << 24) >> 24);
      var $or138=$conv136 | $conv137;
      var $conv139=(($or138) & 255);
      var $95=$buffer_addr;
      var $arrayidx140=(($95+2)|0);
      HEAP8[($arrayidx140)]=$conv139;
      label = 16; break;
    case 15: 
      var $96=$abyte;
      var $conv142=(($96 << 24) >> 24);
      var $or143=$conv142 | 2;
      var $conv144=(($or143) & 255);
      var $97=$buffer_addr;
      var $arrayidx145=(($97+1)|0);
      HEAP8[($arrayidx145)]=$conv144;
      var $98=$buffer_addr;
      var $arrayidx146=(($98+2)|0);
      var $99=HEAP8[($arrayidx146)];
      var $conv147=(($99)&255);
      var $and148=$conv147 & 13;
      var $conv149=(($and148) & 255);
      $abyte=$conv149;
      var $100=$bbyte;
      var $conv150=(($100 << 24) >> 24);
      var $101=$abyte;
      var $conv151=(($101 << 24) >> 24);
      var $or152=$conv150 | $conv151;
      var $conv153=(($or152) & 255);
      var $102=$buffer_addr;
      var $arrayidx154=(($102+2)|0);
      HEAP8[($arrayidx154)]=$conv153;
      label = 16; break;
    case 16: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_setLameTagFrameHeader["X"]=1;

function _UpdateMusicCRC($crc, $buffer, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $crc_addr;
      var $buffer_addr;
      var $size_addr;
      var $i;
      $crc_addr=$crc;
      $buffer_addr=$buffer;
      $size_addr=$size;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$size_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$buffer_addr;
      var $arrayidx=(($3+$2)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4)&255);
      var $5=$crc_addr;
      var $6=HEAP16[(($5)>>1)];
      var $call=_CRC_update_lookup($conv, $6);
      var $7=$crc_addr;
      HEAP16[(($7)>>1)]=$call;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_lametag_frame($gfp, $buffer, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $buffer_addr;
      var $size_addr;
      var $gfc;
      var $cfg;
      var $stream_size;
      var $nStreamIndex;
      var $btToc=__stackBase__;
      var $i;
      var $crc;
      var $i69;
      $gfp_addr=$gfp;
      $buffer_addr=$buffer;
      $size_addr=$size;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 35; break;
    case 4: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $cmp1=(($3)|0)==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 35; break;
    case 6: 
      var $4=$gfc;
      var $class_id=(($4)|0);
      var $5=HEAP32[(($class_id)>>2)];
      var $cmp4=(($5)|0)!=-487877;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 35; break;
    case 8: 
      var $6=$gfc;
      var $cfg7=(($6+16)|0);
      $cfg=$cfg7;
      var $7=$cfg;
      var $write_lame_tag=(($7+140)|0);
      var $8=HEAP32[(($write_lame_tag)>>2)];
      var $cmp8=(($8)|0)==0;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 35; break;
    case 10: 
      var $9=$gfc;
      var $VBR_seek_table=(($9+85756)|0);
      var $pos=(($VBR_seek_table+12)|0);
      var $10=HEAP32[(($pos)>>2)];
      var $cmp11=(($10)|0) <= 0;
      if ($cmp11) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 35; break;
    case 12: 
      var $11=$size_addr;
      var $12=$gfc;
      var $VBR_seek_table14=(($12+85756)|0);
      var $TotalFrameSize=(($VBR_seek_table14+32)|0);
      var $13=HEAP32[(($TotalFrameSize)>>2)];
      var $cmp15=(($11)>>>0) < (($13)>>>0);
      if ($cmp15) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $14=$gfc;
      var $VBR_seek_table17=(($14+85756)|0);
      var $TotalFrameSize18=(($VBR_seek_table17+32)|0);
      var $15=HEAP32[(($TotalFrameSize18)>>2)];
      $retval=$15;
      label = 35; break;
    case 14: 
      var $16=$buffer_addr;
      var $cmp20=(($16)|0)==0;
      if ($cmp20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=0;
      label = 35; break;
    case 16: 
      var $17=$buffer_addr;
      var $18=$gfc;
      var $VBR_seek_table23=(($18+85756)|0);
      var $TotalFrameSize24=(($VBR_seek_table23+32)|0);
      var $19=HEAP32[(($TotalFrameSize24)>>2)];
      _memset($17, 0, $19);
      var $20=$gfc;
      var $21=$buffer_addr;
      _setLameTagFrameHeader($20, $21);
      var $22=$btToc;
      _memset($22, 0, 100);
      var $23=$cfg;
      var $free_format=(($23+136)|0);
      var $24=HEAP32[(($free_format)>>2)];
      var $tobool=(($24)|0)!=0;
      if ($tobool) { label = 17; break; } else { label = 22; break; }
    case 17: 
      $i=1;
      label = 18; break;
    case 18: 
      var $25=$i;
      var $cmp26=(($25)|0) < 100;
      if ($cmp26) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $26=$i;
      var $mul=((($26)*(255))&-1);
      var $div=((((($mul)|0))/(100))&-1);
      var $conv=(($div) & 255);
      var $27=$i;
      var $arrayidx=(($btToc+$27)|0);
      HEAP8[($arrayidx)]=$conv;
      label = 20; break;
    case 20: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      label = 18; break;
    case 21: 
      label = 23; break;
    case 22: 
      var $29=$gfc;
      var $VBR_seek_table27=(($29+85756)|0);
      var $arraydecay=(($btToc)|0);
      _Xing_seek_table($VBR_seek_table27, $arraydecay);
      label = 23; break;
    case 23: 
      var $30=$cfg;
      var $sideinfo_len=(($30+8)|0);
      var $31=HEAP32[(($sideinfo_len)>>2)];
      $nStreamIndex=$31;
      var $32=$cfg;
      var $error_protection=(($32+144)|0);
      var $33=HEAP32[(($error_protection)>>2)];
      var $tobool29=(($33)|0)!=0;
      if ($tobool29) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $34=$nStreamIndex;
      var $sub=((($34)-(2))|0);
      $nStreamIndex=$sub;
      label = 25; break;
    case 25: 
      var $35=$cfg;
      var $vbr=(($35+88)|0);
      var $36=HEAP32[(($vbr)>>2)];
      var $cmp32=(($36)|0)==0;
      if ($cmp32) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $37=HEAP8[(((5388316)|0))];
      var $38=$nStreamIndex;
      var $inc35=((($38)+(1))|0);
      $nStreamIndex=$inc35;
      var $39=$buffer_addr;
      var $arrayidx36=(($39+$38)|0);
      HEAP8[($arrayidx36)]=$37;
      var $40=HEAP8[(((5388317)|0))];
      var $41=$nStreamIndex;
      var $inc37=((($41)+(1))|0);
      $nStreamIndex=$inc37;
      var $42=$buffer_addr;
      var $arrayidx38=(($42+$41)|0);
      HEAP8[($arrayidx38)]=$40;
      var $43=HEAP8[(((5388318)|0))];
      var $44=$nStreamIndex;
      var $inc39=((($44)+(1))|0);
      $nStreamIndex=$inc39;
      var $45=$buffer_addr;
      var $arrayidx40=(($45+$44)|0);
      HEAP8[($arrayidx40)]=$43;
      var $46=HEAP8[(((5388319)|0))];
      var $47=$nStreamIndex;
      var $inc41=((($47)+(1))|0);
      $nStreamIndex=$inc41;
      var $48=$buffer_addr;
      var $arrayidx42=(($48+$47)|0);
      HEAP8[($arrayidx42)]=$46;
      label = 28; break;
    case 27: 
      var $49=HEAP8[(((5388324)|0))];
      var $50=$nStreamIndex;
      var $inc44=((($50)+(1))|0);
      $nStreamIndex=$inc44;
      var $51=$buffer_addr;
      var $arrayidx45=(($51+$50)|0);
      HEAP8[($arrayidx45)]=$49;
      var $52=HEAP8[(((5388325)|0))];
      var $53=$nStreamIndex;
      var $inc46=((($53)+(1))|0);
      $nStreamIndex=$inc46;
      var $54=$buffer_addr;
      var $arrayidx47=(($54+$53)|0);
      HEAP8[($arrayidx47)]=$52;
      var $55=HEAP8[(((5388326)|0))];
      var $56=$nStreamIndex;
      var $inc48=((($56)+(1))|0);
      $nStreamIndex=$inc48;
      var $57=$buffer_addr;
      var $arrayidx49=(($57+$56)|0);
      HEAP8[($arrayidx49)]=$55;
      var $58=HEAP8[(((5388327)|0))];
      var $59=$nStreamIndex;
      var $inc50=((($59)+(1))|0);
      $nStreamIndex=$inc50;
      var $60=$buffer_addr;
      var $arrayidx51=(($60+$59)|0);
      HEAP8[($arrayidx51)]=$58;
      label = 28; break;
    case 28: 
      var $61=$nStreamIndex;
      var $62=$buffer_addr;
      var $arrayidx53=(($62+$61)|0);
      _CreateI4($arrayidx53, 15);
      var $63=$nStreamIndex;
      var $add=((($63)+(4))|0);
      $nStreamIndex=$add;
      var $64=$nStreamIndex;
      var $65=$buffer_addr;
      var $arrayidx54=(($65+$64)|0);
      var $66=$gfc;
      var $VBR_seek_table55=(($66+85756)|0);
      var $nVbrNumFrames=(($VBR_seek_table55+24)|0);
      var $67=HEAP32[(($nVbrNumFrames)>>2)];
      _CreateI4($arrayidx54, $67);
      var $68=$nStreamIndex;
      var $add56=((($68)+(4))|0);
      $nStreamIndex=$add56;
      var $69=$gfc;
      var $VBR_seek_table57=(($69+85756)|0);
      var $nBytesWritten=(($VBR_seek_table57+28)|0);
      var $70=HEAP32[(($nBytesWritten)>>2)];
      var $71=$gfc;
      var $VBR_seek_table58=(($71+85756)|0);
      var $TotalFrameSize59=(($VBR_seek_table58+32)|0);
      var $72=HEAP32[(($TotalFrameSize59)>>2)];
      var $add60=((($70)+($72))|0);
      $stream_size=$add60;
      var $73=$nStreamIndex;
      var $74=$buffer_addr;
      var $arrayidx61=(($74+$73)|0);
      var $75=$stream_size;
      _CreateI4($arrayidx61, $75);
      var $76=$nStreamIndex;
      var $add62=((($76)+(4))|0);
      $nStreamIndex=$add62;
      var $77=$nStreamIndex;
      var $78=$buffer_addr;
      var $arrayidx63=(($78+$77)|0);
      var $79=$btToc;
      assert(100 % 1 === 0);_memcpy($arrayidx63, $79, 100);
      var $80=$nStreamIndex;
      var $add64=((($80)+(100))|0);
      $nStreamIndex=$add64;
      var $81=$cfg;
      var $error_protection65=(($81+144)|0);
      var $82=HEAP32[(($error_protection65)>>2)];
      var $tobool66=(($82)|0)!=0;
      if ($tobool66) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $83=$gfc;
      var $84=$buffer_addr;
      _CRC_writeheader($83, $84);
      label = 30; break;
    case 30: 
      $crc=0;
      $i69=0;
      label = 31; break;
    case 31: 
      var $85=$i69;
      var $86=$nStreamIndex;
      var $cmp71=(($85)>>>0) < (($86)>>>0);
      if ($cmp71) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $87=$i69;
      var $88=$buffer_addr;
      var $arrayidx74=(($88+$87)|0);
      var $89=HEAP8[($arrayidx74)];
      var $conv75=(($89)&255);
      var $90=$crc;
      var $call=_CRC_update_lookup($conv75, $90);
      $crc=$call;
      label = 33; break;
    case 33: 
      var $91=$i69;
      var $inc77=((($91)+(1))|0);
      $i69=$inc77;
      label = 31; break;
    case 34: 
      var $92=$gfp_addr;
      var $93=$stream_size;
      var $94=$buffer_addr;
      var $95=$nStreamIndex;
      var $add_ptr=(($94+$95)|0);
      var $96=$crc;
      var $call79=_PutLameVBR($92, $93, $add_ptr, $96);
      var $97=$nStreamIndex;
      var $add80=((($97)+($call79))|0);
      $nStreamIndex=$add80;
      var $98=$gfc;
      var $VBR_seek_table81=(($98+85756)|0);
      var $TotalFrameSize82=(($VBR_seek_table81+32)|0);
      var $99=HEAP32[(($TotalFrameSize82)>>2)];
      $retval=$99;
      label = 35; break;
    case 35: 
      var $100=$retval;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }

}
_lame_get_lametag_frame["X"]=1;

function _Xing_seek_table($v, $t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v_addr;
      var $t_addr;
      var $i;
      var $indx;
      var $seek_point;
      var $j;
      var $act;
      var $sum;
      $v_addr=$v;
      $t_addr=$t;
      var $0=$v_addr;
      var $pos=(($0+12)|0);
      var $1=HEAP32[(($pos)>>2)];
      var $cmp=(($1)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 12; break;
    case 4: 
      $i=1;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp1=(($2)|0) < 100;
      if ($cmp1) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $3=$i;
      var $conv=(($3)|0);
      var $div=($conv)/(100);
      $j=$div;
      var $4=$j;
      var $5=$v_addr;
      var $pos2=(($5+12)|0);
      var $6=HEAP32[(($pos2)>>2)];
      var $conv3=(($6)|0);
      var $mul=($4)*($conv3);
      var $conv4=$mul;
      var $call=Math.floor($conv4);
      var $conv5=(($call)&-1);
      $indx=$conv5;
      var $7=$indx;
      var $8=$v_addr;
      var $pos6=(($8+12)|0);
      var $9=HEAP32[(($pos6)>>2)];
      var $sub=((($9)-(1))|0);
      var $cmp7=(($7)|0) > (($sub)|0);
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$v_addr;
      var $pos10=(($10+12)|0);
      var $11=HEAP32[(($pos10)>>2)];
      var $sub11=((($11)-(1))|0);
      $indx=$sub11;
      label = 8; break;
    case 8: 
      var $12=$indx;
      var $13=$v_addr;
      var $bag=(($13+20)|0);
      var $14=HEAP32[(($bag)>>2)];
      var $arrayidx=(($14+($12<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      var $conv13=(($15)|0);
      $act=$conv13;
      var $16=$v_addr;
      var $sum14=(($16)|0);
      var $17=HEAP32[(($sum14)>>2)];
      var $conv15=(($17)|0);
      $sum=$conv15;
      var $18=$act;
      var $conv16=$18;
      var $mul17=($conv16)*(256);
      var $19=$sum;
      var $conv18=$19;
      var $div19=($mul17)/($conv18);
      var $conv20=(($div19)&-1);
      $seek_point=$conv20;
      var $20=$seek_point;
      var $cmp21=(($20)|0) > 255;
      if ($cmp21) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $seek_point=255;
      label = 10; break;
    case 10: 
      var $21=$seek_point;
      var $conv25=(($21) & 255);
      var $22=$i;
      var $23=$t_addr;
      var $arrayidx26=(($23+$22)|0);
      HEAP8[($arrayidx26)]=$conv25;
      label = 11; break;
    case 11: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 12: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_Xing_seek_table["X"]=1;

function _CreateI2($buf, $nValue) {
  var label = 0;


  var $buf_addr;
  var $nValue_addr;
  $buf_addr=$buf;
  $nValue_addr=$nValue;
  var $0=$nValue_addr;
  var $shr=$0 >> 8;
  var $and=$shr & 255;
  var $conv=(($and) & 255);
  var $1=$buf_addr;
  var $arrayidx=(($1)|0);
  HEAP8[($arrayidx)]=$conv;
  var $2=$nValue_addr;
  var $and1=$2 & 255;
  var $conv2=(($and1) & 255);
  var $3=$buf_addr;
  var $arrayidx3=(($3+1)|0);
  HEAP8[($arrayidx3)]=$conv2;

  return;
}


function _calcFrameLength($cfg, $kbps, $pad) {
  var label = 0;


  var $cfg_addr;
  var $kbps_addr;
  var $pad_addr;
  $cfg_addr=$cfg;
  $kbps_addr=$kbps;
  $pad_addr=$pad;
  var $0=$cfg_addr;
  var $version=(($0)|0);
  var $1=HEAP32[(($version)>>2)];
  var $add=((($1)+(1))|0);
  var $mul=((($add)*(72000))&-1);
  var $2=$kbps_addr;
  var $mul1=((($mul)*($2))&-1);
  var $3=$cfg_addr;
  var $samplerate_out=(($3+48)|0);
  var $4=HEAP32[(($samplerate_out)>>2)];
  var $div=((((($mul1)|0))/((($4)|0)))&-1);
  var $5=$pad_addr;
  var $add2=((($div)+($5))|0);
  var $mul3=((($add2<<3))&-1);

  return $mul3;
}


function _PutLameVBR($gfp, $nMusicLength, $pbtStreamBuffer, $crc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $nMusicLength_addr;
      var $pbtStreamBuffer_addr;
      var $crc_addr;
      var $gfc;
      var $cfg;
      var $nBytesWritten;
      var $i;
      var $enc_delay;
      var $enc_padding;
      var $nQuality;
      var $szVersion;
      var $nVBR;
      var $nRevision;
      var $nRevMethod;
      var $vbr_type_translator=__stackBase__;
      var $nLowpass;
      var $nPeakSignalAmplitude;
      var $nRadioReplayGain;
      var $nAudiophileReplayGain;
      var $nNoiseShaping;
      var $nStereoMode;
      var $bNonOptimal;
      var $nSourceFreq;
      var $nMisc;
      var $nMusicCRC;
      var $bExpNPsyTune;
      var $bSafeJoint;
      var $bNoGapMore;
      var $bNoGapPrevious;
      var $nNoGapCount;
      var $nNoGapCurr;
      var $nAthType;
      var $nFlags;
      var $nABRBitrate;
      var $RadioGain;
      $gfp_addr=$gfp;
      $nMusicLength_addr=$nMusicLength;
      $pbtStreamBuffer_addr=$pbtStreamBuffer;
      $crc_addr=$crc;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      $nBytesWritten=0;
      var $3=$gfc;
      var $ov_enc=(($3+84036)|0);
      var $encoder_delay=(($ov_enc+720)|0);
      var $4=HEAP32[(($encoder_delay)>>2)];
      $enc_delay=$4;
      var $5=$gfc;
      var $ov_enc2=(($5+84036)|0);
      var $encoder_padding=(($ov_enc2+724)|0);
      var $6=HEAP32[(($encoder_padding)>>2)];
      $enc_padding=$6;
      var $7=$gfp_addr;
      var $VBR_q=(($7+164)|0);
      var $8=HEAP32[(($VBR_q)>>2)];
      var $mul=((($8)*(10))&-1);
      var $sub=(((100)-($mul))|0);
      var $9=$gfp_addr;
      var $quality=(($9+44)|0);
      var $10=HEAP32[(($quality)>>2)];
      var $sub3=((($sub)-($10))|0);
      $nQuality=$sub3;
      var $call=_get_lame_tag_encoder_short_version();
      $szVersion=$call;
      $nRevision=0;
      var $11=$vbr_type_translator;
      assert(7 % 1 === 0);HEAP8[($11)]=HEAP8[(((5388332)|0))];HEAP8[(($11)+(1))]=HEAP8[((((5388332)|0))+(1))];HEAP8[(($11)+(2))]=HEAP8[((((5388332)|0))+(2))];HEAP8[(($11)+(3))]=HEAP8[((((5388332)|0))+(3))];HEAP8[(($11)+(4))]=HEAP8[((((5388332)|0))+(4))];HEAP8[(($11)+(5))]=HEAP8[((((5388332)|0))+(5))];HEAP8[(($11)+(6))]=HEAP8[((((5388332)|0))+(6))];
      var $12=$cfg;
      var $lowpassfreq=(($12+36)|0);
      var $13=HEAP32[(($lowpassfreq)>>2)];
      var $conv=(($13)|0);
      var $div=($conv)/(100);
      var $add=($div)+(0.5);
      var $cmp=$add > 255;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 255;label = 5; break;
    case 4: 
      var $14=$cfg;
      var $lowpassfreq5=(($14+36)|0);
      var $15=HEAP32[(($lowpassfreq5)>>2)];
      var $conv6=(($15)|0);
      var $div7=($conv6)/(100);
      var $add8=($div7)+(0.5);
      var $cond = $add8;label = 5; break;
    case 5: 
      var $cond;
      var $conv9=($cond>=0 ? Math.floor($cond) : Math.ceil($cond));
      $nLowpass=$conv9;
      $nPeakSignalAmplitude=0;
      $nRadioReplayGain=0;
      $nAudiophileReplayGain=0;
      var $16=$cfg;
      var $noise_shaping=(($16+12)|0);
      var $17=HEAP32[(($noise_shaping)>>2)];
      var $conv10=(($17) & 255);
      $nNoiseShaping=$conv10;
      $nStereoMode=0;
      $bNonOptimal=0;
      $nSourceFreq=0;
      $nMisc=0;
      $nMusicCRC=0;
      $bExpNPsyTune=1;
      var $18=$cfg;
      var $use_safe_joint_stereo=(($18+80)|0);
      var $19=HEAP32[(($use_safe_joint_stereo)>>2)];
      var $cmp11=(($19)|0)!=0;
      var $conv12=(($cmp11)&1);
      var $conv13=(($conv12) & 255);
      $bSafeJoint=$conv13;
      $bNoGapMore=0;
      $bNoGapPrevious=0;
      var $20=$gfp_addr;
      var $nogap_total=(($20+72)|0);
      var $21=HEAP32[(($nogap_total)>>2)];
      $nNoGapCount=$21;
      var $22=$gfp_addr;
      var $nogap_current=(($22+76)|0);
      var $23=HEAP32[(($nogap_current)>>2)];
      $nNoGapCurr=$23;
      var $24=$cfg;
      var $ATHtype=(($24+192)|0);
      var $25=HEAP32[(($ATHtype)>>2)];
      var $conv14=(($25) & 255);
      $nAthType=$conv14;
      $nFlags=0;
      var $26=$cfg;
      var $vbr=(($26+88)|0);
      var $27=HEAP32[(($vbr)>>2)];
      if ((($27)|0)==3) {
        label = 6; break;
      }
      else if ((($27)|0)==0) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 6: 
      var $28=$cfg;
      var $vbr_avg_bitrate_kbps=(($28+92)|0);
      var $29=HEAP32[(($vbr_avg_bitrate_kbps)>>2)];
      $nABRBitrate=$29;
      label = 9; break;
    case 7: 
      var $30=$cfg;
      var $avg_bitrate=(($30+104)|0);
      var $31=HEAP32[(($avg_bitrate)>>2)];
      $nABRBitrate=$31;
      label = 9; break;
    case 8: 
      var $32=$cfg;
      var $vbr_min_bitrate_index=(($32+96)|0);
      var $33=HEAP32[(($vbr_min_bitrate_index)>>2)];
      var $34=$cfg;
      var $version=(($34)|0);
      var $35=HEAP32[(($version)>>2)];
      var $arrayidx=((5348820+($35<<6))|0);
      var $arrayidx16=(($arrayidx+($33<<2))|0);
      var $36=HEAP32[(($arrayidx16)>>2)];
      $nABRBitrate=$36;
      label = 9; break;
    case 9: 
      var $37=$cfg;
      var $vbr17=(($37+88)|0);
      var $38=HEAP32[(($vbr17)>>2)];
      var $cmp18=(($38)>>>0) < 7;
      if ($cmp18) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$cfg;
      var $vbr20=(($39+88)|0);
      var $40=HEAP32[(($vbr20)>>2)];
      var $arrayidx21=(($vbr_type_translator+$40)|0);
      var $41=HEAP8[($arrayidx21)];
      $nVBR=$41;
      label = 12; break;
    case 11: 
      $nVBR=0;
      label = 12; break;
    case 12: 
      var $42=$nRevision;
      var $conv22=(($42)&255);
      var $mul23=((($conv22<<4))&-1);
      var $43=$nVBR;
      var $conv24=(($43)&255);
      var $add25=((($mul23)+($conv24))|0);
      var $conv26=(($add25) & 255);
      $nRevMethod=$conv26;
      var $44=$cfg;
      var $findReplayGain=(($44+112)|0);
      var $45=HEAP32[(($findReplayGain)>>2)];
      var $tobool=(($45)|0)!=0;
      if ($tobool) { label = 13; break; } else { label = 21; break; }
    case 13: 
      var $46=$gfc;
      var $ov_rpg=(($46+85676)|0);
      var $RadioGain28=(($ov_rpg+8)|0);
      var $47=HEAP32[(($RadioGain28)>>2)];
      $RadioGain=$47;
      var $48=$RadioGain;
      var $cmp29=(($48)|0) > 510;
      if ($cmp29) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $RadioGain=510;
      label = 15; break;
    case 15: 
      var $49=$RadioGain;
      var $cmp33=(($49)|0) < -510;
      if ($cmp33) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $RadioGain=-510;
      label = 17; break;
    case 17: 
      $nRadioReplayGain=8192;
      var $50=$nRadioReplayGain;
      var $conv37=(($50)&65535);
      var $or=$conv37 | 3072;
      var $conv38=(($or) & 65535);
      $nRadioReplayGain=$conv38;
      var $51=$RadioGain;
      var $cmp39=(($51)|0) >= 0;
      if ($cmp39) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $52=$RadioGain;
      var $53=$nRadioReplayGain;
      var $conv42=(($53)&65535);
      var $or43=$conv42 | $52;
      var $conv44=(($or43) & 65535);
      $nRadioReplayGain=$conv44;
      label = 20; break;
    case 19: 
      var $54=$nRadioReplayGain;
      var $conv46=(($54)&65535);
      var $or47=$conv46 | 512;
      var $conv48=(($or47) & 65535);
      $nRadioReplayGain=$conv48;
      var $55=$RadioGain;
      var $sub49=(((-$55))|0);
      var $56=$nRadioReplayGain;
      var $conv50=(($56)&65535);
      var $or51=$conv50 | $sub49;
      var $conv52=(($or51) & 65535);
      $nRadioReplayGain=$conv52;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $57=$cfg;
      var $findPeakSample=(($57+116)|0);
      var $58=HEAP32[(($findPeakSample)>>2)];
      var $tobool55=(($58)|0)!=0;
      if ($tobool55) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $59=$gfc;
      var $ov_rpg57=(($59+85676)|0);
      var $PeakSample=(($ov_rpg57+4)|0);
      var $60=HEAPF32[(($PeakSample)>>2)];
      var $conv58=$60;
      var $div59=($conv58)/(32767);
      var $61=Math.pow(2, 23);
      var $mul60=($div59)*($61);
      var $add61=($mul60)+(0.5);
      var $conv62=(($add61)&-1);
      var $call63=Math.abs($conv62);
      $nPeakSignalAmplitude=$call63;
      label = 23; break;
    case 23: 
      var $62=$nNoGapCount;
      var $cmp65=(($62)|0)!=-1;
      if ($cmp65) { label = 24; break; } else { label = 29; break; }
    case 24: 
      var $63=$nNoGapCurr;
      var $cmp68=(($63)|0) > 0;
      if ($cmp68) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $bNoGapPrevious=1;
      label = 26; break;
    case 26: 
      var $64=$nNoGapCurr;
      var $65=$nNoGapCount;
      var $sub72=((($65)-(1))|0);
      var $cmp73=(($64)|0) < (($sub72)|0);
      if ($cmp73) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $bNoGapMore=1;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $66=$nAthType;
      var $conv78=(($66)&255);
      var $67=$bExpNPsyTune;
      var $conv79=(($67)&255);
      var $shl=$conv79 << 4;
      var $add80=((($conv78)+($shl))|0);
      var $68=$bSafeJoint;
      var $conv81=(($68)&255);
      var $shl82=$conv81 << 5;
      var $add83=((($add80)+($shl82))|0);
      var $69=$bNoGapMore;
      var $conv84=(($69)&255);
      var $shl85=$conv84 << 6;
      var $add86=((($add83)+($shl85))|0);
      var $70=$bNoGapPrevious;
      var $conv87=(($70)&255);
      var $shl88=$conv87 << 7;
      var $add89=((($add86)+($shl88))|0);
      var $conv90=(($add89) & 255);
      $nFlags=$conv90;
      var $71=$nQuality;
      var $cmp91=(($71)|0) < 0;
      if ($cmp91) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $nQuality=0;
      label = 31; break;
    case 31: 
      var $72=$cfg;
      var $mode=(($72+164)|0);
      var $73=HEAP32[(($mode)>>2)];
      if ((($73)|0)==3) {
        label = 32; break;
      }
      else if ((($73)|0)==0) {
        label = 33; break;
      }
      else if ((($73)|0)==2) {
        label = 34; break;
      }
      else if ((($73)|0)==1) {
        label = 35; break;
      }
      else if ((($73)|0)==4) {
        label = 39; break;
      }
      else {
      label = 40; break;
      }
      
    case 32: 
      $nStereoMode=0;
      label = 41; break;
    case 33: 
      $nStereoMode=1;
      label = 41; break;
    case 34: 
      $nStereoMode=2;
      label = 41; break;
    case 35: 
      var $74=$cfg;
      var $force_ms=(($74+64)|0);
      var $75=HEAP32[(($force_ms)>>2)];
      var $tobool99=(($75)|0)!=0;
      if ($tobool99) { label = 36; break; } else { label = 37; break; }
    case 36: 
      $nStereoMode=4;
      label = 38; break;
    case 37: 
      $nStereoMode=3;
      label = 38; break;
    case 38: 
      label = 41; break;
    case 39: 
      label = 40; break;
    case 40: 
      $nStereoMode=7;
      label = 41; break;
    case 41: 
      var $76=$cfg;
      var $samplerate_in=(($76+44)|0);
      var $77=HEAP32[(($samplerate_in)>>2)];
      var $cmp106=(($77)|0) <= 32000;
      if ($cmp106) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $nSourceFreq=0;
      label = 50; break;
    case 43: 
      var $78=$cfg;
      var $samplerate_in110=(($78+44)|0);
      var $79=HEAP32[(($samplerate_in110)>>2)];
      var $cmp111=(($79)|0)==48000;
      if ($cmp111) { label = 44; break; } else { label = 45; break; }
    case 44: 
      $nSourceFreq=2;
      label = 49; break;
    case 45: 
      var $80=$cfg;
      var $samplerate_in115=(($80+44)|0);
      var $81=HEAP32[(($samplerate_in115)>>2)];
      var $cmp116=(($81)|0) > 48000;
      if ($cmp116) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $nSourceFreq=3;
      label = 48; break;
    case 47: 
      $nSourceFreq=1;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $82=$cfg;
      var $short_blocks=(($82+168)|0);
      var $83=HEAP32[(($short_blocks)>>2)];
      var $cmp123=(($83)|0)==3;
      if ($cmp123) { label = 60; break; } else { label = 51; break; }
    case 51: 
      var $84=$cfg;
      var $short_blocks125=(($84+168)|0);
      var $85=HEAP32[(($short_blocks125)>>2)];
      var $cmp126=(($85)|0)==2;
      if ($cmp126) { label = 60; break; } else { label = 52; break; }
    case 52: 
      var $86=$cfg;
      var $lowpassfreq129=(($86+36)|0);
      var $87=HEAP32[(($lowpassfreq129)>>2)];
      var $cmp130=(($87)|0)==-1;
      if ($cmp130) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $88=$cfg;
      var $highpassfreq=(($88+40)|0);
      var $89=HEAP32[(($highpassfreq)>>2)];
      var $cmp132=(($89)|0)==-1;
      if ($cmp132) { label = 60; break; } else { label = 54; break; }
    case 54: 
      var $90=$cfg;
      var $disable_reservoir=(($90+128)|0);
      var $91=HEAP32[(($disable_reservoir)>>2)];
      var $tobool135=(($91)|0)!=0;
      if ($tobool135) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $92=$cfg;
      var $avg_bitrate137=(($92+104)|0);
      var $93=HEAP32[(($avg_bitrate137)>>2)];
      var $cmp138=(($93)|0) < 320;
      if ($cmp138) { label = 60; break; } else { label = 56; break; }
    case 56: 
      var $94=$cfg;
      var $noATH=(($94+204)|0);
      var $95=HEAP32[(($noATH)>>2)];
      var $tobool141=(($95)|0)!=0;
      if ($tobool141) { label = 60; break; } else { label = 57; break; }
    case 57: 
      var $96=$cfg;
      var $ATHonly=(($96+196)|0);
      var $97=HEAP32[(($ATHonly)>>2)];
      var $tobool143=(($97)|0)!=0;
      if ($tobool143) { label = 60; break; } else { label = 58; break; }
    case 58: 
      var $98=$nAthType;
      var $conv145=(($98)&255);
      var $cmp146=(($conv145)|0)==0;
      if ($cmp146) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $99=$cfg;
      var $samplerate_in149=(($99+44)|0);
      var $100=HEAP32[(($samplerate_in149)>>2)];
      var $cmp150=(($100)|0) <= 32000;
      if ($cmp150) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $bNonOptimal=1;
      label = 61; break;
    case 61: 
      var $101=$nNoiseShaping;
      var $conv154=(($101)&255);
      var $102=$nStereoMode;
      var $conv155=(($102)&255);
      var $shl156=$conv155 << 2;
      var $add157=((($conv154)+($shl156))|0);
      var $103=$bNonOptimal;
      var $shl158=$103 << 5;
      var $add159=((($add157)+($shl158))|0);
      var $104=$nSourceFreq;
      var $conv160=(($104)&255);
      var $shl161=$conv160 << 6;
      var $add162=((($add159)+($shl161))|0);
      var $conv163=(($add162) & 255);
      $nMisc=$conv163;
      var $105=$gfc;
      var $nMusicCRC164=(($105+85748)|0);
      var $106=HEAP16[(($nMusicCRC164)>>1)];
      $nMusicCRC=$106;
      var $107=$nBytesWritten;
      var $108=$pbtStreamBuffer_addr;
      var $arrayidx165=(($108+$107)|0);
      var $109=$nQuality;
      _CreateI4($arrayidx165, $109);
      var $110=$nBytesWritten;
      var $add166=((($110)+(4))|0);
      $nBytesWritten=$add166;
      var $111=$nBytesWritten;
      var $112=$pbtStreamBuffer_addr;
      var $arrayidx167=(($112+$111)|0);
      var $113=$szVersion;
      var $call168=_strncpy($arrayidx167, $113, 9);
      var $114=$nBytesWritten;
      var $add169=((($114)+(9))|0);
      $nBytesWritten=$add169;
      var $115=$nRevMethod;
      var $116=$nBytesWritten;
      var $117=$pbtStreamBuffer_addr;
      var $arrayidx170=(($117+$116)|0);
      HEAP8[($arrayidx170)]=$115;
      var $118=$nBytesWritten;
      var $inc=((($118)+(1))|0);
      $nBytesWritten=$inc;
      var $119=$nLowpass;
      var $120=$nBytesWritten;
      var $121=$pbtStreamBuffer_addr;
      var $arrayidx171=(($121+$120)|0);
      HEAP8[($arrayidx171)]=$119;
      var $122=$nBytesWritten;
      var $inc172=((($122)+(1))|0);
      $nBytesWritten=$inc172;
      var $123=$nBytesWritten;
      var $124=$pbtStreamBuffer_addr;
      var $arrayidx173=(($124+$123)|0);
      var $125=$nPeakSignalAmplitude;
      _CreateI4($arrayidx173, $125);
      var $126=$nBytesWritten;
      var $add174=((($126)+(4))|0);
      $nBytesWritten=$add174;
      var $127=$nBytesWritten;
      var $128=$pbtStreamBuffer_addr;
      var $arrayidx175=(($128+$127)|0);
      var $129=$nRadioReplayGain;
      var $conv176=(($129)&65535);
      _CreateI2($arrayidx175, $conv176);
      var $130=$nBytesWritten;
      var $add177=((($130)+(2))|0);
      $nBytesWritten=$add177;
      var $131=$nBytesWritten;
      var $132=$pbtStreamBuffer_addr;
      var $arrayidx178=(($132+$131)|0);
      var $133=$nAudiophileReplayGain;
      var $conv179=(($133)&65535);
      _CreateI2($arrayidx178, $conv179);
      var $134=$nBytesWritten;
      var $add180=((($134)+(2))|0);
      $nBytesWritten=$add180;
      var $135=$nFlags;
      var $136=$nBytesWritten;
      var $137=$pbtStreamBuffer_addr;
      var $arrayidx181=(($137+$136)|0);
      HEAP8[($arrayidx181)]=$135;
      var $138=$nBytesWritten;
      var $inc182=((($138)+(1))|0);
      $nBytesWritten=$inc182;
      var $139=$nABRBitrate;
      var $cmp183=(($139)|0) >= 255;
      if ($cmp183) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $140=$nBytesWritten;
      var $141=$pbtStreamBuffer_addr;
      var $arrayidx186=(($141+$140)|0);
      HEAP8[($arrayidx186)]=-1;
      label = 64; break;
    case 63: 
      var $142=$nABRBitrate;
      var $conv188=(($142) & 255);
      var $143=$nBytesWritten;
      var $144=$pbtStreamBuffer_addr;
      var $arrayidx189=(($144+$143)|0);
      HEAP8[($arrayidx189)]=$conv188;
      label = 64; break;
    case 64: 
      var $145=$nBytesWritten;
      var $inc191=((($145)+(1))|0);
      $nBytesWritten=$inc191;
      var $146=$enc_delay;
      var $shr=$146 >> 4;
      var $conv192=(($shr) & 255);
      var $147=$nBytesWritten;
      var $148=$pbtStreamBuffer_addr;
      var $arrayidx193=(($148+$147)|0);
      HEAP8[($arrayidx193)]=$conv192;
      var $149=$enc_delay;
      var $shl194=$149 << 4;
      var $150=$enc_padding;
      var $shr195=$150 >> 8;
      var $add196=((($shl194)+($shr195))|0);
      var $conv197=(($add196) & 255);
      var $151=$nBytesWritten;
      var $add198=((($151)+(1))|0);
      var $152=$pbtStreamBuffer_addr;
      var $arrayidx199=(($152+$add198)|0);
      HEAP8[($arrayidx199)]=$conv197;
      var $153=$enc_padding;
      var $conv200=(($153) & 255);
      var $154=$nBytesWritten;
      var $add201=((($154)+(2))|0);
      var $155=$pbtStreamBuffer_addr;
      var $arrayidx202=(($155+$add201)|0);
      HEAP8[($arrayidx202)]=$conv200;
      var $156=$nBytesWritten;
      var $add203=((($156)+(3))|0);
      $nBytesWritten=$add203;
      var $157=$nMisc;
      var $158=$nBytesWritten;
      var $159=$pbtStreamBuffer_addr;
      var $arrayidx204=(($159+$158)|0);
      HEAP8[($arrayidx204)]=$157;
      var $160=$nBytesWritten;
      var $inc205=((($160)+(1))|0);
      $nBytesWritten=$inc205;
      var $161=$nBytesWritten;
      var $inc206=((($161)+(1))|0);
      $nBytesWritten=$inc206;
      var $162=$pbtStreamBuffer_addr;
      var $arrayidx207=(($162+$161)|0);
      HEAP8[($arrayidx207)]=0;
      var $163=$nBytesWritten;
      var $164=$pbtStreamBuffer_addr;
      var $arrayidx208=(($164+$163)|0);
      var $165=$cfg;
      var $preset=(($165+84)|0);
      var $166=HEAP32[(($preset)>>2)];
      _CreateI2($arrayidx208, $166);
      var $167=$nBytesWritten;
      var $add209=((($167)+(2))|0);
      $nBytesWritten=$add209;
      var $168=$nBytesWritten;
      var $169=$pbtStreamBuffer_addr;
      var $arrayidx210=(($169+$168)|0);
      var $170=$nMusicLength_addr;
      _CreateI4($arrayidx210, $170);
      var $171=$nBytesWritten;
      var $add211=((($171)+(4))|0);
      $nBytesWritten=$add211;
      var $172=$nBytesWritten;
      var $173=$pbtStreamBuffer_addr;
      var $arrayidx212=(($173+$172)|0);
      var $174=$nMusicCRC;
      var $conv213=(($174)&65535);
      _CreateI2($arrayidx212, $conv213);
      var $175=$nBytesWritten;
      var $add214=((($175)+(2))|0);
      $nBytesWritten=$add214;
      $i=0;
      label = 65; break;
    case 65: 
      var $176=$i;
      var $177=$nBytesWritten;
      var $cmp215=(($176)|0) < (($177)|0);
      if ($cmp215) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $178=$i;
      var $179=$pbtStreamBuffer_addr;
      var $arrayidx217=(($179+$178)|0);
      var $180=HEAP8[($arrayidx217)];
      var $conv218=(($180)&255);
      var $181=$crc_addr;
      var $call219=_CRC_update_lookup($conv218, $181);
      $crc_addr=$call219;
      label = 67; break;
    case 67: 
      var $182=$i;
      var $inc220=((($182)+(1))|0);
      $i=$inc220;
      label = 65; break;
    case 68: 
      var $183=$nBytesWritten;
      var $184=$pbtStreamBuffer_addr;
      var $arrayidx221=(($184+$183)|0);
      var $185=$crc_addr;
      var $conv222=(($185)&65535);
      _CreateI2($arrayidx221, $conv222);
      var $186=$nBytesWritten;
      var $add223=((($186)+(2))|0);
      $nBytesWritten=$add223;
      var $187=$nBytesWritten;
      STACKTOP = __stackBase__;
      return $187;
    default: assert(0, "bad label: " + label);
  }

}
_PutLameVBR["X"]=1;

function _PutVbrTag($gfp, $fpStream) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2880)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $fpStream_addr;
      var $gfc;
      var $lFileSize;
      var $id3v2TagSize;
      var $nbytes;
      var $buffer=__stackBase__;
      $gfp_addr=$gfp;
      $fpStream_addr=$fpStream;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $VBR_seek_table=(($2+85756)|0);
      var $pos=(($VBR_seek_table+12)|0);
      var $3=HEAP32[(($pos)>>2)];
      var $cmp=(($3)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 15; break;
    case 4: 
      var $4=$fpStream_addr;
      var $call=_fseek($4, 0, 2);
      var $5=$fpStream_addr;
      var $call1=_ftell($5);
      $lFileSize=$call1;
      var $6=$lFileSize;
      var $cmp2=(($6)|0)==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 15; break;
    case 6: 
      var $7=$fpStream_addr;
      var $call5=_skipId3v2($7);
      $id3v2TagSize=$call5;
      var $8=$id3v2TagSize;
      var $cmp6=(($8)|0) < 0;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$id3v2TagSize;
      $retval=$9;
      label = 15; break;
    case 8: 
      var $10=$fpStream_addr;
      var $11=$id3v2TagSize;
      var $call9=_fseek($10, $11, 0);
      var $12=$gfp_addr;
      var $arraydecay=(($buffer)|0);
      var $call10=_lame_get_lametag_frame($12, $arraydecay, 2880);
      $nbytes=$call10;
      var $13=$nbytes;
      var $cmp11=(($13)>>>0) > 2880;
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=-1;
      label = 15; break;
    case 10: 
      var $14=$nbytes;
      var $cmp14=(($14)>>>0) < 1;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 15; break;
    case 12: 
      var $arraydecay17=(($buffer)|0);
      var $15=$nbytes;
      var $16=$fpStream_addr;
      var $call18=_fwrite($arraydecay17, $15, 1, $16);
      var $cmp19=(($call18)|0)!=1;
      if ($cmp19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=-1;
      label = 15; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }

}
_PutVbrTag["X"]=1;

function _skipId3v2($fpStream) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $fpStream_addr;
      var $nbytes;
      var $id3v2TagSize;
      var $id3v2Header=__stackBase__;
      $fpStream_addr=$fpStream;
      var $0=$fpStream_addr;
      var $call=_fseek($0, 0, 0);
      var $cmp=(($call)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-2;
      label = 10; break;
    case 4: 
      var $arraydecay=(($id3v2Header)|0);
      var $1=$fpStream_addr;
      var $call1=_fread($arraydecay, 1, 10, $1);
      $nbytes=$call1;
      var $2=$nbytes;
      var $cmp2=(($2)|0)!=10;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-3;
      label = 10; break;
    case 6: 
      var $arraydecay5=(($id3v2Header)|0);
      var $call6=_strncmp($arraydecay5, ((5387656)|0), 3);
      var $tobool=(($call6)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $arrayidx=(($id3v2Header+6)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3)&255);
      var $and=$conv & 127;
      var $shl=$and << 21;
      var $arrayidx8=(($id3v2Header+7)|0);
      var $4=HEAP8[($arrayidx8)];
      var $conv9=(($4)&255);
      var $and10=$conv9 & 127;
      var $shl11=$and10 << 14;
      var $or=$shl | $shl11;
      var $arrayidx12=(($id3v2Header+8)|0);
      var $5=HEAP8[($arrayidx12)];
      var $conv13=(($5)&255);
      var $and14=$conv13 & 127;
      var $shl15=$and14 << 7;
      var $or16=$or | $shl15;
      var $arrayidx17=(($id3v2Header+9)|0);
      var $6=HEAP8[($arrayidx17)];
      var $conv18=(($6)&255);
      var $and19=$conv18 & 127;
      var $or20=$or16 | $and19;
      var $add=((($or20)+(10))|0);
      $id3v2TagSize=$add;
      label = 9; break;
    case 8: 
      $id3v2TagSize=0;
      label = 9; break;
    case 9: 
      var $7=$id3v2TagSize;
      $retval=$7;
      label = 10; break;
    case 10: 
      var $8=$retval;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + label);
  }

}
_skipId3v2["X"]=1;

function _getframebits($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $eov;
      var $bit_rate;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$eov;
      var $bitrate_index=(($2+704)|0);
      var $3=HEAP32[(($bitrate_index)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$eov;
      var $bitrate_index2=(($4+704)|0);
      var $5=HEAP32[(($bitrate_index2)>>2)];
      var $6=$cfg;
      var $version=(($6)|0);
      var $7=HEAP32[(($version)>>2)];
      var $arrayidx=((5348820+($7<<6))|0);
      var $arrayidx3=(($arrayidx+($5<<2))|0);
      var $8=HEAP32[(($arrayidx3)>>2)];
      $bit_rate=$8;
      label = 5; break;
    case 4: 
      var $9=$cfg;
      var $avg_bitrate=(($9+104)|0);
      var $10=HEAP32[(($avg_bitrate)>>2)];
      $bit_rate=$10;
      label = 5; break;
    case 5: 
      var $11=$cfg;
      var $12=$bit_rate;
      var $13=$eov;
      var $padding=(($13+712)|0);
      var $14=HEAP32[(($padding)>>2)];
      var $call=_calcFrameLength($11, $12, $14);

      return $call;
    default: assert(0, "bad label: " + label);
  }

}


function _CRC_update($value, $crc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $value_addr;
      var $crc_addr;
      var $i;
      $value_addr=$value;
      $crc_addr=$crc;
      var $0=$value_addr;
      var $shl=$0 << 8;
      $value_addr=$shl;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)|0) < 8;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$value_addr;
      var $shl1=$2 << 1;
      $value_addr=$shl1;
      var $3=$crc_addr;
      var $shl2=$3 << 1;
      $crc_addr=$shl2;
      var $4=$crc_addr;
      var $5=$value_addr;
      var $xor=$4 ^ $5;
      var $and=$xor & 65536;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$crc_addr;
      var $xor3=$6 ^ 32773;
      $crc_addr=$xor3;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $8=$crc_addr;

      return $8;
    default: assert(0, "bad label: " + label);
  }

}


function _putbits_noheaders($gfc, $val, $j) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $val_addr;
      var $j_addr;
      var $bs;
      var $k;
      $gfc_addr=$gfc;
      $val_addr=$val;
      $j_addr=$j;
      var $0=$gfc_addr;
      var $bs1=(($0+284)|0);
      $bs=$bs1;
      label = 3; break;
    case 3: 
      var $1=$j_addr;
      var $cmp=(($1)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $2=$bs;
      var $buf_bit_idx=(($2+16)|0);
      var $3=HEAP32[(($buf_bit_idx)>>2)];
      var $cmp2=(($3)|0)==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$bs;
      var $buf_bit_idx3=(($4+16)|0);
      HEAP32[(($buf_bit_idx3)>>2)]=8;
      var $5=$bs;
      var $buf_byte_idx=(($5+12)|0);
      var $6=HEAP32[(($buf_byte_idx)>>2)];
      var $inc=((($6)+(1))|0);
      HEAP32[(($buf_byte_idx)>>2)]=$inc;
      var $7=$bs;
      var $buf_byte_idx4=(($7+12)|0);
      var $8=HEAP32[(($buf_byte_idx4)>>2)];
      var $9=$bs;
      var $buf=(($9)|0);
      var $10=HEAP32[(($buf)>>2)];
      var $arrayidx=(($10+$8)|0);
      HEAP8[($arrayidx)]=0;
      label = 6; break;
    case 6: 
      var $11=$j_addr;
      var $12=$bs;
      var $buf_bit_idx5=(($12+16)|0);
      var $13=HEAP32[(($buf_bit_idx5)>>2)];
      var $cmp6=(($11)|0) < (($13)|0);
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$j_addr;
      var $cond = $14;label = 9; break;
    case 8: 
      var $15=$bs;
      var $buf_bit_idx7=(($15+16)|0);
      var $16=HEAP32[(($buf_bit_idx7)>>2)];
      var $cond = $16;label = 9; break;
    case 9: 
      var $cond;
      $k=$cond;
      var $17=$k;
      var $18=$j_addr;
      var $sub=((($18)-($17))|0);
      $j_addr=$sub;
      var $19=$k;
      var $20=$bs;
      var $buf_bit_idx8=(($20+16)|0);
      var $21=HEAP32[(($buf_bit_idx8)>>2)];
      var $sub9=((($21)-($19))|0);
      HEAP32[(($buf_bit_idx8)>>2)]=$sub9;
      var $22=$val_addr;
      var $23=$j_addr;
      var $shr=$22 >> (($23)|0);
      var $24=$bs;
      var $buf_bit_idx10=(($24+16)|0);
      var $25=HEAP32[(($buf_bit_idx10)>>2)];
      var $shl=$shr << $25;
      var $26=$bs;
      var $buf_byte_idx11=(($26+12)|0);
      var $27=HEAP32[(($buf_byte_idx11)>>2)];
      var $28=$bs;
      var $buf12=(($28)|0);
      var $29=HEAP32[(($buf12)>>2)];
      var $arrayidx13=(($29+$27)|0);
      var $30=HEAP8[($arrayidx13)];
      var $conv=(($30)&255);
      var $or=$conv | $shl;
      var $conv14=(($or) & 255);
      HEAP8[($arrayidx13)]=$conv14;
      var $31=$k;
      var $32=$bs;
      var $totbit=(($32+8)|0);
      var $33=HEAP32[(($totbit)>>2)];
      var $add=((($33)+($31))|0);
      HEAP32[(($totbit)>>2)]=$add;
      label = 3; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_putbits_noheaders["X"]=1;

function _get_max_frame_buffer_size_by_constraint($cfg, $constraint) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cfg_addr;
      var $constraint_addr;
      var $maxmp3buf;
      var $max_kbps;
      $cfg_addr=$cfg;
      $constraint_addr=$constraint;
      $maxmp3buf=0;
      var $0=$cfg_addr;
      var $avg_bitrate=(($0+104)|0);
      var $1=HEAP32[(($avg_bitrate)>>2)];
      var $cmp=(($1)|0) > 320;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$constraint_addr;
      var $cmp1=(($2)|0)==1;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$cfg_addr;
      var $4=$cfg_addr;
      var $avg_bitrate3=(($4+104)|0);
      var $5=HEAP32[(($avg_bitrate3)>>2)];
      var $call=_calcFrameLength($3, $5, 0);
      $maxmp3buf=$call;
      label = 6; break;
    case 5: 
      var $6=$cfg_addr;
      var $version=(($6)|0);
      var $7=HEAP32[(($version)>>2)];
      var $add=((($7)+(1))|0);
      var $mul=((($add)*(7680))&-1);
      $maxmp3buf=$mul;
      label = 6; break;
    case 6: 
      label = 16; break;
    case 7: 
      var $8=$cfg_addr;
      var $samplerate_out=(($8+48)|0);
      var $9=HEAP32[(($samplerate_out)>>2)];
      var $cmp5=(($9)|0) < 16000;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$cfg_addr;
      var $version7=(($10)|0);
      var $11=HEAP32[(($version7)>>2)];
      var $arrayidx=((5348820+($11<<6))|0);
      var $arrayidx8=(($arrayidx+32)|0);
      var $12=HEAP32[(($arrayidx8)>>2)];
      $max_kbps=$12;
      label = 10; break;
    case 9: 
      var $13=$cfg_addr;
      var $version10=(($13)|0);
      var $14=HEAP32[(($version10)>>2)];
      var $arrayidx11=((5348820+($14<<6))|0);
      var $arrayidx12=(($arrayidx11+56)|0);
      var $15=HEAP32[(($arrayidx12)>>2)];
      $max_kbps=$15;
      label = 10; break;
    case 10: 
      var $16=$constraint_addr;
      if ((($16)|0)==0) {
        label = 12; break;
      }
      else if ((($16)|0)==1) {
        label = 13; break;
      }
      else if ((($16)|0)==2) {
        label = 14; break;
      }
      else {
      label = 11; break;
      }
      
    case 11: 
      label = 12; break;
    case 12: 
      $maxmp3buf=11520;
      label = 15; break;
    case 13: 
      var $17=$cfg_addr;
      var $18=$max_kbps;
      var $call15=_calcFrameLength($17, $18, 0);
      $maxmp3buf=$call15;
      label = 15; break;
    case 14: 
      var $19=$cfg_addr;
      var $version17=(($19)|0);
      var $20=HEAP32[(($version17)>>2)];
      var $add18=((($20)+(1))|0);
      var $mul19=((($add18)*(7680))&-1);
      $maxmp3buf=$mul19;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $21=$maxmp3buf;

      return $21;
    default: assert(0, "bad label: " + label);
  }

}
_get_max_frame_buffer_size_by_constraint["X"]=1;

function _CRC_writeheader($gfc, $header) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $header_addr;
      var $cfg;
      var $crc;
      var $i;
      $gfc_addr=$gfc;
      $header_addr=$header;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      $crc=65535;
      var $1=$header_addr;
      var $arrayidx=(($1+2)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2)&255);
      var $3=$crc;
      var $call=_CRC_update($conv, $3);
      $crc=$call;
      var $4=$header_addr;
      var $arrayidx2=(($4+3)|0);
      var $5=HEAP8[($arrayidx2)];
      var $conv3=(($5)&255);
      var $6=$crc;
      var $call4=_CRC_update($conv3, $6);
      $crc=$call4;
      $i=6;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=$cfg;
      var $sideinfo_len=(($8+8)|0);
      var $9=HEAP32[(($sideinfo_len)>>2)];
      var $cmp=(($7)|0) < (($9)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $10=$i;
      var $11=$header_addr;
      var $arrayidx6=(($11+$10)|0);
      var $12=HEAP8[($arrayidx6)];
      var $conv7=(($12)&255);
      var $13=$crc;
      var $call8=_CRC_update($conv7, $13);
      $crc=$call8;
      label = 5; break;
    case 5: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $15=$crc;
      var $shr=$15 >> 8;
      var $conv9=(($shr) & 255);
      var $16=$header_addr;
      var $arrayidx10=(($16+4)|0);
      HEAP8[($arrayidx10)]=$conv9;
      var $17=$crc;
      var $and=$17 & 255;
      var $conv11=(($and) & 255);
      var $18=$header_addr;
      var $arrayidx12=(($18+5)|0);
      HEAP8[($arrayidx12)]=$conv11;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_CRC_writeheader["X"]=1;

function _compute_flushbits($gfc, $total_bytes_output) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $total_bytes_output_addr;
      var $cfg;
      var $esv;
      var $flushbits;
      var $remaining_headers;
      var $bitsPerFrame;
      var $last_ptr;
      var $first_ptr;
      $gfc_addr=$gfc;
      $total_bytes_output_addr=$total_bytes_output;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$esv;
      var $w_ptr=(($2+24308)|0);
      var $3=HEAP32[(($w_ptr)>>2)];
      $first_ptr=$3;
      var $4=$esv;
      var $h_ptr=(($4+24304)|0);
      var $5=HEAP32[(($h_ptr)>>2)];
      var $sub=((($5)-(1))|0);
      $last_ptr=$sub;
      var $6=$last_ptr;
      var $cmp=(($6)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $last_ptr=255;
      label = 4; break;
    case 4: 
      var $7=$last_ptr;
      var $8=$esv;
      var $header=(($8+12016)|0);
      var $arrayidx=(($header+($7)*(48))|0);
      var $write_timing=(($arrayidx)|0);
      var $9=HEAP32[(($write_timing)>>2)];
      var $10=$gfc_addr;
      var $bs=(($10+284)|0);
      var $totbit=(($bs+8)|0);
      var $11=HEAP32[(($totbit)>>2)];
      var $sub2=((($9)-($11))|0);
      $flushbits=$sub2;
      var $12=$flushbits;
      var $13=$total_bytes_output_addr;
      HEAP32[(($13)>>2)]=$12;
      var $14=$flushbits;
      var $cmp3=(($14)|0) >= 0;
      if ($cmp3) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $15=$last_ptr;
      var $add=((($15)+(1))|0);
      var $16=$first_ptr;
      var $sub5=((($add)-($16))|0);
      $remaining_headers=$sub5;
      var $17=$last_ptr;
      var $18=$first_ptr;
      var $cmp6=(($17)|0) < (($18)|0);
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$last_ptr;
      var $add8=((($19)+(1))|0);
      var $20=$first_ptr;
      var $sub9=((($add8)-($20))|0);
      var $add10=((($sub9)+(256))|0);
      $remaining_headers=$add10;
      label = 7; break;
    case 7: 
      var $21=$remaining_headers;
      var $mul=((($21<<3))&-1);
      var $22=$cfg;
      var $sideinfo_len=(($22+8)|0);
      var $23=HEAP32[(($sideinfo_len)>>2)];
      var $mul12=((($mul)*($23))&-1);
      var $24=$flushbits;
      var $sub13=((($24)-($mul12))|0);
      $flushbits=$sub13;
      label = 8; break;
    case 8: 
      var $25=$gfc_addr;
      var $call=_getframebits($25);
      $bitsPerFrame=$call;
      var $26=$bitsPerFrame;
      var $27=$flushbits;
      var $add15=((($27)+($26))|0);
      $flushbits=$add15;
      var $28=$bitsPerFrame;
      var $29=$total_bytes_output_addr;
      var $30=HEAP32[(($29)>>2)];
      var $add16=((($30)+($28))|0);
      HEAP32[(($29)>>2)]=$add16;
      var $31=$total_bytes_output_addr;
      var $32=HEAP32[(($31)>>2)];
      var $rem=((($32)|0))%(8);
      var $tobool=(($rem)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $33=$total_bytes_output_addr;
      var $34=HEAP32[(($33)>>2)];
      var $div=((((($34)|0))/(8))&-1);
      var $add18=((($div)+(1))|0);
      var $35=$total_bytes_output_addr;
      HEAP32[(($35)>>2)]=$add18;
      label = 11; break;
    case 10: 
      var $36=$total_bytes_output_addr;
      var $37=HEAP32[(($36)>>2)];
      var $div19=((((($37)|0))/(8))&-1);
      var $38=$total_bytes_output_addr;
      HEAP32[(($38)>>2)]=$div19;
      label = 11; break;
    case 11: 
      var $39=$gfc_addr;
      var $bs21=(($39+284)|0);
      var $buf_byte_idx=(($bs21+12)|0);
      var $40=HEAP32[(($buf_byte_idx)>>2)];
      var $add22=((($40)+(1))|0);
      var $41=$total_bytes_output_addr;
      var $42=HEAP32[(($41)>>2)];
      var $add23=((($42)+($add22))|0);
      HEAP32[(($41)>>2)]=$add23;
      var $43=$flushbits;
      var $cmp24=(($43)|0) < 0;
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $44=$gfc_addr;
      _lame_errorf($44, ((5386124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      var $45=$flushbits;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + label);
  }

}
_compute_flushbits["X"]=1;

function _flush_bitstream($gfc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $esv;
      var $l3_side;
      var $nbytes=__stackBase__;
      var $flushbits;
      var $last_ptr;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $sv_enc=(($0+27820)|0);
      $esv=$sv_enc;
      var $1=$esv;
      var $h_ptr=(($1+24304)|0);
      var $2=HEAP32[(($h_ptr)>>2)];
      var $sub=((($2)-(1))|0);
      $last_ptr=$sub;
      var $3=$last_ptr;
      var $cmp=(($3)|0)==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $last_ptr=255;
      label = 4; break;
    case 4: 
      var $4=$gfc_addr;
      var $l3_side1=(($4+304)|0);
      $l3_side=$l3_side1;
      var $5=$gfc_addr;
      var $call=_compute_flushbits($5, $nbytes);
      $flushbits=$call;
      var $cmp2=(($call)|0) < 0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $6=$gfc_addr;
      var $7=$flushbits;
      _drain_into_ancillary($6, $7);
      var $8=$esv;
      var $ResvSize=(($8+24316)|0);
      HEAP32[(($ResvSize)>>2)]=0;
      var $9=$l3_side;
      var $main_data_begin=(($9+21008)|0);
      HEAP32[(($main_data_begin)>>2)]=0;
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _drain_into_ancillary($gfc, $remainingBits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $remainingBits_addr;
      var $cfg;
      var $esv;
      var $i;
      var $version;
      $gfc_addr=$gfc;
      $remainingBits_addr=$remainingBits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$remainingBits_addr;
      var $cmp=(($2)|0) >= 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$gfc_addr;
      _putbits2($3, 76, 8);
      var $4=$remainingBits_addr;
      var $sub=((($4)-(8))|0);
      $remainingBits_addr=$sub;
      label = 4; break;
    case 4: 
      var $5=$remainingBits_addr;
      var $cmp2=(($5)|0) >= 8;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$gfc_addr;
      _putbits2($6, 65, 8);
      var $7=$remainingBits_addr;
      var $sub4=((($7)-(8))|0);
      $remainingBits_addr=$sub4;
      label = 6; break;
    case 6: 
      var $8=$remainingBits_addr;
      var $cmp6=(($8)|0) >= 8;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$gfc_addr;
      _putbits2($9, 77, 8);
      var $10=$remainingBits_addr;
      var $sub8=((($10)-(8))|0);
      $remainingBits_addr=$sub8;
      label = 8; break;
    case 8: 
      var $11=$remainingBits_addr;
      var $cmp10=(($11)|0) >= 8;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$gfc_addr;
      _putbits2($12, 69, 8);
      var $13=$remainingBits_addr;
      var $sub12=((($13)-(8))|0);
      $remainingBits_addr=$sub12;
      label = 10; break;
    case 10: 
      var $14=$remainingBits_addr;
      var $cmp14=(($14)|0) >= 32;
      if ($cmp14) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $call=_get_lame_short_version();
      $version=$call;
      var $15=$remainingBits_addr;
      var $cmp16=(($15)|0) >= 32;
      if ($cmp16) { label = 12; break; } else { label = 19; break; }
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $16=$i;
      var $17=$version;
      var $call18=_strlen($17);
      var $cmp19=(($16)|0) < (($call18)|0);
      if ($cmp19) { label = 14; break; } else { var $19 = 0;label = 15; break; }
    case 14: 
      var $18=$remainingBits_addr;
      var $cmp20=(($18)|0) >= 8;
      var $19 = $cmp20;label = 15; break;
    case 15: 
      var $19;
      if ($19) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $20=$remainingBits_addr;
      var $sub21=((($20)-(8))|0);
      $remainingBits_addr=$sub21;
      var $21=$gfc_addr;
      var $22=$i;
      var $23=$version;
      var $arrayidx=(($23+$22)|0);
      var $24=HEAP8[($arrayidx)];
      var $conv=(($24 << 24) >> 24);
      _putbits2($21, $conv, 8);
      label = 17; break;
    case 17: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 13; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $26=$remainingBits_addr;
      var $cmp25=(($26)|0) >= 1;
      if ($cmp25) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $27=$gfc_addr;
      var $28=$esv;
      var $ancillary_flag=(($28+24312)|0);
      var $29=HEAP32[(($ancillary_flag)>>2)];
      _putbits2($27, $29, 1);
      var $30=$cfg;
      var $disable_reservoir=(($30+128)|0);
      var $31=HEAP32[(($disable_reservoir)>>2)];
      var $tobool=(($31)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $32=$esv;
      var $ancillary_flag28=(($32+24312)|0);
      var $33=HEAP32[(($ancillary_flag28)>>2)];
      var $xor=$33 ^ $lnot_ext;
      HEAP32[(($ancillary_flag28)>>2)]=$xor;
      label = 23; break;
    case 23: 
      var $34=$remainingBits_addr;
      var $sub30=((($34)-(1))|0);
      $remainingBits_addr=$sub30;
      label = 21; break;
    case 24: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_drain_into_ancillary["X"]=1;

function _add_dummy_byte($gfc, $val, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $val_addr;
      var $n_addr;
      var $esv;
      var $i;
      $gfc_addr=$gfc;
      $val_addr=$val;
      $n_addr=$n;
      var $0=$gfc_addr;
      var $sv_enc=(($0+27820)|0);
      $esv=$sv_enc;
      label = 3; break;
    case 3: 
      var $1=$n_addr;
      var $dec=((($1)-(1))|0);
      $n_addr=$dec;
      var $cmp=(($1)>>>0) > 0;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $2=$gfc_addr;
      var $3=$val_addr;
      var $conv=(($3)&255);
      _putbits_noheaders($2, $conv, 8);
      $i=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $cmp1=(($4)|0) < 256;
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$i;
      var $6=$esv;
      var $header=(($6+12016)|0);
      var $arrayidx=(($header+($5)*(48))|0);
      var $write_timing=(($arrayidx)|0);
      var $7=HEAP32[(($write_timing)>>2)];
      var $add=((($7)+(8))|0);
      HEAP32[(($write_timing)>>2)]=$add;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 3; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _format_bitstream($gfc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $esv;
      var $bits;
      var $nbytes=__stackBase__;
      var $l3_side;
      var $bitsPerFrame;
      var $i;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      var $3=$gfc_addr;
      var $call=_getframebits($3);
      $bitsPerFrame=$call;
      var $4=$gfc_addr;
      var $5=$l3_side;
      var $resvDrain_pre=(($5+21016)|0);
      var $6=HEAP32[(($resvDrain_pre)>>2)];
      _drain_into_ancillary($4, $6);
      var $7=$gfc_addr;
      var $8=$bitsPerFrame;
      _encodeSideInfo2($7, $8);
      var $9=$cfg;
      var $sideinfo_len=(($9+8)|0);
      var $10=HEAP32[(($sideinfo_len)>>2)];
      var $mul=((($10<<3))&-1);
      $bits=$mul;
      var $11=$gfc_addr;
      var $call3=_writeMainData($11);
      var $12=$bits;
      var $add=((($12)+($call3))|0);
      $bits=$add;
      var $13=$gfc_addr;
      var $14=$l3_side;
      var $resvDrain_post=(($14+21020)|0);
      var $15=HEAP32[(($resvDrain_post)>>2)];
      _drain_into_ancillary($13, $15);
      var $16=$l3_side;
      var $resvDrain_post4=(($16+21020)|0);
      var $17=HEAP32[(($resvDrain_post4)>>2)];
      var $18=$bits;
      var $add5=((($18)+($17))|0);
      $bits=$add5;
      var $19=$bitsPerFrame;
      var $20=$bits;
      var $sub=((($19)-($20))|0);
      var $div=((((($sub)|0))/(8))&-1);
      var $21=$l3_side;
      var $main_data_begin=(($21+21008)|0);
      var $22=HEAP32[(($main_data_begin)>>2)];
      var $add6=((($22)+($div))|0);
      HEAP32[(($main_data_begin)>>2)]=$add6;
      var $23=$gfc_addr;
      var $call7=_compute_flushbits($23, $nbytes);
      var $24=$esv;
      var $ResvSize=(($24+24316)|0);
      var $25=HEAP32[(($ResvSize)>>2)];
      var $cmp=(($call7)|0)!=(($25)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $26=$gfc_addr;
      _lame_errorf($26, ((5387148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $27=$l3_side;
      var $main_data_begin8=(($27+21008)|0);
      var $28=HEAP32[(($main_data_begin8)>>2)];
      var $mul9=((($28<<3))&-1);
      var $29=$esv;
      var $ResvSize10=(($29+24316)|0);
      var $30=HEAP32[(($ResvSize10)>>2)];
      var $cmp11=(($mul9)|0)!=(($30)|0);
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $31=$gfc_addr;
      var $32=$l3_side;
      var $main_data_begin13=(($32+21008)|0);
      var $33=HEAP32[(($main_data_begin13)>>2)];
      var $mul14=((($33<<3))&-1);
      var $34=$esv;
      var $ResvSize15=(($34+24316)|0);
      var $35=HEAP32[(($ResvSize15)>>2)];
      var $36=$l3_side;
      var $resvDrain_post16=(($36+21020)|0);
      var $37=HEAP32[(($resvDrain_post16)>>2)];
      var $38=$l3_side;
      var $resvDrain_pre17=(($38+21016)|0);
      var $39=HEAP32[(($resvDrain_pre17)>>2)];
      var $40=$cfg;
      var $sideinfo_len18=(($40+8)|0);
      var $41=HEAP32[(($sideinfo_len18)>>2)];
      var $mul19=((($41<<3))&-1);
      var $42=$bits;
      var $43=$l3_side;
      var $resvDrain_post20=(($43+21020)|0);
      var $44=HEAP32[(($resvDrain_post20)>>2)];
      var $sub21=((($42)-($44))|0);
      var $45=$cfg;
      var $sideinfo_len22=(($45+8)|0);
      var $46=HEAP32[(($sideinfo_len22)>>2)];
      var $mul23=((($46<<3))&-1);
      var $sub24=((($sub21)-($mul23))|0);
      var $47=$bits;
      var $48=$bits;
      var $rem=((($48)|0))%(8);
      var $49=$bitsPerFrame;
      _lame_errorf($31, ((5385748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$mul14,HEAP32[(((tempInt)+(4))>>2)]=$35,HEAP32[(((tempInt)+(8))>>2)]=$37,HEAP32[(((tempInt)+(12))>>2)]=$39,HEAP32[(((tempInt)+(16))>>2)]=$mul19,HEAP32[(((tempInt)+(20))>>2)]=$sub24,HEAP32[(((tempInt)+(24))>>2)]=$47,HEAP32[(((tempInt)+(28))>>2)]=$rem,HEAP32[(((tempInt)+(32))>>2)]=$49,tempInt));
      var $50=$gfc_addr;
      _lame_errorf($50, ((5385432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $51=$gfc_addr;
      _lame_errorf($51, ((5385088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $52=$gfc_addr;
      _lame_errorf($52, ((5384652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $53=$gfc_addr;
      _lame_errorf($53, ((5384240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $54=$l3_side;
      var $main_data_begin25=(($54+21008)|0);
      var $55=HEAP32[(($main_data_begin25)>>2)];
      var $mul26=((($55<<3))&-1);
      var $56=$esv;
      var $ResvSize27=(($56+24316)|0);
      HEAP32[(($ResvSize27)>>2)]=$mul26;
      label = 6; break;
    case 6: 
      var $57=$gfc_addr;
      var $bs=(($57+284)|0);
      var $totbit=(($bs+8)|0);
      var $58=HEAP32[(($totbit)>>2)];
      var $cmp29=(($58)|0) > 1000000000;
      if ($cmp29) { label = 7; break; } else { label = 12; break; }
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $59=$i;
      var $cmp31=(($59)|0) < 256;
      if ($cmp31) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $60=$gfc_addr;
      var $bs32=(($60+284)|0);
      var $totbit33=(($bs32+8)|0);
      var $61=HEAP32[(($totbit33)>>2)];
      var $62=$i;
      var $63=$esv;
      var $header=(($63+12016)|0);
      var $arrayidx=(($header+($62)*(48))|0);
      var $write_timing=(($arrayidx)|0);
      var $64=HEAP32[(($write_timing)>>2)];
      var $sub34=((($64)-($61))|0);
      HEAP32[(($write_timing)>>2)]=$sub34;
      label = 10; break;
    case 10: 
      var $65=$i;
      var $inc=((($65)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      var $66=$gfc_addr;
      var $bs35=(($66+284)|0);
      var $totbit36=(($bs35+8)|0);
      HEAP32[(($totbit36)>>2)]=0;
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }

}
_format_bitstream["X"]=1;

function _encodeSideInfo2($gfc, $bitsPerFrame) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $bitsPerFrame_addr;
      var $cfg;
      var $eov;
      var $esv;
      var $l3_side;
      var $gr;
      var $ch;
      var $band;
      var $gi;
      var $gi105;
      var $old;
      $gfc_addr=$gfc;
      $bitsPerFrame_addr=$bitsPerFrame;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$gfc_addr;
      var $sv_enc=(($2+27820)|0);
      $esv=$sv_enc;
      var $3=$gfc_addr;
      var $l3_side2=(($3+304)|0);
      $l3_side=$l3_side2;
      var $4=$esv;
      var $h_ptr=(($4+24304)|0);
      var $5=HEAP32[(($h_ptr)>>2)];
      var $6=$esv;
      var $header=(($6+12016)|0);
      var $arrayidx=(($header+($5)*(48))|0);
      var $ptr=(($arrayidx+4)|0);
      HEAP32[(($ptr)>>2)]=0;
      var $7=$esv;
      var $h_ptr3=(($7+24304)|0);
      var $8=HEAP32[(($h_ptr3)>>2)];
      var $9=$esv;
      var $header4=(($9+12016)|0);
      var $arrayidx5=(($header4+($8)*(48))|0);
      var $buf=(($arrayidx5+8)|0);
      var $10=$buf;
      var $11=$cfg;
      var $sideinfo_len=(($11+8)|0);
      var $12=HEAP32[(($sideinfo_len)>>2)];
      _memset($10, 0, $12);
      var $13=$cfg;
      var $samplerate_out=(($13+48)|0);
      var $14=HEAP32[(($samplerate_out)>>2)];
      var $cmp=(($14)|0) < 16000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$gfc_addr;
      _writeheader($15, 4094, 12);
      label = 5; break;
    case 4: 
      var $16=$gfc_addr;
      _writeheader($16, 4095, 12);
      label = 5; break;
    case 5: 
      var $17=$gfc_addr;
      var $18=$cfg;
      var $version=(($18)|0);
      var $19=HEAP32[(($version)>>2)];
      _writeheader($17, $19, 1);
      var $20=$gfc_addr;
      _writeheader($20, 1, 2);
      var $21=$gfc_addr;
      var $22=$cfg;
      var $error_protection=(($22+144)|0);
      var $23=HEAP32[(($error_protection)>>2)];
      var $tobool=(($23)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&1);
      _writeheader($21, $lnot_ext, 1);
      var $24=$gfc_addr;
      var $25=$eov;
      var $bitrate_index=(($25+704)|0);
      var $26=HEAP32[(($bitrate_index)>>2)];
      _writeheader($24, $26, 4);
      var $27=$gfc_addr;
      var $28=$cfg;
      var $samplerate_index=(($28+4)|0);
      var $29=HEAP32[(($samplerate_index)>>2)];
      _writeheader($27, $29, 2);
      var $30=$gfc_addr;
      var $31=$eov;
      var $padding=(($31+712)|0);
      var $32=HEAP32[(($padding)>>2)];
      _writeheader($30, $32, 1);
      var $33=$gfc_addr;
      var $34=$cfg;
      var $extension=(($34+156)|0);
      var $35=HEAP32[(($extension)>>2)];
      _writeheader($33, $35, 1);
      var $36=$gfc_addr;
      var $37=$cfg;
      var $mode=(($37+164)|0);
      var $38=HEAP32[(($mode)>>2)];
      _writeheader($36, $38, 2);
      var $39=$gfc_addr;
      var $40=$eov;
      var $mode_ext=(($40+716)|0);
      var $41=HEAP32[(($mode_ext)>>2)];
      _writeheader($39, $41, 2);
      var $42=$gfc_addr;
      var $43=$cfg;
      var $copyright=(($43+148)|0);
      var $44=HEAP32[(($copyright)>>2)];
      _writeheader($42, $44, 1);
      var $45=$gfc_addr;
      var $46=$cfg;
      var $original=(($46+152)|0);
      var $47=HEAP32[(($original)>>2)];
      _writeheader($45, $47, 1);
      var $48=$gfc_addr;
      var $49=$cfg;
      var $emphasis=(($49+160)|0);
      var $50=HEAP32[(($emphasis)>>2)];
      _writeheader($48, $50, 2);
      var $51=$cfg;
      var $error_protection6=(($51+144)|0);
      var $52=HEAP32[(($error_protection6)>>2)];
      var $tobool7=(($52)|0)!=0;
      if ($tobool7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $53=$gfc_addr;
      _writeheader($53, 0, 16);
      label = 7; break;
    case 7: 
      var $54=$cfg;
      var $version10=(($54)|0);
      var $55=HEAP32[(($version10)>>2)];
      var $cmp11=(($55)|0)==1;
      if ($cmp11) { label = 8; break; } else { label = 41; break; }
    case 8: 
      var $56=$gfc_addr;
      var $57=$l3_side;
      var $main_data_begin=(($57+21008)|0);
      var $58=HEAP32[(($main_data_begin)>>2)];
      _writeheader($56, $58, 9);
      var $59=$cfg;
      var $channels_out=(($59+56)|0);
      var $60=HEAP32[(($channels_out)>>2)];
      var $cmp13=(($60)|0)==2;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $61=$gfc_addr;
      var $62=$l3_side;
      var $private_bits=(($62+21012)|0);
      var $63=HEAP32[(($private_bits)>>2)];
      _writeheader($61, $63, 3);
      label = 11; break;
    case 10: 
      var $64=$gfc_addr;
      var $65=$l3_side;
      var $private_bits16=(($65+21012)|0);
      var $66=HEAP32[(($private_bits16)>>2)];
      _writeheader($64, $66, 5);
      label = 11; break;
    case 11: 
      $ch=0;
      label = 12; break;
    case 12: 
      var $67=$ch;
      var $68=$cfg;
      var $channels_out18=(($68+56)|0);
      var $69=HEAP32[(($channels_out18)>>2)];
      var $cmp19=(($67)|0) < (($69)|0);
      if ($cmp19) { label = 13; break; } else { label = 19; break; }
    case 13: 
      $band=0;
      label = 14; break;
    case 14: 
      var $70=$band;
      var $cmp21=(($70)|0) < 4;
      if ($cmp21) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $71=$gfc_addr;
      var $72=$band;
      var $73=$ch;
      var $74=$l3_side;
      var $scfsi=(($74+21024)|0);
      var $arrayidx23=(($scfsi+($73<<4))|0);
      var $arrayidx24=(($arrayidx23+($72<<2))|0);
      var $75=HEAP32[(($arrayidx24)>>2)];
      _writeheader($71, $75, 1);
      label = 16; break;
    case 16: 
      var $76=$band;
      var $inc=((($76)+(1))|0);
      $band=$inc;
      label = 14; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $77=$ch;
      var $inc26=((($77)+(1))|0);
      $ch=$inc26;
      label = 12; break;
    case 19: 
      $gr=0;
      label = 20; break;
    case 20: 
      var $78=$gr;
      var $cmp29=(($78)|0) < 2;
      if ($cmp29) { label = 21; break; } else { label = 40; break; }
    case 21: 
      $ch=0;
      label = 22; break;
    case 22: 
      var $79=$ch;
      var $80=$cfg;
      var $channels_out32=(($80+56)|0);
      var $81=HEAP32[(($channels_out32)>>2)];
      var $cmp33=(($79)|0) < (($81)|0);
      if ($cmp33) { label = 23; break; } else { label = 38; break; }
    case 23: 
      var $82=$ch;
      var $83=$gr;
      var $84=$l3_side;
      var $tt=(($84)|0);
      var $arrayidx35=(($tt+($83)*(10504))|0);
      var $arrayidx36=(($arrayidx35+($82)*(5252))|0);
      $gi=$arrayidx36;
      var $85=$gfc_addr;
      var $86=$gi;
      var $part2_3_length=(($86+4768)|0);
      var $87=HEAP32[(($part2_3_length)>>2)];
      var $88=$gi;
      var $part2_length=(($88+4844)|0);
      var $89=HEAP32[(($part2_length)>>2)];
      var $add=((($87)+($89))|0);
      _writeheader($85, $add, 12);
      var $90=$gfc_addr;
      var $91=$gi;
      var $big_values=(($91+4772)|0);
      var $92=HEAP32[(($big_values)>>2)];
      var $div=((((($92)|0))/(2))&-1);
      _writeheader($90, $div, 9);
      var $93=$gfc_addr;
      var $94=$gi;
      var $global_gain=(($94+4780)|0);
      var $95=HEAP32[(($global_gain)>>2)];
      _writeheader($93, $95, 8);
      var $96=$gfc_addr;
      var $97=$gi;
      var $scalefac_compress=(($97+4784)|0);
      var $98=HEAP32[(($scalefac_compress)>>2)];
      _writeheader($96, $98, 4);
      var $99=$gi;
      var $block_type=(($99+4788)|0);
      var $100=HEAP32[(($block_type)>>2)];
      var $cmp37=(($100)|0)!=0;
      if ($cmp37) { label = 24; break; } else { label = 29; break; }
    case 24: 
      var $101=$gfc_addr;
      _writeheader($101, 1, 1);
      var $102=$gfc_addr;
      var $103=$gi;
      var $block_type39=(($103+4788)|0);
      var $104=HEAP32[(($block_type39)>>2)];
      _writeheader($102, $104, 2);
      var $105=$gfc_addr;
      var $106=$gi;
      var $mixed_block_flag=(($106+4792)|0);
      var $107=HEAP32[(($mixed_block_flag)>>2)];
      _writeheader($105, $107, 1);
      var $108=$gi;
      var $table_select=(($108+4796)|0);
      var $arrayidx40=(($table_select)|0);
      var $109=HEAP32[(($arrayidx40)>>2)];
      var $cmp41=(($109)|0)==14;
      if ($cmp41) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $110=$gi;
      var $table_select43=(($110+4796)|0);
      var $arrayidx44=(($table_select43)|0);
      HEAP32[(($arrayidx44)>>2)]=16;
      label = 26; break;
    case 26: 
      var $111=$gfc_addr;
      var $112=$gi;
      var $table_select46=(($112+4796)|0);
      var $arrayidx47=(($table_select46)|0);
      var $113=HEAP32[(($arrayidx47)>>2)];
      _writeheader($111, $113, 5);
      var $114=$gi;
      var $table_select48=(($114+4796)|0);
      var $arrayidx49=(($table_select48+4)|0);
      var $115=HEAP32[(($arrayidx49)>>2)];
      var $cmp50=(($115)|0)==14;
      if ($cmp50) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $116=$gi;
      var $table_select52=(($116+4796)|0);
      var $arrayidx53=(($table_select52+4)|0);
      HEAP32[(($arrayidx53)>>2)]=16;
      label = 28; break;
    case 28: 
      var $117=$gfc_addr;
      var $118=$gi;
      var $table_select55=(($118+4796)|0);
      var $arrayidx56=(($table_select55+4)|0);
      var $119=HEAP32[(($arrayidx56)>>2)];
      _writeheader($117, $119, 5);
      var $120=$gfc_addr;
      var $121=$gi;
      var $subblock_gain=(($121+4808)|0);
      var $arrayidx57=(($subblock_gain)|0);
      var $122=HEAP32[(($arrayidx57)>>2)];
      _writeheader($120, $122, 3);
      var $123=$gfc_addr;
      var $124=$gi;
      var $subblock_gain58=(($124+4808)|0);
      var $arrayidx59=(($subblock_gain58+4)|0);
      var $125=HEAP32[(($arrayidx59)>>2)];
      _writeheader($123, $125, 3);
      var $126=$gfc_addr;
      var $127=$gi;
      var $subblock_gain60=(($127+4808)|0);
      var $arrayidx61=(($subblock_gain60+8)|0);
      var $128=HEAP32[(($arrayidx61)>>2)];
      _writeheader($126, $128, 3);
      label = 36; break;
    case 29: 
      var $129=$gfc_addr;
      _writeheader($129, 0, 1);
      var $130=$gi;
      var $table_select63=(($130+4796)|0);
      var $arrayidx64=(($table_select63)|0);
      var $131=HEAP32[(($arrayidx64)>>2)];
      var $cmp65=(($131)|0)==14;
      if ($cmp65) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $132=$gi;
      var $table_select67=(($132+4796)|0);
      var $arrayidx68=(($table_select67)|0);
      HEAP32[(($arrayidx68)>>2)]=16;
      label = 31; break;
    case 31: 
      var $133=$gfc_addr;
      var $134=$gi;
      var $table_select70=(($134+4796)|0);
      var $arrayidx71=(($table_select70)|0);
      var $135=HEAP32[(($arrayidx71)>>2)];
      _writeheader($133, $135, 5);
      var $136=$gi;
      var $table_select72=(($136+4796)|0);
      var $arrayidx73=(($table_select72+4)|0);
      var $137=HEAP32[(($arrayidx73)>>2)];
      var $cmp74=(($137)|0)==14;
      if ($cmp74) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $138=$gi;
      var $table_select76=(($138+4796)|0);
      var $arrayidx77=(($table_select76+4)|0);
      HEAP32[(($arrayidx77)>>2)]=16;
      label = 33; break;
    case 33: 
      var $139=$gfc_addr;
      var $140=$gi;
      var $table_select79=(($140+4796)|0);
      var $arrayidx80=(($table_select79+4)|0);
      var $141=HEAP32[(($arrayidx80)>>2)];
      _writeheader($139, $141, 5);
      var $142=$gi;
      var $table_select81=(($142+4796)|0);
      var $arrayidx82=(($table_select81+8)|0);
      var $143=HEAP32[(($arrayidx82)>>2)];
      var $cmp83=(($143)|0)==14;
      if ($cmp83) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $144=$gi;
      var $table_select85=(($144+4796)|0);
      var $arrayidx86=(($table_select85+8)|0);
      HEAP32[(($arrayidx86)>>2)]=16;
      label = 35; break;
    case 35: 
      var $145=$gfc_addr;
      var $146=$gi;
      var $table_select88=(($146+4796)|0);
      var $arrayidx89=(($table_select88+8)|0);
      var $147=HEAP32[(($arrayidx89)>>2)];
      _writeheader($145, $147, 5);
      var $148=$gfc_addr;
      var $149=$gi;
      var $region0_count=(($149+4824)|0);
      var $150=HEAP32[(($region0_count)>>2)];
      _writeheader($148, $150, 4);
      var $151=$gfc_addr;
      var $152=$gi;
      var $region1_count=(($152+4828)|0);
      var $153=HEAP32[(($region1_count)>>2)];
      _writeheader($151, $153, 3);
      label = 36; break;
    case 36: 
      var $154=$gfc_addr;
      var $155=$gi;
      var $preflag=(($155+4832)|0);
      var $156=HEAP32[(($preflag)>>2)];
      _writeheader($154, $156, 1);
      var $157=$gfc_addr;
      var $158=$gi;
      var $scalefac_scale=(($158+4836)|0);
      var $159=HEAP32[(($scalefac_scale)>>2)];
      _writeheader($157, $159, 1);
      var $160=$gfc_addr;
      var $161=$gi;
      var $count1table_select=(($161+4840)|0);
      var $162=HEAP32[(($count1table_select)>>2)];
      _writeheader($160, $162, 1);
      label = 37; break;
    case 37: 
      var $163=$ch;
      var $inc92=((($163)+(1))|0);
      $ch=$inc92;
      label = 22; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $164=$gr;
      var $inc95=((($164)+(1))|0);
      $gr=$inc95;
      label = 20; break;
    case 40: 
      label = 59; break;
    case 41: 
      var $165=$gfc_addr;
      var $166=$l3_side;
      var $main_data_begin98=(($166+21008)|0);
      var $167=HEAP32[(($main_data_begin98)>>2)];
      _writeheader($165, $167, 8);
      var $168=$gfc_addr;
      var $169=$l3_side;
      var $private_bits99=(($169+21012)|0);
      var $170=HEAP32[(($private_bits99)>>2)];
      var $171=$cfg;
      var $channels_out100=(($171+56)|0);
      var $172=HEAP32[(($channels_out100)>>2)];
      _writeheader($168, $170, $172);
      $gr=0;
      $ch=0;
      label = 42; break;
    case 42: 
      var $173=$ch;
      var $174=$cfg;
      var $channels_out102=(($174+56)|0);
      var $175=HEAP32[(($channels_out102)>>2)];
      var $cmp103=(($173)|0) < (($175)|0);
      if ($cmp103) { label = 43; break; } else { label = 58; break; }
    case 43: 
      var $176=$ch;
      var $177=$gr;
      var $178=$l3_side;
      var $tt106=(($178)|0);
      var $arrayidx107=(($tt106+($177)*(10504))|0);
      var $arrayidx108=(($arrayidx107+($176)*(5252))|0);
      $gi105=$arrayidx108;
      var $179=$gfc_addr;
      var $180=$gi105;
      var $part2_3_length109=(($180+4768)|0);
      var $181=HEAP32[(($part2_3_length109)>>2)];
      var $182=$gi105;
      var $part2_length110=(($182+4844)|0);
      var $183=HEAP32[(($part2_length110)>>2)];
      var $add111=((($181)+($183))|0);
      _writeheader($179, $add111, 12);
      var $184=$gfc_addr;
      var $185=$gi105;
      var $big_values112=(($185+4772)|0);
      var $186=HEAP32[(($big_values112)>>2)];
      var $div113=((((($186)|0))/(2))&-1);
      _writeheader($184, $div113, 9);
      var $187=$gfc_addr;
      var $188=$gi105;
      var $global_gain114=(($188+4780)|0);
      var $189=HEAP32[(($global_gain114)>>2)];
      _writeheader($187, $189, 8);
      var $190=$gfc_addr;
      var $191=$gi105;
      var $scalefac_compress115=(($191+4784)|0);
      var $192=HEAP32[(($scalefac_compress115)>>2)];
      _writeheader($190, $192, 9);
      var $193=$gi105;
      var $block_type116=(($193+4788)|0);
      var $194=HEAP32[(($block_type116)>>2)];
      var $cmp117=(($194)|0)!=0;
      if ($cmp117) { label = 44; break; } else { label = 49; break; }
    case 44: 
      var $195=$gfc_addr;
      _writeheader($195, 1, 1);
      var $196=$gfc_addr;
      var $197=$gi105;
      var $block_type119=(($197+4788)|0);
      var $198=HEAP32[(($block_type119)>>2)];
      _writeheader($196, $198, 2);
      var $199=$gfc_addr;
      var $200=$gi105;
      var $mixed_block_flag120=(($200+4792)|0);
      var $201=HEAP32[(($mixed_block_flag120)>>2)];
      _writeheader($199, $201, 1);
      var $202=$gi105;
      var $table_select121=(($202+4796)|0);
      var $arrayidx122=(($table_select121)|0);
      var $203=HEAP32[(($arrayidx122)>>2)];
      var $cmp123=(($203)|0)==14;
      if ($cmp123) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $204=$gi105;
      var $table_select125=(($204+4796)|0);
      var $arrayidx126=(($table_select125)|0);
      HEAP32[(($arrayidx126)>>2)]=16;
      label = 46; break;
    case 46: 
      var $205=$gfc_addr;
      var $206=$gi105;
      var $table_select128=(($206+4796)|0);
      var $arrayidx129=(($table_select128)|0);
      var $207=HEAP32[(($arrayidx129)>>2)];
      _writeheader($205, $207, 5);
      var $208=$gi105;
      var $table_select130=(($208+4796)|0);
      var $arrayidx131=(($table_select130+4)|0);
      var $209=HEAP32[(($arrayidx131)>>2)];
      var $cmp132=(($209)|0)==14;
      if ($cmp132) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $210=$gi105;
      var $table_select134=(($210+4796)|0);
      var $arrayidx135=(($table_select134+4)|0);
      HEAP32[(($arrayidx135)>>2)]=16;
      label = 48; break;
    case 48: 
      var $211=$gfc_addr;
      var $212=$gi105;
      var $table_select137=(($212+4796)|0);
      var $arrayidx138=(($table_select137+4)|0);
      var $213=HEAP32[(($arrayidx138)>>2)];
      _writeheader($211, $213, 5);
      var $214=$gfc_addr;
      var $215=$gi105;
      var $subblock_gain139=(($215+4808)|0);
      var $arrayidx140=(($subblock_gain139)|0);
      var $216=HEAP32[(($arrayidx140)>>2)];
      _writeheader($214, $216, 3);
      var $217=$gfc_addr;
      var $218=$gi105;
      var $subblock_gain141=(($218+4808)|0);
      var $arrayidx142=(($subblock_gain141+4)|0);
      var $219=HEAP32[(($arrayidx142)>>2)];
      _writeheader($217, $219, 3);
      var $220=$gfc_addr;
      var $221=$gi105;
      var $subblock_gain143=(($221+4808)|0);
      var $arrayidx144=(($subblock_gain143+8)|0);
      var $222=HEAP32[(($arrayidx144)>>2)];
      _writeheader($220, $222, 3);
      label = 56; break;
    case 49: 
      var $223=$gfc_addr;
      _writeheader($223, 0, 1);
      var $224=$gi105;
      var $table_select146=(($224+4796)|0);
      var $arrayidx147=(($table_select146)|0);
      var $225=HEAP32[(($arrayidx147)>>2)];
      var $cmp148=(($225)|0)==14;
      if ($cmp148) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $226=$gi105;
      var $table_select150=(($226+4796)|0);
      var $arrayidx151=(($table_select150)|0);
      HEAP32[(($arrayidx151)>>2)]=16;
      label = 51; break;
    case 51: 
      var $227=$gfc_addr;
      var $228=$gi105;
      var $table_select153=(($228+4796)|0);
      var $arrayidx154=(($table_select153)|0);
      var $229=HEAP32[(($arrayidx154)>>2)];
      _writeheader($227, $229, 5);
      var $230=$gi105;
      var $table_select155=(($230+4796)|0);
      var $arrayidx156=(($table_select155+4)|0);
      var $231=HEAP32[(($arrayidx156)>>2)];
      var $cmp157=(($231)|0)==14;
      if ($cmp157) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $232=$gi105;
      var $table_select159=(($232+4796)|0);
      var $arrayidx160=(($table_select159+4)|0);
      HEAP32[(($arrayidx160)>>2)]=16;
      label = 53; break;
    case 53: 
      var $233=$gfc_addr;
      var $234=$gi105;
      var $table_select162=(($234+4796)|0);
      var $arrayidx163=(($table_select162+4)|0);
      var $235=HEAP32[(($arrayidx163)>>2)];
      _writeheader($233, $235, 5);
      var $236=$gi105;
      var $table_select164=(($236+4796)|0);
      var $arrayidx165=(($table_select164+8)|0);
      var $237=HEAP32[(($arrayidx165)>>2)];
      var $cmp166=(($237)|0)==14;
      if ($cmp166) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $238=$gi105;
      var $table_select168=(($238+4796)|0);
      var $arrayidx169=(($table_select168+8)|0);
      HEAP32[(($arrayidx169)>>2)]=16;
      label = 55; break;
    case 55: 
      var $239=$gfc_addr;
      var $240=$gi105;
      var $table_select171=(($240+4796)|0);
      var $arrayidx172=(($table_select171+8)|0);
      var $241=HEAP32[(($arrayidx172)>>2)];
      _writeheader($239, $241, 5);
      var $242=$gfc_addr;
      var $243=$gi105;
      var $region0_count173=(($243+4824)|0);
      var $244=HEAP32[(($region0_count173)>>2)];
      _writeheader($242, $244, 4);
      var $245=$gfc_addr;
      var $246=$gi105;
      var $region1_count174=(($246+4828)|0);
      var $247=HEAP32[(($region1_count174)>>2)];
      _writeheader($245, $247, 3);
      label = 56; break;
    case 56: 
      var $248=$gfc_addr;
      var $249=$gi105;
      var $scalefac_scale176=(($249+4836)|0);
      var $250=HEAP32[(($scalefac_scale176)>>2)];
      _writeheader($248, $250, 1);
      var $251=$gfc_addr;
      var $252=$gi105;
      var $count1table_select177=(($252+4840)|0);
      var $253=HEAP32[(($count1table_select177)>>2)];
      _writeheader($251, $253, 1);
      label = 57; break;
    case 57: 
      var $254=$ch;
      var $inc179=((($254)+(1))|0);
      $ch=$inc179;
      label = 42; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $255=$cfg;
      var $error_protection182=(($255+144)|0);
      var $256=HEAP32[(($error_protection182)>>2)];
      var $tobool183=(($256)|0)!=0;
      if ($tobool183) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $257=$gfc_addr;
      var $258=$esv;
      var $h_ptr185=(($258+24304)|0);
      var $259=HEAP32[(($h_ptr185)>>2)];
      var $260=$esv;
      var $header186=(($260+12016)|0);
      var $arrayidx187=(($header186+($259)*(48))|0);
      var $buf188=(($arrayidx187+8)|0);
      var $arraydecay=(($buf188)|0);
      _CRC_writeheader($257, $arraydecay);
      label = 61; break;
    case 61: 
      var $261=$esv;
      var $h_ptr190=(($261+24304)|0);
      var $262=HEAP32[(($h_ptr190)>>2)];
      $old=$262;
      var $263=$old;
      var $add191=((($263)+(1))|0);
      var $and=$add191 & 255;
      var $264=$esv;
      var $h_ptr192=(($264+24304)|0);
      HEAP32[(($h_ptr192)>>2)]=$and;
      var $265=$old;
      var $266=$esv;
      var $header193=(($266+12016)|0);
      var $arrayidx194=(($header193+($265)*(48))|0);
      var $write_timing=(($arrayidx194)|0);
      var $267=HEAP32[(($write_timing)>>2)];
      var $268=$bitsPerFrame_addr;
      var $add195=((($267)+($268))|0);
      var $269=$esv;
      var $h_ptr196=(($269+24304)|0);
      var $270=HEAP32[(($h_ptr196)>>2)];
      var $271=$esv;
      var $header197=(($271+12016)|0);
      var $arrayidx198=(($header197+($270)*(48))|0);
      var $write_timing199=(($arrayidx198)|0);
      HEAP32[(($write_timing199)>>2)]=$add195;
      var $272=$esv;
      var $h_ptr200=(($272+24304)|0);
      var $273=HEAP32[(($h_ptr200)>>2)];
      var $274=$esv;
      var $w_ptr=(($274+24308)|0);
      var $275=HEAP32[(($w_ptr)>>2)];
      var $cmp201=(($273)|0)==(($275)|0);
      if ($cmp201) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $276=$gfc_addr;
      _lame_errorf($276, ((5383788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 63; break;
    case 63: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_encodeSideInfo2["X"]=1;

function _writeMainData($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $l3_side;
      var $gr;
      var $ch;
      var $sfb;
      var $data_bits;
      var $tot_bits;
      var $gi;
      var $slen1;
      var $slen2;
      var $gi53;
      var $i;
      var $sfb_partition;
      var $scale_bits;
      var $sfbs;
      var $slen;
      var $sfbs118;
      var $slen121;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $l3_side2=(($1+304)|0);
      $l3_side=$l3_side2;
      $tot_bits=0;
      var $2=$cfg;
      var $version=(($2)|0);
      var $3=HEAP32[(($version)>>2)];
      var $cmp=(($3)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 27; break; }
    case 3: 
      $gr=0;
      label = 4; break;
    case 4: 
      var $4=$gr;
      var $cmp3=(($4)|0) < 2;
      if ($cmp3) { label = 5; break; } else { label = 26; break; }
    case 5: 
      $ch=0;
      label = 6; break;
    case 6: 
      var $5=$ch;
      var $6=$cfg;
      var $channels_out=(($6+56)|0);
      var $7=HEAP32[(($channels_out)>>2)];
      var $cmp5=(($5)|0) < (($7)|0);
      if ($cmp5) { label = 7; break; } else { label = 24; break; }
    case 7: 
      var $8=$ch;
      var $9=$gr;
      var $10=$l3_side;
      var $tt=(($10)|0);
      var $arrayidx=(($tt+($9)*(10504))|0);
      var $arrayidx7=(($arrayidx+($8)*(5252))|0);
      $gi=$arrayidx7;
      var $11=$gi;
      var $scalefac_compress=(($11+4784)|0);
      var $12=HEAP32[(($scalefac_compress)>>2)];
      var $arrayidx8=((5254620+($12<<2))|0);
      var $13=HEAP32[(($arrayidx8)>>2)];
      $slen1=$13;
      var $14=$gi;
      var $scalefac_compress9=(($14+4784)|0);
      var $15=HEAP32[(($scalefac_compress9)>>2)];
      var $arrayidx10=((5254492+($15<<2))|0);
      var $16=HEAP32[(($arrayidx10)>>2)];
      $slen2=$16;
      $data_bits=0;
      $sfb=0;
      label = 8; break;
    case 8: 
      var $17=$sfb;
      var $18=$gi;
      var $sfbdivide=(($18+4868)|0);
      var $19=HEAP32[(($sfbdivide)>>2)];
      var $cmp12=(($17)|0) < (($19)|0);
      if ($cmp12) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $20=$sfb;
      var $21=$gi;
      var $scalefac=(($21+4608)|0);
      var $arrayidx14=(($scalefac+($20<<2))|0);
      var $22=HEAP32[(($arrayidx14)>>2)];
      var $cmp15=(($22)|0)==-1;
      if ($cmp15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $23=$gfc_addr;
      var $24=$sfb;
      var $25=$gi;
      var $scalefac17=(($25+4608)|0);
      var $arrayidx18=(($scalefac17+($24<<2))|0);
      var $26=HEAP32[(($arrayidx18)>>2)];
      var $27=$slen1;
      _putbits2($23, $26, $27);
      var $28=$slen1;
      var $29=$data_bits;
      var $add=((($29)+($28))|0);
      $data_bits=$add;
      label = 12; break;
    case 12: 
      var $30=$sfb;
      var $inc=((($30)+(1))|0);
      $sfb=$inc;
      label = 8; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $31=$sfb;
      var $32=$gi;
      var $sfbmax=(($32+4860)|0);
      var $33=HEAP32[(($sfbmax)>>2)];
      var $cmp20=(($31)|0) < (($33)|0);
      if ($cmp20) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $34=$sfb;
      var $35=$gi;
      var $scalefac22=(($35+4608)|0);
      var $arrayidx23=(($scalefac22+($34<<2))|0);
      var $36=HEAP32[(($arrayidx23)>>2)];
      var $cmp24=(($36)|0)==-1;
      if ($cmp24) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $37=$gfc_addr;
      var $38=$sfb;
      var $39=$gi;
      var $scalefac27=(($39+4608)|0);
      var $arrayidx28=(($scalefac27+($38<<2))|0);
      var $40=HEAP32[(($arrayidx28)>>2)];
      var $41=$slen2;
      _putbits2($37, $40, $41);
      var $42=$slen2;
      var $43=$data_bits;
      var $add29=((($43)+($42))|0);
      $data_bits=$add29;
      label = 18; break;
    case 18: 
      var $44=$sfb;
      var $inc31=((($44)+(1))|0);
      $sfb=$inc31;
      label = 14; break;
    case 19: 
      var $45=$gi;
      var $block_type=(($45+4788)|0);
      var $46=HEAP32[(($block_type)>>2)];
      var $cmp33=(($46)|0)==2;
      if ($cmp33) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $47=$gfc_addr;
      var $48=$gi;
      var $call=_ShortHuffmancodebits($47, $48);
      var $49=$data_bits;
      var $add35=((($49)+($call))|0);
      $data_bits=$add35;
      label = 22; break;
    case 21: 
      var $50=$gfc_addr;
      var $51=$gi;
      var $call36=_LongHuffmancodebits($50, $51);
      var $52=$data_bits;
      var $add37=((($52)+($call36))|0);
      $data_bits=$add37;
      label = 22; break;
    case 22: 
      var $53=$gfc_addr;
      var $54=$gi;
      var $call39=_huffman_coder_count1($53, $54);
      var $55=$data_bits;
      var $add40=((($55)+($call39))|0);
      $data_bits=$add40;
      var $56=$data_bits;
      var $57=$tot_bits;
      var $add41=((($57)+($56))|0);
      $tot_bits=$add41;
      label = 23; break;
    case 23: 
      var $58=$ch;
      var $inc43=((($58)+(1))|0);
      $ch=$inc43;
      label = 6; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $59=$gr;
      var $inc46=((($59)+(1))|0);
      $gr=$inc46;
      label = 4; break;
    case 26: 
      label = 63; break;
    case 27: 
      $gr=0;
      $ch=0;
      label = 28; break;
    case 28: 
      var $60=$ch;
      var $61=$cfg;
      var $channels_out50=(($61+56)|0);
      var $62=HEAP32[(($channels_out50)>>2)];
      var $cmp51=(($60)|0) < (($62)|0);
      if ($cmp51) { label = 29; break; } else { label = 62; break; }
    case 29: 
      var $63=$ch;
      var $64=$gr;
      var $65=$l3_side;
      var $tt54=(($65)|0);
      var $arrayidx55=(($tt54+($64)*(10504))|0);
      var $arrayidx56=(($arrayidx55+($63)*(5252))|0);
      $gi53=$arrayidx56;
      $scale_bits=0;
      $data_bits=0;
      $sfb=0;
      $sfb_partition=0;
      var $66=$gi53;
      var $block_type57=(($66+4788)|0);
      var $67=HEAP32[(($block_type57)>>2)];
      var $cmp58=(($67)|0)==2;
      if ($cmp58) { label = 30; break; } else { label = 48; break; }
    case 30: 
      label = 31; break;
    case 31: 
      var $68=$sfb_partition;
      var $cmp61=(($68)|0) < 4;
      if ($cmp61) { label = 32; break; } else { label = 47; break; }
    case 32: 
      var $69=$sfb_partition;
      var $70=$gi53;
      var $sfb_partition_table=(($70+5188)|0);
      var $71=HEAP32[(($sfb_partition_table)>>2)];
      var $arrayidx63=(($71+($69<<2))|0);
      var $72=HEAP32[(($arrayidx63)>>2)];
      var $div=((((($72)|0))/(3))&-1);
      $sfbs=$div;
      var $73=$sfb_partition;
      var $74=$gi53;
      var $slen64=(($74+5192)|0);
      var $arrayidx65=(($slen64+($73<<2))|0);
      var $75=HEAP32[(($arrayidx65)>>2)];
      $slen=$75;
      $i=0;
      label = 33; break;
    case 33: 
      var $76=$i;
      var $77=$sfbs;
      var $cmp67=(($76)|0) < (($77)|0);
      if ($cmp67) { label = 34; break; } else { label = 45; break; }
    case 34: 
      var $78=$gfc_addr;
      var $79=$sfb;
      var $mul=((($79)*(3))&-1);
      var $add69=(($mul)|0);
      var $80=$gi53;
      var $scalefac70=(($80+4608)|0);
      var $arrayidx71=(($scalefac70+($add69<<2))|0);
      var $81=HEAP32[(($arrayidx71)>>2)];
      var $cmp72=(($81)|0) > 0;
      if ($cmp72) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $82=$sfb;
      var $mul73=((($82)*(3))&-1);
      var $add74=(($mul73)|0);
      var $83=$gi53;
      var $scalefac75=(($83+4608)|0);
      var $arrayidx76=(($scalefac75+($add74<<2))|0);
      var $84=HEAP32[(($arrayidx76)>>2)];
      var $cond = $84;label = 37; break;
    case 36: 
      var $cond = 0;label = 37; break;
    case 37: 
      var $cond;
      var $85=$slen;
      _putbits2($78, $cond, $85);
      var $86=$gfc_addr;
      var $87=$sfb;
      var $mul77=((($87)*(3))&-1);
      var $add78=((($mul77)+(1))|0);
      var $88=$gi53;
      var $scalefac79=(($88+4608)|0);
      var $arrayidx80=(($scalefac79+($add78<<2))|0);
      var $89=HEAP32[(($arrayidx80)>>2)];
      var $cmp81=(($89)|0) > 0;
      if ($cmp81) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $90=$sfb;
      var $mul83=((($90)*(3))&-1);
      var $add84=((($mul83)+(1))|0);
      var $91=$gi53;
      var $scalefac85=(($91+4608)|0);
      var $arrayidx86=(($scalefac85+($add84<<2))|0);
      var $92=HEAP32[(($arrayidx86)>>2)];
      var $cond89 = $92;label = 40; break;
    case 39: 
      var $cond89 = 0;label = 40; break;
    case 40: 
      var $cond89;
      var $93=$slen;
      _putbits2($86, $cond89, $93);
      var $94=$gfc_addr;
      var $95=$sfb;
      var $mul90=((($95)*(3))&-1);
      var $add91=((($mul90)+(2))|0);
      var $96=$gi53;
      var $scalefac92=(($96+4608)|0);
      var $arrayidx93=(($scalefac92+($add91<<2))|0);
      var $97=HEAP32[(($arrayidx93)>>2)];
      var $cmp94=(($97)|0) > 0;
      if ($cmp94) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $98=$sfb;
      var $mul96=((($98)*(3))&-1);
      var $add97=((($mul96)+(2))|0);
      var $99=$gi53;
      var $scalefac98=(($99+4608)|0);
      var $arrayidx99=(($scalefac98+($add97<<2))|0);
      var $100=HEAP32[(($arrayidx99)>>2)];
      var $cond102 = $100;label = 43; break;
    case 42: 
      var $cond102 = 0;label = 43; break;
    case 43: 
      var $cond102;
      var $101=$slen;
      _putbits2($94, $cond102, $101);
      var $102=$slen;
      var $mul103=((($102)*(3))&-1);
      var $103=$scale_bits;
      var $add104=((($103)+($mul103))|0);
      $scale_bits=$add104;
      label = 44; break;
    case 44: 
      var $104=$i;
      var $inc106=((($104)+(1))|0);
      $i=$inc106;
      var $105=$sfb;
      var $inc107=((($105)+(1))|0);
      $sfb=$inc107;
      label = 33; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $106=$sfb_partition;
      var $inc110=((($106)+(1))|0);
      $sfb_partition=$inc110;
      label = 31; break;
    case 47: 
      var $107=$gfc_addr;
      var $108=$gi53;
      var $call112=_ShortHuffmancodebits($107, $108);
      var $109=$data_bits;
      var $add113=((($109)+($call112))|0);
      $data_bits=$add113;
      label = 60; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $110=$sfb_partition;
      var $cmp116=(($110)|0) < 4;
      if ($cmp116) { label = 50; break; } else { label = 59; break; }
    case 50: 
      var $111=$sfb_partition;
      var $112=$gi53;
      var $sfb_partition_table119=(($112+5188)|0);
      var $113=HEAP32[(($sfb_partition_table119)>>2)];
      var $arrayidx120=(($113+($111<<2))|0);
      var $114=HEAP32[(($arrayidx120)>>2)];
      $sfbs118=$114;
      var $115=$sfb_partition;
      var $116=$gi53;
      var $slen122=(($116+5192)|0);
      var $arrayidx123=(($slen122+($115<<2))|0);
      var $117=HEAP32[(($arrayidx123)>>2)];
      $slen121=$117;
      $i=0;
      label = 51; break;
    case 51: 
      var $118=$i;
      var $119=$sfbs118;
      var $cmp125=(($118)|0) < (($119)|0);
      if ($cmp125) { label = 52; break; } else { label = 57; break; }
    case 52: 
      var $120=$gfc_addr;
      var $121=$sfb;
      var $122=$gi53;
      var $scalefac127=(($122+4608)|0);
      var $arrayidx128=(($scalefac127+($121<<2))|0);
      var $123=HEAP32[(($arrayidx128)>>2)];
      var $cmp129=(($123)|0) > 0;
      if ($cmp129) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $124=$sfb;
      var $125=$gi53;
      var $scalefac131=(($125+4608)|0);
      var $arrayidx132=(($scalefac131+($124<<2))|0);
      var $126=HEAP32[(($arrayidx132)>>2)];
      var $cond135 = $126;label = 55; break;
    case 54: 
      var $cond135 = 0;label = 55; break;
    case 55: 
      var $cond135;
      var $127=$slen121;
      _putbits2($120, $cond135, $127);
      var $128=$slen121;
      var $129=$scale_bits;
      var $add136=((($129)+($128))|0);
      $scale_bits=$add136;
      label = 56; break;
    case 56: 
      var $130=$i;
      var $inc138=((($130)+(1))|0);
      $i=$inc138;
      var $131=$sfb;
      var $inc139=((($131)+(1))|0);
      $sfb=$inc139;
      label = 51; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $132=$sfb_partition;
      var $inc142=((($132)+(1))|0);
      $sfb_partition=$inc142;
      label = 49; break;
    case 59: 
      var $133=$gfc_addr;
      var $134=$gi53;
      var $call144=_LongHuffmancodebits($133, $134);
      var $135=$data_bits;
      var $add145=((($135)+($call144))|0);
      $data_bits=$add145;
      label = 60; break;
    case 60: 
      var $136=$gfc_addr;
      var $137=$gi53;
      var $call147=_huffman_coder_count1($136, $137);
      var $138=$data_bits;
      var $add148=((($138)+($call147))|0);
      $data_bits=$add148;
      var $139=$scale_bits;
      var $140=$data_bits;
      var $add149=((($139)+($140))|0);
      var $141=$tot_bits;
      var $add150=((($141)+($add149))|0);
      $tot_bits=$add150;
      label = 61; break;
    case 61: 
      var $142=$ch;
      var $inc152=((($142)+(1))|0);
      $ch=$inc152;
      label = 28; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $143=$tot_bits;

      return $143;
    default: assert(0, "bad label: " + label);
  }

}
_writeMainData["X"]=1;

function _copy_buffer($gfc, $buffer, $size, $mp3data) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $buffer_addr;
      var $size_addr;
      var $mp3data_addr;
      var $minimum;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $size_addr=$size;
      $mp3data_addr=$mp3data;
      var $0=$gfc_addr;
      var $1=$buffer_addr;
      var $2=$size_addr;
      var $call=_do_copy_buffer($0, $1, $2);
      $minimum=$call;
      var $3=$minimum;
      var $cmp=(($3)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$mp3data_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$gfc_addr;
      var $nMusicCRC=(($5+85748)|0);
      var $6=$buffer_addr;
      var $7=$minimum;
      _UpdateMusicCRC($nMusicCRC, $6, $7);
      var $8=$minimum;
      var $9=$gfc_addr;
      var $VBR_seek_table=(($9+85756)|0);
      var $nBytesWritten=(($VBR_seek_table+28)|0);
      var $10=HEAP32[(($nBytesWritten)>>2)];
      var $add=((($10)+($8))|0);
      HEAP32[(($nBytesWritten)>>2)]=$add;
      var $11=$gfc_addr;
      var $12=$buffer_addr;
      var $13=$minimum;
      var $call1=_do_gain_analysis($11, $12, $13);
      $retval=$call1;
      label = 6; break;
    case 5: 
      var $14=$minimum;
      $retval=$14;
      label = 6; break;
    case 6: 
      var $15=$retval;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}


function _do_copy_buffer($gfc, $buffer, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $buffer_addr;
      var $size_addr;
      var $bs;
      var $minimum;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $size_addr=$size;
      var $0=$gfc_addr;
      var $bs1=(($0+284)|0);
      $bs=$bs1;
      var $1=$bs;
      var $buf_byte_idx=(($1+12)|0);
      var $2=HEAP32[(($buf_byte_idx)>>2)];
      var $add=((($2)+(1))|0);
      $minimum=$add;
      var $3=$minimum;
      var $cmp=(($3)|0) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 8; break;
    case 4: 
      var $4=$size_addr;
      var $cmp2=(($4)|0)!=0;
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$minimum;
      var $6=$size_addr;
      var $cmp3=(($5)|0) > (($6)|0);
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=-1;
      label = 8; break;
    case 7: 
      var $7=$buffer_addr;
      var $8=$bs;
      var $buf=(($8)|0);
      var $9=HEAP32[(($buf)>>2)];
      var $10=$minimum;
      assert($10 % 1 === 0);_memcpy($7, $9, $10);
      var $11=$bs;
      var $buf_byte_idx6=(($11+12)|0);
      HEAP32[(($buf_byte_idx6)>>2)]=-1;
      var $12=$bs;
      var $buf_bit_idx=(($12+16)|0);
      HEAP32[(($buf_bit_idx)>>2)]=0;
      var $13=$minimum;
      $retval=$13;
      label = 8; break;
    case 8: 
      var $14=$retval;

      return $14;
    default: assert(0, "bad label: " + label);
  }

}


function _do_gain_analysis($gfc, $buffer, $minimum) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 9216)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $buffer_addr;
      var $minimum_addr;
      var $cfg;
      var $rsv;
      var $rov;
      var $pcm_buf=__stackBase__;
      var $mp3_in;
      var $samples_out;
      var $i;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $minimum_addr=$minimum;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_rpg=(($1+85672)|0);
      $rsv=$sv_rpg;
      var $2=$gfc_addr;
      var $ov_rpg=(($2+85676)|0);
      $rov=$ov_rpg;
      var $3=$cfg;
      var $decode_on_the_fly=(($3+120)|0);
      var $4=HEAP32[(($decode_on_the_fly)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 37; break; }
    case 3: 
      var $5=$minimum_addr;
      $mp3_in=$5;
      $samples_out=-1;
      label = 4; break;
    case 4: 
      var $6=$samples_out;
      var $cmp=(($6)|0)!=0;
      if ($cmp) { label = 5; break; } else { label = 36; break; }
    case 5: 
      var $7=$gfc_addr;
      var $hip=(($7+85804)|0);
      var $8=HEAP32[(($hip)>>2)];
      var $9=$buffer_addr;
      var $10=$mp3_in;
      var $arrayidx=(($pcm_buf)|0);
      var $arraydecay=(($arrayidx)|0);
      var $arrayidx2=(($pcm_buf+4608)|0);
      var $arraydecay3=(($arrayidx2)|0);
      var $call=_hip_decode1_unclipped($8, $9, $10, $arraydecay, $arraydecay3);
      $samples_out=$call;
      $mp3_in=0;
      var $11=$samples_out;
      var $cmp4=(($11)|0)==-1;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $samples_out=0;
      label = 7; break;
    case 7: 
      var $12=$samples_out;
      var $cmp6=(($12)|0) > 0;
      if ($cmp6) { label = 8; break; } else { label = 35; break; }
    case 8: 
      var $13=$cfg;
      var $findPeakSample=(($13+116)|0);
      var $14=HEAP32[(($findPeakSample)>>2)];
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { label = 9; break; } else { label = 30; break; }
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $15=$i;
      var $16=$samples_out;
      var $cmp10=(($15)|0) < (($16)|0);
      if ($cmp10) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $17=$i;
      var $arrayidx11=(($pcm_buf)|0);
      var $arrayidx12=(($arrayidx11+($17<<2))|0);
      var $18=HEAPF32[(($arrayidx12)>>2)];
      var $19=$rov;
      var $PeakSample=(($19+4)|0);
      var $20=HEAPF32[(($PeakSample)>>2)];
      var $cmp13=$18 > $20;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$i;
      var $arrayidx15=(($pcm_buf)|0);
      var $arrayidx16=(($arrayidx15+($21<<2))|0);
      var $22=HEAPF32[(($arrayidx16)>>2)];
      var $23=$rov;
      var $PeakSample17=(($23+4)|0);
      HEAPF32[(($PeakSample17)>>2)]=$22;
      label = 16; break;
    case 13: 
      var $24=$i;
      var $arrayidx18=(($pcm_buf)|0);
      var $arrayidx19=(($arrayidx18+($24<<2))|0);
      var $25=HEAPF32[(($arrayidx19)>>2)];
      var $sub=(-$25);
      var $26=$rov;
      var $PeakSample20=(($26+4)|0);
      var $27=HEAPF32[(($PeakSample20)>>2)];
      var $cmp21=$sub > $27;
      if ($cmp21) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=$i;
      var $arrayidx23=(($pcm_buf)|0);
      var $arrayidx24=(($arrayidx23+($28<<2))|0);
      var $29=HEAPF32[(($arrayidx24)>>2)];
      var $sub25=(-$29);
      var $30=$rov;
      var $PeakSample26=(($30+4)|0);
      HEAPF32[(($PeakSample26)>>2)]=$sub25;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 18: 
      var $32=$cfg;
      var $channels_out=(($32+56)|0);
      var $33=HEAP32[(($channels_out)>>2)];
      var $cmp29=(($33)|0) > 1;
      if ($cmp29) { label = 19; break; } else { label = 29; break; }
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $34=$i;
      var $35=$samples_out;
      var $cmp32=(($34)|0) < (($35)|0);
      if ($cmp32) { label = 21; break; } else { label = 28; break; }
    case 21: 
      var $36=$i;
      var $arrayidx34=(($pcm_buf+4608)|0);
      var $arrayidx35=(($arrayidx34+($36<<2))|0);
      var $37=HEAPF32[(($arrayidx35)>>2)];
      var $38=$rov;
      var $PeakSample36=(($38+4)|0);
      var $39=HEAPF32[(($PeakSample36)>>2)];
      var $cmp37=$37 > $39;
      if ($cmp37) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $40=$i;
      var $arrayidx39=(($pcm_buf+4608)|0);
      var $arrayidx40=(($arrayidx39+($40<<2))|0);
      var $41=HEAPF32[(($arrayidx40)>>2)];
      var $42=$rov;
      var $PeakSample41=(($42+4)|0);
      HEAPF32[(($PeakSample41)>>2)]=$41;
      label = 26; break;
    case 23: 
      var $43=$i;
      var $arrayidx43=(($pcm_buf+4608)|0);
      var $arrayidx44=(($arrayidx43+($43<<2))|0);
      var $44=HEAPF32[(($arrayidx44)>>2)];
      var $sub45=(-$44);
      var $45=$rov;
      var $PeakSample46=(($45+4)|0);
      var $46=HEAPF32[(($PeakSample46)>>2)];
      var $cmp47=$sub45 > $46;
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $47=$i;
      var $arrayidx49=(($pcm_buf+4608)|0);
      var $arrayidx50=(($arrayidx49+($47<<2))|0);
      var $48=HEAPF32[(($arrayidx50)>>2)];
      var $sub51=(-$48);
      var $49=$rov;
      var $PeakSample52=(($49+4)|0);
      HEAPF32[(($PeakSample52)>>2)]=$sub51;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $50=$i;
      var $inc56=((($50)+(1))|0);
      $i=$inc56;
      label = 20; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $51=$cfg;
      var $findReplayGain=(($51+112)|0);
      var $52=HEAP32[(($findReplayGain)>>2)];
      var $tobool60=(($52)|0)!=0;
      if ($tobool60) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $53=$rsv;
      var $rgdata=(($53)|0);
      var $54=HEAP32[(($rgdata)>>2)];
      var $arrayidx62=(($pcm_buf)|0);
      var $arraydecay63=(($arrayidx62)|0);
      var $arrayidx64=(($pcm_buf+4608)|0);
      var $arraydecay65=(($arrayidx64)|0);
      var $55=$samples_out;
      var $56=$cfg;
      var $channels_out66=(($56+56)|0);
      var $57=HEAP32[(($channels_out66)>>2)];
      var $call67=_AnalyzeSamples($54, $arraydecay63, $arraydecay65, $55, $57);
      var $cmp68=(($call67)|0)==0;
      if ($cmp68) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $retval=-6;
      label = 38; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 4; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $58=$minimum_addr;
      $retval=$58;
      label = 38; break;
    case 38: 
      var $59=$retval;
      STACKTOP = __stackBase__;
      return $59;
    default: assert(0, "bad label: " + label);
  }

}
_do_gain_analysis["X"]=1;

function _init_bit_stream_w($gfc) {
  var label = 0;


  var $gfc_addr;
  var $esv;
  $gfc_addr=$gfc;
  var $0=$gfc_addr;
  var $sv_enc=(($0+27820)|0);
  $esv=$sv_enc;
  var $1=$esv;
  var $w_ptr=(($1+24308)|0);
  HEAP32[(($w_ptr)>>2)]=0;
  var $2=$esv;
  var $h_ptr=(($2+24304)|0);
  HEAP32[(($h_ptr)>>2)]=0;
  var $3=$esv;
  var $h_ptr1=(($3+24304)|0);
  var $4=HEAP32[(($h_ptr1)>>2)];
  var $5=$esv;
  var $header=(($5+12016)|0);
  var $arrayidx=(($header+($4)*(48))|0);
  var $write_timing=(($arrayidx)|0);
  HEAP32[(($write_timing)>>2)]=0;
  var $call=_malloc(147456);
  var $6=$gfc_addr;
  var $bs=(($6+284)|0);
  var $buf=(($bs)|0);
  HEAP32[(($buf)>>2)]=$call;
  var $7=$gfc_addr;
  var $bs2=(($7+284)|0);
  var $buf_size=(($bs2+4)|0);
  HEAP32[(($buf_size)>>2)]=147456;
  var $8=$gfc_addr;
  var $bs3=(($8+284)|0);
  var $buf_byte_idx=(($bs3+12)|0);
  HEAP32[(($buf_byte_idx)>>2)]=-1;
  var $9=$gfc_addr;
  var $bs4=(($9+284)|0);
  var $buf_bit_idx=(($bs4+16)|0);
  HEAP32[(($buf_bit_idx)>>2)]=0;
  var $10=$gfc_addr;
  var $bs5=(($10+284)|0);
  var $totbit=(($bs5+8)|0);
  HEAP32[(($totbit)>>2)]=0;

  return;
}


function _writeheader($gfc, $val, $j) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $val_addr;
      var $j_addr;
      var $esv;
      var $ptr;
      var $k;
      $gfc_addr=$gfc;
      $val_addr=$val;
      $j_addr=$j;
      var $0=$gfc_addr;
      var $sv_enc=(($0+27820)|0);
      $esv=$sv_enc;
      var $1=$esv;
      var $h_ptr=(($1+24304)|0);
      var $2=HEAP32[(($h_ptr)>>2)];
      var $3=$esv;
      var $header=(($3+12016)|0);
      var $arrayidx=(($header+($2)*(48))|0);
      var $ptr1=(($arrayidx+4)|0);
      var $4=HEAP32[(($ptr1)>>2)];
      $ptr=$4;
      label = 3; break;
    case 3: 
      var $5=$j_addr;
      var $cmp=(($5)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$j_addr;
      var $7=$ptr;
      var $and=$7 & 7;
      var $sub=(((8)-($and))|0);
      var $cmp2=(($6)|0) < (($sub)|0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$j_addr;
      var $cond = $8;label = 7; break;
    case 6: 
      var $9=$ptr;
      var $and3=$9 & 7;
      var $sub4=(((8)-($and3))|0);
      var $cond = $sub4;label = 7; break;
    case 7: 
      var $cond;
      $k=$cond;
      var $10=$k;
      var $11=$j_addr;
      var $sub5=((($11)-($10))|0);
      $j_addr=$sub5;
      var $12=$val_addr;
      var $13=$j_addr;
      var $shr=$12 >> (($13)|0);
      var $14=$ptr;
      var $and6=$14 & 7;
      var $sub7=(((8)-($and6))|0);
      var $15=$k;
      var $sub8=((($sub7)-($15))|0);
      var $shl=$shr << $sub8;
      var $16=$ptr;
      var $shr9=$16 >> 3;
      var $17=$esv;
      var $h_ptr10=(($17+24304)|0);
      var $18=HEAP32[(($h_ptr10)>>2)];
      var $19=$esv;
      var $header11=(($19+12016)|0);
      var $arrayidx12=(($header11+($18)*(48))|0);
      var $buf=(($arrayidx12+8)|0);
      var $arrayidx13=(($buf+$shr9)|0);
      var $20=HEAP8[($arrayidx13)];
      var $conv=(($20 << 24) >> 24);
      var $or=$conv | $shl;
      var $conv14=(($or) & 255);
      HEAP8[($arrayidx13)]=$conv14;
      var $21=$k;
      var $22=$ptr;
      var $add=((($22)+($21))|0);
      $ptr=$add;
      label = 3; break;
    case 8: 
      var $23=$ptr;
      var $24=$esv;
      var $h_ptr15=(($24+24304)|0);
      var $25=HEAP32[(($h_ptr15)>>2)];
      var $26=$esv;
      var $header16=(($26+12016)|0);
      var $arrayidx17=(($header16+($25)*(48))|0);
      var $ptr18=(($arrayidx17+4)|0);
      HEAP32[(($ptr18)>>2)]=$23;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_writeheader["X"]=1;

function _putbits2($gfc, $val, $j) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $val_addr;
      var $j_addr;
      var $esv;
      var $bs;
      var $k;
      $gfc_addr=$gfc;
      $val_addr=$val;
      $j_addr=$j;
      var $0=$gfc_addr;
      var $sv_enc=(($0+27820)|0);
      $esv=$sv_enc;
      var $1=$gfc_addr;
      var $bs1=(($1+284)|0);
      $bs=$bs1;
      label = 3; break;
    case 3: 
      var $2=$j_addr;
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $3=$bs;
      var $buf_bit_idx=(($3+16)|0);
      var $4=HEAP32[(($buf_bit_idx)>>2)];
      var $cmp2=(($4)|0)==0;
      if ($cmp2) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$bs;
      var $buf_bit_idx3=(($5+16)|0);
      HEAP32[(($buf_bit_idx3)>>2)]=8;
      var $6=$bs;
      var $buf_byte_idx=(($6+12)|0);
      var $7=HEAP32[(($buf_byte_idx)>>2)];
      var $inc=((($7)+(1))|0);
      HEAP32[(($buf_byte_idx)>>2)]=$inc;
      var $8=$esv;
      var $w_ptr=(($8+24308)|0);
      var $9=HEAP32[(($w_ptr)>>2)];
      var $10=$esv;
      var $header=(($10+12016)|0);
      var $arrayidx=(($header+($9)*(48))|0);
      var $write_timing=(($arrayidx)|0);
      var $11=HEAP32[(($write_timing)>>2)];
      var $12=$bs;
      var $totbit=(($12+8)|0);
      var $13=HEAP32[(($totbit)>>2)];
      var $cmp4=(($11)|0)==(($13)|0);
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$gfc_addr;
      _putheader_bits($14);
      label = 7; break;
    case 7: 
      var $15=$bs;
      var $buf_byte_idx6=(($15+12)|0);
      var $16=HEAP32[(($buf_byte_idx6)>>2)];
      var $17=$bs;
      var $buf=(($17)|0);
      var $18=HEAP32[(($buf)>>2)];
      var $arrayidx7=(($18+$16)|0);
      HEAP8[($arrayidx7)]=0;
      label = 8; break;
    case 8: 
      var $19=$j_addr;
      var $20=$bs;
      var $buf_bit_idx9=(($20+16)|0);
      var $21=HEAP32[(($buf_bit_idx9)>>2)];
      var $cmp10=(($19)|0) < (($21)|0);
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $22=$j_addr;
      var $cond = $22;label = 11; break;
    case 10: 
      var $23=$bs;
      var $buf_bit_idx11=(($23+16)|0);
      var $24=HEAP32[(($buf_bit_idx11)>>2)];
      var $cond = $24;label = 11; break;
    case 11: 
      var $cond;
      $k=$cond;
      var $25=$k;
      var $26=$j_addr;
      var $sub=((($26)-($25))|0);
      $j_addr=$sub;
      var $27=$k;
      var $28=$bs;
      var $buf_bit_idx12=(($28+16)|0);
      var $29=HEAP32[(($buf_bit_idx12)>>2)];
      var $sub13=((($29)-($27))|0);
      HEAP32[(($buf_bit_idx12)>>2)]=$sub13;
      var $30=$val_addr;
      var $31=$j_addr;
      var $shr=$30 >> (($31)|0);
      var $32=$bs;
      var $buf_bit_idx14=(($32+16)|0);
      var $33=HEAP32[(($buf_bit_idx14)>>2)];
      var $shl=$shr << $33;
      var $34=$bs;
      var $buf_byte_idx15=(($34+12)|0);
      var $35=HEAP32[(($buf_byte_idx15)>>2)];
      var $36=$bs;
      var $buf16=(($36)|0);
      var $37=HEAP32[(($buf16)>>2)];
      var $arrayidx17=(($37+$35)|0);
      var $38=HEAP8[($arrayidx17)];
      var $conv=(($38)&255);
      var $or=$conv | $shl;
      var $conv18=(($or) & 255);
      HEAP8[($arrayidx17)]=$conv18;
      var $39=$k;
      var $40=$bs;
      var $totbit19=(($40+8)|0);
      var $41=HEAP32[(($totbit19)>>2)];
      var $add=((($41)+($39))|0);
      HEAP32[(($totbit19)>>2)]=$add;
      label = 3; break;
    case 12: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_putbits2["X"]=1;

function _ShortHuffmancodebits($gfc, $gi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gi_addr;
      var $bits;
      var $region1Start;
      $gfc_addr=$gfc;
      $gi_addr=$gi;
      var $0=$gfc_addr;
      var $scalefac_band=(($0+21360)|0);
      var $s=(($scalefac_band+92)|0);
      var $arrayidx=(($s+12)|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      var $mul=((($1)*(3))&-1);
      $region1Start=$mul;
      var $2=$region1Start;
      var $3=$gi_addr;
      var $big_values=(($3+4772)|0);
      var $4=HEAP32[(($big_values)>>2)];
      var $cmp=(($2)|0) > (($4)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$gi_addr;
      var $big_values1=(($5+4772)|0);
      var $6=HEAP32[(($big_values1)>>2)];
      $region1Start=$6;
      label = 4; break;
    case 4: 
      var $7=$gfc_addr;
      var $8=$gi_addr;
      var $table_select=(($8+4796)|0);
      var $arrayidx2=(($table_select)|0);
      var $9=HEAP32[(($arrayidx2)>>2)];
      var $10=$region1Start;
      var $11=$gi_addr;
      var $call=_Huffmancode($7, $9, 0, $10, $11);
      $bits=$call;
      var $12=$gfc_addr;
      var $13=$gi_addr;
      var $table_select3=(($13+4796)|0);
      var $arrayidx4=(($table_select3+4)|0);
      var $14=HEAP32[(($arrayidx4)>>2)];
      var $15=$region1Start;
      var $16=$gi_addr;
      var $big_values5=(($16+4772)|0);
      var $17=HEAP32[(($big_values5)>>2)];
      var $18=$gi_addr;
      var $call6=_Huffmancode($12, $14, $15, $17, $18);
      var $19=$bits;
      var $add=((($19)+($call6))|0);
      $bits=$add;
      var $20=$bits;

      return $20;
    default: assert(0, "bad label: " + label);
  }

}


function _LongHuffmancodebits($gfc, $gi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gi_addr;
      var $i;
      var $bigvalues;
      var $bits;
      var $region1Start;
      var $region2Start;
      $gfc_addr=$gfc;
      $gi_addr=$gi;
      var $0=$gi_addr;
      var $big_values=(($0+4772)|0);
      var $1=HEAP32[(($big_values)>>2)];
      $bigvalues=$1;
      var $2=$gi_addr;
      var $region0_count=(($2+4824)|0);
      var $3=HEAP32[(($region0_count)>>2)];
      var $add=((($3)+(1))|0);
      $i=$add;
      var $4=$i;
      var $5=$gfc_addr;
      var $scalefac_band=(($5+21360)|0);
      var $l=(($scalefac_band)|0);
      var $arrayidx=(($l+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $region1Start=$6;
      var $7=$gi_addr;
      var $region1_count=(($7+4828)|0);
      var $8=HEAP32[(($region1_count)>>2)];
      var $add1=((($8)+(1))|0);
      var $9=$i;
      var $add2=((($9)+($add1))|0);
      $i=$add2;
      var $10=$i;
      var $11=$gfc_addr;
      var $scalefac_band3=(($11+21360)|0);
      var $l4=(($scalefac_band3)|0);
      var $arrayidx5=(($l4+($10<<2))|0);
      var $12=HEAP32[(($arrayidx5)>>2)];
      $region2Start=$12;
      var $13=$region1Start;
      var $14=$bigvalues;
      var $cmp=(($13)|0) > (($14)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$bigvalues;
      $region1Start=$15;
      label = 4; break;
    case 4: 
      var $16=$region2Start;
      var $17=$bigvalues;
      var $cmp6=(($16)|0) > (($17)|0);
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$bigvalues;
      $region2Start=$18;
      label = 6; break;
    case 6: 
      var $19=$gfc_addr;
      var $20=$gi_addr;
      var $table_select=(($20+4796)|0);
      var $arrayidx9=(($table_select)|0);
      var $21=HEAP32[(($arrayidx9)>>2)];
      var $22=$region1Start;
      var $23=$gi_addr;
      var $call=_Huffmancode($19, $21, 0, $22, $23);
      $bits=$call;
      var $24=$gfc_addr;
      var $25=$gi_addr;
      var $table_select10=(($25+4796)|0);
      var $arrayidx11=(($table_select10+4)|0);
      var $26=HEAP32[(($arrayidx11)>>2)];
      var $27=$region1Start;
      var $28=$region2Start;
      var $29=$gi_addr;
      var $call12=_Huffmancode($24, $26, $27, $28, $29);
      var $30=$bits;
      var $add13=((($30)+($call12))|0);
      $bits=$add13;
      var $31=$gfc_addr;
      var $32=$gi_addr;
      var $table_select14=(($32+4796)|0);
      var $arrayidx15=(($table_select14+8)|0);
      var $33=HEAP32[(($arrayidx15)>>2)];
      var $34=$region2Start;
      var $35=$bigvalues;
      var $36=$gi_addr;
      var $call16=_Huffmancode($31, $33, $34, $35, $36);
      var $37=$bits;
      var $add17=((($37)+($call16))|0);
      $bits=$add17;
      var $38=$bits;

      return $38;
    default: assert(0, "bad label: " + label);
  }

}
_LongHuffmancodebits["X"]=1;

function _huffman_coder_count1($gfc, $gi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gi_addr;
      var $h;
      var $i;
      var $bits;
      var $ix;
      var $xr;
      var $huffbits;
      var $p;
      var $v;
      $gfc_addr=$gfc;
      $gi_addr=$gi;
      var $0=$gi_addr;
      var $count1table_select=(($0+4840)|0);
      var $1=HEAP32[(($count1table_select)>>2)];
      var $add=((($1)+(32))|0);
      var $arrayidx=((5327352+($add<<4))|0);
      $h=$arrayidx;
      $bits=0;
      var $2=$gi_addr;
      var $big_values=(($2+4772)|0);
      var $3=HEAP32[(($big_values)>>2)];
      var $4=$gi_addr;
      var $l3_enc=(($4+2304)|0);
      var $arrayidx1=(($l3_enc+($3<<2))|0);
      $ix=$arrayidx1;
      var $5=$gi_addr;
      var $big_values2=(($5+4772)|0);
      var $6=HEAP32[(($big_values2)>>2)];
      var $7=$gi_addr;
      var $xr3=(($7)|0);
      var $arrayidx4=(($xr3+($6<<2))|0);
      $xr=$arrayidx4;
      var $8=$gi_addr;
      var $count1=(($8+4776)|0);
      var $9=HEAP32[(($count1)>>2)];
      var $10=$gi_addr;
      var $big_values5=(($10+4772)|0);
      var $11=HEAP32[(($big_values5)>>2)];
      var $sub=((($9)-($11))|0);
      var $div=((((($sub)|0))/(4))&-1);
      $i=$div;
      label = 3; break;
    case 3: 
      var $12=$i;
      var $cmp=(($12)|0) > 0;
      if ($cmp) { label = 4; break; } else { label = 22; break; }
    case 4: 
      $huffbits=0;
      $p=0;
      var $13=$ix;
      var $arrayidx6=(($13)|0);
      var $14=HEAP32[(($arrayidx6)>>2)];
      $v=$14;
      var $15=$v;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $16=$p;
      var $add7=((($16)+(8))|0);
      $p=$add7;
      var $17=$xr;
      var $arrayidx8=(($17)|0);
      var $18=HEAPF32[(($arrayidx8)>>2)];
      var $cmp9=$18 < 0;
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$huffbits;
      var $inc=((($19)+(1))|0);
      $huffbits=$inc;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=$ix;
      var $arrayidx12=(($20+4)|0);
      var $21=HEAP32[(($arrayidx12)>>2)];
      $v=$21;
      var $22=$v;
      var $tobool13=(($22)|0)!=0;
      if ($tobool13) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $23=$p;
      var $add15=((($23)+(4))|0);
      $p=$add15;
      var $24=$huffbits;
      var $mul=((($24<<1))&-1);
      $huffbits=$mul;
      var $25=$xr;
      var $arrayidx16=(($25+4)|0);
      var $26=HEAPF32[(($arrayidx16)>>2)];
      var $cmp17=$26 < 0;
      if ($cmp17) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=$huffbits;
      var $inc19=((($27)+(1))|0);
      $huffbits=$inc19;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $28=$ix;
      var $arrayidx22=(($28+8)|0);
      var $29=HEAP32[(($arrayidx22)>>2)];
      $v=$29;
      var $30=$v;
      var $tobool23=(($30)|0)!=0;
      if ($tobool23) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $31=$p;
      var $add25=((($31)+(2))|0);
      $p=$add25;
      var $32=$huffbits;
      var $mul26=((($32<<1))&-1);
      $huffbits=$mul26;
      var $33=$xr;
      var $arrayidx27=(($33+8)|0);
      var $34=HEAPF32[(($arrayidx27)>>2)];
      var $cmp28=$34 < 0;
      if ($cmp28) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=$huffbits;
      var $inc30=((($35)+(1))|0);
      $huffbits=$inc30;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $36=$ix;
      var $arrayidx33=(($36+12)|0);
      var $37=HEAP32[(($arrayidx33)>>2)];
      $v=$37;
      var $38=$v;
      var $tobool34=(($38)|0)!=0;
      if ($tobool34) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $39=$p;
      var $inc36=((($39)+(1))|0);
      $p=$inc36;
      var $40=$huffbits;
      var $mul37=((($40<<1))&-1);
      $huffbits=$mul37;
      var $41=$xr;
      var $arrayidx38=(($41+12)|0);
      var $42=HEAPF32[(($arrayidx38)>>2)];
      var $cmp39=$42 < 0;
      if ($cmp39) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $43=$huffbits;
      var $inc41=((($43)+(1))|0);
      $huffbits=$inc41;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $44=$ix;
      var $add_ptr=(($44+16)|0);
      $ix=$add_ptr;
      var $45=$xr;
      var $add_ptr44=(($45+16)|0);
      $xr=$add_ptr44;
      var $46=$gfc_addr;
      var $47=$huffbits;
      var $48=$p;
      var $49=$h;
      var $table=(($49+8)|0);
      var $50=HEAP32[(($table)>>2)];
      var $arrayidx45=(($50+($48<<1))|0);
      var $51=HEAP16[(($arrayidx45)>>1)];
      var $conv=(($51)&65535);
      var $add46=((($47)+($conv))|0);
      var $52=$p;
      var $53=$h;
      var $hlen=(($53+12)|0);
      var $54=HEAP32[(($hlen)>>2)];
      var $arrayidx47=(($54+$52)|0);
      var $55=HEAP8[($arrayidx47)];
      var $conv48=(($55)&255);
      _putbits2($46, $add46, $conv48);
      var $56=$p;
      var $57=$h;
      var $hlen49=(($57+12)|0);
      var $58=HEAP32[(($hlen49)>>2)];
      var $arrayidx50=(($58+$56)|0);
      var $59=HEAP8[($arrayidx50)];
      var $conv51=(($59)&255);
      var $60=$bits;
      var $add52=((($60)+($conv51))|0);
      $bits=$add52;
      label = 21; break;
    case 21: 
      var $61=$i;
      var $dec=((($61)-(1))|0);
      $i=$dec;
      label = 3; break;
    case 22: 
      var $62=$bits;

      return $62;
    default: assert(0, "bad label: " + label);
  }

}
_huffman_coder_count1["X"]=1;

function _Huffmancode($gfc, $tableindex, $start, $end, $gi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $tableindex_addr;
      var $start_addr;
      var $end_addr;
      var $gi_addr;
      var $h;
      var $linbits;
      var $i;
      var $bits;
      var $cbits;
      var $xbits;
      var $xlen1;
      var $ext;
      var $x1;
      var $x2;
      var $linbits_x1;
      var $linbits_x2;
      $gfc_addr=$gfc;
      $tableindex_addr=$tableindex;
      $start_addr=$start;
      $end_addr=$end;
      $gi_addr=$gi;
      var $0=$tableindex_addr;
      var $arrayidx=((5327352+($0<<4))|0);
      $h=$arrayidx;
      var $1=$h;
      var $xlen=(($1)|0);
      var $2=HEAP32[(($xlen)>>2)];
      $linbits=$2;
      $bits=0;
      var $3=$tableindex_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$bits;
      $retval=$4;
      label = 23; break;
    case 4: 
      var $5=$start_addr;
      $i=$5;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $7=$end_addr;
      var $cmp=(($6)|0) < (($7)|0);
      if ($cmp) { label = 6; break; } else { label = 22; break; }
    case 6: 
      $cbits=0;
      $xbits=0;
      var $8=$h;
      var $xlen2=(($8)|0);
      var $9=HEAP32[(($xlen2)>>2)];
      $xlen1=$9;
      $ext=0;
      var $10=$i;
      var $11=$gi_addr;
      var $l3_enc=(($11+2304)|0);
      var $arrayidx3=(($l3_enc+($10<<2))|0);
      var $12=HEAP32[(($arrayidx3)>>2)];
      $x1=$12;
      var $13=$i;
      var $add=((($13)+(1))|0);
      var $14=$gi_addr;
      var $l3_enc4=(($14+2304)|0);
      var $arrayidx5=(($l3_enc4+($add<<2))|0);
      var $15=HEAP32[(($arrayidx5)>>2)];
      $x2=$15;
      var $16=$x1;
      var $cmp6=(($16)|0)!=0;
      if ($cmp6) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $17=$i;
      var $18=$gi_addr;
      var $xr=(($18)|0);
      var $arrayidx8=(($xr+($17<<2))|0);
      var $19=HEAPF32[(($arrayidx8)>>2)];
      var $cmp9=$19 < 0;
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$ext;
      var $inc=((($20)+(1))|0);
      $ext=$inc;
      label = 9; break;
    case 9: 
      var $21=$cbits;
      var $dec=((($21)-(1))&65535);
      $cbits=$dec;
      label = 10; break;
    case 10: 
      var $22=$tableindex_addr;
      var $cmp13=(($22)>>>0) > 15;
      if ($cmp13) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $23=$x1;
      var $cmp15=(($23)>>>0) >= 15;
      if ($cmp15) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $24=$x1;
      var $sub=((($24)-(15))|0);
      var $conv=(($sub) & 65535);
      $linbits_x1=$conv;
      var $25=$linbits_x1;
      var $conv17=(($25)&65535);
      var $shl=$conv17 << 1;
      var $26=$ext;
      var $or=$26 | $shl;
      $ext=$or;
      var $27=$linbits;
      var $conv18=(($27) & 65535);
      $xbits=$conv18;
      $x1=15;
      label = 13; break;
    case 13: 
      var $28=$x2;
      var $cmp20=(($28)>>>0) >= 15;
      if ($cmp20) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $29=$x2;
      var $sub23=((($29)-(15))|0);
      var $conv24=(($sub23) & 65535);
      $linbits_x2=$conv24;
      var $30=$linbits;
      var $31=$ext;
      var $shl25=$31 << $30;
      $ext=$shl25;
      var $32=$linbits_x2;
      var $conv26=(($32)&65535);
      var $33=$ext;
      var $or27=$33 | $conv26;
      $ext=$or27;
      var $34=$linbits;
      var $35=$xbits;
      var $conv28=(($35)&65535);
      var $add29=((($conv28)+($34))|0);
      var $conv30=(($add29) & 65535);
      $xbits=$conv30;
      $x2=15;
      label = 15; break;
    case 15: 
      $xlen1=16;
      label = 16; break;
    case 16: 
      var $36=$x2;
      var $cmp33=(($36)|0)!=0;
      if ($cmp33) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $37=$ext;
      var $shl36=$37 << 1;
      $ext=$shl36;
      var $38=$i;
      var $add37=((($38)+(1))|0);
      var $39=$gi_addr;
      var $xr38=(($39)|0);
      var $arrayidx39=(($xr38+($add37<<2))|0);
      var $40=HEAPF32[(($arrayidx39)>>2)];
      var $cmp40=$40 < 0;
      if ($cmp40) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $41=$ext;
      var $inc43=((($41)+(1))|0);
      $ext=$inc43;
      label = 19; break;
    case 19: 
      var $42=$cbits;
      var $dec45=((($42)-(1))&65535);
      $cbits=$dec45;
      label = 20; break;
    case 20: 
      var $43=$x1;
      var $44=$xlen1;
      var $mul=((($43)*($44))&-1);
      var $45=$x2;
      var $add47=((($mul)+($45))|0);
      $x1=$add47;
      var $46=$cbits;
      var $conv48=(($46 << 16) >> 16);
      var $47=$xbits;
      var $conv49=(($47)&65535);
      var $sub50=((($conv49)-($conv48))|0);
      var $conv51=(($sub50) & 65535);
      $xbits=$conv51;
      var $48=$x1;
      var $49=$h;
      var $hlen=(($49+12)|0);
      var $50=HEAP32[(($hlen)>>2)];
      var $arrayidx52=(($50+$48)|0);
      var $51=HEAP8[($arrayidx52)];
      var $conv53=(($51)&255);
      var $52=$cbits;
      var $conv54=(($52 << 16) >> 16);
      var $add55=((($conv54)+($conv53))|0);
      var $conv56=(($add55) & 65535);
      $cbits=$conv56;
      var $53=$gfc_addr;
      var $54=$x1;
      var $55=$h;
      var $table=(($55+8)|0);
      var $56=HEAP32[(($table)>>2)];
      var $arrayidx57=(($56+($54<<1))|0);
      var $57=HEAP16[(($arrayidx57)>>1)];
      var $conv58=(($57)&65535);
      var $58=$cbits;
      var $conv59=(($58 << 16) >> 16);
      _putbits2($53, $conv58, $conv59);
      var $59=$gfc_addr;
      var $60=$ext;
      var $61=$xbits;
      var $conv60=(($61)&65535);
      _putbits2($59, $60, $conv60);
      var $62=$cbits;
      var $conv61=(($62 << 16) >> 16);
      var $63=$xbits;
      var $conv62=(($63)&65535);
      var $add63=((($conv61)+($conv62))|0);
      var $64=$bits;
      var $add64=((($64)+($add63))|0);
      $bits=$add64;
      label = 21; break;
    case 21: 
      var $65=$i;
      var $add65=((($65)+(2))|0);
      $i=$add65;
      label = 5; break;
    case 22: 
      var $66=$bits;
      $retval=$66;
      label = 23; break;
    case 23: 
      var $67=$retval;

      return $67;
    default: assert(0, "bad label: " + label);
  }

}
_Huffmancode["X"]=1;

function _putheader_bits($gfc) {
  var label = 0;


  var $gfc_addr;
  var $cfg;
  var $esv;
  var $bs;
  $gfc_addr=$gfc;
  var $0=$gfc_addr;
  var $cfg1=(($0+16)|0);
  $cfg=$cfg1;
  var $1=$gfc_addr;
  var $sv_enc=(($1+27820)|0);
  $esv=$sv_enc;
  var $2=$gfc_addr;
  var $bs2=(($2+284)|0);
  $bs=$bs2;
  var $3=$bs;
  var $buf_byte_idx=(($3+12)|0);
  var $4=HEAP32[(($buf_byte_idx)>>2)];
  var $5=$bs;
  var $buf=(($5)|0);
  var $6=HEAP32[(($buf)>>2)];
  var $arrayidx=(($6+$4)|0);
  var $7=$esv;
  var $w_ptr=(($7+24308)|0);
  var $8=HEAP32[(($w_ptr)>>2)];
  var $9=$esv;
  var $header=(($9+12016)|0);
  var $arrayidx3=(($header+($8)*(48))|0);
  var $buf4=(($arrayidx3+8)|0);
  var $10=$buf4;
  var $11=$cfg;
  var $sideinfo_len=(($11+8)|0);
  var $12=HEAP32[(($sideinfo_len)>>2)];
  assert($12 % 1 === 0);_memcpy($arrayidx, $10, $12);
  var $13=$cfg;
  var $sideinfo_len5=(($13+8)|0);
  var $14=HEAP32[(($sideinfo_len5)>>2)];
  var $15=$bs;
  var $buf_byte_idx6=(($15+12)|0);
  var $16=HEAP32[(($buf_byte_idx6)>>2)];
  var $add=((($16)+($14))|0);
  HEAP32[(($buf_byte_idx6)>>2)]=$add;
  var $17=$cfg;
  var $sideinfo_len7=(($17+8)|0);
  var $18=HEAP32[(($sideinfo_len7)>>2)];
  var $mul=((($18<<3))&-1);
  var $19=$bs;
  var $totbit=(($19+8)|0);
  var $20=HEAP32[(($totbit)>>2)];
  var $add8=((($20)+($mul))|0);
  HEAP32[(($totbit)>>2)]=$add8;
  var $21=$esv;
  var $w_ptr9=(($21+24308)|0);
  var $22=HEAP32[(($w_ptr9)>>2)];
  var $add10=((($22)+(1))|0);
  var $and=$add10 & 255;
  var $23=$esv;
  var $w_ptr11=(($23+24308)|0);
  HEAP32[(($w_ptr11)>>2)]=$and;

  return;
}
_putheader_bits["X"]=1;

function _lame_encode_mp3_frame($gfc, $inbuf_l, $inbuf_r, $mp3buf, $mp3buf_size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4000)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $inbuf_l_addr;
      var $inbuf_r_addr;
      var $mp3buf_addr;
      var $mp3buf_size_addr;
      var $cfg;
      var $mp3count;
      var $masking_LR=__stackBase__;
      var $masking_MS=(__stackBase__)+(1952);
      var $masking;
      var $inbuf=(__stackBase__)+(3904);
      var $tot_ener=(__stackBase__)+(3912);
      var $ms_ener_ratio=(__stackBase__)+(3944);
      var $pe=(__stackBase__)+(3952);
      var $pe_MS=(__stackBase__)+(3968);
      var $pe_use;
      var $ch;
      var $gr;
      var $ret;
      var $bufp=(__stackBase__)+(3984);
      var $blocktype=(__stackBase__)+(3992);
      var $cod_info;
      var $sum_pe_MS;
      var $sum_pe_LR;
      var $gi0;
      var $gi1;
      var $i;
      var $f;
      var $framesize;
      var $j;
      $gfc_addr=$gfc;
      $inbuf_l_addr=$inbuf_l;
      $inbuf_r_addr=$inbuf_r;
      $mp3buf_addr=$mp3buf;
      $mp3buf_size_addr=$mp3buf_size;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$ms_ener_ratio;
      assert(8 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[((5318024)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((5318028)>>2)];
      var $2=$pe;
      HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0; HEAP32[((($2)+(12))>>2)]=0;
      var $3=$pe_MS;
      HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; HEAP32[((($3)+(12))>>2)]=0;
      var $4=$inbuf_l_addr;
      var $arrayidx=(($inbuf)|0);
      HEAP32[(($arrayidx)>>2)]=$4;
      var $5=$inbuf_r_addr;
      var $arrayidx2=(($inbuf+4)|0);
      HEAP32[(($arrayidx2)>>2)]=$5;
      var $6=$gfc_addr;
      var $lame_encode_frame_init=(($6+4)|0);
      var $7=HEAP32[(($lame_encode_frame_init)>>2)];
      var $cmp=(($7)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$gfc_addr;
      var $arraydecay=(($inbuf)|0);
      _lame_encode_frame_init($8, $arraydecay);
      label = 4; break;
    case 4: 
      var $9=$gfc_addr;
      var $ov_enc=(($9+84036)|0);
      var $padding=(($ov_enc+712)|0);
      HEAP32[(($padding)>>2)]=0;
      var $10=$gfc_addr;
      var $sv_enc=(($10+27820)|0);
      var $frac_SpF=(($sv_enc+12008)|0);
      var $11=HEAP32[(($frac_SpF)>>2)];
      var $12=$gfc_addr;
      var $sv_enc3=(($12+27820)|0);
      var $slot_lag=(($sv_enc3+12012)|0);
      var $13=HEAP32[(($slot_lag)>>2)];
      var $sub=((($13)-($11))|0);
      HEAP32[(($slot_lag)>>2)]=$sub;
      var $cmp4=(($sub)|0) < 0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$cfg;
      var $samplerate_out=(($14+48)|0);
      var $15=HEAP32[(($samplerate_out)>>2)];
      var $16=$gfc_addr;
      var $sv_enc6=(($16+27820)|0);
      var $slot_lag7=(($sv_enc6+12012)|0);
      var $17=HEAP32[(($slot_lag7)>>2)];
      var $add=((($17)+($15))|0);
      HEAP32[(($slot_lag7)>>2)]=$add;
      var $18=$gfc_addr;
      var $ov_enc8=(($18+84036)|0);
      var $padding9=(($ov_enc8+712)|0);
      HEAP32[(($padding9)>>2)]=1;
      label = 6; break;
    case 6: 
      var $19=$bufp;
      HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0;
      $gr=0;
      label = 7; break;
    case 7: 
      var $20=$gr;
      var $21=$cfg;
      var $mode_gr=(($21+60)|0);
      var $22=HEAP32[(($mode_gr)>>2)];
      var $cmp11=(($20)|0) < (($22)|0);
      if ($cmp11) { label = 8; break; } else { label = 24; break; }
    case 8: 
      $ch=0;
      label = 9; break;
    case 9: 
      var $23=$ch;
      var $24=$cfg;
      var $channels_out=(($24+56)|0);
      var $25=HEAP32[(($channels_out)>>2)];
      var $cmp13=(($23)|0) < (($25)|0);
      if ($cmp13) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $26=$gr;
      var $mul=((($26)*(576))&-1);
      var $add15=((($mul)+(576))|0);
      var $sub16=((($add15)-(272))|0);
      var $27=$ch;
      var $arrayidx17=(($inbuf+($27<<2))|0);
      var $28=HEAP32[(($arrayidx17)>>2)];
      var $arrayidx18=(($28+($sub16<<2))|0);
      var $29=$ch;
      var $arrayidx19=(($bufp+($29<<2))|0);
      HEAP32[(($arrayidx19)>>2)]=$arrayidx18;
      label = 11; break;
    case 11: 
      var $30=$ch;
      var $inc=((($30)+(1))|0);
      $ch=$inc;
      label = 9; break;
    case 12: 
      var $31=$gfc_addr;
      var $arraydecay20=(($bufp)|0);
      var $32=$gr;
      var $arraydecay21=(($masking_LR)|0);
      var $arraydecay22=(($masking_MS)|0);
      var $33=$gr;
      var $arrayidx23=(($pe+($33<<3))|0);
      var $arraydecay24=(($arrayidx23)|0);
      var $34=$gr;
      var $arrayidx25=(($pe_MS+($34<<3))|0);
      var $arraydecay26=(($arrayidx25)|0);
      var $35=$gr;
      var $arrayidx27=(($tot_ener+($35<<4))|0);
      var $arraydecay28=(($arrayidx27)|0);
      var $arraydecay29=(($blocktype)|0);
      var $call=_L3psycho_anal_vbr($31, $arraydecay20, $32, $arraydecay21, $arraydecay22, $arraydecay24, $arraydecay26, $arraydecay28, $arraydecay29);
      $ret=$call;
      var $36=$ret;
      var $cmp30=(($36)|0)!=0;
      if ($cmp30) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=-4;
      label = 103; break;
    case 14: 
      var $37=$cfg;
      var $mode=(($37+164)|0);
      var $38=HEAP32[(($mode)>>2)];
      var $cmp33=(($38)|0)==1;
      if ($cmp33) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $39=$gr;
      var $arrayidx35=(($tot_ener+($39<<4))|0);
      var $arrayidx36=(($arrayidx35+8)|0);
      var $40=HEAPF32[(($arrayidx36)>>2)];
      var $41=$gr;
      var $arrayidx37=(($tot_ener+($41<<4))|0);
      var $arrayidx38=(($arrayidx37+12)|0);
      var $42=HEAPF32[(($arrayidx38)>>2)];
      var $add39=($40)+($42);
      var $43=$gr;
      var $arrayidx40=(($ms_ener_ratio+($43<<2))|0);
      HEAPF32[(($arrayidx40)>>2)]=$add39;
      var $44=$gr;
      var $arrayidx41=(($ms_ener_ratio+($44<<2))|0);
      var $45=HEAPF32[(($arrayidx41)>>2)];
      var $cmp42=$45 > 0;
      if ($cmp42) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $46=$gr;
      var $arrayidx44=(($tot_ener+($46<<4))|0);
      var $arrayidx45=(($arrayidx44+12)|0);
      var $47=HEAPF32[(($arrayidx45)>>2)];
      var $48=$gr;
      var $arrayidx46=(($ms_ener_ratio+($48<<2))|0);
      var $49=HEAPF32[(($arrayidx46)>>2)];
      var $div=($47)/($49);
      var $50=$gr;
      var $arrayidx47=(($ms_ener_ratio+($50<<2))|0);
      HEAPF32[(($arrayidx47)>>2)]=$div;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      $ch=0;
      label = 19; break;
    case 19: 
      var $51=$ch;
      var $52=$cfg;
      var $channels_out51=(($52+56)|0);
      var $53=HEAP32[(($channels_out51)>>2)];
      var $cmp52=(($51)|0) < (($53)|0);
      if ($cmp52) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $54=$ch;
      var $55=$gr;
      var $56=$gfc_addr;
      var $l3_side=(($56+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx54=(($tt+($55)*(10504))|0);
      var $arrayidx55=(($arrayidx54+($54)*(5252))|0);
      $cod_info=$arrayidx55;
      var $57=$ch;
      var $arrayidx56=(($blocktype+($57<<2))|0);
      var $58=HEAP32[(($arrayidx56)>>2)];
      var $59=$cod_info;
      var $block_type=(($59+4788)|0);
      HEAP32[(($block_type)>>2)]=$58;
      var $60=$cod_info;
      var $mixed_block_flag=(($60+4792)|0);
      HEAP32[(($mixed_block_flag)>>2)]=0;
      label = 21; break;
    case 21: 
      var $61=$ch;
      var $inc58=((($61)+(1))|0);
      $ch=$inc58;
      label = 19; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $62=$gr;
      var $inc61=((($62)+(1))|0);
      $gr=$inc61;
      label = 7; break;
    case 24: 
      var $63=$gfc_addr;
      _adjust_ATH($63);
      var $64=$gfc_addr;
      var $arrayidx63=(($inbuf)|0);
      var $65=HEAP32[(($arrayidx63)>>2)];
      var $arrayidx64=(($inbuf+4)|0);
      var $66=HEAP32[(($arrayidx64)>>2)];
      _mdct_sub48($64, $65, $66);
      var $67=$gfc_addr;
      var $ov_enc65=(($67+84036)|0);
      var $mode_ext=(($ov_enc65+716)|0);
      HEAP32[(($mode_ext)>>2)]=0;
      var $68=$cfg;
      var $force_ms=(($68+64)|0);
      var $69=HEAP32[(($force_ms)>>2)];
      var $tobool=(($69)|0)!=0;
      if ($tobool) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $70=$gfc_addr;
      var $ov_enc67=(($70+84036)|0);
      var $mode_ext68=(($ov_enc67+716)|0);
      HEAP32[(($mode_ext68)>>2)]=2;
      label = 42; break;
    case 26: 
      var $71=$cfg;
      var $mode69=(($71+164)|0);
      var $72=HEAP32[(($mode69)>>2)];
      var $cmp70=(($72)|0)==1;
      if ($cmp70) { label = 27; break; } else { label = 41; break; }
    case 27: 
      $sum_pe_MS=0;
      $sum_pe_LR=0;
      $gr=0;
      label = 28; break;
    case 28: 
      var $73=$gr;
      var $74=$cfg;
      var $mode_gr73=(($74+60)|0);
      var $75=HEAP32[(($mode_gr73)>>2)];
      var $cmp74=(($73)|0) < (($75)|0);
      if ($cmp74) { label = 29; break; } else { label = 35; break; }
    case 29: 
      $ch=0;
      label = 30; break;
    case 30: 
      var $76=$ch;
      var $77=$cfg;
      var $channels_out77=(($77+56)|0);
      var $78=HEAP32[(($channels_out77)>>2)];
      var $cmp78=(($76)|0) < (($78)|0);
      if ($cmp78) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $79=$ch;
      var $80=$gr;
      var $arrayidx80=(($pe_MS+($80<<3))|0);
      var $arrayidx81=(($arrayidx80+($79<<2))|0);
      var $81=HEAPF32[(($arrayidx81)>>2)];
      var $82=$sum_pe_MS;
      var $add82=($82)+($81);
      $sum_pe_MS=$add82;
      var $83=$ch;
      var $84=$gr;
      var $arrayidx83=(($pe+($84<<3))|0);
      var $arrayidx84=(($arrayidx83+($83<<2))|0);
      var $85=HEAPF32[(($arrayidx84)>>2)];
      var $86=$sum_pe_LR;
      var $add85=($86)+($85);
      $sum_pe_LR=$add85;
      label = 32; break;
    case 32: 
      var $87=$ch;
      var $inc87=((($87)+(1))|0);
      $ch=$inc87;
      label = 30; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $88=$gr;
      var $inc90=((($88)+(1))|0);
      $gr=$inc90;
      label = 28; break;
    case 35: 
      var $89=$sum_pe_MS;
      var $conv=$89;
      var $90=$sum_pe_LR;
      var $conv92=$90;
      var $mul93=$conv92;
      var $cmp94=$conv <= $mul93;
      if ($cmp94) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $91=$gfc_addr;
      var $l3_side97=(($91+304)|0);
      var $tt98=(($l3_side97)|0);
      var $arrayidx99=(($tt98)|0);
      var $arrayidx100=(($arrayidx99)|0);
      $gi0=$arrayidx100;
      var $92=$cfg;
      var $mode_gr101=(($92+60)|0);
      var $93=HEAP32[(($mode_gr101)>>2)];
      var $sub102=((($93)-(1))|0);
      var $94=$gfc_addr;
      var $l3_side103=(($94+304)|0);
      var $tt104=(($l3_side103)|0);
      var $arrayidx105=(($tt104+($sub102)*(10504))|0);
      var $arrayidx106=(($arrayidx105)|0);
      $gi1=$arrayidx106;
      var $95=$gi0;
      var $arrayidx107=(($95)|0);
      var $block_type108=(($arrayidx107+4788)|0);
      var $96=HEAP32[(($block_type108)>>2)];
      var $97=$gi0;
      var $arrayidx109=(($97+5252)|0);
      var $block_type110=(($arrayidx109+4788)|0);
      var $98=HEAP32[(($block_type110)>>2)];
      var $cmp111=(($96)|0)==(($98)|0);
      if ($cmp111) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $99=$gi1;
      var $arrayidx113=(($99)|0);
      var $block_type114=(($arrayidx113+4788)|0);
      var $100=HEAP32[(($block_type114)>>2)];
      var $101=$gi1;
      var $arrayidx115=(($101+5252)|0);
      var $block_type116=(($arrayidx115+4788)|0);
      var $102=HEAP32[(($block_type116)>>2)];
      var $cmp117=(($100)|0)==(($102)|0);
      if ($cmp117) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $103=$gfc_addr;
      var $ov_enc120=(($103+84036)|0);
      var $mode_ext121=(($ov_enc120+716)|0);
      HEAP32[(($mode_ext121)>>2)]=2;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $104=$gfc_addr;
      var $ov_enc126=(($104+84036)|0);
      var $mode_ext127=(($ov_enc126+716)|0);
      var $105=HEAP32[(($mode_ext127)>>2)];
      var $cmp128=(($105)|0)==2;
      if ($cmp128) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $arraydecay131=(($masking_MS)|0);
      $masking=$arraydecay131;
      var $arraydecay132=(($pe_MS)|0);
      $pe_use=$arraydecay132;
      label = 45; break;
    case 44: 
      var $arraydecay134=(($masking_LR)|0);
      $masking=$arraydecay134;
      var $arraydecay135=(($pe)|0);
      $pe_use=$arraydecay135;
      label = 45; break;
    case 45: 
      var $106=$cfg;
      var $analysis=(($106+124)|0);
      var $107=HEAP32[(($analysis)>>2)];
      var $tobool137=(($107)|0)!=0;
      if ($tobool137) { label = 46; break; } else { label = 58; break; }
    case 46: 
      var $108=$gfc_addr;
      var $pinfo=(($108+85800)|0);
      var $109=HEAP32[(($pinfo)>>2)];
      var $cmp139=(($109)|0)!=0;
      if ($cmp139) { label = 47; break; } else { label = 58; break; }
    case 47: 
      $gr=0;
      label = 48; break;
    case 48: 
      var $110=$gr;
      var $111=$cfg;
      var $mode_gr143=(($111+60)|0);
      var $112=HEAP32[(($mode_gr143)>>2)];
      var $cmp144=(($110)|0) < (($112)|0);
      if ($cmp144) { label = 49; break; } else { label = 57; break; }
    case 49: 
      $ch=0;
      label = 50; break;
    case 50: 
      var $113=$ch;
      var $114=$cfg;
      var $channels_out148=(($114+56)|0);
      var $115=HEAP32[(($channels_out148)>>2)];
      var $cmp149=(($113)|0) < (($115)|0);
      if ($cmp149) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $116=$gr;
      var $117=$gfc_addr;
      var $pinfo152=(($117+85800)|0);
      var $118=HEAP32[(($pinfo152)>>2)];
      var $ms_ratio=(($118+90900)|0);
      var $arrayidx153=(($ms_ratio+($116<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx153)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx153)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $119=$gr;
      var $arrayidx154=(($ms_ener_ratio+($119<<2))|0);
      var $120=HEAPF32[(($arrayidx154)>>2)];
      var $conv155=$120;
      var $121=$gr;
      var $122=$gfc_addr;
      var $pinfo156=(($122+85800)|0);
      var $123=HEAP32[(($pinfo156)>>2)];
      var $ms_ener_ratio157=(($123+90916)|0);
      var $arrayidx158=(($ms_ener_ratio157+($121<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv155,HEAP32[(($arrayidx158)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx158)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $124=$ch;
      var $125=$gr;
      var $126=$gfc_addr;
      var $l3_side159=(($126+304)|0);
      var $tt160=(($l3_side159)|0);
      var $arrayidx161=(($tt160+($125)*(10504))|0);
      var $arrayidx162=(($arrayidx161+($124)*(5252))|0);
      var $block_type163=(($arrayidx162+4788)|0);
      var $127=HEAP32[(($block_type163)>>2)];
      var $128=$ch;
      var $129=$gr;
      var $130=$gfc_addr;
      var $pinfo164=(($130+85800)|0);
      var $131=HEAP32[(($pinfo164)>>2)];
      var $blocktype165=(($131+203284)|0);
      var $arrayidx166=(($blocktype165+($129<<3))|0);
      var $arrayidx167=(($arrayidx166+($128<<2))|0);
      HEAP32[(($arrayidx167)>>2)]=$127;
      var $132=$ch;
      var $133=$gr;
      var $134=$pe_use;
      var $arrayidx168=(($134+($133<<3))|0);
      var $arrayidx169=(($arrayidx168+($132<<2))|0);
      var $135=HEAPF32[(($arrayidx169)>>2)];
      var $conv170=$135;
      var $136=$ch;
      var $137=$gr;
      var $138=$gfc_addr;
      var $pinfo171=(($138+85800)|0);
      var $139=HEAP32[(($pinfo171)>>2)];
      var $pe172=(($139+189236)|0);
      var $arrayidx173=(($pe172+($137<<5))|0);
      var $arrayidx174=(($arrayidx173+($136<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv170,HEAP32[(($arrayidx174)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx174)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $140=$ch;
      var $141=$gr;
      var $142=$gfc_addr;
      var $pinfo175=(($142+85800)|0);
      var $143=HEAP32[(($pinfo175)>>2)];
      var $xr=(($143+54036)|0);
      var $arrayidx176=(($xr+($141)*(9216))|0);
      var $arrayidx177=(($arrayidx176+($140)*(4608))|0);
      var $144=$arrayidx177;
      var $145=$ch;
      var $146=$gr;
      var $147=$gfc_addr;
      var $l3_side178=(($147+304)|0);
      var $tt179=(($l3_side178)|0);
      var $arrayidx180=(($tt179+($146)*(10504))|0);
      var $arrayidx181=(($arrayidx180+($145)*(5252))|0);
      var $xr182=(($arrayidx181)|0);
      var $arrayidx183=(($xr182)|0);
      var $148=$arrayidx183;
      assert(2304 % 1 === 0);for (var $$src = $148>>2, $$dest = $144>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $149=$gfc_addr;
      var $ov_enc184=(($149+84036)|0);
      var $mode_ext185=(($ov_enc184+716)|0);
      var $150=HEAP32[(($mode_ext185)>>2)];
      var $cmp186=(($150)|0)==2;
      if ($cmp186) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $151=$ch;
      var $add189=((($151)+(2))|0);
      var $152=$gr;
      var $153=$gfc_addr;
      var $pinfo190=(($153+85800)|0);
      var $154=HEAP32[(($pinfo190)>>2)];
      var $ers=(($154+197140)|0);
      var $arrayidx191=(($ers+($152<<5))|0);
      var $arrayidx192=(($arrayidx191+($add189<<3))|0);
      var $155=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx192)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx192)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $156=$ch;
      var $157=$gr;
      var $158=$gfc_addr;
      var $pinfo193=(($158+85800)|0);
      var $159=HEAP32[(($pinfo193)>>2)];
      var $ers194=(($159+197140)|0);
      var $arrayidx195=(($ers194+($157<<5))|0);
      var $arrayidx196=(($arrayidx195+($156<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$155,HEAP32[(($arrayidx196)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx196)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $160=$ch;
      var $161=$gr;
      var $162=$gfc_addr;
      var $pinfo197=(($162+85800)|0);
      var $163=HEAP32[(($pinfo197)>>2)];
      var $energy=(($163+123700)|0);
      var $arrayidx198=(($energy+($161<<15))|0);
      var $arrayidx199=(($arrayidx198+($160<<13))|0);
      var $164=$arrayidx199;
      var $165=$ch;
      var $add200=((($165)+(2))|0);
      var $166=$gr;
      var $167=$gfc_addr;
      var $pinfo201=(($167+85800)|0);
      var $168=HEAP32[(($pinfo201)>>2)];
      var $energy202=(($168+123700)|0);
      var $arrayidx203=(($energy202+($166<<15))|0);
      var $arrayidx204=(($arrayidx203+($add200<<13))|0);
      var $169=$arrayidx204;
      assert(8192 % 1 === 0);for (var $$src = $169>>2, $$dest = $164>>2, $$stop = $$src + 2048; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $170=$ch;
      var $inc207=((($170)+(1))|0);
      $ch=$inc207;
      label = 50; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $171=$gr;
      var $inc210=((($171)+(1))|0);
      $gr=$inc210;
      label = 48; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $172=$cfg;
      var $vbr=(($172+88)|0);
      var $173=HEAP32[(($vbr)>>2)];
      var $cmp213=(($173)|0)==0;
      if ($cmp213) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $174=$cfg;
      var $vbr215=(($174+88)|0);
      var $175=HEAP32[(($vbr215)>>2)];
      var $cmp216=(($175)|0)==3;
      if ($cmp216) { label = 60; break; } else { label = 85; break; }
    case 60: 
      $i=0;
      label = 61; break;
    case 61: 
      var $176=$i;
      var $cmp220=(($176)|0) < 18;
      if ($cmp220) { label = 62; break; } else { label = 64; break; }
    case 62: 
      var $177=$i;
      var $add223=((($177)+(1))|0);
      var $178=$gfc_addr;
      var $sv_enc224=(($178+27820)|0);
      var $pefirbuf=(($sv_enc224+11932)|0);
      var $arrayidx225=(($pefirbuf+($add223<<2))|0);
      var $179=HEAPF32[(($arrayidx225)>>2)];
      var $180=$i;
      var $181=$gfc_addr;
      var $sv_enc226=(($181+27820)|0);
      var $pefirbuf227=(($sv_enc226+11932)|0);
      var $arrayidx228=(($pefirbuf227+($180<<2))|0);
      HEAPF32[(($arrayidx228)>>2)]=$179;
      label = 63; break;
    case 63: 
      var $182=$i;
      var $inc230=((($182)+(1))|0);
      $i=$inc230;
      label = 61; break;
    case 64: 
      $f=0;
      $gr=0;
      label = 65; break;
    case 65: 
      var $183=$gr;
      var $184=$cfg;
      var $mode_gr233=(($184+60)|0);
      var $185=HEAP32[(($mode_gr233)>>2)];
      var $cmp234=(($183)|0) < (($185)|0);
      if ($cmp234) { label = 66; break; } else { label = 72; break; }
    case 66: 
      $ch=0;
      label = 67; break;
    case 67: 
      var $186=$ch;
      var $187=$cfg;
      var $channels_out238=(($187+56)|0);
      var $188=HEAP32[(($channels_out238)>>2)];
      var $cmp239=(($186)|0) < (($188)|0);
      if ($cmp239) { label = 68; break; } else { label = 70; break; }
    case 68: 
      var $189=$ch;
      var $190=$gr;
      var $191=$pe_use;
      var $arrayidx242=(($191+($190<<3))|0);
      var $arrayidx243=(($arrayidx242+($189<<2))|0);
      var $192=HEAPF32[(($arrayidx243)>>2)];
      var $193=$f;
      var $add244=($193)+($192);
      $f=$add244;
      label = 69; break;
    case 69: 
      var $194=$ch;
      var $inc246=((($194)+(1))|0);
      $ch=$inc246;
      label = 67; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $195=$gr;
      var $inc249=((($195)+(1))|0);
      $gr=$inc249;
      label = 65; break;
    case 72: 
      var $196=$f;
      var $197=$gfc_addr;
      var $sv_enc251=(($197+27820)|0);
      var $pefirbuf252=(($sv_enc251+11932)|0);
      var $arrayidx253=(($pefirbuf252+72)|0);
      HEAPF32[(($arrayidx253)>>2)]=$196;
      var $198=$gfc_addr;
      var $sv_enc254=(($198+27820)|0);
      var $pefirbuf255=(($sv_enc254+11932)|0);
      var $arrayidx256=(($pefirbuf255+36)|0);
      var $199=HEAPF32[(($arrayidx256)>>2)];
      $f=$199;
      $i=0;
      label = 73; break;
    case 73: 
      var $200=$i;
      var $cmp258=(($200)|0) < 9;
      if ($cmp258) { label = 74; break; } else { label = 76; break; }
    case 74: 
      var $201=$i;
      var $202=$gfc_addr;
      var $sv_enc261=(($202+27820)|0);
      var $pefirbuf262=(($sv_enc261+11932)|0);
      var $arrayidx263=(($pefirbuf262+($201<<2))|0);
      var $203=HEAPF32[(($arrayidx263)>>2)];
      var $204=$i;
      var $sub264=(((18)-($204))|0);
      var $205=$gfc_addr;
      var $sv_enc265=(($205+27820)|0);
      var $pefirbuf266=(($sv_enc265+11932)|0);
      var $arrayidx267=(($pefirbuf266+($sub264<<2))|0);
      var $206=HEAPF32[(($arrayidx267)>>2)];
      var $add268=($203)+($206);
      var $207=$i;
      var $arrayidx269=((5318032+($207<<2))|0);
      var $208=HEAPF32[(($arrayidx269)>>2)];
      var $mul270=($add268)*($208);
      var $209=$f;
      var $add271=($209)+($mul270);
      $f=$add271;
      label = 75; break;
    case 75: 
      var $210=$i;
      var $inc273=((($210)+(1))|0);
      $i=$inc273;
      label = 73; break;
    case 76: 
      var $211=$cfg;
      var $mode_gr275=(($211+60)|0);
      var $212=HEAP32[(($mode_gr275)>>2)];
      var $mul276=((($212)*(3350))&-1);
      var $213=$cfg;
      var $channels_out277=(($213+56)|0);
      var $214=HEAP32[(($channels_out277)>>2)];
      var $mul278=((($mul276)*($214))&-1);
      var $conv279=(($mul278)|0);
      var $215=$f;
      var $div280=($conv279)/($215);
      $f=$div280;
      $gr=0;
      label = 77; break;
    case 77: 
      var $216=$gr;
      var $217=$cfg;
      var $mode_gr282=(($217+60)|0);
      var $218=HEAP32[(($mode_gr282)>>2)];
      var $cmp283=(($216)|0) < (($218)|0);
      if ($cmp283) { label = 78; break; } else { label = 84; break; }
    case 78: 
      $ch=0;
      label = 79; break;
    case 79: 
      var $219=$ch;
      var $220=$cfg;
      var $channels_out287=(($220+56)|0);
      var $221=HEAP32[(($channels_out287)>>2)];
      var $cmp288=(($219)|0) < (($221)|0);
      if ($cmp288) { label = 80; break; } else { label = 82; break; }
    case 80: 
      var $222=$f;
      var $223=$ch;
      var $224=$gr;
      var $225=$pe_use;
      var $arrayidx291=(($225+($224<<3))|0);
      var $arrayidx292=(($arrayidx291+($223<<2))|0);
      var $226=HEAPF32[(($arrayidx292)>>2)];
      var $mul293=($226)*($222);
      HEAPF32[(($arrayidx292)>>2)]=$mul293;
      label = 81; break;
    case 81: 
      var $227=$ch;
      var $inc295=((($227)+(1))|0);
      $ch=$inc295;
      label = 79; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $228=$gr;
      var $inc298=((($228)+(1))|0);
      $gr=$inc298;
      label = 77; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $229=$gfc_addr;
      var $iteration_loop=(($229+85808)|0);
      var $230=HEAP32[(($iteration_loop)>>2)];
      var $231=$gfc_addr;
      var $232=$pe_use;
      var $arraydecay301=(($ms_ener_ratio)|0);
      var $233=$masking;
      FUNCTION_TABLE[$230]($231, $232, $arraydecay301, $233);
      var $234=$gfc_addr;
      var $call302=_format_bitstream($234);
      var $235=$gfc_addr;
      var $236=$mp3buf_addr;
      var $237=$mp3buf_size_addr;
      var $call303=_copy_buffer($235, $236, $237, 1);
      $mp3count=$call303;
      var $238=$cfg;
      var $write_lame_tag=(($238+140)|0);
      var $239=HEAP32[(($write_lame_tag)>>2)];
      var $tobool304=(($239)|0)!=0;
      if ($tobool304) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $240=$gfc_addr;
      _AddVbrFrame($240);
      label = 87; break;
    case 87: 
      var $241=$cfg;
      var $analysis307=(($241+124)|0);
      var $242=HEAP32[(($analysis307)>>2)];
      var $tobool308=(($242)|0)!=0;
      if ($tobool308) { label = 88; break; } else { label = 102; break; }
    case 88: 
      var $243=$gfc_addr;
      var $pinfo310=(($243+85800)|0);
      var $244=HEAP32[(($pinfo310)>>2)];
      var $cmp311=(($244)|0)!=0;
      if ($cmp311) { label = 89; break; } else { label = 102; break; }
    case 89: 
      var $245=$cfg;
      var $mode_gr314=(($245+60)|0);
      var $246=HEAP32[(($mode_gr314)>>2)];
      var $mul315=((($246)*(576))&-1);
      $framesize=$mul315;
      $ch=0;
      label = 90; break;
    case 90: 
      var $247=$ch;
      var $248=$cfg;
      var $channels_out317=(($248+56)|0);
      var $249=HEAP32[(($channels_out317)>>2)];
      var $cmp318=(($247)|0) < (($249)|0);
      if ($cmp318) { label = 91; break; } else { label = 101; break; }
    case 91: 
      $j=0;
      label = 92; break;
    case 92: 
      var $250=$j;
      var $cmp322=(($250)|0) < 272;
      if ($cmp322) { label = 93; break; } else { label = 95; break; }
    case 93: 
      var $251=$j;
      var $252=$framesize;
      var $add325=((($251)+($252))|0);
      var $253=$ch;
      var $254=$gfc_addr;
      var $pinfo326=(($254+85800)|0);
      var $255=HEAP32[(($pinfo326)>>2)];
      var $pcmdata=(($255+20)|0);
      var $arrayidx327=(($pcmdata+($253)*(12800))|0);
      var $arrayidx328=(($arrayidx327+($add325<<3))|0);
      var $256=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx328)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx328)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $257=$j;
      var $258=$ch;
      var $259=$gfc_addr;
      var $pinfo329=(($259+85800)|0);
      var $260=HEAP32[(($pinfo329)>>2)];
      var $pcmdata330=(($260+20)|0);
      var $arrayidx331=(($pcmdata330+($258)*(12800))|0);
      var $arrayidx332=(($arrayidx331+($257<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$256,HEAP32[(($arrayidx332)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx332)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 94; break;
    case 94: 
      var $261=$j;
      var $inc334=((($261)+(1))|0);
      $j=$inc334;
      label = 92; break;
    case 95: 
      $j=272;
      label = 96; break;
    case 96: 
      var $262=$j;
      var $cmp337=(($262)|0) < 1600;
      if ($cmp337) { label = 97; break; } else { label = 99; break; }
    case 97: 
      var $263=$j;
      var $sub340=((($263)-(272))|0);
      var $264=$ch;
      var $arrayidx341=(($inbuf+($264<<2))|0);
      var $265=HEAP32[(($arrayidx341)>>2)];
      var $arrayidx342=(($265+($sub340<<2))|0);
      var $266=HEAPF32[(($arrayidx342)>>2)];
      var $conv343=$266;
      var $267=$j;
      var $268=$ch;
      var $269=$gfc_addr;
      var $pinfo344=(($269+85800)|0);
      var $270=HEAP32[(($pinfo344)>>2)];
      var $pcmdata345=(($270+20)|0);
      var $arrayidx346=(($pcmdata345+($268)*(12800))|0);
      var $arrayidx347=(($arrayidx346+($267<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv343,HEAP32[(($arrayidx347)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx347)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 98; break;
    case 98: 
      var $271=$j;
      var $inc349=((($271)+(1))|0);
      $j=$inc349;
      label = 96; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $272=$ch;
      var $inc352=((($272)+(1))|0);
      $ch=$inc352;
      label = 90; break;
    case 101: 
      var $273=$gfc_addr;
      var $sv_qnt=(($273+84764)|0);
      var $masking_lower=(($sv_qnt+140)|0);
      HEAPF32[(($masking_lower)>>2)]=1;
      var $274=$gfc_addr;
      var $275=$masking;
      _set_frame_pinfo($274, $275);
      label = 102; break;
    case 102: 
      var $276=$gfc_addr;
      var $ov_enc355=(($276+84036)|0);
      var $frame_number=(($ov_enc355+708)|0);
      var $277=HEAP32[(($frame_number)>>2)];
      var $inc356=((($277)+(1))|0);
      HEAP32[(($frame_number)>>2)]=$inc356;
      var $278=$gfc_addr;
      _updateStats($278);
      var $279=$mp3count;
      $retval=$279;
      label = 103; break;
    case 103: 
      var $280=$retval;
      STACKTOP = __stackBase__;
      return $280;
    default: assert(0, "bad label: " + label);
  }

}
_lame_encode_mp3_frame["X"]=1;

function _adjust_ATH($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $gr2_max;
      var $max_pow;
      var $adj_lim_new;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ATH=(($1+85792)|0);
      var $2=HEAP32[(($ATH)>>2)];
      var $use_adjust=(($2)|0);
      var $3=HEAP32[(($use_adjust)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$gfc_addr;
      var $ATH2=(($4+85792)|0);
      var $5=HEAP32[(($ATH2)>>2)];
      var $adjust_factor=(($5+8)|0);
      HEAPF32[(($adjust_factor)>>2)]=1;
      label = 30; break;
    case 4: 
      var $6=$gfc_addr;
      var $ov_psy=(($6+27804)|0);
      var $loudness_sq=(($ov_psy)|0);
      var $arrayidx=(($loudness_sq)|0);
      var $arrayidx3=(($arrayidx)|0);
      var $7=HEAPF32[(($arrayidx3)>>2)];
      $max_pow=$7;
      var $8=$gfc_addr;
      var $ov_psy4=(($8+27804)|0);
      var $loudness_sq5=(($ov_psy4)|0);
      var $arrayidx6=(($loudness_sq5+8)|0);
      var $arrayidx7=(($arrayidx6)|0);
      var $9=HEAPF32[(($arrayidx7)>>2)];
      $gr2_max=$9;
      var $10=$cfg;
      var $channels_out=(($10+56)|0);
      var $11=HEAP32[(($channels_out)>>2)];
      var $cmp8=(($11)|0)==2;
      if ($cmp8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$gfc_addr;
      var $ov_psy10=(($12+27804)|0);
      var $loudness_sq11=(($ov_psy10)|0);
      var $arrayidx12=(($loudness_sq11)|0);
      var $arrayidx13=(($arrayidx12+4)|0);
      var $13=HEAPF32[(($arrayidx13)>>2)];
      var $14=$max_pow;
      var $add=($14)+($13);
      $max_pow=$add;
      var $15=$gfc_addr;
      var $ov_psy14=(($15+27804)|0);
      var $loudness_sq15=(($ov_psy14)|0);
      var $arrayidx16=(($loudness_sq15+8)|0);
      var $arrayidx17=(($arrayidx16+4)|0);
      var $16=HEAPF32[(($arrayidx17)>>2)];
      var $17=$gr2_max;
      var $add18=($17)+($16);
      $gr2_max=$add18;
      label = 7; break;
    case 6: 
      var $18=$max_pow;
      var $19=$max_pow;
      var $add19=($19)+($18);
      $max_pow=$add19;
      var $20=$gr2_max;
      var $21=$gr2_max;
      var $add20=($21)+($20);
      $gr2_max=$add20;
      label = 7; break;
    case 7: 
      var $22=$cfg;
      var $mode_gr=(($22+60)|0);
      var $23=HEAP32[(($mode_gr)>>2)];
      var $cmp22=(($23)|0)==2;
      if ($cmp22) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $24=$max_pow;
      var $25=$gr2_max;
      var $cmp24=$24 > $25;
      if ($cmp24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $26=$max_pow;
      var $cond = $26;label = 11; break;
    case 10: 
      var $27=$gr2_max;
      var $cond = $27;label = 11; break;
    case 11: 
      var $cond;
      $max_pow=$cond;
      label = 12; break;
    case 12: 
      var $28=$max_pow;
      var $conv=$28;
      var $mul=($conv)*(0.5);
      var $conv26=$mul;
      $max_pow=$conv26;
      var $29=$gfc_addr;
      var $ATH27=(($29+85792)|0);
      var $30=HEAP32[(($ATH27)>>2)];
      var $aa_sensitivity_p=(($30+4)|0);
      var $31=HEAPF32[(($aa_sensitivity_p)>>2)];
      var $32=$max_pow;
      var $mul28=($32)*($31);
      $max_pow=$mul28;
      var $33=$max_pow;
      var $conv29=$33;
      var $cmp30=$conv29 > 0.03125;
      if ($cmp30) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $34=$gfc_addr;
      var $ATH33=(($34+85792)|0);
      var $35=HEAP32[(($ATH33)>>2)];
      var $adjust_factor34=(($35+8)|0);
      var $36=HEAPF32[(($adjust_factor34)>>2)];
      var $conv35=$36;
      var $cmp36=$conv35 >= 1;
      if ($cmp36) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $37=$gfc_addr;
      var $ATH39=(($37+85792)|0);
      var $38=HEAP32[(($ATH39)>>2)];
      var $adjust_factor40=(($38+8)|0);
      HEAPF32[(($adjust_factor40)>>2)]=1;
      label = 18; break;
    case 15: 
      var $39=$gfc_addr;
      var $ATH42=(($39+85792)|0);
      var $40=HEAP32[(($ATH42)>>2)];
      var $adjust_factor43=(($40+8)|0);
      var $41=HEAPF32[(($adjust_factor43)>>2)];
      var $42=$gfc_addr;
      var $ATH44=(($42+85792)|0);
      var $43=HEAP32[(($ATH44)>>2)];
      var $adjust_limit=(($43+12)|0);
      var $44=HEAPF32[(($adjust_limit)>>2)];
      var $cmp45=$41 < $44;
      if ($cmp45) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $45=$gfc_addr;
      var $ATH48=(($45+85792)|0);
      var $46=HEAP32[(($ATH48)>>2)];
      var $adjust_limit49=(($46+12)|0);
      var $47=HEAPF32[(($adjust_limit49)>>2)];
      var $48=$gfc_addr;
      var $ATH50=(($48+85792)|0);
      var $49=HEAP32[(($ATH50)>>2)];
      var $adjust_factor51=(($49+8)|0);
      HEAPF32[(($adjust_factor51)>>2)]=$47;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $50=$gfc_addr;
      var $ATH54=(($50+85792)|0);
      var $51=HEAP32[(($ATH54)>>2)];
      var $adjust_limit55=(($51+12)|0);
      HEAPF32[(($adjust_limit55)>>2)]=1;
      label = 30; break;
    case 19: 
      var $52=$max_pow;
      var $conv57=$52;
      var $mul58=($conv57)*(31.98);
      var $add59=($mul58)+(0.000625);
      var $conv60=$add59;
      $adj_lim_new=$conv60;
      var $53=$gfc_addr;
      var $ATH61=(($53+85792)|0);
      var $54=HEAP32[(($ATH61)>>2)];
      var $adjust_factor62=(($54+8)|0);
      var $55=HEAPF32[(($adjust_factor62)>>2)];
      var $56=$adj_lim_new;
      var $cmp63=$55 >= $56;
      if ($cmp63) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $57=$adj_lim_new;
      var $conv66=$57;
      var $mul67=($conv66)*(0.075);
      var $add68=($mul67)+(0.925);
      var $58=$gfc_addr;
      var $ATH69=(($58+85792)|0);
      var $59=HEAP32[(($ATH69)>>2)];
      var $adjust_factor70=(($59+8)|0);
      var $60=HEAPF32[(($adjust_factor70)>>2)];
      var $conv71=$60;
      var $mul72=($conv71)*($add68);
      var $conv73=$mul72;
      HEAPF32[(($adjust_factor70)>>2)]=$conv73;
      var $61=$gfc_addr;
      var $ATH74=(($61+85792)|0);
      var $62=HEAP32[(($ATH74)>>2)];
      var $adjust_factor75=(($62+8)|0);
      var $63=HEAPF32[(($adjust_factor75)>>2)];
      var $64=$adj_lim_new;
      var $cmp76=$63 < $64;
      if ($cmp76) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $65=$adj_lim_new;
      var $66=$gfc_addr;
      var $ATH79=(($66+85792)|0);
      var $67=HEAP32[(($ATH79)>>2)];
      var $adjust_factor80=(($67+8)|0);
      HEAPF32[(($adjust_factor80)>>2)]=$65;
      label = 22; break;
    case 22: 
      label = 29; break;
    case 23: 
      var $68=$gfc_addr;
      var $ATH83=(($68+85792)|0);
      var $69=HEAP32[(($ATH83)>>2)];
      var $adjust_limit84=(($69+12)|0);
      var $70=HEAPF32[(($adjust_limit84)>>2)];
      var $71=$adj_lim_new;
      var $cmp85=$70 >= $71;
      if ($cmp85) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $72=$adj_lim_new;
      var $73=$gfc_addr;
      var $ATH88=(($73+85792)|0);
      var $74=HEAP32[(($ATH88)>>2)];
      var $adjust_factor89=(($74+8)|0);
      HEAPF32[(($adjust_factor89)>>2)]=$72;
      label = 28; break;
    case 25: 
      var $75=$gfc_addr;
      var $ATH91=(($75+85792)|0);
      var $76=HEAP32[(($ATH91)>>2)];
      var $adjust_factor92=(($76+8)|0);
      var $77=HEAPF32[(($adjust_factor92)>>2)];
      var $78=$gfc_addr;
      var $ATH93=(($78+85792)|0);
      var $79=HEAP32[(($ATH93)>>2)];
      var $adjust_limit94=(($79+12)|0);
      var $80=HEAPF32[(($adjust_limit94)>>2)];
      var $cmp95=$77 < $80;
      if ($cmp95) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $81=$gfc_addr;
      var $ATH98=(($81+85792)|0);
      var $82=HEAP32[(($ATH98)>>2)];
      var $adjust_limit99=(($82+12)|0);
      var $83=HEAPF32[(($adjust_limit99)>>2)];
      var $84=$gfc_addr;
      var $ATH100=(($84+85792)|0);
      var $85=HEAP32[(($ATH100)>>2)];
      var $adjust_factor101=(($85+8)|0);
      HEAPF32[(($adjust_factor101)>>2)]=$83;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $86=$adj_lim_new;
      var $87=$gfc_addr;
      var $ATH105=(($87+85792)|0);
      var $88=HEAP32[(($ATH105)>>2)];
      var $adjust_limit106=(($88+12)|0);
      HEAPF32[(($adjust_limit106)>>2)]=$86;
      label = 30; break;
    case 30: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_adjust_ATH["X"]=1;

function _updateStats($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $eov;
      var $gr;
      var $ch;
      var $bt;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$eov;
      var $bitrate_index=(($2+704)|0);
      var $3=HEAP32[(($bitrate_index)>>2)];
      var $4=$eov;
      var $bitrate_channelmode_hist=(($4)|0);
      var $arrayidx=(($bitrate_channelmode_hist+($3)*(20))|0);
      var $arrayidx2=(($arrayidx+16)|0);
      var $5=HEAP32[(($arrayidx2)>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[(($arrayidx2)>>2)]=$inc;
      var $6=$eov;
      var $bitrate_channelmode_hist3=(($6)|0);
      var $arrayidx4=(($bitrate_channelmode_hist3+300)|0);
      var $arrayidx5=(($arrayidx4+16)|0);
      var $7=HEAP32[(($arrayidx5)>>2)];
      var $inc6=((($7)+(1))|0);
      HEAP32[(($arrayidx5)>>2)]=$inc6;
      var $8=$cfg;
      var $channels_out=(($8+56)|0);
      var $9=HEAP32[(($channels_out)>>2)];
      var $cmp=(($9)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$eov;
      var $mode_ext=(($10+716)|0);
      var $11=HEAP32[(($mode_ext)>>2)];
      var $12=$eov;
      var $bitrate_index7=(($12+704)|0);
      var $13=HEAP32[(($bitrate_index7)>>2)];
      var $14=$eov;
      var $bitrate_channelmode_hist8=(($14)|0);
      var $arrayidx9=(($bitrate_channelmode_hist8+($13)*(20))|0);
      var $arrayidx10=(($arrayidx9+($11<<2))|0);
      var $15=HEAP32[(($arrayidx10)>>2)];
      var $inc11=((($15)+(1))|0);
      HEAP32[(($arrayidx10)>>2)]=$inc11;
      var $16=$eov;
      var $mode_ext12=(($16+716)|0);
      var $17=HEAP32[(($mode_ext12)>>2)];
      var $18=$eov;
      var $bitrate_channelmode_hist13=(($18)|0);
      var $arrayidx14=(($bitrate_channelmode_hist13+300)|0);
      var $arrayidx15=(($arrayidx14+($17<<2))|0);
      var $19=HEAP32[(($arrayidx15)>>2)];
      var $inc16=((($19)+(1))|0);
      HEAP32[(($arrayidx15)>>2)]=$inc16;
      label = 4; break;
    case 4: 
      $gr=0;
      label = 5; break;
    case 5: 
      var $20=$gr;
      var $21=$cfg;
      var $mode_gr=(($21+60)|0);
      var $22=HEAP32[(($mode_gr)>>2)];
      var $cmp17=(($20)|0) < (($22)|0);
      if ($cmp17) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $ch=0;
      label = 7; break;
    case 7: 
      var $23=$ch;
      var $24=$cfg;
      var $channels_out19=(($24+56)|0);
      var $25=HEAP32[(($channels_out19)>>2)];
      var $cmp20=(($23)|0) < (($25)|0);
      if ($cmp20) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $26=$ch;
      var $27=$gr;
      var $28=$gfc_addr;
      var $l3_side=(($28+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx22=(($tt+($27)*(10504))|0);
      var $arrayidx23=(($arrayidx22+($26)*(5252))|0);
      var $block_type=(($arrayidx23+4788)|0);
      var $29=HEAP32[(($block_type)>>2)];
      $bt=$29;
      var $30=$ch;
      var $31=$gr;
      var $32=$gfc_addr;
      var $l3_side24=(($32+304)|0);
      var $tt25=(($l3_side24)|0);
      var $arrayidx26=(($tt25+($31)*(10504))|0);
      var $arrayidx27=(($arrayidx26+($30)*(5252))|0);
      var $mixed_block_flag=(($arrayidx27+4792)|0);
      var $33=HEAP32[(($mixed_block_flag)>>2)];
      var $tobool=(($33)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $bt=4;
      label = 10; break;
    case 10: 
      var $34=$bt;
      var $35=$eov;
      var $bitrate_index30=(($35+704)|0);
      var $36=HEAP32[(($bitrate_index30)>>2)];
      var $37=$eov;
      var $bitrate_blocktype_hist=(($37+320)|0);
      var $arrayidx31=(($bitrate_blocktype_hist+($36)*(24))|0);
      var $arrayidx32=(($arrayidx31+($34<<2))|0);
      var $38=HEAP32[(($arrayidx32)>>2)];
      var $inc33=((($38)+(1))|0);
      HEAP32[(($arrayidx32)>>2)]=$inc33;
      var $39=$eov;
      var $bitrate_index34=(($39+704)|0);
      var $40=HEAP32[(($bitrate_index34)>>2)];
      var $41=$eov;
      var $bitrate_blocktype_hist35=(($41+320)|0);
      var $arrayidx36=(($bitrate_blocktype_hist35+($40)*(24))|0);
      var $arrayidx37=(($arrayidx36+20)|0);
      var $42=HEAP32[(($arrayidx37)>>2)];
      var $inc38=((($42)+(1))|0);
      HEAP32[(($arrayidx37)>>2)]=$inc38;
      var $43=$bt;
      var $44=$eov;
      var $bitrate_blocktype_hist39=(($44+320)|0);
      var $arrayidx40=(($bitrate_blocktype_hist39+360)|0);
      var $arrayidx41=(($arrayidx40+($43<<2))|0);
      var $45=HEAP32[(($arrayidx41)>>2)];
      var $inc42=((($45)+(1))|0);
      HEAP32[(($arrayidx41)>>2)]=$inc42;
      var $46=$eov;
      var $bitrate_blocktype_hist43=(($46+320)|0);
      var $arrayidx44=(($bitrate_blocktype_hist43+360)|0);
      var $arrayidx45=(($arrayidx44+20)|0);
      var $47=HEAP32[(($arrayidx45)>>2)];
      var $inc46=((($47)+(1))|0);
      HEAP32[(($arrayidx45)>>2)]=$inc46;
      label = 11; break;
    case 11: 
      var $48=$ch;
      var $inc47=((($48)+(1))|0);
      $ch=$inc47;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $49=$gr;
      var $inc49=((($49)+(1))|0);
      $gr=$inc49;
      label = 5; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_updateStats["X"]=1;

function _lame_encode_frame_init($gfc, $inbuf) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16112)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $inbuf_addr;
      var $cfg;
      var $ch;
      var $gr;
      var $primebuff0=__stackBase__;
      var $primebuff1=(__stackBase__)+(8056);
      var $framesize;
      var $i;
      var $j;
      $gfc_addr=$gfc;
      $inbuf_addr=$inbuf;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $lame_encode_frame_init=(($1+4)|0);
      var $2=HEAP32[(($lame_encode_frame_init)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 23; break; }
    case 3: 
      var $3=$cfg;
      var $mode_gr=(($3+60)|0);
      var $4=HEAP32[(($mode_gr)>>2)];
      var $mul=((($4)*(576))&-1);
      $framesize=$mul;
      var $5=$gfc_addr;
      var $lame_encode_frame_init2=(($5+4)|0);
      HEAP32[(($lame_encode_frame_init2)>>2)]=1;
      var $6=$primebuff0;
      for (var $$dest = $6>>2, $$stop = $$dest + 2014; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $7=$primebuff1;
      for (var $$dest = $7>>2, $$stop = $$dest + 2014; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $i=0;
      $j=0;
      label = 4; break;
    case 4: 
      var $8=$i;
      var $9=$cfg;
      var $mode_gr3=(($9+60)|0);
      var $10=HEAP32[(($mode_gr3)>>2)];
      var $add=((($10)+(1))|0);
      var $mul4=((($add)*(576))&-1);
      var $add5=((($mul4)+(286))|0);
      var $cmp6=(($8)|0) < (($add5)|0);
      if ($cmp6) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $11=$i;
      var $12=$framesize;
      var $cmp7=(($11)|0) < (($12)|0);
      if ($cmp7) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $13=$i;
      var $arrayidx=(($primebuff0+($13<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=0;
      var $14=$cfg;
      var $channels_out=(($14+56)|0);
      var $15=HEAP32[(($channels_out)>>2)];
      var $cmp9=(($15)|0)==2;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$i;
      var $arrayidx11=(($primebuff1+($16<<2))|0);
      HEAPF32[(($arrayidx11)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 12; break;
    case 9: 
      var $17=$j;
      var $18=$inbuf_addr;
      var $arrayidx12=(($18)|0);
      var $19=HEAP32[(($arrayidx12)>>2)];
      var $arrayidx13=(($19+($17<<2))|0);
      var $20=HEAPF32[(($arrayidx13)>>2)];
      var $21=$i;
      var $arrayidx14=(($primebuff0+($21<<2))|0);
      HEAPF32[(($arrayidx14)>>2)]=$20;
      var $22=$cfg;
      var $channels_out15=(($22+56)|0);
      var $23=HEAP32[(($channels_out15)>>2)];
      var $cmp16=(($23)|0)==2;
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $24=$j;
      var $25=$inbuf_addr;
      var $arrayidx18=(($25+4)|0);
      var $26=HEAP32[(($arrayidx18)>>2)];
      var $arrayidx19=(($26+($24<<2))|0);
      var $27=HEAPF32[(($arrayidx19)>>2)];
      var $28=$i;
      var $arrayidx20=(($primebuff1+($28<<2))|0);
      HEAPF32[(($arrayidx20)>>2)]=$27;
      label = 11; break;
    case 11: 
      var $29=$j;
      var $inc=((($29)+(1))|0);
      $j=$inc;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $30=$i;
      var $inc23=((($30)+(1))|0);
      $i=$inc23;
      label = 4; break;
    case 14: 
      $gr=0;
      label = 15; break;
    case 15: 
      var $31=$gr;
      var $32=$cfg;
      var $mode_gr25=(($32+60)|0);
      var $33=HEAP32[(($mode_gr25)>>2)];
      var $cmp26=(($31)|0) < (($33)|0);
      if ($cmp26) { label = 16; break; } else { label = 22; break; }
    case 16: 
      $ch=0;
      label = 17; break;
    case 17: 
      var $34=$ch;
      var $35=$cfg;
      var $channels_out29=(($35+56)|0);
      var $36=HEAP32[(($channels_out29)>>2)];
      var $cmp30=(($34)|0) < (($36)|0);
      if ($cmp30) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $37=$ch;
      var $38=$gr;
      var $39=$gfc_addr;
      var $l3_side=(($39+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx32=(($tt+($38)*(10504))|0);
      var $arrayidx33=(($arrayidx32+($37)*(5252))|0);
      var $block_type=(($arrayidx33+4788)|0);
      HEAP32[(($block_type)>>2)]=2;
      label = 19; break;
    case 19: 
      var $40=$ch;
      var $inc35=((($40)+(1))|0);
      $ch=$inc35;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $41=$gr;
      var $inc38=((($41)+(1))|0);
      $gr=$inc38;
      label = 15; break;
    case 22: 
      var $42=$gfc_addr;
      var $arraydecay=(($primebuff0)|0);
      var $arraydecay40=(($primebuff1)|0);
      _mdct_sub48($42, $arraydecay, $arraydecay40);
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_encode_frame_init["X"]=1;

function _fft_short($gfc, $x_real, $chn, $buffer) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $x_real_addr;
      var $chn_addr;
      var $buffer_addr;
      var $i;
      var $j;
      var $b;
      var $x;
      var $k;
      var $f0;
      var $f1;
      var $f2;
      var $f3;
      var $w;
      $gfc_addr=$gfc;
      $x_real_addr=$x_real;
      $chn_addr=$chn;
      $buffer_addr=$buffer;
      $b=0;
      label = 3; break;
    case 3: 
      var $0=$b;
      var $cmp=(($0)|0) < 3;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$b;
      var $2=$x_real_addr;
      var $arrayidx=(($2+($1<<10))|0);
      var $arrayidx1=(($arrayidx+512)|0);
      $x=$arrayidx1;
      var $3=$b;
      var $add=((($3)+(1))|0);
      var $mul=((($add)*(192))&-1);
      var $conv=(($mul) & 65535);
      $k=$conv;
      $j=31;
      label = 5; break;
    case 5: 
      var $4=$j;
      var $shl=$4 << 2;
      var $arrayidx2=((5256844+$shl)|0);
      var $5=HEAP8[($arrayidx2)];
      var $conv3=(($5)&255);
      $i=$conv3;
      var $6=$i;
      var $arrayidx4=((5242880+($6<<2))|0);
      var $7=HEAPF32[(($arrayidx4)>>2)];
      var $8=$i;
      var $9=$k;
      var $conv5=(($9 << 16) >> 16);
      var $add6=((($8)+($conv5))|0);
      var $10=$chn_addr;
      var $11=$buffer_addr;
      var $arrayidx7=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx7)>>2)];
      var $arrayidx8=(($12+($add6<<2))|0);
      var $13=HEAPF32[(($arrayidx8)>>2)];
      var $mul9=($7)*($13);
      $f0=$mul9;
      var $14=$i;
      var $sub=(((127)-($14))|0);
      var $arrayidx10=((5242880+($sub<<2))|0);
      var $15=HEAPF32[(($arrayidx10)>>2)];
      var $16=$i;
      var $17=$k;
      var $conv11=(($17 << 16) >> 16);
      var $add12=((($16)+($conv11))|0);
      var $add13=((($add12)+(128))|0);
      var $18=$chn_addr;
      var $19=$buffer_addr;
      var $arrayidx14=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx14)>>2)];
      var $arrayidx15=(($20+($add13<<2))|0);
      var $21=HEAPF32[(($arrayidx15)>>2)];
      var $mul16=($15)*($21);
      $w=$mul16;
      var $22=$f0;
      var $23=$w;
      var $sub17=($22)-($23);
      $f1=$sub17;
      var $24=$f0;
      var $25=$w;
      var $add18=($24)+($25);
      $f0=$add18;
      var $26=$i;
      var $add19=((($26)+(64))|0);
      var $arrayidx20=((5242880+($add19<<2))|0);
      var $27=HEAPF32[(($arrayidx20)>>2)];
      var $28=$i;
      var $29=$k;
      var $conv21=(($29 << 16) >> 16);
      var $add22=((($28)+($conv21))|0);
      var $add23=((($add22)+(64))|0);
      var $30=$chn_addr;
      var $31=$buffer_addr;
      var $arrayidx24=(($31+($30<<2))|0);
      var $32=HEAP32[(($arrayidx24)>>2)];
      var $arrayidx25=(($32+($add23<<2))|0);
      var $33=HEAPF32[(($arrayidx25)>>2)];
      var $mul26=($27)*($33);
      $f2=$mul26;
      var $34=$i;
      var $sub27=(((63)-($34))|0);
      var $arrayidx28=((5242880+($sub27<<2))|0);
      var $35=HEAPF32[(($arrayidx28)>>2)];
      var $36=$i;
      var $37=$k;
      var $conv29=(($37 << 16) >> 16);
      var $add30=((($36)+($conv29))|0);
      var $add31=((($add30)+(192))|0);
      var $38=$chn_addr;
      var $39=$buffer_addr;
      var $arrayidx32=(($39+($38<<2))|0);
      var $40=HEAP32[(($arrayidx32)>>2)];
      var $arrayidx33=(($40+($add31<<2))|0);
      var $41=HEAPF32[(($arrayidx33)>>2)];
      var $mul34=($35)*($41);
      $w=$mul34;
      var $42=$f2;
      var $43=$w;
      var $sub35=($42)-($43);
      $f3=$sub35;
      var $44=$f2;
      var $45=$w;
      var $add36=($44)+($45);
      $f2=$add36;
      var $46=$x;
      var $add_ptr=((($46)-(16))|0);
      $x=$add_ptr;
      var $47=$f0;
      var $48=$f2;
      var $add37=($47)+($48);
      var $49=$x;
      var $arrayidx38=(($49)|0);
      HEAPF32[(($arrayidx38)>>2)]=$add37;
      var $50=$f0;
      var $51=$f2;
      var $sub39=($50)-($51);
      var $52=$x;
      var $arrayidx40=(($52+8)|0);
      HEAPF32[(($arrayidx40)>>2)]=$sub39;
      var $53=$f1;
      var $54=$f3;
      var $add41=($53)+($54);
      var $55=$x;
      var $arrayidx42=(($55+4)|0);
      HEAPF32[(($arrayidx42)>>2)]=$add41;
      var $56=$f1;
      var $57=$f3;
      var $sub43=($56)-($57);
      var $58=$x;
      var $arrayidx44=(($58+12)|0);
      HEAPF32[(($arrayidx44)>>2)]=$sub43;
      var $59=$i;
      var $add45=((($59)+(1))|0);
      var $arrayidx46=((5242880+($add45<<2))|0);
      var $60=HEAPF32[(($arrayidx46)>>2)];
      var $61=$i;
      var $62=$k;
      var $conv47=(($62 << 16) >> 16);
      var $add48=((($61)+($conv47))|0);
      var $add49=((($add48)+(1))|0);
      var $63=$chn_addr;
      var $64=$buffer_addr;
      var $arrayidx50=(($64+($63<<2))|0);
      var $65=HEAP32[(($arrayidx50)>>2)];
      var $arrayidx51=(($65+($add49<<2))|0);
      var $66=HEAPF32[(($arrayidx51)>>2)];
      var $mul52=($60)*($66);
      $f0=$mul52;
      var $67=$i;
      var $sub53=(((126)-($67))|0);
      var $arrayidx54=((5242880+($sub53<<2))|0);
      var $68=HEAPF32[(($arrayidx54)>>2)];
      var $69=$i;
      var $70=$k;
      var $conv55=(($70 << 16) >> 16);
      var $add56=((($69)+($conv55))|0);
      var $add57=((($add56)+(129))|0);
      var $71=$chn_addr;
      var $72=$buffer_addr;
      var $arrayidx58=(($72+($71<<2))|0);
      var $73=HEAP32[(($arrayidx58)>>2)];
      var $arrayidx59=(($73+($add57<<2))|0);
      var $74=HEAPF32[(($arrayidx59)>>2)];
      var $mul60=($68)*($74);
      $w=$mul60;
      var $75=$f0;
      var $76=$w;
      var $sub61=($75)-($76);
      $f1=$sub61;
      var $77=$f0;
      var $78=$w;
      var $add62=($77)+($78);
      $f0=$add62;
      var $79=$i;
      var $add63=((($79)+(65))|0);
      var $arrayidx64=((5242880+($add63<<2))|0);
      var $80=HEAPF32[(($arrayidx64)>>2)];
      var $81=$i;
      var $82=$k;
      var $conv65=(($82 << 16) >> 16);
      var $add66=((($81)+($conv65))|0);
      var $add67=((($add66)+(65))|0);
      var $83=$chn_addr;
      var $84=$buffer_addr;
      var $arrayidx68=(($84+($83<<2))|0);
      var $85=HEAP32[(($arrayidx68)>>2)];
      var $arrayidx69=(($85+($add67<<2))|0);
      var $86=HEAPF32[(($arrayidx69)>>2)];
      var $mul70=($80)*($86);
      $f2=$mul70;
      var $87=$i;
      var $sub71=(((62)-($87))|0);
      var $arrayidx72=((5242880+($sub71<<2))|0);
      var $88=HEAPF32[(($arrayidx72)>>2)];
      var $89=$i;
      var $90=$k;
      var $conv73=(($90 << 16) >> 16);
      var $add74=((($89)+($conv73))|0);
      var $add75=((($add74)+(193))|0);
      var $91=$chn_addr;
      var $92=$buffer_addr;
      var $arrayidx76=(($92+($91<<2))|0);
      var $93=HEAP32[(($arrayidx76)>>2)];
      var $arrayidx77=(($93+($add75<<2))|0);
      var $94=HEAPF32[(($arrayidx77)>>2)];
      var $mul78=($88)*($94);
      $w=$mul78;
      var $95=$f2;
      var $96=$w;
      var $sub79=($95)-($96);
      $f3=$sub79;
      var $97=$f2;
      var $98=$w;
      var $add80=($97)+($98);
      $f2=$add80;
      var $99=$f0;
      var $100=$f2;
      var $add81=($99)+($100);
      var $101=$x;
      var $arrayidx82=(($101+512)|0);
      HEAPF32[(($arrayidx82)>>2)]=$add81;
      var $102=$f0;
      var $103=$f2;
      var $sub83=($102)-($103);
      var $104=$x;
      var $arrayidx84=(($104+520)|0);
      HEAPF32[(($arrayidx84)>>2)]=$sub83;
      var $105=$f1;
      var $106=$f3;
      var $add85=($105)+($106);
      var $107=$x;
      var $arrayidx86=(($107+516)|0);
      HEAPF32[(($arrayidx86)>>2)]=$add85;
      var $108=$f1;
      var $109=$f3;
      var $sub87=($108)-($109);
      var $110=$x;
      var $arrayidx88=(($110+524)|0);
      HEAPF32[(($arrayidx88)>>2)]=$sub87;
      label = 6; break;
    case 6: 
      var $111=$j;
      var $dec=((($111)-(1))|0);
      $j=$dec;
      var $cmp89=(($dec)|0) >= 0;
      if ($cmp89) { label = 5; break; } else { label = 7; break; }
    case 7: 
      var $112=$gfc_addr;
      var $fft_fht=(($112+85816)|0);
      var $113=HEAP32[(($fft_fht)>>2)];
      var $114=$x;
      FUNCTION_TABLE[$113]($114, 128);
      label = 8; break;
    case 8: 
      var $115=$b;
      var $inc=((($115)+(1))|0);
      $b=$inc;
      label = 3; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fft_short["X"]=1;

function _fht($fz, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $fz_addr;
      var $n_addr;
      var $tri;
      var $k4;
      var $fi;
      var $gi;
      var $fn;
      var $s1;
      var $c1;
      var $i;
      var $k1;
      var $k2;
      var $k3;
      var $kx;
      var $f0;
      var $f1;
      var $f2;
      var $f3;
      var $c2;
      var $s2;
      var $a;
      var $b;
      var $g0;
      var $f059;
      var $f160;
      var $g1;
      var $f261;
      var $g2;
      var $f362;
      var $g3;
      $fz_addr=$fz;
      $n_addr=$n;
      $tri=((5348788)|0);
      var $0=$n_addr;
      var $shl=$0 << 1;
      $n_addr=$shl;
      var $1=$fz_addr;
      var $2=$n_addr;
      var $add_ptr=(($1+($2<<2))|0);
      $fn=$add_ptr;
      $k4=4;
      label = 3; break;
    case 3: 
      var $3=$k4;
      var $shr=$3 >> 1;
      $kx=$shr;
      var $4=$k4;
      $k1=$4;
      var $5=$k4;
      var $shl1=$5 << 1;
      $k2=$shl1;
      var $6=$k2;
      var $7=$k1;
      var $add=((($6)+($7))|0);
      $k3=$add;
      var $8=$k2;
      var $shl2=$8 << 1;
      $k4=$shl2;
      var $9=$fz_addr;
      $fi=$9;
      var $10=$fi;
      var $11=$kx;
      var $add_ptr3=(($10+($11<<2))|0);
      $gi=$add_ptr3;
      label = 4; break;
    case 4: 
      var $12=$fi;
      var $arrayidx=(($12)|0);
      var $13=HEAPF32[(($arrayidx)>>2)];
      var $14=$k1;
      var $15=$fi;
      var $arrayidx5=(($15+($14<<2))|0);
      var $16=HEAPF32[(($arrayidx5)>>2)];
      var $sub=($13)-($16);
      $f1=$sub;
      var $17=$fi;
      var $arrayidx6=(($17)|0);
      var $18=HEAPF32[(($arrayidx6)>>2)];
      var $19=$k1;
      var $20=$fi;
      var $arrayidx7=(($20+($19<<2))|0);
      var $21=HEAPF32[(($arrayidx7)>>2)];
      var $add8=($18)+($21);
      $f0=$add8;
      var $22=$k2;
      var $23=$fi;
      var $arrayidx9=(($23+($22<<2))|0);
      var $24=HEAPF32[(($arrayidx9)>>2)];
      var $25=$k3;
      var $26=$fi;
      var $arrayidx10=(($26+($25<<2))|0);
      var $27=HEAPF32[(($arrayidx10)>>2)];
      var $sub11=($24)-($27);
      $f3=$sub11;
      var $28=$k2;
      var $29=$fi;
      var $arrayidx12=(($29+($28<<2))|0);
      var $30=HEAPF32[(($arrayidx12)>>2)];
      var $31=$k3;
      var $32=$fi;
      var $arrayidx13=(($32+($31<<2))|0);
      var $33=HEAPF32[(($arrayidx13)>>2)];
      var $add14=($30)+($33);
      $f2=$add14;
      var $34=$f0;
      var $35=$f2;
      var $sub15=($34)-($35);
      var $36=$k2;
      var $37=$fi;
      var $arrayidx16=(($37+($36<<2))|0);
      HEAPF32[(($arrayidx16)>>2)]=$sub15;
      var $38=$f0;
      var $39=$f2;
      var $add17=($38)+($39);
      var $40=$fi;
      var $arrayidx18=(($40)|0);
      HEAPF32[(($arrayidx18)>>2)]=$add17;
      var $41=$f1;
      var $42=$f3;
      var $sub19=($41)-($42);
      var $43=$k3;
      var $44=$fi;
      var $arrayidx20=(($44+($43<<2))|0);
      HEAPF32[(($arrayidx20)>>2)]=$sub19;
      var $45=$f1;
      var $46=$f3;
      var $add21=($45)+($46);
      var $47=$k1;
      var $48=$fi;
      var $arrayidx22=(($48+($47<<2))|0);
      HEAPF32[(($arrayidx22)>>2)]=$add21;
      var $49=$gi;
      var $arrayidx23=(($49)|0);
      var $50=HEAPF32[(($arrayidx23)>>2)];
      var $51=$k1;
      var $52=$gi;
      var $arrayidx24=(($52+($51<<2))|0);
      var $53=HEAPF32[(($arrayidx24)>>2)];
      var $sub25=($50)-($53);
      $f1=$sub25;
      var $54=$gi;
      var $arrayidx26=(($54)|0);
      var $55=HEAPF32[(($arrayidx26)>>2)];
      var $56=$k1;
      var $57=$gi;
      var $arrayidx27=(($57+($56<<2))|0);
      var $58=HEAPF32[(($arrayidx27)>>2)];
      var $add28=($55)+($58);
      $f0=$add28;
      var $59=$k3;
      var $60=$gi;
      var $arrayidx29=(($60+($59<<2))|0);
      var $61=HEAPF32[(($arrayidx29)>>2)];
      var $conv=$61;
      var $mul=($conv)*(1.4142135623730951);
      var $conv30=$mul;
      $f3=$conv30;
      var $62=$k2;
      var $63=$gi;
      var $arrayidx31=(($63+($62<<2))|0);
      var $64=HEAPF32[(($arrayidx31)>>2)];
      var $conv32=$64;
      var $mul33=($conv32)*(1.4142135623730951);
      var $conv34=$mul33;
      $f2=$conv34;
      var $65=$f0;
      var $66=$f2;
      var $sub35=($65)-($66);
      var $67=$k2;
      var $68=$gi;
      var $arrayidx36=(($68+($67<<2))|0);
      HEAPF32[(($arrayidx36)>>2)]=$sub35;
      var $69=$f0;
      var $70=$f2;
      var $add37=($69)+($70);
      var $71=$gi;
      var $arrayidx38=(($71)|0);
      HEAPF32[(($arrayidx38)>>2)]=$add37;
      var $72=$f1;
      var $73=$f3;
      var $sub39=($72)-($73);
      var $74=$k3;
      var $75=$gi;
      var $arrayidx40=(($75+($74<<2))|0);
      HEAPF32[(($arrayidx40)>>2)]=$sub39;
      var $76=$f1;
      var $77=$f3;
      var $add41=($76)+($77);
      var $78=$k1;
      var $79=$gi;
      var $arrayidx42=(($79+($78<<2))|0);
      HEAPF32[(($arrayidx42)>>2)]=$add41;
      var $80=$k4;
      var $81=$gi;
      var $add_ptr43=(($81+($80<<2))|0);
      $gi=$add_ptr43;
      var $82=$k4;
      var $83=$fi;
      var $add_ptr44=(($83+($82<<2))|0);
      $fi=$add_ptr44;
      label = 5; break;
    case 5: 
      var $84=$fi;
      var $85=$fn;
      var $cmp=(($84)>>>0) < (($85)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 6: 
      var $86=$tri;
      var $arrayidx46=(($86)|0);
      var $87=HEAPF32[(($arrayidx46)>>2)];
      $c1=$87;
      var $88=$tri;
      var $arrayidx47=(($88+4)|0);
      var $89=HEAPF32[(($arrayidx47)>>2)];
      $s1=$89;
      $i=1;
      label = 7; break;
    case 7: 
      var $90=$i;
      var $91=$kx;
      var $cmp48=(($90)|0) < (($91)|0);
      if ($cmp48) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $92=$s1;
      var $mul50=($92)*(2);
      var $93=$s1;
      var $mul51=($mul50)*($93);
      var $sub52=(1)-($mul51);
      $c2=$sub52;
      var $94=$s1;
      var $mul53=($94)*(2);
      var $95=$c1;
      var $mul54=($mul53)*($95);
      $s2=$mul54;
      var $96=$fz_addr;
      var $97=$i;
      var $add_ptr55=(($96+($97<<2))|0);
      $fi=$add_ptr55;
      var $98=$fz_addr;
      var $99=$k1;
      var $add_ptr56=(($98+($99<<2))|0);
      var $100=$i;
      var $idx_neg=(((-$100))|0);
      var $add_ptr57=(($add_ptr56+($idx_neg<<2))|0);
      $gi=$add_ptr57;
      label = 9; break;
    case 9: 
      var $101=$s2;
      var $102=$k1;
      var $103=$fi;
      var $arrayidx63=(($103+($102<<2))|0);
      var $104=HEAPF32[(($arrayidx63)>>2)];
      var $mul64=($101)*($104);
      var $105=$c2;
      var $106=$k1;
      var $107=$gi;
      var $arrayidx65=(($107+($106<<2))|0);
      var $108=HEAPF32[(($arrayidx65)>>2)];
      var $mul66=($105)*($108);
      var $sub67=($mul64)-($mul66);
      $b=$sub67;
      var $109=$c2;
      var $110=$k1;
      var $111=$fi;
      var $arrayidx68=(($111+($110<<2))|0);
      var $112=HEAPF32[(($arrayidx68)>>2)];
      var $mul69=($109)*($112);
      var $113=$s2;
      var $114=$k1;
      var $115=$gi;
      var $arrayidx70=(($115+($114<<2))|0);
      var $116=HEAPF32[(($arrayidx70)>>2)];
      var $mul71=($113)*($116);
      var $add72=($mul69)+($mul71);
      $a=$add72;
      var $117=$fi;
      var $arrayidx73=(($117)|0);
      var $118=HEAPF32[(($arrayidx73)>>2)];
      var $119=$a;
      var $sub74=($118)-($119);
      $f160=$sub74;
      var $120=$fi;
      var $arrayidx75=(($120)|0);
      var $121=HEAPF32[(($arrayidx75)>>2)];
      var $122=$a;
      var $add76=($121)+($122);
      $f059=$add76;
      var $123=$gi;
      var $arrayidx77=(($123)|0);
      var $124=HEAPF32[(($arrayidx77)>>2)];
      var $125=$b;
      var $sub78=($124)-($125);
      $g1=$sub78;
      var $126=$gi;
      var $arrayidx79=(($126)|0);
      var $127=HEAPF32[(($arrayidx79)>>2)];
      var $128=$b;
      var $add80=($127)+($128);
      $g0=$add80;
      var $129=$s2;
      var $130=$k3;
      var $131=$fi;
      var $arrayidx81=(($131+($130<<2))|0);
      var $132=HEAPF32[(($arrayidx81)>>2)];
      var $mul82=($129)*($132);
      var $133=$c2;
      var $134=$k3;
      var $135=$gi;
      var $arrayidx83=(($135+($134<<2))|0);
      var $136=HEAPF32[(($arrayidx83)>>2)];
      var $mul84=($133)*($136);
      var $sub85=($mul82)-($mul84);
      $b=$sub85;
      var $137=$c2;
      var $138=$k3;
      var $139=$fi;
      var $arrayidx86=(($139+($138<<2))|0);
      var $140=HEAPF32[(($arrayidx86)>>2)];
      var $mul87=($137)*($140);
      var $141=$s2;
      var $142=$k3;
      var $143=$gi;
      var $arrayidx88=(($143+($142<<2))|0);
      var $144=HEAPF32[(($arrayidx88)>>2)];
      var $mul89=($141)*($144);
      var $add90=($mul87)+($mul89);
      $a=$add90;
      var $145=$k2;
      var $146=$fi;
      var $arrayidx91=(($146+($145<<2))|0);
      var $147=HEAPF32[(($arrayidx91)>>2)];
      var $148=$a;
      var $sub92=($147)-($148);
      $f362=$sub92;
      var $149=$k2;
      var $150=$fi;
      var $arrayidx93=(($150+($149<<2))|0);
      var $151=HEAPF32[(($arrayidx93)>>2)];
      var $152=$a;
      var $add94=($151)+($152);
      $f261=$add94;
      var $153=$k2;
      var $154=$gi;
      var $arrayidx95=(($154+($153<<2))|0);
      var $155=HEAPF32[(($arrayidx95)>>2)];
      var $156=$b;
      var $sub96=($155)-($156);
      $g3=$sub96;
      var $157=$k2;
      var $158=$gi;
      var $arrayidx97=(($158+($157<<2))|0);
      var $159=HEAPF32[(($arrayidx97)>>2)];
      var $160=$b;
      var $add98=($159)+($160);
      $g2=$add98;
      var $161=$s1;
      var $162=$f261;
      var $mul99=($161)*($162);
      var $163=$c1;
      var $164=$g3;
      var $mul100=($163)*($164);
      var $sub101=($mul99)-($mul100);
      $b=$sub101;
      var $165=$c1;
      var $166=$f261;
      var $mul102=($165)*($166);
      var $167=$s1;
      var $168=$g3;
      var $mul103=($167)*($168);
      var $add104=($mul102)+($mul103);
      $a=$add104;
      var $169=$f059;
      var $170=$a;
      var $sub105=($169)-($170);
      var $171=$k2;
      var $172=$fi;
      var $arrayidx106=(($172+($171<<2))|0);
      HEAPF32[(($arrayidx106)>>2)]=$sub105;
      var $173=$f059;
      var $174=$a;
      var $add107=($173)+($174);
      var $175=$fi;
      var $arrayidx108=(($175)|0);
      HEAPF32[(($arrayidx108)>>2)]=$add107;
      var $176=$g1;
      var $177=$b;
      var $sub109=($176)-($177);
      var $178=$k3;
      var $179=$gi;
      var $arrayidx110=(($179+($178<<2))|0);
      HEAPF32[(($arrayidx110)>>2)]=$sub109;
      var $180=$g1;
      var $181=$b;
      var $add111=($180)+($181);
      var $182=$k1;
      var $183=$gi;
      var $arrayidx112=(($183+($182<<2))|0);
      HEAPF32[(($arrayidx112)>>2)]=$add111;
      var $184=$c1;
      var $185=$g2;
      var $mul113=($184)*($185);
      var $186=$s1;
      var $187=$f362;
      var $mul114=($186)*($187);
      var $sub115=($mul113)-($mul114);
      $b=$sub115;
      var $188=$s1;
      var $189=$g2;
      var $mul116=($188)*($189);
      var $190=$c1;
      var $191=$f362;
      var $mul117=($190)*($191);
      var $add118=($mul116)+($mul117);
      $a=$add118;
      var $192=$g0;
      var $193=$a;
      var $sub119=($192)-($193);
      var $194=$k2;
      var $195=$gi;
      var $arrayidx120=(($195+($194<<2))|0);
      HEAPF32[(($arrayidx120)>>2)]=$sub119;
      var $196=$g0;
      var $197=$a;
      var $add121=($196)+($197);
      var $198=$gi;
      var $arrayidx122=(($198)|0);
      HEAPF32[(($arrayidx122)>>2)]=$add121;
      var $199=$f160;
      var $200=$b;
      var $sub123=($199)-($200);
      var $201=$k3;
      var $202=$fi;
      var $arrayidx124=(($202+($201<<2))|0);
      HEAPF32[(($arrayidx124)>>2)]=$sub123;
      var $203=$f160;
      var $204=$b;
      var $add125=($203)+($204);
      var $205=$k1;
      var $206=$fi;
      var $arrayidx126=(($206+($205<<2))|0);
      HEAPF32[(($arrayidx126)>>2)]=$add125;
      var $207=$k4;
      var $208=$gi;
      var $add_ptr127=(($208+($207<<2))|0);
      $gi=$add_ptr127;
      var $209=$k4;
      var $210=$fi;
      var $add_ptr128=(($210+($209<<2))|0);
      $fi=$add_ptr128;
      label = 10; break;
    case 10: 
      var $211=$fi;
      var $212=$fn;
      var $cmp130=(($211)>>>0) < (($212)>>>0);
      if ($cmp130) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $213=$c1;
      $c2=$213;
      var $214=$c2;
      var $215=$tri;
      var $arrayidx133=(($215)|0);
      var $216=HEAPF32[(($arrayidx133)>>2)];
      var $mul134=($214)*($216);
      var $217=$s1;
      var $218=$tri;
      var $arrayidx135=(($218+4)|0);
      var $219=HEAPF32[(($arrayidx135)>>2)];
      var $mul136=($217)*($219);
      var $sub137=($mul134)-($mul136);
      $c1=$sub137;
      var $220=$c2;
      var $221=$tri;
      var $arrayidx138=(($221+4)|0);
      var $222=HEAPF32[(($arrayidx138)>>2)];
      var $mul139=($220)*($222);
      var $223=$s1;
      var $224=$tri;
      var $arrayidx140=(($224)|0);
      var $225=HEAPF32[(($arrayidx140)>>2)];
      var $mul141=($223)*($225);
      var $add142=($mul139)+($mul141);
      $s1=$add142;
      label = 12; break;
    case 12: 
      var $226=$i;
      var $inc=((($226)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 13: 
      var $227=$tri;
      var $add_ptr143=(($227+8)|0);
      $tri=$add_ptr143;
      label = 14; break;
    case 14: 
      var $228=$k4;
      var $229=$n_addr;
      var $cmp145=(($228)|0) < (($229)|0);
      if ($cmp145) { label = 3; break; } else { label = 15; break; }
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fht["X"]=1;

function _fft_long($gfc, $x, $chn, $buffer) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $x_addr;
      var $chn_addr;
      var $buffer_addr;
      var $i;
      var $jj;
      var $f0;
      var $f1;
      var $f2;
      var $f3;
      var $w;
      $gfc_addr=$gfc;
      $x_addr=$x;
      $chn_addr=$chn;
      $buffer_addr=$buffer;
      $jj=127;
      var $0=$x_addr;
      var $add_ptr=(($0+2048)|0);
      $x_addr=$add_ptr;
      label = 3; break;
    case 3: 
      var $1=$jj;
      var $arrayidx=((5256844+$1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2)&255);
      $i=$conv;
      var $3=$i;
      var $arrayidx1=((5243392+($3<<2))|0);
      var $4=HEAPF32[(($arrayidx1)>>2)];
      var $5=$i;
      var $6=$chn_addr;
      var $7=$buffer_addr;
      var $arrayidx2=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $arrayidx3=(($8+($5<<2))|0);
      var $9=HEAPF32[(($arrayidx3)>>2)];
      var $mul=($4)*($9);
      $f0=$mul;
      var $10=$i;
      var $add=((($10)+(512))|0);
      var $arrayidx4=((5243392+($add<<2))|0);
      var $11=HEAPF32[(($arrayidx4)>>2)];
      var $12=$i;
      var $add5=((($12)+(512))|0);
      var $13=$chn_addr;
      var $14=$buffer_addr;
      var $arrayidx6=(($14+($13<<2))|0);
      var $15=HEAP32[(($arrayidx6)>>2)];
      var $arrayidx7=(($15+($add5<<2))|0);
      var $16=HEAPF32[(($arrayidx7)>>2)];
      var $mul8=($11)*($16);
      $w=$mul8;
      var $17=$f0;
      var $18=$w;
      var $sub=($17)-($18);
      $f1=$sub;
      var $19=$f0;
      var $20=$w;
      var $add9=($19)+($20);
      $f0=$add9;
      var $21=$i;
      var $add10=((($21)+(256))|0);
      var $arrayidx11=((5243392+($add10<<2))|0);
      var $22=HEAPF32[(($arrayidx11)>>2)];
      var $23=$i;
      var $add12=((($23)+(256))|0);
      var $24=$chn_addr;
      var $25=$buffer_addr;
      var $arrayidx13=(($25+($24<<2))|0);
      var $26=HEAP32[(($arrayidx13)>>2)];
      var $arrayidx14=(($26+($add12<<2))|0);
      var $27=HEAPF32[(($arrayidx14)>>2)];
      var $mul15=($22)*($27);
      $f2=$mul15;
      var $28=$i;
      var $add16=((($28)+(768))|0);
      var $arrayidx17=((5243392+($add16<<2))|0);
      var $29=HEAPF32[(($arrayidx17)>>2)];
      var $30=$i;
      var $add18=((($30)+(768))|0);
      var $31=$chn_addr;
      var $32=$buffer_addr;
      var $arrayidx19=(($32+($31<<2))|0);
      var $33=HEAP32[(($arrayidx19)>>2)];
      var $arrayidx20=(($33+($add18<<2))|0);
      var $34=HEAPF32[(($arrayidx20)>>2)];
      var $mul21=($29)*($34);
      $w=$mul21;
      var $35=$f2;
      var $36=$w;
      var $sub22=($35)-($36);
      $f3=$sub22;
      var $37=$f2;
      var $38=$w;
      var $add23=($37)+($38);
      $f2=$add23;
      var $39=$x_addr;
      var $add_ptr24=((($39)-(16))|0);
      $x_addr=$add_ptr24;
      var $40=$f0;
      var $41=$f2;
      var $add25=($40)+($41);
      var $42=$x_addr;
      var $arrayidx26=(($42)|0);
      HEAPF32[(($arrayidx26)>>2)]=$add25;
      var $43=$f0;
      var $44=$f2;
      var $sub27=($43)-($44);
      var $45=$x_addr;
      var $arrayidx28=(($45+8)|0);
      HEAPF32[(($arrayidx28)>>2)]=$sub27;
      var $46=$f1;
      var $47=$f3;
      var $add29=($46)+($47);
      var $48=$x_addr;
      var $arrayidx30=(($48+4)|0);
      HEAPF32[(($arrayidx30)>>2)]=$add29;
      var $49=$f1;
      var $50=$f3;
      var $sub31=($49)-($50);
      var $51=$x_addr;
      var $arrayidx32=(($51+12)|0);
      HEAPF32[(($arrayidx32)>>2)]=$sub31;
      var $52=$i;
      var $add33=((($52)+(1))|0);
      var $arrayidx34=((5243392+($add33<<2))|0);
      var $53=HEAPF32[(($arrayidx34)>>2)];
      var $54=$i;
      var $add35=((($54)+(1))|0);
      var $55=$chn_addr;
      var $56=$buffer_addr;
      var $arrayidx36=(($56+($55<<2))|0);
      var $57=HEAP32[(($arrayidx36)>>2)];
      var $arrayidx37=(($57+($add35<<2))|0);
      var $58=HEAPF32[(($arrayidx37)>>2)];
      var $mul38=($53)*($58);
      $f0=$mul38;
      var $59=$i;
      var $add39=((($59)+(513))|0);
      var $arrayidx40=((5243392+($add39<<2))|0);
      var $60=HEAPF32[(($arrayidx40)>>2)];
      var $61=$i;
      var $add41=((($61)+(513))|0);
      var $62=$chn_addr;
      var $63=$buffer_addr;
      var $arrayidx42=(($63+($62<<2))|0);
      var $64=HEAP32[(($arrayidx42)>>2)];
      var $arrayidx43=(($64+($add41<<2))|0);
      var $65=HEAPF32[(($arrayidx43)>>2)];
      var $mul44=($60)*($65);
      $w=$mul44;
      var $66=$f0;
      var $67=$w;
      var $sub45=($66)-($67);
      $f1=$sub45;
      var $68=$f0;
      var $69=$w;
      var $add46=($68)+($69);
      $f0=$add46;
      var $70=$i;
      var $add47=((($70)+(257))|0);
      var $arrayidx48=((5243392+($add47<<2))|0);
      var $71=HEAPF32[(($arrayidx48)>>2)];
      var $72=$i;
      var $add49=((($72)+(257))|0);
      var $73=$chn_addr;
      var $74=$buffer_addr;
      var $arrayidx50=(($74+($73<<2))|0);
      var $75=HEAP32[(($arrayidx50)>>2)];
      var $arrayidx51=(($75+($add49<<2))|0);
      var $76=HEAPF32[(($arrayidx51)>>2)];
      var $mul52=($71)*($76);
      $f2=$mul52;
      var $77=$i;
      var $add53=((($77)+(769))|0);
      var $arrayidx54=((5243392+($add53<<2))|0);
      var $78=HEAPF32[(($arrayidx54)>>2)];
      var $79=$i;
      var $add55=((($79)+(769))|0);
      var $80=$chn_addr;
      var $81=$buffer_addr;
      var $arrayidx56=(($81+($80<<2))|0);
      var $82=HEAP32[(($arrayidx56)>>2)];
      var $arrayidx57=(($82+($add55<<2))|0);
      var $83=HEAPF32[(($arrayidx57)>>2)];
      var $mul58=($78)*($83);
      $w=$mul58;
      var $84=$f2;
      var $85=$w;
      var $sub59=($84)-($85);
      $f3=$sub59;
      var $86=$f2;
      var $87=$w;
      var $add60=($86)+($87);
      $f2=$add60;
      var $88=$f0;
      var $89=$f2;
      var $add61=($88)+($89);
      var $90=$x_addr;
      var $arrayidx62=(($90+2048)|0);
      HEAPF32[(($arrayidx62)>>2)]=$add61;
      var $91=$f0;
      var $92=$f2;
      var $sub63=($91)-($92);
      var $93=$x_addr;
      var $arrayidx64=(($93+2056)|0);
      HEAPF32[(($arrayidx64)>>2)]=$sub63;
      var $94=$f1;
      var $95=$f3;
      var $add65=($94)+($95);
      var $96=$x_addr;
      var $arrayidx66=(($96+2052)|0);
      HEAPF32[(($arrayidx66)>>2)]=$add65;
      var $97=$f1;
      var $98=$f3;
      var $sub67=($97)-($98);
      var $99=$x_addr;
      var $arrayidx68=(($99+2060)|0);
      HEAPF32[(($arrayidx68)>>2)]=$sub67;
      label = 4; break;
    case 4: 
      var $100=$jj;
      var $dec=((($100)-(1))|0);
      $jj=$dec;
      var $cmp=(($dec)|0) >= 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $101=$gfc_addr;
      var $fft_fht=(($101+85816)|0);
      var $102=HEAP32[(($fft_fht)>>2)];
      var $103=$x_addr;
      FUNCTION_TABLE[$102]($103, 512);

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fft_long["X"]=1;

function _init_fft($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $i;
      $gfc_addr=$gfc;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 1024;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $conv=(($1)|0);
      var $add=($conv)+(0.5);
      var $mul=($add)*(6.283185307179586);
      var $div=($mul)/(1024);
      var $call=Math.cos($div);
      var $mul1=($call)*(0.5);
      var $sub=(0.42)-($mul1);
      var $2=$i;
      var $conv2=(($2)|0);
      var $add3=($conv2)+(0.5);
      var $mul4=($add3)*(12.566370614359172);
      var $div5=($mul4)/(1024);
      var $call6=Math.cos($div5);
      var $mul7=($call6)*(0.08);
      var $add8=($sub)+($mul7);
      var $conv9=$add8;
      var $3=$i;
      var $arrayidx=((5243392+($3<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=$conv9;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $inc=((($4)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $5=$i;
      var $cmp11=(($5)|0) < 128;
      if ($cmp11) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $6=$i;
      var $conv14=(($6)|0);
      var $add15=($conv14)+(0.5);
      var $mul16=($add15)*(6.283185307179586);
      var $div17=($mul16)/(256);
      var $call18=Math.cos($div17);
      var $sub19=(1)-($call18);
      var $mul20=($sub19)*(0.5);
      var $conv21=$mul20;
      var $7=$i;
      var $arrayidx22=((5242880+($7<<2))|0);
      HEAPF32[(($arrayidx22)>>2)]=$conv21;
      label = 9; break;
    case 9: 
      var $8=$i;
      var $inc24=((($8)+(1))|0);
      $i=$inc24;
      label = 7; break;
    case 10: 
      var $9=$gfc_addr;
      var $fft_fht=(($9+85816)|0);
      HEAP32[(($fft_fht)>>2)]=48;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_fft["X"]=1;

function _InitGainAnalysis($rgData, $samplefreq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $rgData_addr;
      var $samplefreq_addr;
      $rgData_addr=$rgData;
      $samplefreq_addr=$samplefreq;
      var $0=$rgData_addr;
      var $1=$samplefreq_addr;
      var $call=_ResetSampleFrequency($0, $1);
      var $cmp=(($call)|0)!=1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$rgData_addr;
      var $linprebuf=(($2)|0);
      var $arraydecay=(($linprebuf)|0);
      var $add_ptr=(($arraydecay+40)|0);
      var $3=$rgData_addr;
      var $linpre=(($3+80)|0);
      HEAP32[(($linpre)>>2)]=$add_ptr;
      var $4=$rgData_addr;
      var $rinprebuf=(($4+19380)|0);
      var $arraydecay1=(($rinprebuf)|0);
      var $add_ptr2=(($arraydecay1+40)|0);
      var $5=$rgData_addr;
      var $rinpre=(($5+19460)|0);
      HEAP32[(($rinpre)>>2)]=$add_ptr2;
      var $6=$rgData_addr;
      var $lstepbuf=(($6+84)|0);
      var $arraydecay3=(($lstepbuf)|0);
      var $add_ptr4=(($arraydecay3+40)|0);
      var $7=$rgData_addr;
      var $lstep=(($7+9728)|0);
      HEAP32[(($lstep)>>2)]=$add_ptr4;
      var $8=$rgData_addr;
      var $rstepbuf=(($8+19464)|0);
      var $arraydecay5=(($rstepbuf)|0);
      var $add_ptr6=(($arraydecay5+40)|0);
      var $9=$rgData_addr;
      var $rstep=(($9+29108)|0);
      HEAP32[(($rstep)>>2)]=$add_ptr6;
      var $10=$rgData_addr;
      var $loutbuf=(($10+9732)|0);
      var $arraydecay7=(($loutbuf)|0);
      var $add_ptr8=(($arraydecay7+40)|0);
      var $11=$rgData_addr;
      var $lout=(($11+19376)|0);
      HEAP32[(($lout)>>2)]=$add_ptr8;
      var $12=$rgData_addr;
      var $routbuf=(($12+29112)|0);
      var $arraydecay9=(($routbuf)|0);
      var $add_ptr10=(($arraydecay9+40)|0);
      var $13=$rgData_addr;
      var $rout=(($13+38756)|0);
      HEAP32[(($rout)>>2)]=$add_ptr10;
      var $14=$rgData_addr;
      var $B=(($14+86792)|0);
      var $15=$B;
      for (var $$dest = $15>>2, $$stop = $$dest + 12000; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $retval=1;
      label = 5; break;
    case 5: 
      var $16=$retval;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}
_InitGainAnalysis["X"]=1;

function _ResetSampleFrequency($rgData, $samplefreq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $rgData_addr;
      var $samplefreq_addr;
      var $i;
      $rgData_addr=$rgData;
      $samplefreq_addr=$samplefreq;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 10;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$rgData_addr;
      var $routbuf=(($2+29112)|0);
      var $arrayidx=(($routbuf+($1<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=0;
      var $3=$i;
      var $4=$rgData_addr;
      var $rstepbuf=(($4+19464)|0);
      var $arrayidx1=(($rstepbuf+($3<<2))|0);
      HEAPF32[(($arrayidx1)>>2)]=0;
      var $5=$i;
      var $6=$rgData_addr;
      var $rinprebuf=(($6+19380)|0);
      var $arrayidx2=(($rinprebuf+($5<<2))|0);
      HEAPF32[(($arrayidx2)>>2)]=0;
      var $7=$i;
      var $8=$rgData_addr;
      var $loutbuf=(($8+9732)|0);
      var $arrayidx3=(($loutbuf+($7<<2))|0);
      HEAPF32[(($arrayidx3)>>2)]=0;
      var $9=$i;
      var $10=$rgData_addr;
      var $lstepbuf=(($10+84)|0);
      var $arrayidx4=(($lstepbuf+($9<<2))|0);
      HEAPF32[(($arrayidx4)>>2)]=0;
      var $11=$i;
      var $12=$rgData_addr;
      var $linprebuf=(($12)|0);
      var $arrayidx5=(($linprebuf+($11<<2))|0);
      HEAPF32[(($arrayidx5)>>2)]=0;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $14=$samplefreq_addr;
      if ((($14)|0)==48000) {
        label = 7; break;
      }
      else if ((($14)|0)==44100) {
        label = 8; break;
      }
      else if ((($14)|0)==32000) {
        label = 9; break;
      }
      else if ((($14)|0)==24000) {
        label = 10; break;
      }
      else if ((($14)|0)==22050) {
        label = 11; break;
      }
      else if ((($14)|0)==16000) {
        label = 12; break;
      }
      else if ((($14)|0)==12000) {
        label = 13; break;
      }
      else if ((($14)|0)==11025) {
        label = 14; break;
      }
      else if ((($14)|0)==8000) {
        label = 15; break;
      }
      else {
      label = 16; break;
      }
      
    case 7: 
      var $15=$rgData_addr;
      var $freqindex=(($15+38784)|0);
      HEAP32[(($freqindex)>>2)]=0;
      label = 17; break;
    case 8: 
      var $16=$rgData_addr;
      var $freqindex7=(($16+38784)|0);
      HEAP32[(($freqindex7)>>2)]=1;
      label = 17; break;
    case 9: 
      var $17=$rgData_addr;
      var $freqindex9=(($17+38784)|0);
      HEAP32[(($freqindex9)>>2)]=2;
      label = 17; break;
    case 10: 
      var $18=$rgData_addr;
      var $freqindex11=(($18+38784)|0);
      HEAP32[(($freqindex11)>>2)]=3;
      label = 17; break;
    case 11: 
      var $19=$rgData_addr;
      var $freqindex13=(($19+38784)|0);
      HEAP32[(($freqindex13)>>2)]=4;
      label = 17; break;
    case 12: 
      var $20=$rgData_addr;
      var $freqindex15=(($20+38784)|0);
      HEAP32[(($freqindex15)>>2)]=5;
      label = 17; break;
    case 13: 
      var $21=$rgData_addr;
      var $freqindex17=(($21+38784)|0);
      HEAP32[(($freqindex17)>>2)]=6;
      label = 17; break;
    case 14: 
      var $22=$rgData_addr;
      var $freqindex19=(($22+38784)|0);
      HEAP32[(($freqindex19)>>2)]=7;
      label = 17; break;
    case 15: 
      var $23=$rgData_addr;
      var $freqindex21=(($23+38784)|0);
      HEAP32[(($freqindex21)>>2)]=8;
      label = 17; break;
    case 16: 
      $retval=0;
      label = 18; break;
    case 17: 
      var $24=$samplefreq_addr;
      var $mul=(($24)&-1);
      var $add=((($mul)+(20))|0);
      var $sub=((($add)-(1))|0);
      var $div=((((($sub)|0))/(20))&-1);
      var $25=$rgData_addr;
      var $sampleWindow=(($25+38760)|0);
      HEAP32[(($sampleWindow)>>2)]=$div;
      var $26=$rgData_addr;
      var $lsum=(($26+38768)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($lsum)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lsum)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $27=$rgData_addr;
      var $rsum=(($27+38776)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($rsum)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($rsum)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $28=$rgData_addr;
      var $totsamp=(($28+38764)|0);
      HEAP32[(($totsamp)>>2)]=0;
      var $29=$rgData_addr;
      var $A=(($29+38792)|0);
      var $30=$A;
      for (var $$dest = $30>>2, $$stop = $$dest + 12000; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $retval=1;
      label = 18; break;
    case 18: 
      var $31=$retval;

      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_ResetSampleFrequency["X"]=1;

function _AnalyzeSamples($rgData, $left_samples, $right_samples, $num_samples, $num_channels) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $rgData_addr;
      var $left_samples_addr;
      var $right_samples_addr;
      var $num_samples_addr;
      var $num_channels_addr;
      var $curleft;
      var $curright;
      var $batchsamples;
      var $cursamples;
      var $cursamplepos;
      var $i;
      var $val;
      var $ival;
      $rgData_addr=$rgData;
      $left_samples_addr=$left_samples;
      $right_samples_addr=$right_samples;
      $num_samples_addr=$num_samples;
      $num_channels_addr=$num_channels;
      var $0=$num_samples_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 41; break;
    case 4: 
      $cursamplepos=0;
      var $1=$num_samples_addr;
      $batchsamples=$1;
      var $2=$num_channels_addr;
      if ((($2)|0)==1) {
        label = 5; break;
      }
      else if ((($2)|0)==2) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
      
    case 5: 
      var $3=$left_samples_addr;
      $right_samples_addr=$3;
      label = 8; break;
    case 6: 
      label = 8; break;
    case 7: 
      $retval=0;
      label = 41; break;
    case 8: 
      var $4=$num_samples_addr;
      var $cmp2=(($4)>>>0) < 10;
      if ($cmp2) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $5=$rgData_addr;
      var $linprebuf=(($5)|0);
      var $arraydecay=(($linprebuf)|0);
      var $add_ptr=(($arraydecay+40)|0);
      var $6=$add_ptr;
      var $7=$left_samples_addr;
      var $8=$7;
      var $9=$num_samples_addr;
      var $mul=((($9<<2))&-1);
      assert($mul % 1 === 0);_memcpy($6, $8, $mul);
      var $10=$rgData_addr;
      var $rinprebuf=(($10+19380)|0);
      var $arraydecay4=(($rinprebuf)|0);
      var $add_ptr5=(($arraydecay4+40)|0);
      var $11=$add_ptr5;
      var $12=$right_samples_addr;
      var $13=$12;
      var $14=$num_samples_addr;
      var $mul6=((($14<<2))&-1);
      assert($mul6 % 1 === 0);_memcpy($11, $13, $mul6);
      label = 11; break;
    case 10: 
      var $15=$rgData_addr;
      var $linprebuf7=(($15)|0);
      var $arraydecay8=(($linprebuf7)|0);
      var $add_ptr9=(($arraydecay8+40)|0);
      var $16=$add_ptr9;
      var $17=$left_samples_addr;
      var $18=$17;
      assert(40 % 1 === 0);for (var $$src = $18>>2, $$dest = $16>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $19=$rgData_addr;
      var $rinprebuf10=(($19+19380)|0);
      var $arraydecay11=(($rinprebuf10)|0);
      var $add_ptr12=(($arraydecay11+40)|0);
      var $20=$add_ptr12;
      var $21=$right_samples_addr;
      var $22=$21;
      assert(40 % 1 === 0);for (var $$src = $22>>2, $$dest = $20>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $23=$batchsamples;
      var $cmp14=(($23)|0) > 0;
      if ($cmp14) { label = 13; break; } else { label = 37; break; }
    case 13: 
      var $24=$batchsamples;
      var $25=$rgData_addr;
      var $sampleWindow=(($25+38760)|0);
      var $26=HEAP32[(($sampleWindow)>>2)];
      var $27=$rgData_addr;
      var $totsamp=(($27+38764)|0);
      var $28=HEAP32[(($totsamp)>>2)];
      var $sub=((($26)-($28))|0);
      var $cmp15=(($24)|0) > (($sub)|0);
      if ($cmp15) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $29=$rgData_addr;
      var $sampleWindow16=(($29+38760)|0);
      var $30=HEAP32[(($sampleWindow16)>>2)];
      var $31=$rgData_addr;
      var $totsamp17=(($31+38764)|0);
      var $32=HEAP32[(($totsamp17)>>2)];
      var $sub18=((($30)-($32))|0);
      var $cond = $sub18;label = 16; break;
    case 15: 
      var $33=$batchsamples;
      var $cond = $33;label = 16; break;
    case 16: 
      var $cond;
      $cursamples=$cond;
      var $34=$cursamplepos;
      var $cmp19=(($34)|0) < 10;
      if ($cmp19) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $35=$rgData_addr;
      var $linpre=(($35+80)|0);
      var $36=HEAP32[(($linpre)>>2)];
      var $37=$cursamplepos;
      var $add_ptr21=(($36+($37<<2))|0);
      $curleft=$add_ptr21;
      var $38=$rgData_addr;
      var $rinpre=(($38+19460)|0);
      var $39=HEAP32[(($rinpre)>>2)];
      var $40=$cursamplepos;
      var $add_ptr22=(($39+($40<<2))|0);
      $curright=$add_ptr22;
      var $41=$cursamples;
      var $42=$cursamplepos;
      var $sub23=(((10)-($42))|0);
      var $cmp24=(($41)|0) > (($sub23)|0);
      if ($cmp24) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $43=$cursamplepos;
      var $sub26=(((10)-($43))|0);
      $cursamples=$sub26;
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $44=$left_samples_addr;
      var $45=$cursamplepos;
      var $add_ptr29=(($44+($45<<2))|0);
      $curleft=$add_ptr29;
      var $46=$right_samples_addr;
      var $47=$cursamplepos;
      var $add_ptr30=(($46+($47<<2))|0);
      $curright=$add_ptr30;
      label = 21; break;
    case 21: 
      var $48=$curleft;
      var $49=$rgData_addr;
      var $lstep=(($49+9728)|0);
      var $50=HEAP32[(($lstep)>>2)];
      var $51=$rgData_addr;
      var $totsamp32=(($51+38764)|0);
      var $52=HEAP32[(($totsamp32)>>2)];
      var $add_ptr33=(($50+($52<<2))|0);
      var $53=$cursamples;
      var $54=$rgData_addr;
      var $freqindex=(($54+38784)|0);
      var $55=HEAP32[(($freqindex)>>2)];
      var $arrayidx=((5388340+($55)*(84))|0);
      var $arraydecay34=(($arrayidx)|0);
      _filterYule($48, $add_ptr33, $53, $arraydecay34);
      var $56=$curright;
      var $57=$rgData_addr;
      var $rstep=(($57+29108)|0);
      var $58=HEAP32[(($rstep)>>2)];
      var $59=$rgData_addr;
      var $totsamp35=(($59+38764)|0);
      var $60=HEAP32[(($totsamp35)>>2)];
      var $add_ptr36=(($58+($60<<2))|0);
      var $61=$cursamples;
      var $62=$rgData_addr;
      var $freqindex37=(($62+38784)|0);
      var $63=HEAP32[(($freqindex37)>>2)];
      var $arrayidx38=((5388340+($63)*(84))|0);
      var $arraydecay39=(($arrayidx38)|0);
      _filterYule($56, $add_ptr36, $61, $arraydecay39);
      var $64=$rgData_addr;
      var $lstep40=(($64+9728)|0);
      var $65=HEAP32[(($lstep40)>>2)];
      var $66=$rgData_addr;
      var $totsamp41=(($66+38764)|0);
      var $67=HEAP32[(($totsamp41)>>2)];
      var $add_ptr42=(($65+($67<<2))|0);
      var $68=$rgData_addr;
      var $lout=(($68+19376)|0);
      var $69=HEAP32[(($lout)>>2)];
      var $70=$rgData_addr;
      var $totsamp43=(($70+38764)|0);
      var $71=HEAP32[(($totsamp43)>>2)];
      var $add_ptr44=(($69+($71<<2))|0);
      var $72=$cursamples;
      var $73=$rgData_addr;
      var $freqindex45=(($73+38784)|0);
      var $74=HEAP32[(($freqindex45)>>2)];
      var $arrayidx46=((5389096+($74)*(20))|0);
      var $arraydecay47=(($arrayidx46)|0);
      _filterButter($add_ptr42, $add_ptr44, $72, $arraydecay47);
      var $75=$rgData_addr;
      var $rstep48=(($75+29108)|0);
      var $76=HEAP32[(($rstep48)>>2)];
      var $77=$rgData_addr;
      var $totsamp49=(($77+38764)|0);
      var $78=HEAP32[(($totsamp49)>>2)];
      var $add_ptr50=(($76+($78<<2))|0);
      var $79=$rgData_addr;
      var $rout=(($79+38756)|0);
      var $80=HEAP32[(($rout)>>2)];
      var $81=$rgData_addr;
      var $totsamp51=(($81+38764)|0);
      var $82=HEAP32[(($totsamp51)>>2)];
      var $add_ptr52=(($80+($82<<2))|0);
      var $83=$cursamples;
      var $84=$rgData_addr;
      var $freqindex53=(($84+38784)|0);
      var $85=HEAP32[(($freqindex53)>>2)];
      var $arrayidx54=((5389096+($85)*(20))|0);
      var $arraydecay55=(($arrayidx54)|0);
      _filterButter($add_ptr50, $add_ptr52, $83, $arraydecay55);
      var $86=$rgData_addr;
      var $lout56=(($86+19376)|0);
      var $87=HEAP32[(($lout56)>>2)];
      var $88=$rgData_addr;
      var $totsamp57=(($88+38764)|0);
      var $89=HEAP32[(($totsamp57)>>2)];
      var $add_ptr58=(($87+($89<<2))|0);
      $curleft=$add_ptr58;
      var $90=$rgData_addr;
      var $rout59=(($90+38756)|0);
      var $91=HEAP32[(($rout59)>>2)];
      var $92=$rgData_addr;
      var $totsamp60=(($92+38764)|0);
      var $93=HEAP32[(($totsamp60)>>2)];
      var $add_ptr61=(($91+($93<<2))|0);
      $curright=$add_ptr61;
      var $94=$cursamples;
      var $rem=((($94)|0))%(8);
      $i=$rem;
      label = 22; break;
    case 22: 
      var $95=$i;
      var $dec=((($95)-(1))|0);
      $i=$dec;
      var $tobool=(($95)|0)!=0;
      if ($tobool) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $96=$curleft;
      var $incdec_ptr=(($96+4)|0);
      $curleft=$incdec_ptr;
      var $97=HEAPF32[(($96)>>2)];
      var $conv=$97;
      var $call=_fsqr($conv);
      var $98=$rgData_addr;
      var $lsum=(($98+38768)|0);
      var $99=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($lsum)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($lsum)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($99)+($call);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($lsum)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lsum)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $100=$curright;
      var $incdec_ptr64=(($100+4)|0);
      $curright=$incdec_ptr64;
      var $101=HEAPF32[(($100)>>2)];
      var $conv65=$101;
      var $call66=_fsqr($conv65);
      var $102=$rgData_addr;
      var $rsum=(($102+38776)|0);
      var $103=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($rsum)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($rsum)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add67=($103)+($call66);
      (HEAPF64[(tempDoublePtr)>>3]=$add67,HEAP32[(($rsum)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($rsum)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 22; break;
    case 24: 
      var $104=$cursamples;
      var $div=((((($104)|0))/(8))&-1);
      $i=$div;
      label = 25; break;
    case 25: 
      var $105=$i;
      var $dec69=((($105)-(1))|0);
      $i=$dec69;
      var $tobool70=(($105)|0)!=0;
      if ($tobool70) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $106=$curleft;
      var $arrayidx72=(($106)|0);
      var $107=HEAPF32[(($arrayidx72)>>2)];
      var $conv73=$107;
      var $call74=_fsqr($conv73);
      var $108=$curleft;
      var $arrayidx75=(($108+4)|0);
      var $109=HEAPF32[(($arrayidx75)>>2)];
      var $conv76=$109;
      var $call77=_fsqr($conv76);
      var $add78=($call74)+($call77);
      var $110=$curleft;
      var $arrayidx79=(($110+8)|0);
      var $111=HEAPF32[(($arrayidx79)>>2)];
      var $conv80=$111;
      var $call81=_fsqr($conv80);
      var $add82=($add78)+($call81);
      var $112=$curleft;
      var $arrayidx83=(($112+12)|0);
      var $113=HEAPF32[(($arrayidx83)>>2)];
      var $conv84=$113;
      var $call85=_fsqr($conv84);
      var $add86=($add82)+($call85);
      var $114=$curleft;
      var $arrayidx87=(($114+16)|0);
      var $115=HEAPF32[(($arrayidx87)>>2)];
      var $conv88=$115;
      var $call89=_fsqr($conv88);
      var $add90=($add86)+($call89);
      var $116=$curleft;
      var $arrayidx91=(($116+20)|0);
      var $117=HEAPF32[(($arrayidx91)>>2)];
      var $conv92=$117;
      var $call93=_fsqr($conv92);
      var $add94=($add90)+($call93);
      var $118=$curleft;
      var $arrayidx95=(($118+24)|0);
      var $119=HEAPF32[(($arrayidx95)>>2)];
      var $conv96=$119;
      var $call97=_fsqr($conv96);
      var $add98=($add94)+($call97);
      var $120=$curleft;
      var $arrayidx99=(($120+28)|0);
      var $121=HEAPF32[(($arrayidx99)>>2)];
      var $conv100=$121;
      var $call101=_fsqr($conv100);
      var $add102=($add98)+($call101);
      var $122=$rgData_addr;
      var $lsum103=(($122+38768)|0);
      var $123=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($lsum103)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($lsum103)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add104=($123)+($add102);
      (HEAPF64[(tempDoublePtr)>>3]=$add104,HEAP32[(($lsum103)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lsum103)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $124=$curleft;
      var $add_ptr105=(($124+32)|0);
      $curleft=$add_ptr105;
      var $125=$curright;
      var $arrayidx106=(($125)|0);
      var $126=HEAPF32[(($arrayidx106)>>2)];
      var $conv107=$126;
      var $call108=_fsqr($conv107);
      var $127=$curright;
      var $arrayidx109=(($127+4)|0);
      var $128=HEAPF32[(($arrayidx109)>>2)];
      var $conv110=$128;
      var $call111=_fsqr($conv110);
      var $add112=($call108)+($call111);
      var $129=$curright;
      var $arrayidx113=(($129+8)|0);
      var $130=HEAPF32[(($arrayidx113)>>2)];
      var $conv114=$130;
      var $call115=_fsqr($conv114);
      var $add116=($add112)+($call115);
      var $131=$curright;
      var $arrayidx117=(($131+12)|0);
      var $132=HEAPF32[(($arrayidx117)>>2)];
      var $conv118=$132;
      var $call119=_fsqr($conv118);
      var $add120=($add116)+($call119);
      var $133=$curright;
      var $arrayidx121=(($133+16)|0);
      var $134=HEAPF32[(($arrayidx121)>>2)];
      var $conv122=$134;
      var $call123=_fsqr($conv122);
      var $add124=($add120)+($call123);
      var $135=$curright;
      var $arrayidx125=(($135+20)|0);
      var $136=HEAPF32[(($arrayidx125)>>2)];
      var $conv126=$136;
      var $call127=_fsqr($conv126);
      var $add128=($add124)+($call127);
      var $137=$curright;
      var $arrayidx129=(($137+24)|0);
      var $138=HEAPF32[(($arrayidx129)>>2)];
      var $conv130=$138;
      var $call131=_fsqr($conv130);
      var $add132=($add128)+($call131);
      var $139=$curright;
      var $arrayidx133=(($139+28)|0);
      var $140=HEAPF32[(($arrayidx133)>>2)];
      var $conv134=$140;
      var $call135=_fsqr($conv134);
      var $add136=($add132)+($call135);
      var $141=$rgData_addr;
      var $rsum137=(($141+38776)|0);
      var $142=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($rsum137)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($rsum137)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add138=($142)+($add136);
      (HEAPF64[(tempDoublePtr)>>3]=$add138,HEAP32[(($rsum137)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($rsum137)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $143=$curright;
      var $add_ptr139=(($143+32)|0);
      $curright=$add_ptr139;
      label = 25; break;
    case 27: 
      var $144=$cursamples;
      var $145=$batchsamples;
      var $sub141=((($145)-($144))|0);
      $batchsamples=$sub141;
      var $146=$cursamples;
      var $147=$cursamplepos;
      var $add142=((($147)+($146))|0);
      $cursamplepos=$add142;
      var $148=$cursamples;
      var $149=$rgData_addr;
      var $totsamp143=(($149+38764)|0);
      var $150=HEAP32[(($totsamp143)>>2)];
      var $add144=((($150)+($148))|0);
      HEAP32[(($totsamp143)>>2)]=$add144;
      var $151=$rgData_addr;
      var $totsamp145=(($151+38764)|0);
      var $152=HEAP32[(($totsamp145)>>2)];
      var $153=$rgData_addr;
      var $sampleWindow146=(($153+38760)|0);
      var $154=HEAP32[(($sampleWindow146)>>2)];
      var $cmp147=(($152)|0)==(($154)|0);
      if ($cmp147) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $155=$rgData_addr;
      var $lsum150=(($155+38768)|0);
      var $156=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($lsum150)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($lsum150)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $157=$rgData_addr;
      var $rsum151=(($157+38776)|0);
      var $158=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($rsum151)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($rsum151)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add152=($156)+($158);
      var $159=$rgData_addr;
      var $totsamp153=(($159+38764)|0);
      var $160=HEAP32[(($totsamp153)>>2)];
      var $conv154=(($160)|0);
      var $div155=($add152)/($conv154);
      var $mul156=($div155)*(0.5);
      var $add157=($mul156)+(1e-37);
      var $call158=_log10($add157);
      var $mul159=($call158)*(1000);
      $val=$mul159;
      var $161=$val;
      var $cmp160=$161 <= 0;
      if ($cmp160) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $cond166 = 0;label = 31; break;
    case 30: 
      var $162=$val;
      var $conv164=($162>=0 ? Math.floor($162) : Math.ceil($162));
      var $cond166 = $conv164;label = 31; break;
    case 31: 
      var $cond166;
      $ival=$cond166;
      var $163=$ival;
      var $cmp167=(($163)>>>0) >= 12000;
      if ($cmp167) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $ival=11999;
      label = 33; break;
    case 33: 
      var $164=$ival;
      var $165=$rgData_addr;
      var $A=(($165+38792)|0);
      var $arrayidx171=(($A+($164<<2))|0);
      var $166=HEAP32[(($arrayidx171)>>2)];
      var $inc=((($166)+(1))|0);
      HEAP32[(($arrayidx171)>>2)]=$inc;
      var $167=$rgData_addr;
      var $rsum172=(($167+38776)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($rsum172)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($rsum172)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $168=$rgData_addr;
      var $lsum173=(($168+38768)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($lsum173)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lsum173)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $169=$rgData_addr;
      var $loutbuf=(($169+9732)|0);
      var $170=$loutbuf;
      var $171=$rgData_addr;
      var $loutbuf174=(($171+9732)|0);
      var $arraydecay175=(($loutbuf174)|0);
      var $172=$rgData_addr;
      var $totsamp176=(($172+38764)|0);
      var $173=HEAP32[(($totsamp176)>>2)];
      var $add_ptr177=(($arraydecay175+($173<<2))|0);
      var $174=$add_ptr177;
      _memmove($170, $174, 40, 4, 0);
      var $175=$rgData_addr;
      var $routbuf=(($175+29112)|0);
      var $176=$routbuf;
      var $177=$rgData_addr;
      var $routbuf178=(($177+29112)|0);
      var $arraydecay179=(($routbuf178)|0);
      var $178=$rgData_addr;
      var $totsamp180=(($178+38764)|0);
      var $179=HEAP32[(($totsamp180)>>2)];
      var $add_ptr181=(($arraydecay179+($179<<2))|0);
      var $180=$add_ptr181;
      _memmove($176, $180, 40, 4, 0);
      var $181=$rgData_addr;
      var $lstepbuf=(($181+84)|0);
      var $182=$lstepbuf;
      var $183=$rgData_addr;
      var $lstepbuf182=(($183+84)|0);
      var $arraydecay183=(($lstepbuf182)|0);
      var $184=$rgData_addr;
      var $totsamp184=(($184+38764)|0);
      var $185=HEAP32[(($totsamp184)>>2)];
      var $add_ptr185=(($arraydecay183+($185<<2))|0);
      var $186=$add_ptr185;
      _memmove($182, $186, 40, 4, 0);
      var $187=$rgData_addr;
      var $rstepbuf=(($187+19464)|0);
      var $188=$rstepbuf;
      var $189=$rgData_addr;
      var $rstepbuf186=(($189+19464)|0);
      var $arraydecay187=(($rstepbuf186)|0);
      var $190=$rgData_addr;
      var $totsamp188=(($190+38764)|0);
      var $191=HEAP32[(($totsamp188)>>2)];
      var $add_ptr189=(($arraydecay187+($191<<2))|0);
      var $192=$add_ptr189;
      _memmove($188, $192, 40, 4, 0);
      var $193=$rgData_addr;
      var $totsamp190=(($193+38764)|0);
      HEAP32[(($totsamp190)>>2)]=0;
      label = 34; break;
    case 34: 
      var $194=$rgData_addr;
      var $totsamp192=(($194+38764)|0);
      var $195=HEAP32[(($totsamp192)>>2)];
      var $196=$rgData_addr;
      var $sampleWindow193=(($196+38760)|0);
      var $197=HEAP32[(($sampleWindow193)>>2)];
      var $cmp194=(($195)|0) > (($197)|0);
      if ($cmp194) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $retval=0;
      label = 41; break;
    case 36: 
      label = 12; break;
    case 37: 
      var $198=$num_samples_addr;
      var $cmp199=(($198)>>>0) < 10;
      if ($cmp199) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $199=$rgData_addr;
      var $linprebuf202=(($199)|0);
      var $200=$linprebuf202;
      var $201=$rgData_addr;
      var $linprebuf203=(($201)|0);
      var $arraydecay204=(($linprebuf203)|0);
      var $202=$num_samples_addr;
      var $add_ptr205=(($arraydecay204+($202<<2))|0);
      var $203=$add_ptr205;
      var $204=$num_samples_addr;
      var $sub206=(((10)-($204))|0);
      var $mul207=((($sub206<<2))&-1);
      _memmove($200, $203, $mul207, 4, 0);
      var $205=$rgData_addr;
      var $rinprebuf208=(($205+19380)|0);
      var $206=$rinprebuf208;
      var $207=$rgData_addr;
      var $rinprebuf209=(($207+19380)|0);
      var $arraydecay210=(($rinprebuf209)|0);
      var $208=$num_samples_addr;
      var $add_ptr211=(($arraydecay210+($208<<2))|0);
      var $209=$add_ptr211;
      var $210=$num_samples_addr;
      var $sub212=(((10)-($210))|0);
      var $mul213=((($sub212<<2))&-1);
      _memmove($206, $209, $mul213, 4, 0);
      var $211=$rgData_addr;
      var $linprebuf214=(($211)|0);
      var $arraydecay215=(($linprebuf214)|0);
      var $add_ptr216=(($arraydecay215+40)|0);
      var $212=$num_samples_addr;
      var $idx_neg=(((-$212))|0);
      var $add_ptr217=(($add_ptr216+($idx_neg<<2))|0);
      var $213=$add_ptr217;
      var $214=$left_samples_addr;
      var $215=$214;
      var $216=$num_samples_addr;
      var $mul218=((($216<<2))&-1);
      assert($mul218 % 1 === 0);_memcpy($213, $215, $mul218);
      var $217=$rgData_addr;
      var $rinprebuf219=(($217+19380)|0);
      var $arraydecay220=(($rinprebuf219)|0);
      var $add_ptr221=(($arraydecay220+40)|0);
      var $218=$num_samples_addr;
      var $idx_neg222=(((-$218))|0);
      var $add_ptr223=(($add_ptr221+($idx_neg222<<2))|0);
      var $219=$add_ptr223;
      var $220=$right_samples_addr;
      var $221=$220;
      var $222=$num_samples_addr;
      var $mul224=((($222<<2))&-1);
      assert($mul224 % 1 === 0);_memcpy($219, $221, $mul224);
      label = 40; break;
    case 39: 
      var $223=$rgData_addr;
      var $linprebuf226=(($223)|0);
      var $224=$linprebuf226;
      var $225=$left_samples_addr;
      var $226=$num_samples_addr;
      var $add_ptr227=(($225+($226<<2))|0);
      var $add_ptr228=((($add_ptr227)-(40))|0);
      var $227=$add_ptr228;
      assert(40 % 1 === 0);for (var $$src = $227>>2, $$dest = $224>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $228=$rgData_addr;
      var $rinprebuf229=(($228+19380)|0);
      var $229=$rinprebuf229;
      var $230=$right_samples_addr;
      var $231=$num_samples_addr;
      var $add_ptr230=(($230+($231<<2))|0);
      var $add_ptr231=((($add_ptr230)-(40))|0);
      var $232=$add_ptr231;
      assert(40 % 1 === 0);for (var $$src = $232>>2, $$dest = $229>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 40; break;
    case 40: 
      $retval=1;
      label = 41; break;
    case 41: 
      var $233=$retval;

      return $233;
    default: assert(0, "bad label: " + label);
  }

}
_AnalyzeSamples["X"]=1;

function _fsqr($d) {
  var label = 0;


  var $d_addr;
  $d_addr=$d;
  var $0=$d_addr;
  var $1=$d_addr;
  var $mul=($0)*($1);

  return $mul;
}


function _filterYule($input, $output, $nSamples, $kernel) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $input_addr;
      var $output_addr;
      var $nSamples_addr;
      var $kernel_addr;
      $input_addr=$input;
      $output_addr=$output;
      $nSamples_addr=$nSamples;
      $kernel_addr=$kernel;
      label = 3; break;
    case 3: 
      var $0=$nSamples_addr;
      var $dec=((($0)-(1))|0);
      $nSamples_addr=$dec;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$input_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF32[(($arrayidx)>>2)];
      var $3=$kernel_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF32[(($arrayidx1)>>2)];
      var $mul=($2)*($4);
      var $conv=$mul;
      var $add=($conv)+(1e-10);
      var $5=$output_addr;
      var $arrayidx2=((($5)-(4))|0);
      var $6=HEAPF32[(($arrayidx2)>>2)];
      var $7=$kernel_addr;
      var $arrayidx3=(($7+4)|0);
      var $8=HEAPF32[(($arrayidx3)>>2)];
      var $mul4=($6)*($8);
      var $conv5=$mul4;
      var $sub=($add)-($conv5);
      var $9=$input_addr;
      var $arrayidx6=((($9)-(4))|0);
      var $10=HEAPF32[(($arrayidx6)>>2)];
      var $11=$kernel_addr;
      var $arrayidx7=(($11+8)|0);
      var $12=HEAPF32[(($arrayidx7)>>2)];
      var $mul8=($10)*($12);
      var $conv9=$mul8;
      var $add10=($sub)+($conv9);
      var $13=$output_addr;
      var $arrayidx11=((($13)-(8))|0);
      var $14=HEAPF32[(($arrayidx11)>>2)];
      var $15=$kernel_addr;
      var $arrayidx12=(($15+12)|0);
      var $16=HEAPF32[(($arrayidx12)>>2)];
      var $mul13=($14)*($16);
      var $conv14=$mul13;
      var $sub15=($add10)-($conv14);
      var $17=$input_addr;
      var $arrayidx16=((($17)-(8))|0);
      var $18=HEAPF32[(($arrayidx16)>>2)];
      var $19=$kernel_addr;
      var $arrayidx17=(($19+16)|0);
      var $20=HEAPF32[(($arrayidx17)>>2)];
      var $mul18=($18)*($20);
      var $conv19=$mul18;
      var $add20=($sub15)+($conv19);
      var $21=$output_addr;
      var $arrayidx21=((($21)-(12))|0);
      var $22=HEAPF32[(($arrayidx21)>>2)];
      var $23=$kernel_addr;
      var $arrayidx22=(($23+20)|0);
      var $24=HEAPF32[(($arrayidx22)>>2)];
      var $mul23=($22)*($24);
      var $conv24=$mul23;
      var $sub25=($add20)-($conv24);
      var $25=$input_addr;
      var $arrayidx26=((($25)-(12))|0);
      var $26=HEAPF32[(($arrayidx26)>>2)];
      var $27=$kernel_addr;
      var $arrayidx27=(($27+24)|0);
      var $28=HEAPF32[(($arrayidx27)>>2)];
      var $mul28=($26)*($28);
      var $conv29=$mul28;
      var $add30=($sub25)+($conv29);
      var $29=$output_addr;
      var $arrayidx31=((($29)-(16))|0);
      var $30=HEAPF32[(($arrayidx31)>>2)];
      var $31=$kernel_addr;
      var $arrayidx32=(($31+28)|0);
      var $32=HEAPF32[(($arrayidx32)>>2)];
      var $mul33=($30)*($32);
      var $conv34=$mul33;
      var $sub35=($add30)-($conv34);
      var $33=$input_addr;
      var $arrayidx36=((($33)-(16))|0);
      var $34=HEAPF32[(($arrayidx36)>>2)];
      var $35=$kernel_addr;
      var $arrayidx37=(($35+32)|0);
      var $36=HEAPF32[(($arrayidx37)>>2)];
      var $mul38=($34)*($36);
      var $conv39=$mul38;
      var $add40=($sub35)+($conv39);
      var $37=$output_addr;
      var $arrayidx41=((($37)-(20))|0);
      var $38=HEAPF32[(($arrayidx41)>>2)];
      var $39=$kernel_addr;
      var $arrayidx42=(($39+36)|0);
      var $40=HEAPF32[(($arrayidx42)>>2)];
      var $mul43=($38)*($40);
      var $conv44=$mul43;
      var $sub45=($add40)-($conv44);
      var $41=$input_addr;
      var $arrayidx46=((($41)-(20))|0);
      var $42=HEAPF32[(($arrayidx46)>>2)];
      var $43=$kernel_addr;
      var $arrayidx47=(($43+40)|0);
      var $44=HEAPF32[(($arrayidx47)>>2)];
      var $mul48=($42)*($44);
      var $conv49=$mul48;
      var $add50=($sub45)+($conv49);
      var $45=$output_addr;
      var $arrayidx51=((($45)-(24))|0);
      var $46=HEAPF32[(($arrayidx51)>>2)];
      var $47=$kernel_addr;
      var $arrayidx52=(($47+44)|0);
      var $48=HEAPF32[(($arrayidx52)>>2)];
      var $mul53=($46)*($48);
      var $conv54=$mul53;
      var $sub55=($add50)-($conv54);
      var $49=$input_addr;
      var $arrayidx56=((($49)-(24))|0);
      var $50=HEAPF32[(($arrayidx56)>>2)];
      var $51=$kernel_addr;
      var $arrayidx57=(($51+48)|0);
      var $52=HEAPF32[(($arrayidx57)>>2)];
      var $mul58=($50)*($52);
      var $conv59=$mul58;
      var $add60=($sub55)+($conv59);
      var $53=$output_addr;
      var $arrayidx61=((($53)-(28))|0);
      var $54=HEAPF32[(($arrayidx61)>>2)];
      var $55=$kernel_addr;
      var $arrayidx62=(($55+52)|0);
      var $56=HEAPF32[(($arrayidx62)>>2)];
      var $mul63=($54)*($56);
      var $conv64=$mul63;
      var $sub65=($add60)-($conv64);
      var $57=$input_addr;
      var $arrayidx66=((($57)-(28))|0);
      var $58=HEAPF32[(($arrayidx66)>>2)];
      var $59=$kernel_addr;
      var $arrayidx67=(($59+56)|0);
      var $60=HEAPF32[(($arrayidx67)>>2)];
      var $mul68=($58)*($60);
      var $conv69=$mul68;
      var $add70=($sub65)+($conv69);
      var $61=$output_addr;
      var $arrayidx71=((($61)-(32))|0);
      var $62=HEAPF32[(($arrayidx71)>>2)];
      var $63=$kernel_addr;
      var $arrayidx72=(($63+60)|0);
      var $64=HEAPF32[(($arrayidx72)>>2)];
      var $mul73=($62)*($64);
      var $conv74=$mul73;
      var $sub75=($add70)-($conv74);
      var $65=$input_addr;
      var $arrayidx76=((($65)-(32))|0);
      var $66=HEAPF32[(($arrayidx76)>>2)];
      var $67=$kernel_addr;
      var $arrayidx77=(($67+64)|0);
      var $68=HEAPF32[(($arrayidx77)>>2)];
      var $mul78=($66)*($68);
      var $conv79=$mul78;
      var $add80=($sub75)+($conv79);
      var $69=$output_addr;
      var $arrayidx81=((($69)-(36))|0);
      var $70=HEAPF32[(($arrayidx81)>>2)];
      var $71=$kernel_addr;
      var $arrayidx82=(($71+68)|0);
      var $72=HEAPF32[(($arrayidx82)>>2)];
      var $mul83=($70)*($72);
      var $conv84=$mul83;
      var $sub85=($add80)-($conv84);
      var $73=$input_addr;
      var $arrayidx86=((($73)-(36))|0);
      var $74=HEAPF32[(($arrayidx86)>>2)];
      var $75=$kernel_addr;
      var $arrayidx87=(($75+72)|0);
      var $76=HEAPF32[(($arrayidx87)>>2)];
      var $mul88=($74)*($76);
      var $conv89=$mul88;
      var $add90=($sub85)+($conv89);
      var $77=$output_addr;
      var $arrayidx91=((($77)-(40))|0);
      var $78=HEAPF32[(($arrayidx91)>>2)];
      var $79=$kernel_addr;
      var $arrayidx92=(($79+76)|0);
      var $80=HEAPF32[(($arrayidx92)>>2)];
      var $mul93=($78)*($80);
      var $conv94=$mul93;
      var $sub95=($add90)-($conv94);
      var $81=$input_addr;
      var $arrayidx96=((($81)-(40))|0);
      var $82=HEAPF32[(($arrayidx96)>>2)];
      var $83=$kernel_addr;
      var $arrayidx97=(($83+80)|0);
      var $84=HEAPF32[(($arrayidx97)>>2)];
      var $mul98=($82)*($84);
      var $conv99=$mul98;
      var $add100=($sub95)+($conv99);
      var $conv101=$add100;
      var $85=$output_addr;
      HEAPF32[(($85)>>2)]=$conv101;
      var $86=$output_addr;
      var $incdec_ptr=(($86+4)|0);
      $output_addr=$incdec_ptr;
      var $87=$input_addr;
      var $incdec_ptr102=(($87+4)|0);
      $input_addr=$incdec_ptr102;
      label = 3; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_filterYule["X"]=1;

function _filterButter($input, $output, $nSamples, $kernel) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $input_addr;
      var $output_addr;
      var $nSamples_addr;
      var $kernel_addr;
      $input_addr=$input;
      $output_addr=$output;
      $nSamples_addr=$nSamples;
      $kernel_addr=$kernel;
      label = 3; break;
    case 3: 
      var $0=$nSamples_addr;
      var $dec=((($0)-(1))|0);
      $nSamples_addr=$dec;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$input_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF32[(($arrayidx)>>2)];
      var $3=$kernel_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF32[(($arrayidx1)>>2)];
      var $mul=($2)*($4);
      var $5=$output_addr;
      var $arrayidx2=((($5)-(4))|0);
      var $6=HEAPF32[(($arrayidx2)>>2)];
      var $7=$kernel_addr;
      var $arrayidx3=(($7+4)|0);
      var $8=HEAPF32[(($arrayidx3)>>2)];
      var $mul4=($6)*($8);
      var $sub=($mul)-($mul4);
      var $9=$input_addr;
      var $arrayidx5=((($9)-(4))|0);
      var $10=HEAPF32[(($arrayidx5)>>2)];
      var $11=$kernel_addr;
      var $arrayidx6=(($11+8)|0);
      var $12=HEAPF32[(($arrayidx6)>>2)];
      var $mul7=($10)*($12);
      var $add=($sub)+($mul7);
      var $13=$output_addr;
      var $arrayidx8=((($13)-(8))|0);
      var $14=HEAPF32[(($arrayidx8)>>2)];
      var $15=$kernel_addr;
      var $arrayidx9=(($15+12)|0);
      var $16=HEAPF32[(($arrayidx9)>>2)];
      var $mul10=($14)*($16);
      var $sub11=($add)-($mul10);
      var $17=$input_addr;
      var $arrayidx12=((($17)-(8))|0);
      var $18=HEAPF32[(($arrayidx12)>>2)];
      var $19=$kernel_addr;
      var $arrayidx13=(($19+16)|0);
      var $20=HEAPF32[(($arrayidx13)>>2)];
      var $mul14=($18)*($20);
      var $add15=($sub11)+($mul14);
      var $21=$output_addr;
      HEAPF32[(($21)>>2)]=$add15;
      var $22=$output_addr;
      var $incdec_ptr=(($22+4)|0);
      $output_addr=$incdec_ptr;
      var $23=$input_addr;
      var $incdec_ptr16=(($23+4)|0);
      $input_addr=$incdec_ptr16;
      label = 3; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_filterButter["X"]=1;

function _id3tag_add_v2($gfp) {
  var label = 0;


  var $gfp_addr;
  var $gfc;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $internal_flags=(($0+288)|0);
  var $1=HEAP32[(($internal_flags)>>2)];
  $gfc=$1;
  var $2=$gfc;
  var $tag_spec=(($2+85692)|0);
  var $flags=(($tag_spec)|0);
  var $3=HEAP32[(($flags)>>2)];
  var $and=$3 & -5;
  HEAP32[(($flags)>>2)]=$and;
  var $4=$gfc;
  var $tag_spec1=(($4+85692)|0);
  var $flags2=(($tag_spec1)|0);
  var $5=HEAP32[(($flags2)>>2)];
  var $or=$5 | 2;
  HEAP32[(($flags2)>>2)]=$or;

  return;
}


function _id3tag_v1_only($gfp) {
  var label = 0;


  var $gfp_addr;
  var $gfc;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $internal_flags=(($0+288)|0);
  var $1=HEAP32[(($internal_flags)>>2)];
  $gfc=$1;
  var $2=$gfc;
  var $tag_spec=(($2+85692)|0);
  var $flags=(($tag_spec)|0);
  var $3=HEAP32[(($flags)>>2)];
  var $and=$3 & -11;
  HEAP32[(($flags)>>2)]=$and;
  var $4=$gfc;
  var $tag_spec1=(($4+85692)|0);
  var $flags2=(($tag_spec1)|0);
  var $5=HEAP32[(($flags2)>>2)];
  var $or=$5 | 4;
  HEAP32[(($flags2)>>2)]=$or;

  return;
}


function _id3tag_v2_only($gfp) {
  var label = 0;


  var $gfp_addr;
  var $gfc;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $internal_flags=(($0+288)|0);
  var $1=HEAP32[(($internal_flags)>>2)];
  $gfc=$1;
  var $2=$gfc;
  var $tag_spec=(($2+85692)|0);
  var $flags=(($tag_spec)|0);
  var $3=HEAP32[(($flags)>>2)];
  var $and=$3 & -5;
  HEAP32[(($flags)>>2)]=$and;
  var $4=$gfc;
  var $tag_spec1=(($4+85692)|0);
  var $flags2=(($tag_spec1)|0);
  var $5=HEAP32[(($flags2)>>2)];
  var $or=$5 | 8;
  HEAP32[(($flags2)>>2)]=$or;

  return;
}


function _id3tag_space_v1($gfp) {
  var label = 0;


  var $gfp_addr;
  var $gfc;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $internal_flags=(($0+288)|0);
  var $1=HEAP32[(($internal_flags)>>2)];
  $gfc=$1;
  var $2=$gfc;
  var $tag_spec=(($2+85692)|0);
  var $flags=(($tag_spec)|0);
  var $3=HEAP32[(($flags)>>2)];
  var $and=$3 & -9;
  HEAP32[(($flags)>>2)]=$and;
  var $4=$gfc;
  var $tag_spec1=(($4+85692)|0);
  var $flags2=(($tag_spec1)|0);
  var $5=HEAP32[(($flags2)>>2)];
  var $or=$5 | 16;
  HEAP32[(($flags2)>>2)]=$or;

  return;
}


function _id3tag_set_pad($gfp, $n) {
  var label = 0;


  var $gfp_addr;
  var $n_addr;
  var $gfc;
  $gfp_addr=$gfp;
  $n_addr=$n;
  var $0=$gfp_addr;
  var $internal_flags=(($0+288)|0);
  var $1=HEAP32[(($internal_flags)>>2)];
  $gfc=$1;
  var $2=$gfc;
  var $tag_spec=(($2+85692)|0);
  var $flags=(($tag_spec)|0);
  var $3=HEAP32[(($flags)>>2)];
  var $and=$3 & -5;
  HEAP32[(($flags)>>2)]=$and;
  var $4=$gfc;
  var $tag_spec1=(($4+85692)|0);
  var $flags2=(($tag_spec1)|0);
  var $5=HEAP32[(($flags2)>>2)];
  var $or=$5 | 32;
  HEAP32[(($flags2)>>2)]=$or;
  var $6=$gfc;
  var $tag_spec3=(($6+85692)|0);
  var $flags4=(($tag_spec3)|0);
  var $7=HEAP32[(($flags4)>>2)];
  var $or5=$7 | 2;
  HEAP32[(($flags4)>>2)]=$or5;
  var $8=$n_addr;
  var $9=$gfc;
  var $tag_spec6=(($9+85692)|0);
  var $padding_size=(($tag_spec6+40)|0);
  HEAP32[(($padding_size)>>2)]=$8;

  return;
}


function _GetTitleGain($rgData) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $rgData_addr;
      var $retval1;
      var $i;
      $rgData_addr=$rgData;
      var $0=$rgData_addr;
      var $A=(($0+38792)|0);
      var $arraydecay=(($A)|0);
      var $call=_analyzeResult($arraydecay, 12000);
      $retval1=$call;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)>>>0) < 12000;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$rgData_addr;
      var $A2=(($3+38792)|0);
      var $arrayidx=(($A2+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$i;
      var $6=$rgData_addr;
      var $B=(($6+86792)|0);
      var $arrayidx3=(($B+($5<<2))|0);
      var $7=HEAP32[(($arrayidx3)>>2)];
      var $add=((($7)+($4))|0);
      HEAP32[(($arrayidx3)>>2)]=$add;
      var $8=$i;
      var $9=$rgData_addr;
      var $A4=(($9+38792)|0);
      var $arrayidx5=(($A4+($8<<2))|0);
      HEAP32[(($arrayidx5)>>2)]=0;
      label = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $cmp7=(($11)>>>0) < 10;
      if ($cmp7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $12=$i;
      var $13=$rgData_addr;
      var $routbuf=(($13+29112)|0);
      var $arrayidx9=(($routbuf+($12<<2))|0);
      HEAPF32[(($arrayidx9)>>2)]=0;
      var $14=$i;
      var $15=$rgData_addr;
      var $rstepbuf=(($15+19464)|0);
      var $arrayidx10=(($rstepbuf+($14<<2))|0);
      HEAPF32[(($arrayidx10)>>2)]=0;
      var $16=$i;
      var $17=$rgData_addr;
      var $rinprebuf=(($17+19380)|0);
      var $arrayidx11=(($rinprebuf+($16<<2))|0);
      HEAPF32[(($arrayidx11)>>2)]=0;
      var $18=$i;
      var $19=$rgData_addr;
      var $loutbuf=(($19+9732)|0);
      var $arrayidx12=(($loutbuf+($18<<2))|0);
      HEAPF32[(($arrayidx12)>>2)]=0;
      var $20=$i;
      var $21=$rgData_addr;
      var $lstepbuf=(($21+84)|0);
      var $arrayidx13=(($lstepbuf+($20<<2))|0);
      HEAPF32[(($arrayidx13)>>2)]=0;
      var $22=$i;
      var $23=$rgData_addr;
      var $linprebuf=(($23)|0);
      var $arrayidx14=(($linprebuf+($22<<2))|0);
      HEAPF32[(($arrayidx14)>>2)]=0;
      label = 9; break;
    case 9: 
      var $24=$i;
      var $inc16=((($24)+(1))|0);
      $i=$inc16;
      label = 7; break;
    case 10: 
      var $25=$rgData_addr;
      var $totsamp=(($25+38764)|0);
      HEAP32[(($totsamp)>>2)]=0;
      var $26=$rgData_addr;
      var $rsum=(($26+38776)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($rsum)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($rsum)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $27=$rgData_addr;
      var $lsum=(($27+38768)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($lsum)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lsum)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $28=$retval1;

      return $28;
    default: assert(0, "bad label: " + label);
  }

}
_GetTitleGain["X"]=1;

function _analyzeResult($Array, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $Array_addr;
      var $len_addr;
      var $elems;
      var $upper;
      var $sum;
      var $i;
      $Array_addr=$Array;
      $len_addr=$len;
      $elems=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$len_addr;
      var $cmp=(($0)>>>0) < (($1)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$Array_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$elems;
      var $add=((($5)+($4))|0);
      $elems=$add;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $7=$elems;
      var $cmp1=(($7)|0)==0;
      if ($cmp1) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=-24601;
      label = 14; break;
    case 8: 
      var $8=$elems;
      var $conv=(($8)>>>0);
      var $mul=($conv)*(0.050000000000000044);
      var $call=Math.ceil($mul);
      var $conv2=($call>=0 ? Math.floor($call) : Math.ceil($call));
      $upper=$conv2;
      $sum=0;
      var $9=$len_addr;
      $i=$9;
      label = 9; break;
    case 9: 
      var $10=$i;
      var $dec=((($10)-(1))|0);
      $i=$dec;
      var $cmp4=(($10)>>>0) > 0;
      if ($cmp4) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $11=$i;
      var $12=$Array_addr;
      var $arrayidx7=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx7)>>2)];
      var $14=$sum;
      var $add8=((($14)+($13))|0);
      $sum=$add8;
      var $15=$sum;
      var $16=$upper;
      var $cmp9=(($15)>>>0) >= (($16)>>>0);
      if ($cmp9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $17=$i;
      var $conv14=(($17)>>>0);
      var $div=($conv14)/(100);
      var $sub=(64.81999969482422)-($div);
      $retval=$sub;
      label = 14; break;
    case 14: 
      var $18=$retval;

      return $18;
    default: assert(0, "bad label: " + label);
  }

}
_analyzeResult["X"]=1;

function _id3tag_genre_list($handler, $cookie) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $handler_addr;
      var $cookie_addr;
      var $i;
      var $j;
      $handler_addr=$handler;
      $cookie_addr=$cookie;
      var $0=$handler_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $1=$i;
      var $cmp=(($1)|0) < 148;
      if ($cmp) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $2=$i;
      var $cmp1=(($2)|0) < 148;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $3=$i;
      var $arrayidx=((5345936+($3<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $j=$4;
      var $5=$handler_addr;
      var $6=$j;
      var $7=$j;
      var $arrayidx3=((5345344+($7<<2))|0);
      var $8=HEAP32[(($arrayidx3)>>2)];
      var $9=$cookie_addr;
      FUNCTION_TABLE[$5]($6, $8, $9);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 9: 
      label = 10; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_init($gfp) {
  var label = 0;


  var $gfp_addr;
  var $gfc;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $internal_flags=(($0+288)|0);
  var $1=HEAP32[(($internal_flags)>>2)];
  $gfc=$1;
  var $2=$gfc;
  _free_id3tag($2);
  var $3=$gfc;
  var $tag_spec=(($3+85692)|0);
  var $4=$tag_spec;
  for (var $$dest = $4>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0
  };
  var $5=$gfc;
  var $tag_spec1=(($5+85692)|0);
  var $genre_id3v1=(($tag_spec1+28)|0);
  HEAP32[(($genre_id3v1)>>2)]=255;
  var $6=$gfc;
  var $tag_spec2=(($6+85692)|0);
  var $padding_size=(($tag_spec2+40)|0);
  HEAP32[(($padding_size)>>2)]=128;
  var $7=$gfp_addr;
  _id3v2AddLameVersion($7);

  return;
}


function _id3v2AddLameVersion($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $buffer=__stackBase__;
      var $b;
      var $v;
      var $u;
      var $lenb;
      $gfp_addr=$gfp;
      var $call=_get_lame_os_bitness();
      $b=$call;
      var $call1=_get_lame_version();
      $v=$call1;
      var $call2=_get_lame_url();
      $u=$call2;
      var $0=$b;
      var $call3=_strlen($0);
      $lenb=$call3;
      var $1=$lenb;
      var $cmp=(($1)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $arraydecay=(($buffer)|0);
      var $2=$b;
      var $3=$v;
      var $4=$u;
      var $call4=_sprintf($arraydecay, ((5382996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,HEAP32[(((tempInt)+(4))>>2)]=$3,HEAP32[(((tempInt)+(8))>>2)]=$4,tempInt));
      label = 5; break;
    case 4: 
      var $arraydecay5=(($buffer)|0);
      var $5=$v;
      var $6=$u;
      var $call6=_sprintf($arraydecay5, ((5387632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$6,tempInt));
      label = 5; break;
    case 5: 
      var $7=$gfp_addr;
      var $arraydecay7=(($buffer)|0);
      _copyV1ToV2($7, 1414746949, $arraydecay7);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_pad_v2($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  _id3tag_set_pad($0, 128);

  return;
}


function _id3tag_set_albumart($gfp, $image, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $image_addr;
      var $size_addr;
      var $mimetype;
      var $data;
      var $gfc;
      $gfp_addr=$gfp;
      $image_addr=$image;
      $size_addr=$size;
      $mimetype=0;
      var $0=$image_addr;
      $data=$0;
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$size_addr;
      var $cmp=2 < (($3)>>>0);
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$data;
      var $arrayidx=(($4)|0);
      var $5=HEAP8[($arrayidx)];
      var $conv=(($5)&255);
      var $cmp1=(($conv)|0)==255;
      if ($cmp1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$data;
      var $arrayidx4=(($6+1)|0);
      var $7=HEAP8[($arrayidx4)];
      var $conv5=(($7)&255);
      var $cmp6=(($conv5)|0)==216;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $mimetype=1;
      label = 16; break;
    case 6: 
      var $8=$size_addr;
      var $cmp8=4 < (($8)>>>0);
      if ($cmp8) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $9=$data;
      var $arrayidx11=(($9)|0);
      var $10=HEAP8[($arrayidx11)];
      var $conv12=(($10)&255);
      var $cmp13=(($conv12)|0)==137;
      if ($cmp13) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $11=$data;
      var $arrayidx16=(($11+1)|0);
      var $call=_strncmp($arrayidx16, ((5387472)|0), 3);
      var $cmp17=(($call)|0)==0;
      if ($cmp17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $mimetype=2;
      label = 15; break;
    case 10: 
      var $12=$size_addr;
      var $cmp21=4 < (($12)>>>0);
      if ($cmp21) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $13=$data;
      var $call24=_strncmp($13, ((5387428)|0), 4);
      var $cmp25=(($call24)|0)==0;
      if ($cmp25) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $mimetype=3;
      label = 14; break;
    case 13: 
      $retval=-1;
      label = 23; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $14=$gfc;
      var $tag_spec=(($14+85692)|0);
      var $albumart=(($tag_spec+32)|0);
      var $15=HEAP32[(($albumart)>>2)];
      var $cmp31=(($15)|0)!=0;
      if ($cmp31) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $16=$gfc;
      var $tag_spec34=(($16+85692)|0);
      var $albumart35=(($tag_spec34+32)|0);
      var $17=HEAP32[(($albumart35)>>2)];
      _free($17);
      var $18=$gfc;
      var $tag_spec36=(($18+85692)|0);
      var $albumart37=(($tag_spec36+32)|0);
      HEAP32[(($albumart37)>>2)]=0;
      var $19=$gfc;
      var $tag_spec38=(($19+85692)|0);
      var $albumart_size=(($tag_spec38+36)|0);
      HEAP32[(($albumart_size)>>2)]=0;
      var $20=$gfc;
      var $tag_spec39=(($20+85692)|0);
      var $albumart_mimetype=(($tag_spec39+44)|0);
      HEAP32[(($albumart_mimetype)>>2)]=0;
      label = 18; break;
    case 18: 
      var $21=$size_addr;
      var $cmp41=(($21)>>>0) < 1;
      if ($cmp41) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $retval=0;
      label = 23; break;
    case 20: 
      var $22=$size_addr;
      var $call45=_calloc($22, 1);
      var $23=$gfc;
      var $tag_spec46=(($23+85692)|0);
      var $albumart47=(($tag_spec46+32)|0);
      HEAP32[(($albumart47)>>2)]=$call45;
      var $24=$gfc;
      var $tag_spec48=(($24+85692)|0);
      var $albumart49=(($tag_spec48+32)|0);
      var $25=HEAP32[(($albumart49)>>2)];
      var $cmp50=(($25)|0)!=0;
      if ($cmp50) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $26=$gfc;
      var $tag_spec53=(($26+85692)|0);
      var $albumart54=(($tag_spec53+32)|0);
      var $27=HEAP32[(($albumart54)>>2)];
      var $28=$image_addr;
      var $29=$size_addr;
      assert($29 % 1 === 0);_memcpy($27, $28, $29);
      var $30=$size_addr;
      var $31=$gfc;
      var $tag_spec55=(($31+85692)|0);
      var $albumart_size56=(($tag_spec55+36)|0);
      HEAP32[(($albumart_size56)>>2)]=$30;
      var $32=$mimetype;
      var $33=$gfc;
      var $tag_spec57=(($33+85692)|0);
      var $albumart_mimetype58=(($tag_spec57+44)|0);
      HEAP32[(($albumart_mimetype58)>>2)]=$32;
      var $34=$gfc;
      var $tag_spec59=(($34+85692)|0);
      var $flags=(($tag_spec59)|0);
      var $35=HEAP32[(($flags)>>2)];
      var $or=$35 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $36=$gfp_addr;
      _id3tag_add_v2($36);
      label = 22; break;
    case 22: 
      $retval=0;
      label = 23; break;
    case 23: 
      var $37=$retval;

      return $37;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_albumart["X"]=1;

function _hasUcs2ByteOrderMarker($bom) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $bom_addr;
      $bom_addr=$bom;
      var $0=$bom_addr;
      var $conv=(($0)&65535);
      var $cmp=(($conv)|0)==65534;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$bom_addr;
      var $conv2=(($1)&65535);
      var $cmp3=(($conv2)|0)==65279;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=1;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $2=$retval;

      return $2;
    default: assert(0, "bad label: " + label);
  }

}


function _toID3v2TagId($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $i;
      var $x;
      var $c;
      var $u;
      $s_addr=$s;
      $x=0;
      var $0=$s_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 17; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $1=$i;
      var $cmp1=(($1)>>>0) < 4;
      if ($cmp1) { label = 6; break; } else { var $5 = 0;label = 7; break; }
    case 6: 
      var $2=$i;
      var $3=$s_addr;
      var $arrayidx=(($3+$2)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4 << 24) >> 24);
      var $cmp2=(($conv)|0)!=0;
      var $5 = $cmp2;label = 7; break;
    case 7: 
      var $5;
      if ($5) { label = 8; break; } else { label = 16; break; }
    case 8: 
      var $6=$i;
      var $7=$s_addr;
      var $arrayidx4=(($7+$6)|0);
      var $8=HEAP8[($arrayidx4)];
      $c=$8;
      var $9=$c;
      var $conv5=(($9 << 24) >> 24);
      var $and=255 & $conv5;
      $u=$and;
      var $10=$x;
      var $shl=$10 << 8;
      $x=$shl;
      var $11=$u;
      var $12=$x;
      var $or=$12 | $11;
      $x=$or;
      var $13=$c;
      var $conv6=(($13 << 24) >> 24);
      var $cmp7=(($conv6)|0) < 65;
      if ($cmp7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $14=$c;
      var $conv9=(($14 << 24) >> 24);
      var $cmp10=90 < (($conv9)|0);
      if ($cmp10) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $15=$c;
      var $conv13=(($15 << 24) >> 24);
      var $cmp14=(($conv13)|0) < 48;
      if ($cmp14) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $16=$c;
      var $conv17=(($16 << 24) >> 24);
      var $cmp18=57 < (($conv17)|0);
      if ($cmp18) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $retval=0;
      label = 17; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 16: 
      var $18=$x;
      $retval=$18;
      label = 17; break;
    case 17: 
      var $19=$retval;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_toID3v2TagId["X"]=1;

function _id3tag_set_textinfo_utf16($gfp, $id, $text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $id_addr;
      var $text_addr;
      var $frame_id;
      $gfp_addr=$gfp;
      $id_addr=$id;
      $text_addr=$text;
      var $0=$id_addr;
      var $call=_toID3v2TagId($0);
      $frame_id=$call;
      var $1=$frame_id;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 24; break;
    case 4: 
      var $2=$text_addr;
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 24; break;
    case 6: 
      var $3=$text_addr;
      var $arrayidx=(($3)|0);
      var $4=HEAP16[(($arrayidx)>>1)];
      var $call4=_hasUcs2ByteOrderMarker($4);
      var $tobool=(($call4)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $retval=-3;
      label = 24; break;
    case 8: 
      var $5=$frame_id;
      var $cmp7=(($5)|0)==1415075928;
      if ($cmp7) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $6=$frame_id;
      var $cmp8=(($6)|0)==1465407576;
      if ($cmp8) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $7=$frame_id;
      var $cmp10=(($7)|0)==1129270605;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $8=$gfp_addr;
      var $9=$frame_id;
      var $10=$text_addr;
      var $call12=_id3tag_set_userinfo_ucs2($8, $9, $10);
      $retval=$call12;
      label = 24; break;
    case 12: 
      var $11=$frame_id;
      var $cmp14=(($11)|0)==1413697358;
      if ($cmp14) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $12=$gfp_addr;
      var $13=$text_addr;
      var $call16=_id3tag_set_genre_utf16($12, $13);
      $retval=$call16;
      label = 24; break;
    case 14: 
      var $14=$frame_id;
      var $cmp18=(($14)|0)==1346589524;
      if ($cmp18) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $15=$gfp_addr;
      var $16=$frame_id;
      var $17=$text_addr;
      var $call20=_id3v2_add_ucs2($15, $16, 0, 0, $17);
      $retval=$call20;
      label = 24; break;
    case 16: 
      var $18=$frame_id;
      var $cmp22=(($18)|0)==1431520594;
      if ($cmp22) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $19=$gfp_addr;
      var $20=$frame_id;
      var $21=$text_addr;
      var $call24=_id3v2_add_ucs2($19, $20, ((5386088)|0), $21, 0);
      $retval=$call24;
      label = 24; break;
    case 18: 
      var $22=$frame_id;
      var $cmp26=(($22)|0)==1464223044;
      if ($cmp26) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $23=$gfp_addr;
      var $24=$frame_id;
      var $25=$text_addr;
      var $call28=_id3v2_add_ucs2($23, $24, 0, $25, 0);
      $retval=$call28;
      label = 24; break;
    case 20: 
      var $26=$frame_id;
      var $call30=_isFrameIdMatching($26, 1409286144);
      var $tobool31=(($call30)|0)!=0;
      if ($tobool31) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $27=$frame_id;
      var $call33=_isFrameIdMatching($27, 1459617792);
      var $tobool34=(($call33)|0)!=0;
      if ($tobool34) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $28=$gfp_addr;
      var $29=$frame_id;
      var $30=$text_addr;
      var $call36=_id3v2_add_ucs2($28, $29, 0, 0, $30);
      $retval=$call36;
      label = 24; break;
    case 23: 
      $retval=-255;
      label = 24; break;
    case 24: 
      var $31=$retval;

      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_textinfo_utf16["X"]=1;

function _id3tag_set_userinfo_ucs2($gfp, $id, $fieldvalue) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $id_addr;
      var $fieldvalue_addr;
      var $separator;
      var $rc;
      var $b;
      var $a;
      var $dsc=__stackBase__;
      var $val=(__stackBase__)+(4);
      $gfp_addr=$gfp;
      $id_addr=$id;
      $fieldvalue_addr=$fieldvalue;
      var $0=$fieldvalue_addr;
      var $call=_fromLatin1Char($0, 61);
      $separator=$call;
      $rc=-7;
      var $1=$fieldvalue_addr;
      var $call1=_local_ucs2_strlen($1);
      $b=$call1;
      var $2=$fieldvalue_addr;
      var $3=$separator;
      var $call2=_local_ucs2_pos($2, $3);
      $a=$call2;
      var $4=$a;
      var $cmp=(($4)|0) >= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[(($dsc)>>2)]=0;
      HEAP32[(($val)>>2)]=0;
      var $5=$fieldvalue_addr;
      var $6=$a;
      var $call3=_local_ucs2_substr($dsc, $5, 0, $6);
      var $7=$fieldvalue_addr;
      var $8=$a;
      var $add=((($8)+(1))|0);
      var $9=$b;
      var $call4=_local_ucs2_substr($val, $7, $add, $9);
      var $10=$gfp_addr;
      var $11=$id_addr;
      var $12=HEAP32[(($dsc)>>2)];
      var $13=HEAP32[(($val)>>2)];
      var $call5=_id3v2_add_ucs2($10, $11, ((5386088)|0), $12, $13);
      $rc=$call5;
      var $14=HEAP32[(($dsc)>>2)];
      var $15=$14;
      _free($15);
      var $16=HEAP32[(($val)>>2)];
      var $17=$16;
      _free($17);
      label = 4; break;
    case 4: 
      var $18=$rc;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_userinfo_ucs2["X"]=1;

function _id3tag_set_genre_utf16($gfp, $text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $text_addr;
      var $gfc;
      var $ret;
      var $latin1;
      var $num;
      $gfp_addr=$gfp;
      $text_addr=$text;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$text_addr;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-3;
      label = 15; break;
    case 4: 
      var $3=$text_addr;
      var $arrayidx=(($3)|0);
      var $4=HEAP16[(($arrayidx)>>1)];
      var $call=_hasUcs2ByteOrderMarker($4);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=-3;
      label = 15; break;
    case 6: 
      var $5=$text_addr;
      var $call3=_maybeLatin1($5);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $6=$text_addr;
      var $call6=_local_strdup_utf16_to_latin1($6);
      $latin1=$call6;
      var $7=$latin1;
      var $call7=_lookupGenre($7);
      $num=$call7;
      var $8=$latin1;
      _free($8);
      var $9=$num;
      var $cmp8=(($9)|0)==-1;
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=-1;
      label = 15; break;
    case 9: 
      var $10=$num;
      var $cmp11=(($10)|0) >= 0;
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $11=$gfc;
      var $tag_spec=(($11+85692)|0);
      var $flags=(($tag_spec)|0);
      var $12=HEAP32[(($flags)>>2)];
      var $or=$12 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $13=$num;
      var $14=$gfc;
      var $tag_spec13=(($14+85692)|0);
      var $genre_id3v1=(($tag_spec13+28)|0);
      HEAP32[(($genre_id3v1)>>2)]=$13;
      var $15=$gfp_addr;
      var $16=$num;
      var $arrayidx14=((5345344+($16<<2))|0);
      var $17=HEAP32[(($arrayidx14)>>2)];
      _copyV1ToV2($15, 1413697358, $17);
      $retval=0;
      label = 15; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $18=$gfp_addr;
      var $19=$text_addr;
      var $call17=_id3v2_add_ucs2($18, 1413697358, 0, 0, $19);
      $ret=$call17;
      var $20=$ret;
      var $cmp18=(($20)|0)==0;
      if ($cmp18) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$gfc;
      var $tag_spec20=(($21+85692)|0);
      var $flags21=(($tag_spec20)|0);
      var $22=HEAP32[(($flags21)>>2)];
      var $or22=$22 | 1;
      HEAP32[(($flags21)>>2)]=$or22;
      var $23=$gfc;
      var $tag_spec23=(($23+85692)|0);
      var $genre_id3v124=(($tag_spec23+28)|0);
      HEAP32[(($genre_id3v124)>>2)]=12;
      label = 14; break;
    case 14: 
      var $24=$ret;
      $retval=$24;
      label = 15; break;
    case 15: 
      var $25=$retval;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_genre_utf16["X"]=1;

function _id3v2_add_ucs2($gfp, $frame_id, $lang, $desc, $text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $frame_id_addr;
      var $lang_addr;
      var $desc_addr;
      var $text_addr;
      var $gfc;
      var $node;
      $gfp_addr=$gfp;
      $frame_id_addr=$frame_id;
      $lang_addr=$lang;
      $desc_addr=$desc;
      $text_addr=$text;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $4=$gfc;
      var $tag_spec=(($4+85692)|0);
      var $5=$frame_id_addr;
      var $call=_findNode($tag_spec, $5, 0);
      $node=$call;
      var $6=$frame_id_addr;
      var $call2=_isMultiFrame($6);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 15; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $7=$node;
      var $tobool4=(($7)|0)!=0;
      if ($tobool4) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $8=$node;
      var $lng=(($8+8)|0);
      var $arraydecay=(($lng)|0);
      var $9=$lang_addr;
      var $call5=_isSameLang($arraydecay, $9);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $10=$node;
      var $11=$desc_addr;
      var $call8=_isSameDescriptorUcs2($10, $11);
      var $tobool9=(($call8)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $12=$gfc;
      var $tag_spec12=(($12+85692)|0);
      var $13=$frame_id_addr;
      var $14=$node;
      var $call13=_findNode($tag_spec12, $13, $14);
      $node=$call13;
      label = 8; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $15=$node;
      var $cmp15=(($15)|0)==0;
      if ($cmp15) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $call17=_calloc(1, 36);
      var $16=$call17;
      $node=$16;
      var $17=$node;
      var $cmp18=(($17)|0)==0;
      if ($cmp18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=-254;
      label = 21; break;
    case 18: 
      var $18=$gfc;
      var $tag_spec21=(($18+85692)|0);
      var $19=$node;
      _appendNode($tag_spec21, $19);
      label = 19; break;
    case 19: 
      var $20=$frame_id_addr;
      var $21=$node;
      var $fid=(($21+4)|0);
      HEAP32[(($fid)>>2)]=$20;
      var $22=$node;
      var $lng23=(($22+8)|0);
      var $arraydecay24=(($lng23)|0);
      var $23=$lang_addr;
      _setLang($arraydecay24, $23);
      var $24=$node;
      var $dsc=(($24+12)|0);
      var $ptr=(($dsc)|0);
      var $u=$ptr;
      var $25=$desc_addr;
      var $call25=_local_ucs2_strdup($u, $25);
      var $26=$node;
      var $dsc26=(($26+12)|0);
      var $dim=(($dsc26+4)|0);
      HEAP32[(($dim)>>2)]=$call25;
      var $27=$node;
      var $dsc27=(($27+12)|0);
      var $enc=(($dsc27+8)|0);
      HEAP32[(($enc)>>2)]=1;
      var $28=$node;
      var $txt=(($28+24)|0);
      var $ptr28=(($txt)|0);
      var $u29=$ptr28;
      var $29=$text_addr;
      var $call30=_local_ucs2_strdup($u29, $29);
      var $30=$node;
      var $txt31=(($30+24)|0);
      var $dim32=(($txt31+4)|0);
      HEAP32[(($dim32)>>2)]=$call30;
      var $31=$node;
      var $txt33=(($31+24)|0);
      var $enc34=(($txt33+8)|0);
      HEAP32[(($enc34)>>2)]=1;
      var $32=$gfc;
      var $tag_spec35=(($32+85692)|0);
      var $flags=(($tag_spec35)|0);
      var $33=HEAP32[(($flags)>>2)];
      var $or=$33 | 3;
      HEAP32[(($flags)>>2)]=$or;
      $retval=0;
      label = 21; break;
    case 20: 
      $retval=-255;
      label = 21; break;
    case 21: 
      var $34=$retval;

      return $34;
    default: assert(0, "bad label: " + label);
  }

}
_id3v2_add_ucs2["X"]=1;

function _isFrameIdMatching($id, $mask) {
  var label = 0;


  var $id_addr;
  var $mask_addr;
  $id_addr=$id;
  $mask_addr=$mask;
  var $0=$id_addr;
  var $1=$mask_addr;
  var $call=_frame_id_matches($0, $1);
  var $cmp=(($call)|0)==0;
  var $cond=$cmp ? 1 : 0;

  return $cond;
}


function _id3tag_set_textinfo_ucs2($gfp, $id, $text) {
  var label = 0;


  var $gfp_addr;
  var $id_addr;
  var $text_addr;
  $gfp_addr=$gfp;
  $id_addr=$id;
  $text_addr=$text;
  var $0=$gfp_addr;
  var $1=$id_addr;
  var $2=$text_addr;
  var $call=_id3tag_set_textinfo_utf16($0, $1, $2);

  return $call;
}


function _id3tag_set_textinfo_latin1($gfp, $id, $text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $id_addr;
      var $text_addr;
      var $frame_id;
      $gfp_addr=$gfp;
      $id_addr=$id;
      $text_addr=$text;
      var $0=$id_addr;
      var $call=_toID3v2TagId($0);
      $frame_id=$call;
      var $1=$frame_id;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 22; break;
    case 4: 
      var $2=$text_addr;
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 22; break;
    case 6: 
      var $3=$frame_id;
      var $cmp4=(($3)|0)==1415075928;
      if ($cmp4) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $4=$frame_id;
      var $cmp5=(($4)|0)==1465407576;
      if ($cmp5) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $5=$frame_id;
      var $cmp7=(($5)|0)==1129270605;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $6=$gfp_addr;
      var $7=$frame_id;
      var $8=$text_addr;
      var $call9=_id3tag_set_userinfo_latin1($6, $7, $8);
      $retval=$call9;
      label = 22; break;
    case 10: 
      var $9=$frame_id;
      var $cmp11=(($9)|0)==1413697358;
      if ($cmp11) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $10=$gfp_addr;
      var $11=$text_addr;
      var $call13=_id3tag_set_genre($10, $11);
      $retval=$call13;
      label = 22; break;
    case 12: 
      var $12=$frame_id;
      var $cmp15=(($12)|0)==1346589524;
      if ($cmp15) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $13=$gfp_addr;
      var $14=$frame_id;
      var $15=$text_addr;
      var $call17=_id3v2_add_latin1($13, $14, 0, 0, $15);
      $retval=$call17;
      label = 22; break;
    case 14: 
      var $16=$frame_id;
      var $cmp19=(($16)|0)==1431520594;
      if ($cmp19) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $17=$gfp_addr;
      var $18=$frame_id;
      var $19=$text_addr;
      var $call21=_id3v2_add_latin1($17, $18, ((5386088)|0), $19, 0);
      $retval=$call21;
      label = 22; break;
    case 16: 
      var $20=$frame_id;
      var $cmp23=(($20)|0)==1464223044;
      if ($cmp23) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $21=$gfp_addr;
      var $22=$frame_id;
      var $23=$text_addr;
      var $call25=_id3v2_add_latin1($21, $22, 0, $23, 0);
      $retval=$call25;
      label = 22; break;
    case 18: 
      var $24=$frame_id;
      var $call27=_isFrameIdMatching($24, 1409286144);
      var $tobool=(($call27)|0)!=0;
      if ($tobool) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $25=$frame_id;
      var $call29=_isFrameIdMatching($25, 1459617792);
      var $tobool30=(($call29)|0)!=0;
      if ($tobool30) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $26=$gfp_addr;
      var $27=$frame_id;
      var $28=$text_addr;
      var $call32=_id3v2_add_latin1($26, $27, 0, 0, $28);
      $retval=$call32;
      label = 22; break;
    case 21: 
      $retval=-255;
      label = 22; break;
    case 22: 
      var $29=$retval;

      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_textinfo_latin1["X"]=1;

function _id3tag_set_userinfo_latin1($gfp, $id, $fieldvalue) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $id_addr;
      var $fieldvalue_addr;
      var $separator;
      var $rc;
      var $a;
      var $dup=__stackBase__;
      $gfp_addr=$gfp;
      $id_addr=$id;
      $fieldvalue_addr=$fieldvalue;
      $separator=61;
      $rc=-7;
      var $0=$fieldvalue_addr;
      var $call=_local_char_pos($0, 61);
      $a=$call;
      var $1=$a;
      var $cmp=(($1)|0) >= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[(($dup)>>2)]=0;
      var $2=$fieldvalue_addr;
      var $call1=_local_strdup($dup, $2);
      var $3=$a;
      var $4=HEAP32[(($dup)>>2)];
      var $arrayidx=(($4+$3)|0);
      HEAP8[($arrayidx)]=0;
      var $5=$gfp_addr;
      var $6=$id_addr;
      var $7=HEAP32[(($dup)>>2)];
      var $8=HEAP32[(($dup)>>2)];
      var $9=$a;
      var $add_ptr=(($8+$9)|0);
      var $add_ptr2=(($add_ptr+1)|0);
      var $call3=_id3v2_add_latin1($5, $6, ((5386088)|0), $7, $add_ptr2);
      $rc=$call3;
      var $10=HEAP32[(($dup)>>2)];
      _free($10);
      label = 4; break;
    case 4: 
      var $11=$rc;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_set_genre($gfp, $genre) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $genre_addr;
      var $gfc;
      var $ret;
      var $num;
      $gfp_addr=$gfp;
      $genre_addr=$genre;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      $ret=0;
      var $2=$genre_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $3=$genre_addr;
      var $4=HEAP8[($3)];
      var $conv=(($4 << 24) >> 24);
      var $tobool1=(($conv)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $5=$genre_addr;
      var $call=_lookupGenre($5);
      $num=$call;
      var $6=$num;
      var $cmp=(($6)|0)==-1;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$num;
      $retval=$7;
      label = 11; break;
    case 6: 
      var $8=$gfc;
      var $tag_spec=(($8+85692)|0);
      var $flags=(($tag_spec)|0);
      var $9=HEAP32[(($flags)>>2)];
      var $or=$9 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $10=$num;
      var $cmp4=(($10)|0) >= 0;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$num;
      var $12=$gfc;
      var $tag_spec7=(($12+85692)|0);
      var $genre_id3v1=(($tag_spec7+28)|0);
      HEAP32[(($genre_id3v1)>>2)]=$11;
      var $13=$num;
      var $arrayidx=((5345344+($13<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      $genre_addr=$14;
      label = 9; break;
    case 8: 
      var $15=$gfc;
      var $tag_spec8=(($15+85692)|0);
      var $genre_id3v19=(($tag_spec8+28)|0);
      HEAP32[(($genre_id3v19)>>2)]=12;
      var $16=$gfc;
      var $tag_spec10=(($16+85692)|0);
      var $flags11=(($tag_spec10)|0);
      var $17=HEAP32[(($flags11)>>2)];
      var $or12=$17 | 2;
      HEAP32[(($flags11)>>2)]=$or12;
      label = 9; break;
    case 9: 
      var $18=$gfp_addr;
      var $19=$genre_addr;
      _copyV1ToV2($18, 1413697358, $19);
      label = 10; break;
    case 10: 
      var $20=$ret;
      $retval=$20;
      label = 11; break;
    case 11: 
      var $21=$retval;

      return $21;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_genre["X"]=1;

function _id3v2_add_latin1($gfp, $frame_id, $lang, $desc, $text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $frame_id_addr;
      var $lang_addr;
      var $desc_addr;
      var $text_addr;
      var $gfc;
      var $node;
      $gfp_addr=$gfp;
      $frame_id_addr=$frame_id;
      $lang_addr=$lang;
      $desc_addr=$desc;
      $text_addr=$text;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $4=$gfc;
      var $tag_spec=(($4+85692)|0);
      var $5=$frame_id_addr;
      var $call=_findNode($tag_spec, $5, 0);
      $node=$call;
      var $6=$frame_id_addr;
      var $call2=_isMultiFrame($6);
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 15; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $7=$node;
      var $tobool4=(($7)|0)!=0;
      if ($tobool4) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $8=$node;
      var $lng=(($8+8)|0);
      var $arraydecay=(($lng)|0);
      var $9=$lang_addr;
      var $call5=_isSameLang($arraydecay, $9);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $10=$node;
      var $11=$desc_addr;
      var $call8=_isSameDescriptor($10, $11);
      var $tobool9=(($call8)|0)!=0;
      if ($tobool9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $12=$gfc;
      var $tag_spec12=(($12+85692)|0);
      var $13=$frame_id_addr;
      var $14=$node;
      var $call13=_findNode($tag_spec12, $13, $14);
      $node=$call13;
      label = 8; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $15=$node;
      var $cmp15=(($15)|0)==0;
      if ($cmp15) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $call17=_calloc(1, 36);
      var $16=$call17;
      $node=$16;
      var $17=$node;
      var $cmp18=(($17)|0)==0;
      if ($cmp18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=-254;
      label = 21; break;
    case 18: 
      var $18=$gfc;
      var $tag_spec21=(($18+85692)|0);
      var $19=$node;
      _appendNode($tag_spec21, $19);
      label = 19; break;
    case 19: 
      var $20=$frame_id_addr;
      var $21=$node;
      var $fid=(($21+4)|0);
      HEAP32[(($fid)>>2)]=$20;
      var $22=$node;
      var $lng23=(($22+8)|0);
      var $arraydecay24=(($lng23)|0);
      var $23=$lang_addr;
      _setLang($arraydecay24, $23);
      var $24=$node;
      var $dsc=(($24+12)|0);
      var $ptr=(($dsc)|0);
      var $l=$ptr;
      var $25=$desc_addr;
      var $call25=_local_strdup($l, $25);
      var $26=$node;
      var $dsc26=(($26+12)|0);
      var $dim=(($dsc26+4)|0);
      HEAP32[(($dim)>>2)]=$call25;
      var $27=$node;
      var $dsc27=(($27+12)|0);
      var $enc=(($dsc27+8)|0);
      HEAP32[(($enc)>>2)]=0;
      var $28=$node;
      var $txt=(($28+24)|0);
      var $ptr28=(($txt)|0);
      var $l29=$ptr28;
      var $29=$text_addr;
      var $call30=_local_strdup($l29, $29);
      var $30=$node;
      var $txt31=(($30+24)|0);
      var $dim32=(($txt31+4)|0);
      HEAP32[(($dim32)>>2)]=$call30;
      var $31=$node;
      var $txt33=(($31+24)|0);
      var $enc34=(($txt33+8)|0);
      HEAP32[(($enc34)>>2)]=0;
      var $32=$gfc;
      var $tag_spec35=(($32+85692)|0);
      var $flags=(($tag_spec35)|0);
      var $33=HEAP32[(($flags)>>2)];
      var $or=$33 | 3;
      HEAP32[(($flags)>>2)]=$or;
      $retval=0;
      label = 21; break;
    case 20: 
      $retval=-255;
      label = 21; break;
    case 21: 
      var $34=$retval;

      return $34;
    default: assert(0, "bad label: " + label);
  }

}
_id3v2_add_latin1["X"]=1;

function _id3tag_set_comment_latin1($gfp, $lang, $desc, $text) {
  var label = 0;


  var $gfp_addr;
  var $lang_addr;
  var $desc_addr;
  var $text_addr;
  $gfp_addr=$gfp;
  $lang_addr=$lang;
  $desc_addr=$desc;
  $text_addr=$text;
  var $0=$gfp_addr;
  var $1=$lang_addr;
  var $2=$desc_addr;
  var $3=$text_addr;
  var $call=_id3v2_add_latin1($0, 1129270605, $1, $2, $3);

  return $call;
}


function _id3tag_set_comment_utf16($gfp, $lang, $desc, $text) {
  var label = 0;


  var $gfp_addr;
  var $lang_addr;
  var $desc_addr;
  var $text_addr;
  $gfp_addr=$gfp;
  $lang_addr=$lang;
  $desc_addr=$desc;
  $text_addr=$text;
  var $0=$gfp_addr;
  var $1=$lang_addr;
  var $2=$desc_addr;
  var $3=$text_addr;
  var $call=_id3v2_add_ucs2($0, 1129270605, $1, $2, $3);

  return $call;
}


function _id3tag_set_comment_ucs2($gfp, $lang, $desc, $text) {
  var label = 0;


  var $gfp_addr;
  var $lang_addr;
  var $desc_addr;
  var $text_addr;
  $gfp_addr=$gfp;
  $lang_addr=$lang;
  $desc_addr=$desc;
  $text_addr=$text;
  var $0=$gfp_addr;
  var $1=$lang_addr;
  var $2=$desc_addr;
  var $3=$text_addr;
  var $call=_id3tag_set_comment_utf16($0, $1, $2, $3);

  return $call;
}


function _id3tag_set_title($gfp, $title) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $title_addr;
      var $gfc;
      $gfp_addr=$gfp;
      $title_addr=$title;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $4=$title_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $5=$title_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $7=$gfc;
      var $tag_spec=(($7+85692)|0);
      var $title4=(($tag_spec+8)|0);
      var $8=$title_addr;
      var $call=_local_strdup($title4, $8);
      var $9=$gfc;
      var $tag_spec5=(($9+85692)|0);
      var $flags=(($tag_spec5)|0);
      var $10=HEAP32[(($flags)>>2)];
      var $or=$10 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $11=$gfp_addr;
      var $12=$title_addr;
      _copyV1ToV2($11, 1414091826, $12);
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _local_strdup($dst, $src) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dst_addr;
      var $src_addr;
      var $n;
      $dst_addr=$dst;
      $src_addr=$src;
      var $0=$dst_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $1=$dst_addr;
      var $2=HEAP32[(($1)>>2)];
      _free($2);
      var $3=$dst_addr;
      HEAP32[(($3)>>2)]=0;
      var $4=$src_addr;
      var $cmp1=(($4)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 14; break; }
    case 5: 
      $n=0;
      label = 6; break;
    case 6: 
      var $5=$n;
      var $6=$src_addr;
      var $arrayidx=(($6+$5)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7 << 24) >> 24);
      var $cmp3=(($conv)|0)!=0;
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $8=$n;
      var $inc=((($8)+(1))|0);
      $n=$inc;
      label = 6; break;
    case 9: 
      var $9=$n;
      var $cmp5=(($9)>>>0) > 0;
      if ($cmp5) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $10=$n;
      var $add=((($10)+(1))|0);
      var $call=_calloc($add, 1);
      var $11=$dst_addr;
      HEAP32[(($11)>>2)]=$call;
      var $12=$dst_addr;
      var $13=HEAP32[(($12)>>2)];
      var $cmp8=(($13)|0)!=0;
      if ($cmp8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $14=$dst_addr;
      var $15=HEAP32[(($14)>>2)];
      var $16=$src_addr;
      var $17=$n;
      var $mul=(($17)&-1);
      assert($mul % 1 === 0);_memcpy($15, $16, $mul);
      var $18=$n;
      var $19=$dst_addr;
      var $20=HEAP32[(($19)>>2)];
      var $arrayidx11=(($20+$18)|0);
      HEAP8[($arrayidx11)]=0;
      var $21=$n;
      $retval=$21;
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $22=$retval;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}
_local_strdup["X"]=1;

function _copyV1ToV2($gfp, $frame_id, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $frame_id_addr;
      var $s_addr;
      var $gfc;
      var $flags;
      $gfp_addr=$gfp;
      $frame_id_addr=$frame_id;
      $s_addr=$s;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$gfc;
      var $tag_spec=(($4+85692)|0);
      var $flags2=(($tag_spec)|0);
      var $5=HEAP32[(($flags2)>>2)];
      $flags=$5;
      var $6=$gfp_addr;
      var $7=$frame_id_addr;
      var $8=$s_addr;
      var $call=_id3v2_add_latin1($6, $7, ((5386088)|0), 0, $8);
      var $9=$flags;
      var $10=$gfc;
      var $tag_spec3=(($10+85692)|0);
      var $flags4=(($tag_spec3)|0);
      HEAP32[(($flags4)>>2)]=$9;
      label = 7; break;
    case 7: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_set_artist($gfp, $artist) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $artist_addr;
      var $gfc;
      $gfp_addr=$gfp;
      $artist_addr=$artist;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $4=$artist_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $5=$artist_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $7=$gfc;
      var $tag_spec=(($7+85692)|0);
      var $artist4=(($tag_spec+12)|0);
      var $8=$artist_addr;
      var $call=_local_strdup($artist4, $8);
      var $9=$gfc;
      var $tag_spec5=(($9+85692)|0);
      var $flags=(($tag_spec5)|0);
      var $10=HEAP32[(($flags)>>2)];
      var $or=$10 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $11=$gfp_addr;
      var $12=$artist_addr;
      _copyV1ToV2($11, 1414546737, $12);
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_set_album($gfp, $album) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $album_addr;
      var $gfc;
      $gfp_addr=$gfp;
      $album_addr=$album;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $4=$album_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $5=$album_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $7=$gfc;
      var $tag_spec=(($7+85692)|0);
      var $album4=(($tag_spec+16)|0);
      var $8=$album_addr;
      var $call=_local_strdup($album4, $8);
      var $9=$gfc;
      var $tag_spec5=(($9+85692)|0);
      var $flags=(($tag_spec5)|0);
      var $10=HEAP32[(($flags)>>2)];
      var $or=$10 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $11=$gfp_addr;
      var $12=$album_addr;
      _copyV1ToV2($11, 1413565506, $12);
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_set_year($gfp, $year) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $year_addr;
      var $gfc;
      var $num;
      $gfp_addr=$gfp;
      $year_addr=$year;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $4=$year_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $5=$year_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $7=$year_addr;
      var $call=_atoi($7);
      $num=$call;
      var $8=$num;
      var $cmp4=(($8)|0) < 0;
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $num=0;
      label = 10; break;
    case 10: 
      var $9=$num;
      var $cmp7=(($9)|0) > 9999;
      if ($cmp7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $num=9999;
      label = 12; break;
    case 12: 
      var $10=$num;
      var $tobool11=(($10)|0)!=0;
      if ($tobool11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $11=$num;
      var $12=$gfc;
      var $tag_spec=(($12+85692)|0);
      var $year13=(($tag_spec+4)|0);
      HEAP32[(($year13)>>2)]=$11;
      var $13=$gfc;
      var $tag_spec14=(($13+85692)|0);
      var $flags=(($tag_spec14)|0);
      var $14=HEAP32[(($flags)>>2)];
      var $or=$14 | 1;
      HEAP32[(($flags)>>2)]=$or;
      label = 14; break;
    case 14: 
      var $15=$gfp_addr;
      var $16=$year_addr;
      _copyV1ToV2($15, 1415136594, $16);
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_year["X"]=1;

function _id3tag_set_comment($gfp, $comment) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $comment_addr;
      var $gfc;
      var $flags6;
      $gfp_addr=$gfp;
      $comment_addr=$comment;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $4=$comment_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $5=$comment_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $7=$gfc;
      var $tag_spec=(($7+85692)|0);
      var $comment4=(($tag_spec+20)|0);
      var $8=$comment_addr;
      var $call=_local_strdup($comment4, $8);
      var $9=$gfc;
      var $tag_spec5=(($9+85692)|0);
      var $flags=(($tag_spec5)|0);
      var $10=HEAP32[(($flags)>>2)];
      var $or=$10 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $11=$gfc;
      var $tag_spec7=(($11+85692)|0);
      var $flags8=(($tag_spec7)|0);
      var $12=HEAP32[(($flags8)>>2)];
      $flags6=$12;
      var $13=$gfp_addr;
      var $14=$comment_addr;
      var $call9=_id3v2_add_latin1($13, 1129270605, ((5386088)|0), ((5385376)|0), $14);
      var $15=$flags6;
      var $16=$gfc;
      var $tag_spec10=(($16+85692)|0);
      var $flags11=(($tag_spec10)|0);
      HEAP32[(($flags11)>>2)]=$15;
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_comment["X"]=1;

function _id3tag_set_track($gfp, $track) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $track_addr;
      var $trackcount;
      var $gfc;
      var $ret;
      var $num;
      $gfp_addr=$gfp;
      $track_addr=$track;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      $ret=0;
      var $3=$gfc;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $4=$track_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { label = 7; break; } else { label = 17; break; }
    case 7: 
      var $5=$track_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $tobool3=(($conv)|0)!=0;
      if ($tobool3) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $7=$track_addr;
      var $call=_atoi($7);
      $num=$call;
      var $8=$num;
      var $cmp4=(($8)|0) < 1;
      if ($cmp4) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $9=$num;
      var $cmp6=(($9)|0) > 255;
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $num=0;
      $ret=-1;
      var $10=$gfc;
      var $tag_spec=(($10+85692)|0);
      var $flags=(($tag_spec)|0);
      var $11=HEAP32[(($flags)>>2)];
      var $or=$11 | 3;
      HEAP32[(($flags)>>2)]=$or;
      label = 11; break;
    case 11: 
      var $12=$num;
      var $tobool9=(($12)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $13=$num;
      var $14=$gfc;
      var $tag_spec11=(($14+85692)|0);
      var $track_id3v1=(($tag_spec11+24)|0);
      HEAP32[(($track_id3v1)>>2)]=$13;
      var $15=$gfc;
      var $tag_spec12=(($15+85692)|0);
      var $flags13=(($tag_spec12)|0);
      var $16=HEAP32[(($flags13)>>2)];
      var $or14=$16 | 1;
      HEAP32[(($flags13)>>2)]=$or14;
      label = 13; break;
    case 13: 
      var $17=$track_addr;
      var $call16=_strchr($17, 47);
      $trackcount=$call16;
      var $18=$trackcount;
      var $tobool17=(($18)|0)!=0;
      if ($tobool17) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $19=$trackcount;
      var $20=HEAP8[($19)];
      var $conv19=(($20 << 24) >> 24);
      var $tobool20=(($conv19)|0)!=0;
      if ($tobool20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $21=$gfc;
      var $tag_spec22=(($21+85692)|0);
      var $flags23=(($tag_spec22)|0);
      var $22=HEAP32[(($flags23)>>2)];
      var $or24=$22 | 3;
      HEAP32[(($flags23)>>2)]=$or24;
      label = 16; break;
    case 16: 
      var $23=$gfp_addr;
      var $24=$track_addr;
      _copyV1ToV2($23, 1414677323, $24);
      label = 17; break;
    case 17: 
      var $25=$ret;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_track["X"]=1;

function _lookupGenre($genre) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $genre_addr;
      var $str=__stackBase__;
      var $num;
      $genre_addr=$genre;
      var $0=$genre_addr;
      var $call=_strtol($0, $str, 10);
      $num=$call;
      var $1=HEAP32[(($str)>>2)];
      var $2=HEAP8[($1)];
      var $tobool=(($2 << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $3=$genre_addr;
      var $call1=_searchGenre($3);
      $num=$call1;
      var $4=$num;
      var $cmp=(($4)|0)==148;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$genre_addr;
      var $call3=_sloppySearchGenre($5);
      $num=$call3;
      label = 5; break;
    case 5: 
      var $6=$num;
      var $cmp4=(($6)|0)==148;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=-2;
      label = 13; break;
    case 7: 
      label = 12; break;
    case 8: 
      var $7=$num;
      var $cmp7=(($7)|0) < 0;
      if ($cmp7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $8=$num;
      var $cmp8=(($8)|0) >= 148;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=-1;
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $9=$num;
      $retval=$9;
      label = 13; break;
    case 13: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_set_fieldvalue($gfp, $fieldvalue) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $fieldvalue_addr;
      $gfp_addr=$gfp;
      $fieldvalue_addr=$fieldvalue;
      var $0=$fieldvalue_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$fieldvalue_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $tobool1=(($conv)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$fieldvalue_addr;
      var $call=_strlen($3);
      var $cmp=(($call)>>>0) < 5;
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$fieldvalue_addr;
      var $arrayidx=(($4+4)|0);
      var $5=HEAP8[($arrayidx)];
      var $conv3=(($5 << 24) >> 24);
      var $cmp4=(($conv3)|0)!=61;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=-1;
      label = 9; break;
    case 7: 
      var $6=$gfp_addr;
      var $7=$fieldvalue_addr;
      var $8=$fieldvalue_addr;
      var $arrayidx7=(($8+5)|0);
      var $call8=_id3tag_set_textinfo_latin1($6, $7, $arrayidx7);
      $retval=$call8;
      label = 9; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $9=$retval;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _local_ucs2_strlen($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $n;
      $s_addr=$s;
      $n=0;
      var $0=$s_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $1=$s_addr;
      var $incdec_ptr=(($1+2)|0);
      $s_addr=$incdec_ptr;
      var $2=HEAP16[(($1)>>1)];
      var $tobool=(($2 << 16) >> 16)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$n;
      var $inc=((($3)+(1))|0);
      $n=$inc;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $4=$n;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _id3tag_set_fieldvalue_utf16($gfp, $fieldvalue) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $fieldvalue_addr;
      var $dx;
      var $separator;
      var $fid=__stackBase__;
      var $frame_id;
      var $txt=(__stackBase__)+(8);
      var $rc;
      $gfp_addr=$gfp;
      $fieldvalue_addr=$fieldvalue;
      var $0=$fieldvalue_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=$fieldvalue_addr;
      var $2=HEAP16[(($1)>>1)];
      var $conv=(($2)&65535);
      var $tobool1=(($conv)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $3=$fieldvalue_addr;
      var $arrayidx=(($3)|0);
      var $4=HEAP16[(($arrayidx)>>1)];
      var $call=_hasUcs2ByteOrderMarker($4);
      $dx=$call;
      var $5=$fieldvalue_addr;
      var $call2=_fromLatin1Char($5, 61);
      $separator=$call2;
      var $6=$fid;
      HEAP8[($6)]=0; HEAP8[(($6)+(1))]=0; HEAP8[(($6)+(2))]=0; HEAP8[(($6)+(3))]=0; HEAP8[(($6)+(4))]=0;
      var $7=$fieldvalue_addr;
      var $call3=_toID3v2TagId_ucs2($7);
      $frame_id=$call3;
      var $8=$fieldvalue_addr;
      var $call4=_local_ucs2_strlen($8);
      var $9=$dx;
      var $add=((($9)+(5))|0);
      var $cmp=(($call4)>>>0) < (($add)>>>0);
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $10=$dx;
      var $add6=((($10)+(4))|0);
      var $11=$fieldvalue_addr;
      var $arrayidx7=(($11+($add6<<1))|0);
      var $12=HEAP16[(($arrayidx7)>>1)];
      var $conv8=(($12)&65535);
      var $13=$separator;
      var $conv9=(($13)&65535);
      var $cmp10=(($conv8)|0)!=(($conv9)|0);
      if ($cmp10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=-1;
      label = 11; break;
    case 7: 
      var $14=$frame_id;
      var $shr=$14 >>> 24;
      var $and=$shr & 255;
      var $conv13=(($and) & 255);
      var $arrayidx14=(($fid)|0);
      HEAP8[($arrayidx14)]=$conv13;
      var $15=$frame_id;
      var $shr15=$15 >>> 16;
      var $and16=$shr15 & 255;
      var $conv17=(($and16) & 255);
      var $arrayidx18=(($fid+1)|0);
      HEAP8[($arrayidx18)]=$conv17;
      var $16=$frame_id;
      var $shr19=$16 >>> 8;
      var $and20=$shr19 & 255;
      var $conv21=(($and20) & 255);
      var $arrayidx22=(($fid+2)|0);
      HEAP8[($arrayidx22)]=$conv21;
      var $17=$frame_id;
      var $and23=$17 & 255;
      var $conv24=(($and23) & 255);
      var $arrayidx25=(($fid+3)|0);
      HEAP8[($arrayidx25)]=$conv24;
      var $18=$frame_id;
      var $cmp26=(($18)|0)!=0;
      if ($cmp26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      HEAP32[(($txt)>>2)]=0;
      var $19=$fieldvalue_addr;
      var $20=$dx;
      var $add29=((($20)+(5))|0);
      var $21=$fieldvalue_addr;
      var $call30=_local_ucs2_strlen($21);
      var $call31=_local_ucs2_substr($txt, $19, $add29, $call30);
      var $22=$gfp_addr;
      var $arraydecay=(($fid)|0);
      var $23=HEAP32[(($txt)>>2)];
      var $call32=_id3tag_set_textinfo_utf16($22, $arraydecay, $23);
      $rc=$call32;
      var $24=HEAP32[(($txt)>>2)];
      var $25=$24;
      _free($25);
      var $26=$rc;
      $retval=$26;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      $retval=-1;
      label = 11; break;
    case 11: 
      var $27=$retval;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_set_fieldvalue_utf16["X"]=1;

function _fromLatin1Char($s, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $c_addr;
      $s_addr=$s;
      $c_addr=$c;
      var $0=$s_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAP16[(($arrayidx)>>1)];
      var $conv=(($1)&65535);
      var $cmp=(($conv)|0)==65534;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$c_addr;
      var $call=_swap_bytes($2);
      $retval=$call;
      label = 5; break;
    case 4: 
      var $3=$c_addr;
      $retval=$3;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _toID3v2TagId_ucs2($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $i;
      var $x;
      var $bom;
      var $c;
      $s_addr=$s;
      $x=0;
      $bom=0;
      var $0=$s_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 19; break;
    case 4: 
      var $1=$s_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAP16[(($arrayidx)>>1)];
      $bom=$2;
      var $3=$bom;
      var $call=_hasUcs2ByteOrderMarker($3);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$s_addr;
      var $incdec_ptr=(($4+2)|0);
      $s_addr=$incdec_ptr;
      label = 6; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $5=$i;
      var $cmp3=(($5)>>>0) < 4;
      if ($cmp3) { label = 8; break; } else { var $9 = 0;label = 9; break; }
    case 8: 
      var $6=$i;
      var $7=$s_addr;
      var $arrayidx4=(($7+($6<<1))|0);
      var $8=HEAP16[(($arrayidx4)>>1)];
      var $conv=(($8)&65535);
      var $cmp5=(($conv)|0)!=0;
      var $9 = $cmp5;label = 9; break;
    case 9: 
      var $9;
      if ($9) { label = 10; break; } else { label = 18; break; }
    case 10: 
      var $10=$bom;
      var $11=$i;
      var $12=$s_addr;
      var $arrayidx7=(($12+($11<<1))|0);
      var $13=HEAP16[(($arrayidx7)>>1)];
      var $call8=_toLittleEndian($10, $13);
      $c=$call8;
      var $14=$c;
      var $conv9=(($14)&65535);
      var $cmp10=(($conv9)|0) < 65;
      if ($cmp10) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $15=$c;
      var $conv12=(($15)&65535);
      var $cmp13=90 < (($conv12)|0);
      if ($cmp13) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $16=$c;
      var $conv16=(($16)&65535);
      var $cmp17=(($conv16)|0) < 48;
      if ($cmp17) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $17=$c;
      var $conv20=(($17)&65535);
      var $cmp21=57 < (($conv20)|0);
      if ($cmp21) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $retval=0;
      label = 19; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $18=$x;
      var $shl=$18 << 8;
      $x=$shl;
      var $19=$c;
      var $conv26=(($19)&65535);
      var $20=$x;
      var $or=$20 | $conv26;
      $x=$or;
      label = 17; break;
    case 17: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 18: 
      var $22=$x;
      $retval=$22;
      label = 19; break;
    case 19: 
      var $23=$retval;

      return $23;
    default: assert(0, "bad label: " + label);
  }

}
_toID3v2TagId_ucs2["X"]=1;

function _local_ucs2_substr($dst, $src, $start, $end) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dst_addr;
      var $src_addr;
      var $start_addr;
      var $end_addr;
      var $len;
      var $n;
      var $ptr;
      $dst_addr=$dst;
      $src_addr=$src;
      $start_addr=$start;
      $end_addr=$end;
      var $0=$start_addr;
      var $1=$end_addr;
      var $cmp=(($0)>>>0) < (($1)>>>0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$end_addr;
      var $3=$start_addr;
      var $sub=((($2)-($3))|0);
      var $cond = $sub;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      var $add=((($cond)+(2))|0);
      $len=$add;
      $n=0;
      var $4=$len;
      var $call=_calloc($4, 2);
      var $5=$call;
      $ptr=$5;
      var $6=$ptr;
      var $7=$dst_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$ptr;
      var $cmp1=(($8)|0)==0;
      if ($cmp1) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $9=$src_addr;
      var $cmp2=(($9)|0)==0;
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 16; break;
    case 8: 
      var $10=$src_addr;
      var $arrayidx=(($10)|0);
      var $11=HEAP16[(($arrayidx)>>1)];
      var $call3=_hasUcs2ByteOrderMarker($11);
      var $tobool=(($call3)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $12=$src_addr;
      var $arrayidx5=(($12)|0);
      var $13=HEAP16[(($arrayidx5)>>1)];
      var $14=$n;
      var $inc=((($14)+(1))|0);
      $n=$inc;
      var $15=$ptr;
      var $arrayidx6=(($15+($14<<1))|0);
      HEAP16[(($arrayidx6)>>1)]=$13;
      var $16=$start_addr;
      var $cmp7=(($16)|0)==0;
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $17=$start_addr;
      var $inc9=((($17)+(1))|0);
      $start_addr=$inc9;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $18=$start_addr;
      var $19=$end_addr;
      var $cmp12=(($18)>>>0) < (($19)>>>0);
      if ($cmp12) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $20=$start_addr;
      var $inc13=((($20)+(1))|0);
      $start_addr=$inc13;
      var $21=$src_addr;
      var $arrayidx14=(($21+($20<<1))|0);
      var $22=HEAP16[(($arrayidx14)>>1)];
      var $23=$n;
      var $inc15=((($23)+(1))|0);
      $n=$inc15;
      var $24=$ptr;
      var $arrayidx16=(($24+($23<<1))|0);
      HEAP16[(($arrayidx16)>>1)]=$22;
      label = 13; break;
    case 15: 
      var $25=$n;
      var $26=$ptr;
      var $arrayidx17=(($26+($25<<1))|0);
      HEAP16[(($arrayidx17)>>1)]=0;
      var $27=$n;
      $retval=$27;
      label = 16; break;
    case 16: 
      var $28=$retval;

      return $28;
    default: assert(0, "bad label: " + label);
  }

}
_local_ucs2_substr["X"]=1;

function _id3tag_set_fieldvalue_ucs2($gfp, $fieldvalue) {
  var label = 0;


  var $gfp_addr;
  var $fieldvalue_addr;
  $gfp_addr=$gfp;
  $fieldvalue_addr=$fieldvalue;
  var $0=$gfp_addr;
  var $1=$fieldvalue_addr;
  var $call=_id3tag_set_fieldvalue_utf16($0, $1);

  return $call;
}


function _test_tag_spec_flags($gfc, $tst) {
  var label = 0;


  var $gfc_addr;
  var $tst_addr;
  $gfc_addr=$gfc;
  $tst_addr=$tst;
  var $0=$gfc_addr;
  var $tag_spec=(($0+85692)|0);
  var $flags=(($tag_spec)|0);
  var $1=HEAP32[(($flags)>>2)];
  var $2=$tst_addr;
  var $and=$1 & $2;
  var $cmp=(($and)|0)!=0;
  var $cond=$cmp ? 1 : 0;

  return $cond;
}


function _sizeOfCommentNode($node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $node_addr;
      var $n;
      $node_addr=$node;
      $n=0;
      var $0=$node_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      $n=10;
      var $1=$n;
      var $add=((($1)+(1))|0);
      $n=$add;
      var $2=$n;
      var $add1=((($2)+(3))|0);
      $n=$add1;
      var $3=$node_addr;
      var $dsc=(($3+12)|0);
      var $enc=(($dsc+8)|0);
      var $4=HEAP32[(($enc)>>2)];
      if ((($4)|0)==0) {
        label = 5; break;
      }
      else if ((($4)|0)==1) {
        label = 6; break;
      }
      else {
      label = 4; break;
      }
      
    case 4: 
      label = 5; break;
    case 5: 
      var $5=$node_addr;
      var $dsc2=(($5+12)|0);
      var $dim=(($dsc2+4)|0);
      var $6=HEAP32[(($dim)>>2)];
      var $add3=((($6)+(1))|0);
      var $7=$n;
      var $add4=((($7)+($add3))|0);
      $n=$add4;
      label = 7; break;
    case 6: 
      var $8=$node_addr;
      var $dsc6=(($8+12)|0);
      var $dim7=(($dsc6+4)|0);
      var $9=HEAP32[(($dim7)>>2)];
      var $mul=((($9<<1))&-1);
      var $add8=((($mul)+(2))|0);
      var $10=$n;
      var $add9=((($10)+($add8))|0);
      $n=$add9;
      label = 7; break;
    case 7: 
      var $11=$node_addr;
      var $txt=(($11+24)|0);
      var $enc10=(($txt+8)|0);
      var $12=HEAP32[(($enc10)>>2)];
      if ((($12)|0)==0) {
        label = 9; break;
      }
      else if ((($12)|0)==1) {
        label = 10; break;
      }
      else {
      label = 8; break;
      }
      
    case 8: 
      label = 9; break;
    case 9: 
      var $13=$node_addr;
      var $txt13=(($13+24)|0);
      var $dim14=(($txt13+4)|0);
      var $14=HEAP32[(($dim14)>>2)];
      var $15=$n;
      var $add15=((($15)+($14))|0);
      $n=$add15;
      label = 11; break;
    case 10: 
      var $16=$node_addr;
      var $txt17=(($16+24)|0);
      var $dim18=(($txt17+4)|0);
      var $17=HEAP32[(($dim18)>>2)];
      var $mul19=((($17<<1))&-1);
      var $18=$n;
      var $add20=((($18)+($mul19))|0);
      $n=$add20;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $19=$n;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_sizeOfCommentNode["X"]=1;

function _sizeOfWxxxNode($node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $node_addr;
      var $n;
      $node_addr=$node;
      $n=0;
      var $0=$node_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 16; break; }
    case 3: 
      $n=10;
      var $1=$node_addr;
      var $dsc=(($1+12)|0);
      var $dim=(($dsc+4)|0);
      var $2=HEAP32[(($dim)>>2)];
      var $cmp=(($2)>>>0) > 0;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $3=$n;
      var $add=((($3)+(1))|0);
      $n=$add;
      var $4=$node_addr;
      var $dsc2=(($4+12)|0);
      var $enc=(($dsc2+8)|0);
      var $5=HEAP32[(($enc)>>2)];
      if ((($5)|0)==0) {
        label = 6; break;
      }
      else if ((($5)|0)==1) {
        label = 7; break;
      }
      else {
      label = 5; break;
      }
      
    case 5: 
      label = 6; break;
    case 6: 
      var $6=$node_addr;
      var $dsc3=(($6+12)|0);
      var $dim4=(($dsc3+4)|0);
      var $7=HEAP32[(($dim4)>>2)];
      var $add5=((($7)+(1))|0);
      var $8=$n;
      var $add6=((($8)+($add5))|0);
      $n=$add6;
      label = 8; break;
    case 7: 
      var $9=$node_addr;
      var $dsc8=(($9+12)|0);
      var $dim9=(($dsc8+4)|0);
      var $10=HEAP32[(($dim9)>>2)];
      var $mul=((($10<<1))&-1);
      var $add10=((($mul)+(2))|0);
      var $11=$n;
      var $add11=((($11)+($add10))|0);
      $n=$add11;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $12=$node_addr;
      var $txt=(($12+24)|0);
      var $dim12=(($txt+4)|0);
      var $13=HEAP32[(($dim12)>>2)];
      var $cmp13=(($13)>>>0) > 0;
      if ($cmp13) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $14=$node_addr;
      var $txt15=(($14+24)|0);
      var $enc16=(($txt15+8)|0);
      var $15=HEAP32[(($enc16)>>2)];
      if ((($15)|0)==0) {
        label = 12; break;
      }
      else if ((($15)|0)==1) {
        label = 13; break;
      }
      else {
      label = 11; break;
      }
      
    case 11: 
      label = 12; break;
    case 12: 
      var $16=$node_addr;
      var $txt19=(($16+24)|0);
      var $dim20=(($txt19+4)|0);
      var $17=HEAP32[(($dim20)>>2)];
      var $18=$n;
      var $add21=((($18)+($17))|0);
      $n=$add21;
      label = 14; break;
    case 13: 
      var $19=$node_addr;
      var $txt23=(($19+24)|0);
      var $dim24=(($txt23+4)|0);
      var $20=HEAP32[(($dim24)>>2)];
      var $sub=((($20)-(1))|0);
      var $21=$n;
      var $add25=((($21)+($sub))|0);
      $n=$add25;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $22=$n;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}
_sizeOfWxxxNode["X"]=1;

function _sizeOfNode($node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $node_addr;
      var $n;
      $node_addr=$node;
      $n=0;
      var $0=$node_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      $n=10;
      var $1=$n;
      var $add=((($1)+(1))|0);
      $n=$add;
      var $2=$node_addr;
      var $txt=(($2+24)|0);
      var $enc=(($txt+8)|0);
      var $3=HEAP32[(($enc)>>2)];
      if ((($3)|0)==0) {
        label = 5; break;
      }
      else if ((($3)|0)==1) {
        label = 8; break;
      }
      else {
      label = 4; break;
      }
      
    case 4: 
      label = 5; break;
    case 5: 
      var $4=$node_addr;
      var $dsc=(($4+12)|0);
      var $dim=(($dsc+4)|0);
      var $5=HEAP32[(($dim)>>2)];
      var $cmp=(($5)>>>0) > 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $6=$node_addr;
      var $dsc2=(($6+12)|0);
      var $dim3=(($dsc2+4)|0);
      var $7=HEAP32[(($dim3)>>2)];
      var $add4=((($7)+(1))|0);
      var $8=$n;
      var $add5=((($8)+($add4))|0);
      $n=$add5;
      label = 7; break;
    case 7: 
      var $9=$node_addr;
      var $txt6=(($9+24)|0);
      var $dim7=(($txt6+4)|0);
      var $10=HEAP32[(($dim7)>>2)];
      var $11=$n;
      var $add8=((($11)+($10))|0);
      $n=$add8;
      label = 11; break;
    case 8: 
      var $12=$node_addr;
      var $dsc10=(($12+12)|0);
      var $dim11=(($dsc10+4)|0);
      var $13=HEAP32[(($dim11)>>2)];
      var $cmp12=(($13)>>>0) > 0;
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$node_addr;
      var $dsc14=(($14+12)|0);
      var $dim15=(($dsc14+4)|0);
      var $15=HEAP32[(($dim15)>>2)];
      var $add16=((($15)+(1))|0);
      var $mul=((($add16<<1))&-1);
      var $16=$n;
      var $add17=((($16)+($mul))|0);
      $n=$add17;
      label = 10; break;
    case 10: 
      var $17=$node_addr;
      var $txt19=(($17+24)|0);
      var $dim20=(($txt19+4)|0);
      var $18=HEAP32[(($dim20)>>2)];
      var $mul21=((($18<<1))&-1);
      var $19=$n;
      var $add22=((($19)+($mul21))|0);
      $n=$add22;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $20=$n;

      return $20;
    default: assert(0, "bad label: " + label);
  }

}
_sizeOfNode["X"]=1;

function _lame_get_id3v2_tag($gfp, $buffer, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $buffer_addr;
      var $size_addr;
      var $gfc;
      var $usev2;
      var $title_length;
      var $artist_length;
      var $album_length;
      var $comment_length;
      var $tag_size;
      var $p;
      var $adjusted_tag_size;
      var $albumart_mime;
      var $tag;
      var $node;
      var $tag134;
      var $node140;
      $gfp_addr=$gfp;
      $buffer_addr=$buffer;
      $size_addr=$size;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 75; break;
    case 4: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $cmp1=(($3)|0)==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 75; break;
    case 6: 
      var $4=$gfc;
      var $call=_test_tag_spec_flags($4, 4);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 75; break;
    case 8: 
      var $5=$gfc;
      var $call6=_test_tag_spec_flags($5, 10);
      $usev2=$call6;
      var $6=$gfc;
      var $tag_spec=(($6+85692)|0);
      var $title=(($tag_spec+8)|0);
      var $7=HEAP32[(($title)>>2)];
      var $tobool7=(($7)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $8=$gfc;
      var $tag_spec8=(($8+85692)|0);
      var $title9=(($tag_spec8+8)|0);
      var $9=HEAP32[(($title9)>>2)];
      var $call10=_strlen($9);
      var $cond = $call10;label = 11; break;
    case 10: 
      var $cond = 0;label = 11; break;
    case 11: 
      var $cond;
      $title_length=$cond;
      var $10=$gfc;
      var $tag_spec11=(($10+85692)|0);
      var $artist=(($tag_spec11+12)|0);
      var $11=HEAP32[(($artist)>>2)];
      var $tobool12=(($11)|0)!=0;
      if ($tobool12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $12=$gfc;
      var $tag_spec14=(($12+85692)|0);
      var $artist15=(($tag_spec14+12)|0);
      var $13=HEAP32[(($artist15)>>2)];
      var $call16=_strlen($13);
      var $cond19 = $call16;label = 14; break;
    case 13: 
      var $cond19 = 0;label = 14; break;
    case 14: 
      var $cond19;
      $artist_length=$cond19;
      var $14=$gfc;
      var $tag_spec20=(($14+85692)|0);
      var $album=(($tag_spec20+16)|0);
      var $15=HEAP32[(($album)>>2)];
      var $tobool21=(($15)|0)!=0;
      if ($tobool21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $16=$gfc;
      var $tag_spec23=(($16+85692)|0);
      var $album24=(($tag_spec23+16)|0);
      var $17=HEAP32[(($album24)>>2)];
      var $call25=_strlen($17);
      var $cond28 = $call25;label = 17; break;
    case 16: 
      var $cond28 = 0;label = 17; break;
    case 17: 
      var $cond28;
      $album_length=$cond28;
      var $18=$gfc;
      var $tag_spec29=(($18+85692)|0);
      var $comment=(($tag_spec29+20)|0);
      var $19=HEAP32[(($comment)>>2)];
      var $tobool30=(($19)|0)!=0;
      if ($tobool30) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $20=$gfc;
      var $tag_spec32=(($20+85692)|0);
      var $comment33=(($tag_spec32+20)|0);
      var $21=HEAP32[(($comment33)>>2)];
      var $call34=_strlen($21);
      var $cond37 = $call34;label = 20; break;
    case 19: 
      var $cond37 = 0;label = 20; break;
    case 20: 
      var $cond37;
      $comment_length=$cond37;
      var $22=$title_length;
      var $cmp38=(($22)>>>0) > 30;
      if ($cmp38) { label = 26; break; } else { label = 21; break; }
    case 21: 
      var $23=$artist_length;
      var $cmp39=(($23)>>>0) > 30;
      if ($cmp39) { label = 26; break; } else { label = 22; break; }
    case 22: 
      var $24=$album_length;
      var $cmp41=(($24)>>>0) > 30;
      if ($cmp41) { label = 26; break; } else { label = 23; break; }
    case 23: 
      var $25=$comment_length;
      var $cmp43=(($25)>>>0) > 30;
      if ($cmp43) { label = 26; break; } else { label = 24; break; }
    case 24: 
      var $26=$gfc;
      var $tag_spec45=(($26+85692)|0);
      var $track_id3v1=(($tag_spec45+24)|0);
      var $27=HEAP32[(($track_id3v1)>>2)];
      var $tobool46=(($27)|0)!=0;
      if ($tobool46) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $28=$comment_length;
      var $cmp47=(($28)>>>0) > 28;
      if ($cmp47) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $usev2=1;
      label = 27; break;
    case 27: 
      var $29=$usev2;
      var $tobool50=(($29)|0)!=0;
      if ($tobool50) { label = 28; break; } else { label = 74; break; }
    case 28: 
      $albumart_mime=0;
      var $30=$gfp_addr;
      var $num_samples=(($30+4)|0);
      var $31=HEAP32[(($num_samples)>>2)];
      var $cmp52=(($31)|0)!=-1;
      if ($cmp52) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $32=$gfp_addr;
      var $33=$gfp_addr;
      var $num_samples54=(($33+4)|0);
      var $34=HEAP32[(($num_samples54)>>2)];
      var $conv=(($34)>>>0);
      _id3v2AddAudioDuration($32, $conv);
      label = 30; break;
    case 30: 
      $tag_size=10;
      var $35=$gfc;
      var $tag_spec56=(($35+85692)|0);
      var $albumart=(($tag_spec56+32)|0);
      var $36=HEAP32[(($albumart)>>2)];
      var $tobool57=(($36)|0)!=0;
      if ($tobool57) { label = 31; break; } else { label = 39; break; }
    case 31: 
      var $37=$gfc;
      var $tag_spec59=(($37+85692)|0);
      var $albumart_size=(($tag_spec59+36)|0);
      var $38=HEAP32[(($albumart_size)>>2)];
      var $tobool60=(($38)|0)!=0;
      if ($tobool60) { label = 32; break; } else { label = 39; break; }
    case 32: 
      var $39=$gfc;
      var $tag_spec62=(($39+85692)|0);
      var $albumart_mimetype=(($tag_spec62+44)|0);
      var $40=HEAP32[(($albumart_mimetype)>>2)];
      if ((($40)|0)==1) {
        label = 33; break;
      }
      else if ((($40)|0)==2) {
        label = 34; break;
      }
      else if ((($40)|0)==3) {
        label = 35; break;
      }
      else {
      label = 36; break;
      }
      
    case 33: 
      var $41=HEAP32[((5318016)>>2)];
      $albumart_mime=$41;
      label = 36; break;
    case 34: 
      var $42=HEAP32[((5318012)>>2)];
      $albumart_mime=$42;
      label = 36; break;
    case 35: 
      var $43=HEAP32[((5318020)>>2)];
      $albumart_mime=$43;
      label = 36; break;
    case 36: 
      var $44=$albumart_mime;
      var $tobool65=(($44)|0)!=0;
      if ($tobool65) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $45=$albumart_mime;
      var $call67=_strlen($45);
      var $add=((($call67)+(14))|0);
      var $46=$gfc;
      var $tag_spec68=(($46+85692)|0);
      var $albumart_size69=(($tag_spec68+36)|0);
      var $47=HEAP32[(($albumart_size69)>>2)];
      var $add70=((($add)+($47))|0);
      var $48=$tag_size;
      var $add71=((($48)+($add70))|0);
      $tag_size=$add71;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $49=$gfc;
      var $tag_spec74=(($49+85692)|0);
      $tag=$tag_spec74;
      var $50=$tag;
      var $v2_head=(($50+48)|0);
      var $51=HEAP32[(($v2_head)>>2)];
      var $cmp75=(($51)|0)!=0;
      if ($cmp75) { label = 40; break; } else { label = 52; break; }
    case 40: 
      var $52=$tag;
      var $v2_head78=(($52+48)|0);
      var $53=HEAP32[(($v2_head78)>>2)];
      $node=$53;
      label = 41; break;
    case 41: 
      var $54=$node;
      var $cmp79=(($54)|0)!=0;
      if ($cmp79) { label = 42; break; } else { label = 51; break; }
    case 42: 
      var $55=$node;
      var $fid=(($55+4)|0);
      var $56=HEAP32[(($fid)>>2)];
      var $cmp81=(($56)|0)==1129270605;
      if ($cmp81) { label = 44; break; } else { label = 43; break; }
    case 43: 
      var $57=$node;
      var $fid84=(($57+4)|0);
      var $58=HEAP32[(($fid84)>>2)];
      var $cmp85=(($58)|0)==1431520594;
      if ($cmp85) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $59=$node;
      var $call88=_sizeOfCommentNode($59);
      var $60=$tag_size;
      var $add89=((($60)+($call88))|0);
      $tag_size=$add89;
      label = 49; break;
    case 45: 
      var $61=$node;
      var $fid90=(($61+4)|0);
      var $62=HEAP32[(($fid90)>>2)];
      var $call91=_isFrameIdMatching($62, 1459617792);
      var $tobool92=(($call91)|0)!=0;
      if ($tobool92) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $63=$node;
      var $call94=_sizeOfWxxxNode($63);
      var $64=$tag_size;
      var $add95=((($64)+($call94))|0);
      $tag_size=$add95;
      label = 48; break;
    case 47: 
      var $65=$node;
      var $call97=_sizeOfNode($65);
      var $66=$tag_size;
      var $add98=((($66)+($call97))|0);
      $tag_size=$add98;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $67=$node;
      var $nxt=(($67)|0);
      var $68=HEAP32[(($nxt)>>2)];
      $node=$68;
      label = 41; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $69=$gfc;
      var $call102=_test_tag_spec_flags($69, 32);
      var $tobool103=(($call102)|0)!=0;
      if ($tobool103) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $70=$gfc;
      var $tag_spec105=(($70+85692)|0);
      var $padding_size=(($tag_spec105+40)|0);
      var $71=HEAP32[(($padding_size)>>2)];
      var $72=$tag_size;
      var $add106=((($72)+($71))|0);
      $tag_size=$add106;
      label = 54; break;
    case 54: 
      var $73=$size_addr;
      var $74=$tag_size;
      var $cmp108=(($73)>>>0) < (($74)>>>0);
      if ($cmp108) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $75=$tag_size;
      $retval=$75;
      label = 75; break;
    case 56: 
      var $76=$buffer_addr;
      var $cmp112=(($76)|0)==0;
      if ($cmp112) { label = 57; break; } else { label = 58; break; }
    case 57: 
      $retval=0;
      label = 75; break;
    case 58: 
      var $77=$buffer_addr;
      $p=$77;
      var $78=$p;
      var $incdec_ptr=(($78+1)|0);
      $p=$incdec_ptr;
      HEAP8[($78)]=73;
      var $79=$p;
      var $incdec_ptr116=(($79+1)|0);
      $p=$incdec_ptr116;
      HEAP8[($79)]=68;
      var $80=$p;
      var $incdec_ptr117=(($80+1)|0);
      $p=$incdec_ptr117;
      HEAP8[($80)]=51;
      var $81=$p;
      var $incdec_ptr118=(($81+1)|0);
      $p=$incdec_ptr118;
      HEAP8[($81)]=3;
      var $82=$p;
      var $incdec_ptr119=(($82+1)|0);
      $p=$incdec_ptr119;
      HEAP8[($82)]=0;
      var $83=$p;
      var $incdec_ptr120=(($83+1)|0);
      $p=$incdec_ptr120;
      HEAP8[($83)]=0;
      var $84=$tag_size;
      var $sub=((($84)-(10))|0);
      $adjusted_tag_size=$sub;
      var $85=$adjusted_tag_size;
      var $shr=$85 >>> 21;
      var $and=$shr & 127;
      var $conv121=(($and) & 255);
      var $86=$p;
      var $incdec_ptr122=(($86+1)|0);
      $p=$incdec_ptr122;
      HEAP8[($86)]=$conv121;
      var $87=$adjusted_tag_size;
      var $shr123=$87 >>> 14;
      var $and124=$shr123 & 127;
      var $conv125=(($and124) & 255);
      var $88=$p;
      var $incdec_ptr126=(($88+1)|0);
      $p=$incdec_ptr126;
      HEAP8[($88)]=$conv125;
      var $89=$adjusted_tag_size;
      var $shr127=$89 >>> 7;
      var $and128=$shr127 & 127;
      var $conv129=(($and128) & 255);
      var $90=$p;
      var $incdec_ptr130=(($90+1)|0);
      $p=$incdec_ptr130;
      HEAP8[($90)]=$conv129;
      var $91=$adjusted_tag_size;
      var $and131=$91 & 127;
      var $conv132=(($and131) & 255);
      var $92=$p;
      var $incdec_ptr133=(($92+1)|0);
      $p=$incdec_ptr133;
      HEAP8[($92)]=$conv132;
      var $93=$gfc;
      var $tag_spec135=(($93+85692)|0);
      $tag134=$tag_spec135;
      var $94=$tag134;
      var $v2_head136=(($94+48)|0);
      var $95=HEAP32[(($v2_head136)>>2)];
      var $cmp137=(($95)|0)!=0;
      if ($cmp137) { label = 59; break; } else { label = 71; break; }
    case 59: 
      var $96=$tag134;
      var $v2_head141=(($96+48)|0);
      var $97=HEAP32[(($v2_head141)>>2)];
      $node140=$97;
      label = 60; break;
    case 60: 
      var $98=$node140;
      var $cmp143=(($98)|0)!=0;
      if ($cmp143) { label = 61; break; } else { label = 70; break; }
    case 61: 
      var $99=$node140;
      var $fid146=(($99+4)|0);
      var $100=HEAP32[(($fid146)>>2)];
      var $cmp147=(($100)|0)==1129270605;
      if ($cmp147) { label = 63; break; } else { label = 62; break; }
    case 62: 
      var $101=$node140;
      var $fid150=(($101+4)|0);
      var $102=HEAP32[(($fid150)>>2)];
      var $cmp151=(($102)|0)==1431520594;
      if ($cmp151) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $103=$p;
      var $104=$node140;
      var $call154=_set_frame_comment($103, $104);
      $p=$call154;
      label = 68; break;
    case 64: 
      var $105=$node140;
      var $fid156=(($105+4)|0);
      var $106=HEAP32[(($fid156)>>2)];
      var $call157=_isFrameIdMatching($106, 1459617792);
      var $tobool158=(($call157)|0)!=0;
      if ($tobool158) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $107=$p;
      var $108=$node140;
      var $call160=_set_frame_wxxx($107, $108);
      $p=$call160;
      label = 67; break;
    case 66: 
      var $109=$p;
      var $110=$node140;
      var $call162=_set_frame_custom2($109, $110);
      $p=$call162;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $111=$node140;
      var $nxt166=(($111)|0);
      var $112=HEAP32[(($nxt166)>>2)];
      $node140=$112;
      label = 60; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $113=$albumart_mime;
      var $tobool169=(($113)|0)!=0;
      if ($tobool169) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $114=$p;
      var $115=$albumart_mime;
      var $116=$gfc;
      var $tag_spec171=(($116+85692)|0);
      var $albumart172=(($tag_spec171+32)|0);
      var $117=HEAP32[(($albumart172)>>2)];
      var $118=$gfc;
      var $tag_spec173=(($118+85692)|0);
      var $albumart_size174=(($tag_spec173+36)|0);
      var $119=HEAP32[(($albumart_size174)>>2)];
      var $call175=_set_frame_apic($114, $115, $117, $119);
      $p=$call175;
      label = 73; break;
    case 73: 
      var $120=$p;
      var $121=$tag_size;
      var $122=$p;
      var $123=$buffer_addr;
      var $sub_ptr_lhs_cast=$122;
      var $sub_ptr_rhs_cast=$123;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub177=((($121)-($sub_ptr_sub))|0);
      _memset($120, 0, $sub177);
      var $124=$tag_size;
      $retval=$124;
      label = 75; break;
    case 74: 
      $retval=0;
      label = 75; break;
    case 75: 
      var $125=$retval;

      return $125;
    default: assert(0, "bad label: " + label);
  }

}
_lame_get_id3v2_tag["X"]=1;

function _id3v2AddAudioDuration($gfp, $ms) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $ms_addr;
      var $gfc;
      var $cfg;
      var $buffer=__stackBase__;
      var $max_ulong;
      var $playlength_ms;
      $gfp_addr=$gfp;
      $ms_addr=$ms;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $gfc=$cond;
      var $3=$gfc;
      var $cfg1=(($3+16)|0);
      $cfg=$cfg1;
      $max_ulong=4294967295;
      var $4=$ms_addr;
      var $mul=($4)*(1000);
      $ms_addr=$mul;
      var $5=$cfg;
      var $samplerate_in=(($5+44)|0);
      var $6=HEAP32[(($samplerate_in)>>2)];
      var $conv=(($6)|0);
      var $7=$ms_addr;
      var $div=($7)/($conv);
      $ms_addr=$div;
      var $8=$ms_addr;
      var $cmp2=$8 > 4294967295;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $playlength_ms=-1;
      label = 11; break;
    case 7: 
      var $9=$ms_addr;
      var $cmp4=$9 < 0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $playlength_ms=0;
      label = 10; break;
    case 9: 
      var $10=$ms_addr;
      var $conv8=($10>=0 ? Math.floor($10) : Math.ceil($10));
      $playlength_ms=$conv8;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $arraydecay=(($buffer)|0);
      var $11=$playlength_ms;
      var $call=_sprintf($arraydecay, ((5383460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,tempInt));
      var $12=$gfp_addr;
      var $arraydecay10=(($buffer)|0);
      _copyV1ToV2($12, 1414284622, $arraydecay10);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_id3v2AddAudioDuration["X"]=1;

function _set_text_field($field, $text, $size, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $field_addr;
      var $text_addr;
      var $size_addr;
      var $pad_addr;
      $field_addr=$field;
      $text_addr=$text;
      $size_addr=$size;
      $pad_addr=$pad;
      label = 3; break;
    case 3: 
      var $0=$size_addr;
      var $dec=((($0)-(1))|0);
      $size_addr=$dec;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$text_addr;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $2=$text_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $tobool2=(($conv)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$text_addr;
      var $incdec_ptr=(($4+1)|0);
      $text_addr=$incdec_ptr;
      var $5=HEAP8[($4)];
      var $6=$field_addr;
      var $incdec_ptr3=(($6+1)|0);
      $field_addr=$incdec_ptr3;
      HEAP8[($6)]=$5;
      label = 8; break;
    case 7: 
      var $7=$pad_addr;
      var $conv4=(($7) & 255);
      var $8=$field_addr;
      var $incdec_ptr5=(($8+1)|0);
      $field_addr=$incdec_ptr5;
      HEAP8[($8)]=$conv4;
      label = 8; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $9=$field_addr;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _set_frame_comment($frame, $node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $node_addr;
      var $n;
      $frame_addr=$frame;
      $node_addr=$node;
      var $0=$node_addr;
      var $call=_sizeOfCommentNode($0);
      $n=$call;
      var $1=$n;
      var $cmp=(($1)>>>0) > 10;
      if ($cmp) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $2=$frame_addr;
      var $3=$node_addr;
      var $fid=(($3+4)|0);
      var $4=HEAP32[(($fid)>>2)];
      var $call1=_set_4_byte_value($2, $4);
      $frame_addr=$call1;
      var $5=$frame_addr;
      var $6=$n;
      var $sub=((($6)-(10))|0);
      var $call2=_set_4_byte_value($5, $sub);
      $frame_addr=$call2;
      var $7=$frame_addr;
      var $incdec_ptr=(($7+1)|0);
      $frame_addr=$incdec_ptr;
      HEAP8[($7)]=0;
      var $8=$frame_addr;
      var $incdec_ptr3=(($8+1)|0);
      $frame_addr=$incdec_ptr3;
      HEAP8[($8)]=0;
      var $9=$node_addr;
      var $txt=(($9+24)|0);
      var $enc=(($txt+8)|0);
      var $10=HEAP32[(($enc)>>2)];
      var $cmp4=(($10)|0)==1;
      var $cond=$cmp4 ? 1 : 0;
      var $conv=(($cond) & 255);
      var $11=$frame_addr;
      var $incdec_ptr5=(($11+1)|0);
      $frame_addr=$incdec_ptr5;
      HEAP8[($11)]=$conv;
      var $12=$node_addr;
      var $lng=(($12+8)|0);
      var $arrayidx=(($lng)|0);
      var $13=HEAP8[($arrayidx)];
      var $14=$frame_addr;
      var $incdec_ptr6=(($14+1)|0);
      $frame_addr=$incdec_ptr6;
      HEAP8[($14)]=$13;
      var $15=$node_addr;
      var $lng7=(($15+8)|0);
      var $arrayidx8=(($lng7+1)|0);
      var $16=HEAP8[($arrayidx8)];
      var $17=$frame_addr;
      var $incdec_ptr9=(($17+1)|0);
      $frame_addr=$incdec_ptr9;
      HEAP8[($17)]=$16;
      var $18=$node_addr;
      var $lng10=(($18+8)|0);
      var $arrayidx11=(($lng10+2)|0);
      var $19=HEAP8[($arrayidx11)];
      var $20=$frame_addr;
      var $incdec_ptr12=(($20+1)|0);
      $frame_addr=$incdec_ptr12;
      HEAP8[($20)]=$19;
      var $21=$node_addr;
      var $dsc=(($21+12)|0);
      var $enc13=(($dsc+8)|0);
      var $22=HEAP32[(($enc13)>>2)];
      var $cmp14=(($22)|0)!=1;
      if ($cmp14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$frame_addr;
      var $24=$node_addr;
      var $dsc17=(($24+12)|0);
      var $ptr=(($dsc17)|0);
      var $l=$ptr;
      var $25=HEAP32[(($l)>>2)];
      var $26=$node_addr;
      var $dsc18=(($26+12)|0);
      var $dim=(($dsc18+4)|0);
      var $27=HEAP32[(($dim)>>2)];
      var $call19=_writeChars($23, $25, $27);
      $frame_addr=$call19;
      var $28=$frame_addr;
      var $incdec_ptr20=(($28+1)|0);
      $frame_addr=$incdec_ptr20;
      HEAP8[($28)]=0;
      label = 6; break;
    case 5: 
      var $29=$frame_addr;
      var $30=$node_addr;
      var $dsc21=(($30+12)|0);
      var $ptr22=(($dsc21)|0);
      var $u=$ptr22;
      var $31=HEAP32[(($u)>>2)];
      var $32=$node_addr;
      var $dsc23=(($32+12)|0);
      var $dim24=(($dsc23+4)|0);
      var $33=HEAP32[(($dim24)>>2)];
      var $call25=_writeUcs2s($29, $31, $33);
      $frame_addr=$call25;
      var $34=$frame_addr;
      var $incdec_ptr26=(($34+1)|0);
      $frame_addr=$incdec_ptr26;
      HEAP8[($34)]=0;
      var $35=$frame_addr;
      var $incdec_ptr27=(($35+1)|0);
      $frame_addr=$incdec_ptr27;
      HEAP8[($35)]=0;
      label = 6; break;
    case 6: 
      var $36=$node_addr;
      var $txt28=(($36+24)|0);
      var $enc29=(($txt28+8)|0);
      var $37=HEAP32[(($enc29)>>2)];
      var $cmp30=(($37)|0)!=1;
      if ($cmp30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $38=$frame_addr;
      var $39=$node_addr;
      var $txt33=(($39+24)|0);
      var $ptr34=(($txt33)|0);
      var $l35=$ptr34;
      var $40=HEAP32[(($l35)>>2)];
      var $41=$node_addr;
      var $txt36=(($41+24)|0);
      var $dim37=(($txt36+4)|0);
      var $42=HEAP32[(($dim37)>>2)];
      var $call38=_writeChars($38, $40, $42);
      $frame_addr=$call38;
      label = 9; break;
    case 8: 
      var $43=$frame_addr;
      var $44=$node_addr;
      var $txt40=(($44+24)|0);
      var $ptr41=(($txt40)|0);
      var $u42=$ptr41;
      var $45=HEAP32[(($u42)>>2)];
      var $46=$node_addr;
      var $txt43=(($46+24)|0);
      var $dim44=(($txt43+4)|0);
      var $47=HEAP32[(($dim44)>>2)];
      var $call45=_writeUcs2s($43, $45, $47);
      $frame_addr=$call45;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $48=$frame_addr;

      return $48;
    default: assert(0, "bad label: " + label);
  }

}
_set_frame_comment["X"]=1;

function _set_frame_wxxx($frame, $node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $node_addr;
      var $n;
      $frame_addr=$frame;
      $node_addr=$node;
      var $0=$node_addr;
      var $call=_sizeOfWxxxNode($0);
      $n=$call;
      var $1=$n;
      var $cmp=(($1)>>>0) > 10;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $2=$frame_addr;
      var $3=$node_addr;
      var $fid=(($3+4)|0);
      var $4=HEAP32[(($fid)>>2)];
      var $call1=_set_4_byte_value($2, $4);
      $frame_addr=$call1;
      var $5=$frame_addr;
      var $6=$n;
      var $sub=((($6)-(10))|0);
      var $call2=_set_4_byte_value($5, $sub);
      $frame_addr=$call2;
      var $7=$frame_addr;
      var $incdec_ptr=(($7+1)|0);
      $frame_addr=$incdec_ptr;
      HEAP8[($7)]=0;
      var $8=$frame_addr;
      var $incdec_ptr3=(($8+1)|0);
      $frame_addr=$incdec_ptr3;
      HEAP8[($8)]=0;
      var $9=$node_addr;
      var $dsc=(($9+12)|0);
      var $dim=(($dsc+4)|0);
      var $10=HEAP32[(($dim)>>2)];
      var $cmp4=(($10)>>>0) > 0;
      if ($cmp4) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $11=$node_addr;
      var $dsc6=(($11+12)|0);
      var $enc=(($dsc6+8)|0);
      var $12=HEAP32[(($enc)>>2)];
      var $cmp7=(($12)|0)==1;
      var $cond=$cmp7 ? 1 : 0;
      var $conv=(($cond) & 255);
      var $13=$frame_addr;
      var $incdec_ptr8=(($13+1)|0);
      $frame_addr=$incdec_ptr8;
      HEAP8[($13)]=$conv;
      var $14=$node_addr;
      var $dsc9=(($14+12)|0);
      var $enc10=(($dsc9+8)|0);
      var $15=HEAP32[(($enc10)>>2)];
      var $cmp11=(($15)|0)!=1;
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$frame_addr;
      var $17=$node_addr;
      var $dsc14=(($17+12)|0);
      var $ptr=(($dsc14)|0);
      var $l=$ptr;
      var $18=HEAP32[(($l)>>2)];
      var $19=$node_addr;
      var $dsc15=(($19+12)|0);
      var $dim16=(($dsc15+4)|0);
      var $20=HEAP32[(($dim16)>>2)];
      var $call17=_writeChars($16, $18, $20);
      $frame_addr=$call17;
      var $21=$frame_addr;
      var $incdec_ptr18=(($21+1)|0);
      $frame_addr=$incdec_ptr18;
      HEAP8[($21)]=0;
      label = 7; break;
    case 6: 
      var $22=$frame_addr;
      var $23=$node_addr;
      var $dsc19=(($23+12)|0);
      var $ptr20=(($dsc19)|0);
      var $u=$ptr20;
      var $24=HEAP32[(($u)>>2)];
      var $25=$node_addr;
      var $dsc21=(($25+12)|0);
      var $dim22=(($dsc21+4)|0);
      var $26=HEAP32[(($dim22)>>2)];
      var $call23=_writeUcs2s($22, $24, $26);
      $frame_addr=$call23;
      var $27=$frame_addr;
      var $incdec_ptr24=(($27+1)|0);
      $frame_addr=$incdec_ptr24;
      HEAP8[($27)]=0;
      var $28=$frame_addr;
      var $incdec_ptr25=(($28+1)|0);
      $frame_addr=$incdec_ptr25;
      HEAP8[($28)]=0;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$node_addr;
      var $txt=(($29+24)|0);
      var $enc27=(($txt+8)|0);
      var $30=HEAP32[(($enc27)>>2)];
      var $cmp28=(($30)|0)!=1;
      if ($cmp28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$frame_addr;
      var $32=$node_addr;
      var $txt31=(($32+24)|0);
      var $ptr32=(($txt31)|0);
      var $l33=$ptr32;
      var $33=HEAP32[(($l33)>>2)];
      var $34=$node_addr;
      var $txt34=(($34+24)|0);
      var $dim35=(($txt34+4)|0);
      var $35=HEAP32[(($dim35)>>2)];
      var $call36=_writeChars($31, $33, $35);
      $frame_addr=$call36;
      label = 11; break;
    case 10: 
      var $36=$frame_addr;
      var $37=$node_addr;
      var $txt38=(($37+24)|0);
      var $ptr39=(($txt38)|0);
      var $u40=$ptr39;
      var $38=HEAP32[(($u40)>>2)];
      var $39=$node_addr;
      var $txt41=(($39+24)|0);
      var $dim42=(($txt41+4)|0);
      var $40=HEAP32[(($dim42)>>2)];
      var $call43=_writeLoBytes($36, $38, $40);
      $frame_addr=$call43;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $41=$frame_addr;

      return $41;
    default: assert(0, "bad label: " + label);
  }

}
_set_frame_wxxx["X"]=1;

function _set_frame_custom2($frame, $node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $node_addr;
      var $n;
      $frame_addr=$frame;
      $node_addr=$node;
      var $0=$node_addr;
      var $call=_sizeOfNode($0);
      $n=$call;
      var $1=$n;
      var $cmp=(($1)>>>0) > 10;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $2=$frame_addr;
      var $3=$node_addr;
      var $fid=(($3+4)|0);
      var $4=HEAP32[(($fid)>>2)];
      var $call1=_set_4_byte_value($2, $4);
      $frame_addr=$call1;
      var $5=$frame_addr;
      var $6=$n;
      var $sub=((($6)-(10))|0);
      var $call2=_set_4_byte_value($5, $sub);
      $frame_addr=$call2;
      var $7=$frame_addr;
      var $incdec_ptr=(($7+1)|0);
      $frame_addr=$incdec_ptr;
      HEAP8[($7)]=0;
      var $8=$frame_addr;
      var $incdec_ptr3=(($8+1)|0);
      $frame_addr=$incdec_ptr3;
      HEAP8[($8)]=0;
      var $9=$node_addr;
      var $txt=(($9+24)|0);
      var $enc=(($txt+8)|0);
      var $10=HEAP32[(($enc)>>2)];
      var $cmp4=(($10)|0)==1;
      var $cond=$cmp4 ? 1 : 0;
      var $conv=(($cond) & 255);
      var $11=$frame_addr;
      var $incdec_ptr5=(($11+1)|0);
      $frame_addr=$incdec_ptr5;
      HEAP8[($11)]=$conv;
      var $12=$node_addr;
      var $dsc=(($12+12)|0);
      var $dim=(($dsc+4)|0);
      var $13=HEAP32[(($dim)>>2)];
      var $cmp6=(($13)>>>0) > 0;
      if ($cmp6) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $14=$node_addr;
      var $dsc9=(($14+12)|0);
      var $enc10=(($dsc9+8)|0);
      var $15=HEAP32[(($enc10)>>2)];
      var $cmp11=(($15)|0)!=1;
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$frame_addr;
      var $17=$node_addr;
      var $dsc14=(($17+12)|0);
      var $ptr=(($dsc14)|0);
      var $l=$ptr;
      var $18=HEAP32[(($l)>>2)];
      var $19=$node_addr;
      var $dsc15=(($19+12)|0);
      var $dim16=(($dsc15+4)|0);
      var $20=HEAP32[(($dim16)>>2)];
      var $call17=_writeChars($16, $18, $20);
      $frame_addr=$call17;
      var $21=$frame_addr;
      var $incdec_ptr18=(($21+1)|0);
      $frame_addr=$incdec_ptr18;
      HEAP8[($21)]=0;
      label = 7; break;
    case 6: 
      var $22=$frame_addr;
      var $23=$node_addr;
      var $dsc19=(($23+12)|0);
      var $ptr20=(($dsc19)|0);
      var $u=$ptr20;
      var $24=HEAP32[(($u)>>2)];
      var $25=$node_addr;
      var $dsc21=(($25+12)|0);
      var $dim22=(($dsc21+4)|0);
      var $26=HEAP32[(($dim22)>>2)];
      var $call23=_writeUcs2s($22, $24, $26);
      $frame_addr=$call23;
      var $27=$frame_addr;
      var $incdec_ptr24=(($27+1)|0);
      $frame_addr=$incdec_ptr24;
      HEAP8[($27)]=0;
      var $28=$frame_addr;
      var $incdec_ptr25=(($28+1)|0);
      $frame_addr=$incdec_ptr25;
      HEAP8[($28)]=0;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$node_addr;
      var $txt27=(($29+24)|0);
      var $enc28=(($txt27+8)|0);
      var $30=HEAP32[(($enc28)>>2)];
      var $cmp29=(($30)|0)!=1;
      if ($cmp29) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$frame_addr;
      var $32=$node_addr;
      var $txt32=(($32+24)|0);
      var $ptr33=(($txt32)|0);
      var $l34=$ptr33;
      var $33=HEAP32[(($l34)>>2)];
      var $34=$node_addr;
      var $txt35=(($34+24)|0);
      var $dim36=(($txt35+4)|0);
      var $35=HEAP32[(($dim36)>>2)];
      var $call37=_writeChars($31, $33, $35);
      $frame_addr=$call37;
      label = 11; break;
    case 10: 
      var $36=$frame_addr;
      var $37=$node_addr;
      var $txt39=(($37+24)|0);
      var $ptr40=(($txt39)|0);
      var $u41=$ptr40;
      var $38=HEAP32[(($u41)>>2)];
      var $39=$node_addr;
      var $txt42=(($39+24)|0);
      var $dim43=(($txt42+4)|0);
      var $40=HEAP32[(($dim43)>>2)];
      var $call44=_writeUcs2s($36, $38, $40);
      $frame_addr=$call44;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $41=$frame_addr;

      return $41;
    default: assert(0, "bad label: " + label);
  }

}
_set_frame_custom2["X"]=1;

function _set_frame_apic($frame, $mimetype, $data, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $mimetype_addr;
      var $data_addr;
      var $size_addr;
      $frame_addr=$frame;
      $mimetype_addr=$mimetype;
      $data_addr=$data;
      $size_addr=$size;
      var $0=$mimetype_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $1=$data_addr;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $2=$size_addr;
      var $tobool3=(($2)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $3=$frame_addr;
      var $call=_set_4_byte_value($3, 1095780675);
      $frame_addr=$call;
      var $4=$frame_addr;
      var $5=$mimetype_addr;
      var $call4=_strlen($5);
      var $add=((($call4)+(4))|0);
      var $6=$size_addr;
      var $add5=((($add)+($6))|0);
      var $call6=_set_4_byte_value($4, $add5);
      $frame_addr=$call6;
      var $7=$frame_addr;
      var $incdec_ptr=(($7+1)|0);
      $frame_addr=$incdec_ptr;
      HEAP8[($7)]=0;
      var $8=$frame_addr;
      var $incdec_ptr7=(($8+1)|0);
      $frame_addr=$incdec_ptr7;
      HEAP8[($8)]=0;
      var $9=$frame_addr;
      var $incdec_ptr8=(($9+1)|0);
      $frame_addr=$incdec_ptr8;
      HEAP8[($9)]=0;
      label = 6; break;
    case 6: 
      var $10=$mimetype_addr;
      var $11=HEAP8[($10)];
      var $tobool9=(($11 << 24) >> 24)!=0;
      if ($tobool9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$mimetype_addr;
      var $incdec_ptr10=(($12+1)|0);
      $mimetype_addr=$incdec_ptr10;
      var $13=HEAP8[($12)];
      var $14=$frame_addr;
      var $incdec_ptr11=(($14+1)|0);
      $frame_addr=$incdec_ptr11;
      HEAP8[($14)]=$13;
      label = 6; break;
    case 8: 
      var $15=$frame_addr;
      var $incdec_ptr12=(($15+1)|0);
      $frame_addr=$incdec_ptr12;
      HEAP8[($15)]=0;
      var $16=$frame_addr;
      var $incdec_ptr13=(($16+1)|0);
      $frame_addr=$incdec_ptr13;
      HEAP8[($16)]=0;
      var $17=$frame_addr;
      var $incdec_ptr14=(($17+1)|0);
      $frame_addr=$incdec_ptr14;
      HEAP8[($17)]=0;
      label = 9; break;
    case 9: 
      var $18=$size_addr;
      var $dec=((($18)-(1))|0);
      $size_addr=$dec;
      var $tobool16=(($18)|0)!=0;
      if ($tobool16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$data_addr;
      var $incdec_ptr18=(($19+1)|0);
      $data_addr=$incdec_ptr18;
      var $20=HEAP8[($19)];
      var $21=$frame_addr;
      var $incdec_ptr19=(($21+1)|0);
      $frame_addr=$incdec_ptr19;
      HEAP8[($21)]=$20;
      label = 9; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $22=$frame_addr;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}
_set_frame_apic["X"]=1;

function _id3tag_write_v2($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $tag;
      var $tag_size;
      var $n;
      var $i;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $call=_test_tag_spec_flags($2, 4);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 16; break;
    case 4: 
      var $3=$gfc;
      var $call1=_test_tag_spec_flags($3, 1);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 15; break; }
    case 5: 
      $tag=0;
      var $4=$gfp_addr;
      var $call4=_lame_get_id3v2_tag($4, 0, 0);
      $n=$call4;
      var $5=$n;
      var $call5=_calloc($5, 1);
      $tag=$call5;
      var $6=$tag;
      var $cmp=(($6)|0)==0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=-1;
      label = 16; break;
    case 7: 
      var $7=$gfp_addr;
      var $8=$tag;
      var $9=$n;
      var $call8=_lame_get_id3v2_tag($7, $8, $9);
      $tag_size=$call8;
      var $10=$tag_size;
      var $11=$n;
      var $cmp9=(($10)>>>0) > (($11)>>>0);
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$tag;
      _free($12);
      $retval=-1;
      label = 16; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $13=$i;
      var $14=$tag_size;
      var $cmp11=(($13)>>>0) < (($14)>>>0);
      if ($cmp11) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $15=$gfc;
      var $16=$i;
      var $17=$tag;
      var $arrayidx=(($17+$16)|0);
      var $18=HEAP8[($arrayidx)];
      _add_dummy_byte($15, $18, 1);
      label = 12; break;
    case 12: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $20=$tag;
      _free($20);
      var $21=$tag_size;
      $retval=$21;
      label = 16; break;
    case 15: 
      $retval=0;
      label = 16; break;
    case 16: 
      var $22=$retval;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}
_id3tag_write_v2["X"]=1;

function _lame_get_id3v1_tag($gfp, $buffer, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $buffer_addr;
      var $size_addr;
      var $tag_size;
      var $gfc;
      var $p;
      var $pad;
      var $year=__stackBase__;
      $gfp_addr=$gfp;
      $buffer_addr=$buffer;
      $size_addr=$size;
      $tag_size=128;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 20; break;
    case 4: 
      var $1=$size_addr;
      var $cmp1=(($1)>>>0) < 128;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=128;
      label = 20; break;
    case 6: 
      var $2=$gfp_addr;
      var $internal_flags=(($2+288)|0);
      var $3=HEAP32[(($internal_flags)>>2)];
      $gfc=$3;
      var $4=$gfc;
      var $cmp4=(($4)|0)==0;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 20; break;
    case 8: 
      var $5=$buffer_addr;
      var $cmp7=(($5)|0)==0;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 20; break;
    case 10: 
      var $6=$gfc;
      var $call=_test_tag_spec_flags($6, 8);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 20; break;
    case 12: 
      var $7=$gfc;
      var $call12=_test_tag_spec_flags($7, 1);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $8=$buffer_addr;
      $p=$8;
      var $9=$gfc;
      var $call15=_test_tag_spec_flags($9, 16);
      var $tobool16=(($call15)|0)!=0;
      var $cond=$tobool16 ? 32 : 0;
      $pad=$cond;
      var $10=$p;
      var $incdec_ptr=(($10+1)|0);
      $p=$incdec_ptr;
      HEAP8[($10)]=84;
      var $11=$p;
      var $incdec_ptr17=(($11+1)|0);
      $p=$incdec_ptr17;
      HEAP8[($11)]=65;
      var $12=$p;
      var $incdec_ptr18=(($12+1)|0);
      $p=$incdec_ptr18;
      HEAP8[($12)]=71;
      var $13=$p;
      var $14=$gfc;
      var $tag_spec=(($14+85692)|0);
      var $title=(($tag_spec+8)|0);
      var $15=HEAP32[(($title)>>2)];
      var $16=$pad;
      var $call19=_set_text_field($13, $15, 30, $16);
      $p=$call19;
      var $17=$p;
      var $18=$gfc;
      var $tag_spec20=(($18+85692)|0);
      var $artist=(($tag_spec20+12)|0);
      var $19=HEAP32[(($artist)>>2)];
      var $20=$pad;
      var $call21=_set_text_field($17, $19, 30, $20);
      $p=$call21;
      var $21=$p;
      var $22=$gfc;
      var $tag_spec22=(($22+85692)|0);
      var $album=(($tag_spec22+16)|0);
      var $23=HEAP32[(($album)>>2)];
      var $24=$pad;
      var $call23=_set_text_field($21, $23, 30, $24);
      $p=$call23;
      var $arraydecay=(($year)|0);
      var $25=$gfc;
      var $tag_spec24=(($25+85692)|0);
      var $year25=(($tag_spec24+4)|0);
      var $26=HEAP32[(($year25)>>2)];
      var $call26=_sprintf($arraydecay, ((5383716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$26,tempInt));
      var $27=$p;
      var $28=$gfc;
      var $tag_spec27=(($28+85692)|0);
      var $year28=(($tag_spec27+4)|0);
      var $29=HEAP32[(($year28)>>2)];
      var $tobool29=(($29)|0)!=0;
      if ($tobool29) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $arraydecay30=(($year)|0);
      var $cond31 = $arraydecay30;label = 16; break;
    case 15: 
      var $cond31 = 0;label = 16; break;
    case 16: 
      var $cond31;
      var $30=$pad;
      var $call32=_set_text_field($27, $cond31, 4, $30);
      $p=$call32;
      var $31=$p;
      var $32=$gfc;
      var $tag_spec33=(($32+85692)|0);
      var $comment=(($tag_spec33+20)|0);
      var $33=HEAP32[(($comment)>>2)];
      var $34=$gfc;
      var $tag_spec34=(($34+85692)|0);
      var $track_id3v1=(($tag_spec34+24)|0);
      var $35=HEAP32[(($track_id3v1)>>2)];
      var $tobool35=(($35)|0)!=0;
      var $cond36=$tobool35 ? 28 : 30;
      var $36=$pad;
      var $call37=_set_text_field($31, $33, $cond36, $36);
      $p=$call37;
      var $37=$gfc;
      var $tag_spec38=(($37+85692)|0);
      var $track_id3v139=(($tag_spec38+24)|0);
      var $38=HEAP32[(($track_id3v139)>>2)];
      var $tobool40=(($38)|0)!=0;
      if ($tobool40) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $39=$p;
      var $incdec_ptr42=(($39+1)|0);
      $p=$incdec_ptr42;
      HEAP8[($39)]=0;
      var $40=$gfc;
      var $tag_spec43=(($40+85692)|0);
      var $track_id3v144=(($tag_spec43+24)|0);
      var $41=HEAP32[(($track_id3v144)>>2)];
      var $conv=(($41) & 255);
      var $42=$p;
      var $incdec_ptr45=(($42+1)|0);
      $p=$incdec_ptr45;
      HEAP8[($42)]=$conv;
      label = 18; break;
    case 18: 
      var $43=$gfc;
      var $tag_spec47=(($43+85692)|0);
      var $genre_id3v1=(($tag_spec47+28)|0);
      var $44=HEAP32[(($genre_id3v1)>>2)];
      var $conv48=(($44) & 255);
      var $45=$p;
      var $incdec_ptr49=(($45+1)|0);
      $p=$incdec_ptr49;
      HEAP8[($45)]=$conv48;
      $retval=128;
      label = 20; break;
    case 19: 
      $retval=0;
      label = 20; break;
    case 20: 
      var $46=$retval;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + label);
  }

}
_lame_get_id3v1_tag["X"]=1;

function _id3tag_write_v1($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $i;
      var $n;
      var $m;
      var $tag=__stackBase__;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      $m=128;
      var $2=$gfp_addr;
      var $arraydecay=(($tag)|0);
      var $3=$m;
      var $call=_lame_get_id3v1_tag($2, $arraydecay, $3);
      $n=$call;
      var $4=$n;
      var $5=$m;
      var $cmp=(($4)>>>0) > (($5)>>>0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 9; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $7=$n;
      var $cmp1=(($6)>>>0) < (($7)>>>0);
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $8=$gfc;
      var $9=$i;
      var $arrayidx=(($tag+$9)|0);
      var $10=HEAP8[($arrayidx)];
      _add_dummy_byte($8, $10, 1);
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $12=$n;
      $retval=$12;
      label = 9; break;
    case 9: 
      var $13=$retval;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }

}


function _isMultiFrame($frame_id) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $frame_id_addr;
      $frame_id_addr=$frame_id;
      var $0=$frame_id_addr;
      if ((($0)|0)==1415075928 | (($0)|0)==1465407576 | (($0)|0)==1129270605 | (($0)|0)==1398361172 | (($0)|0)==1095780675 | (($0)|0)==1195724610 | (($0)|0)==1346588244 | (($0)|0)==1095061059 | (($0)|0)==1279872587 | (($0)|0)==1162756946 | (($0)|0)==1196575044 | (($0)|0)==1347570006) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
      
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $1=$retval;

      return $1;
    default: assert(0, "bad label: " + label);
  }

}


function _swap_bytes($w) {
  var label = 0;


  var $w_addr;
  $w_addr=$w;
  var $0=$w_addr;
  var $conv=(($0)&65535);
  var $shl=$conv << 8;
  var $and=65280 & $shl;
  var $1=$w_addr;
  var $conv1=(($1)&65535);
  var $shr=$conv1 >> 8;
  var $and2=255 & $shr;
  var $or=$and | $and2;
  var $conv3=(($or) & 65535);

  return $conv3;
}


function _set_4_byte_value($bytes, $value) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $value_addr;
      var $i;
      $bytes_addr=$bytes;
      $value_addr=$value;
      $i=3;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) >= 0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$value_addr;
      var $and=$1 & 255;
      var $conv=(($and) & 255);
      var $2=$i;
      var $3=$bytes_addr;
      var $arrayidx=(($3+$2)|0);
      HEAP8[($arrayidx)]=$conv;
      var $4=$value_addr;
      var $shr=$4 >>> 8;
      $value_addr=$shr;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $dec=((($5)-(1))|0);
      $i=$dec;
      label = 3; break;
    case 6: 
      var $6=$bytes_addr;
      var $add_ptr=(($6+4)|0);

      return $add_ptr;
    default: assert(0, "bad label: " + label);
  }

}


function _writeChars($frame, $str, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $str_addr;
      var $n_addr;
      $frame_addr=$frame;
      $str_addr=$str;
      $n_addr=$n;
      label = 3; break;
    case 3: 
      var $0=$n_addr;
      var $dec=((($0)-(1))|0);
      $n_addr=$dec;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$str_addr;
      var $incdec_ptr=(($1+1)|0);
      $str_addr=$incdec_ptr;
      var $2=HEAP8[($1)];
      var $3=$frame_addr;
      var $incdec_ptr1=(($3+1)|0);
      $frame_addr=$incdec_ptr1;
      HEAP8[($3)]=$2;
      label = 3; break;
    case 5: 
      var $4=$frame_addr;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _findNode($tag, $frame_id, $last) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $tag_addr;
      var $frame_id_addr;
      var $last_addr;
      var $node;
      $tag_addr=$tag;
      $frame_id_addr=$frame_id;
      $last_addr=$last;
      var $0=$last_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$last_addr;
      var $nxt=(($1)|0);
      var $2=HEAP32[(($nxt)>>2)];
      var $cond = $2;label = 5; break;
    case 4: 
      var $3=$tag_addr;
      var $v2_head=(($3+48)|0);
      var $4=HEAP32[(($v2_head)>>2)];
      var $cond = $4;label = 5; break;
    case 5: 
      var $cond;
      $node=$cond;
      label = 6; break;
    case 6: 
      var $5=$node;
      var $cmp=(($5)|0)!=0;
      if ($cmp) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $6=$node;
      var $fid=(($6+4)|0);
      var $7=HEAP32[(($fid)>>2)];
      var $8=$frame_id_addr;
      var $cmp1=(($7)|0)==(($8)|0);
      if ($cmp1) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$node;
      $retval=$9;
      label = 11; break;
    case 9: 
      var $10=$node;
      var $nxt2=(($10)|0);
      var $11=HEAP32[(($nxt2)>>2)];
      $node=$11;
      label = 6; break;
    case 10: 
      $retval=0;
      label = 11; break;
    case 11: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _isSameDescriptor($node, $dsc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $node_addr;
      var $dsc_addr;
      var $i;
      $node_addr=$node;
      $dsc_addr=$dsc;
      var $0=$node_addr;
      var $dsc1=(($0+12)|0);
      var $enc=(($dsc1+8)|0);
      var $1=HEAP32[(($enc)>>2)];
      var $cmp=(($1)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$node_addr;
      var $dsc2=(($2+12)|0);
      var $dim=(($dsc2+4)|0);
      var $3=HEAP32[(($dim)>>2)];
      var $cmp3=(($3)>>>0) > 0;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=0;
      label = 13; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $4=$i;
      var $5=$node_addr;
      var $dsc4=(($5+12)|0);
      var $dim5=(($dsc4+4)|0);
      var $6=HEAP32[(($dim5)>>2)];
      var $cmp6=(($4)>>>0) < (($6)>>>0);
      if ($cmp6) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $7=$dsc_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$i;
      var $9=$node_addr;
      var $dsc7=(($9+12)|0);
      var $ptr=(($dsc7)|0);
      var $l=$ptr;
      var $10=HEAP32[(($l)>>2)];
      var $arrayidx=(($10+$8)|0);
      var $11=HEAP8[($arrayidx)];
      var $conv=(($11 << 24) >> 24);
      var $12=$i;
      var $13=$dsc_addr;
      var $arrayidx8=(($13+$12)|0);
      var $14=HEAP8[($arrayidx8)];
      var $conv9=(($14 << 24) >> 24);
      var $cmp10=(($conv)|0)!=(($conv9)|0);
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 13; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 12: 
      $retval=1;
      label = 13; break;
    case 13: 
      var $16=$retval;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}
_isSameDescriptor["X"]=1;

function _appendNode($tag, $node) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tag_addr;
      var $node_addr;
      $tag_addr=$tag;
      $node_addr=$node;
      var $0=$tag_addr;
      var $v2_tail=(($0+52)|0);
      var $1=HEAP32[(($v2_tail)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$tag_addr;
      var $v2_head=(($2+48)|0);
      var $3=HEAP32[(($v2_head)>>2)];
      var $cmp1=(($3)|0)==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$node_addr;
      var $5=$tag_addr;
      var $v2_head2=(($5+48)|0);
      HEAP32[(($v2_head2)>>2)]=$4;
      var $6=$node_addr;
      var $7=$tag_addr;
      var $v2_tail3=(($7+52)|0);
      HEAP32[(($v2_tail3)>>2)]=$6;
      label = 6; break;
    case 5: 
      var $8=$node_addr;
      var $9=$tag_addr;
      var $v2_tail4=(($9+52)|0);
      var $10=HEAP32[(($v2_tail4)>>2)];
      var $nxt=(($10)|0);
      HEAP32[(($nxt)>>2)]=$8;
      var $11=$node_addr;
      var $12=$tag_addr;
      var $v2_tail5=(($12+52)|0);
      HEAP32[(($v2_tail5)>>2)]=$11;
      label = 6; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _writeUcs2s($frame, $str, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $str_addr;
      var $n_addr;
      var $bom;
      var $c;
      $frame_addr=$frame;
      $str_addr=$str;
      $n_addr=$n;
      var $0=$n_addr;
      var $cmp=(($0)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$str_addr;
      var $2=HEAP16[(($1)>>1)];
      $bom=$2;
      label = 4; break;
    case 4: 
      var $3=$n_addr;
      var $dec=((($3)-(1))|0);
      $n_addr=$dec;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$bom;
      var $5=$str_addr;
      var $incdec_ptr=(($5+2)|0);
      $str_addr=$incdec_ptr;
      var $6=HEAP16[(($5)>>1)];
      var $call=_toLittleEndian($4, $6);
      $c=$call;
      var $7=$c;
      var $conv=(($7)&65535);
      var $and=255 & $conv;
      var $conv1=(($and) & 255);
      var $8=$frame_addr;
      var $incdec_ptr2=(($8+1)|0);
      $frame_addr=$incdec_ptr2;
      HEAP8[($8)]=$conv1;
      var $9=$c;
      var $conv3=(($9)&65535);
      var $shr=$conv3 >> 8;
      var $and4=255 & $shr;
      var $conv5=(($and4) & 255);
      var $10=$frame_addr;
      var $incdec_ptr6=(($10+1)|0);
      $frame_addr=$incdec_ptr6;
      HEAP8[($10)]=$conv5;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$frame_addr;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _toLittleEndian($bom, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $bom_addr;
      var $c_addr;
      $bom_addr=$bom;
      $c_addr=$c;
      var $0=$bom_addr;
      var $conv=(($0)&65535);
      var $cmp=(($conv)|0)==65534;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$c_addr;
      var $call=_swap_bytes($1);
      $retval=$call;
      label = 5; break;
    case 4: 
      var $2=$c_addr;
      $retval=$2;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _writeLoBytes($frame, $str, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $frame_addr;
      var $str_addr;
      var $n_addr;
      var $bom;
      var $c;
      $frame_addr=$frame;
      $str_addr=$str;
      $n_addr=$n;
      var $0=$n_addr;
      var $cmp=(($0)>>>0) > 0;
      if ($cmp) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $1=$str_addr;
      var $2=HEAP16[(($1)>>1)];
      $bom=$2;
      var $3=$bom;
      var $call=_hasUcs2ByteOrderMarker($3);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$str_addr;
      var $incdec_ptr=(($4+2)|0);
      $str_addr=$incdec_ptr;
      var $5=$n_addr;
      var $dec=((($5)-(1))|0);
      $n_addr=$dec;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $6=$n_addr;
      var $dec2=((($6)-(1))|0);
      $n_addr=$dec2;
      var $tobool3=(($6)|0)!=0;
      if ($tobool3) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $7=$bom;
      var $8=$str_addr;
      var $incdec_ptr4=(($8+2)|0);
      $str_addr=$incdec_ptr4;
      var $9=HEAP16[(($8)>>1)];
      var $call5=_toLittleEndian($7, $9);
      $c=$call5;
      var $10=$c;
      var $conv=(($10)&65535);
      var $cmp6=(($conv)>>>0) < 32;
      if ($cmp6) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $11=$c;
      var $conv8=(($11)&65535);
      var $cmp9=255 < (($conv8)>>>0);
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$frame_addr;
      var $incdec_ptr12=(($12+1)|0);
      $frame_addr=$incdec_ptr12;
      HEAP8[($12)]=32;
      label = 11; break;
    case 10: 
      var $13=$c;
      var $conv13=(($13) & 255);
      var $14=$frame_addr;
      var $incdec_ptr14=(($14+1)|0);
      $frame_addr=$incdec_ptr14;
      HEAP8[($14)]=$conv13;
      label = 11; break;
    case 11: 
      label = 6; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $15=$frame_addr;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}
_writeLoBytes["X"]=1;

function _searchGenre($genre) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $genre_addr;
      var $i;
      $genre_addr=$genre;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 148;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$genre_addr;
      var $2=$i;
      var $arrayidx=((5345344+($2<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $call=_local_strcasecmp($1, $3);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$i;
      $retval=$4;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $5=$i;
      var $inc=((($5)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=148;
      label = 9; break;
    case 9: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _sloppySearchGenre($genre) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $genre_addr;
      var $i;
      $genre_addr=$genre;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 148;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$genre_addr;
      var $2=$i;
      var $arrayidx=((5345344+($2<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $call=_sloppyCompared($1, $3);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$i;
      $retval=$4;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $5=$i;
      var $inc=((($5)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=148;
      label = 9; break;
    case 9: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _sloppyCompared($p, $q) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $q_addr;
      var $cp;
      var $cq;
      $p_addr=$p;
      $q_addr=$q;
      var $0=$p_addr;
      var $call=_nextUpperAlpha($0, 0);
      $p_addr=$call;
      var $1=$q_addr;
      var $call1=_nextUpperAlpha($1, 0);
      $q_addr=$call1;
      var $2=$p_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $call2=_toupper($conv);
      var $conv3=(($call2) & 255);
      $cp=$conv3;
      var $4=$q_addr;
      var $5=HEAP8[($4)];
      var $conv4=(($5 << 24) >> 24);
      var $call5=_toupper($conv4);
      var $conv6=(($call5) & 255);
      $cq=$conv6;
      label = 3; break;
    case 3: 
      var $6=$cp;
      var $conv7=(($6 << 24) >> 24);
      var $7=$cq;
      var $conv8=(($7 << 24) >> 24);
      var $cmp=(($conv7)|0)==(($conv8)|0);
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $8=$cp;
      var $conv10=(($8 << 24) >> 24);
      var $cmp11=(($conv10)|0)==0;
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 15; break;
    case 6: 
      var $9=$p_addr;
      var $arrayidx=(($9+1)|0);
      var $10=HEAP8[($arrayidx)];
      var $conv13=(($10 << 24) >> 24);
      var $cmp14=(($conv13)|0)==46;
      if ($cmp14) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$q_addr;
      var $12=HEAP8[($11)];
      var $conv18=(($12 << 24) >> 24);
      var $tobool=(($conv18)|0)!=0;
      if ($tobool) { label = 9; break; } else { var $15 = 0;label = 10; break; }
    case 9: 
      var $13=$q_addr;
      var $incdec_ptr=(($13+1)|0);
      $q_addr=$incdec_ptr;
      var $14=HEAP8[($13)];
      var $conv19=(($14 << 24) >> 24);
      var $cmp20=(($conv19)|0)!=32;
      var $15 = $cmp20;label = 10; break;
    case 10: 
      var $15;
      if ($15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 8; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $16=$p_addr;
      var $17=$cp;
      var $call24=_nextUpperAlpha($16, $17);
      $p_addr=$call24;
      var $18=$q_addr;
      var $19=$cq;
      var $call25=_nextUpperAlpha($18, $19);
      $q_addr=$call25;
      var $20=$p_addr;
      var $21=HEAP8[($20)];
      var $conv26=(($21 << 24) >> 24);
      var $call27=_toupper($conv26);
      var $conv28=(($call27) & 255);
      $cp=$conv28;
      var $22=$q_addr;
      var $23=HEAP8[($22)];
      var $conv29=(($23 << 24) >> 24);
      var $call30=_toupper($conv29);
      var $conv31=(($call30) & 255);
      $cq=$conv31;
      label = 3; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $24=$retval;

      return $24;
    default: assert(0, "bad label: " + label);
  }

}
_sloppyCompared["X"]=1;

function _nextUpperAlpha($p, $x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $x_addr;
      var $c;
      $p_addr=$p;
      $x_addr=$x;
      var $0=$p_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $call=_toupper($conv);
      var $conv1=(($call) & 255);
      $c=$conv1;
      label = 3; break;
    case 3: 
      var $2=$p_addr;
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $cmp=(($conv2)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $4=$c;
      var $conv4=(($4 << 24) >> 24);
      var $cmp5=65 <= (($conv4)|0);
      if ($cmp5) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $5=$c;
      var $conv7=(($5 << 24) >> 24);
      var $cmp8=(($conv7)|0) <= 90;
      if ($cmp8) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $6=$c;
      var $conv10=(($6 << 24) >> 24);
      var $7=$x_addr;
      var $conv11=(($7 << 24) >> 24);
      var $cmp12=(($conv10)|0)!=(($conv11)|0);
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$p_addr;
      $retval=$8;
      label = 12; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $9=$p_addr;
      var $incdec_ptr=(($9+1)|0);
      $p_addr=$incdec_ptr;
      var $10=HEAP8[($incdec_ptr)];
      var $conv16=(($10 << 24) >> 24);
      var $call17=_toupper($conv16);
      var $conv18=(($call17) & 255);
      $c=$conv18;
      label = 3; break;
    case 11: 
      var $11=$p_addr;
      $retval=$11;
      label = 12; break;
    case 12: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}
_nextUpperAlpha["X"]=1;

function _local_strcasecmp($s1, $s2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s1_addr;
      var $s2_addr;
      var $c1;
      var $c2;
      $s1_addr=$s1;
      $s2_addr=$s2;
      label = 3; break;
    case 3: 
      var $0=$s1_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $call=_tolower($conv);
      var $conv1=(($call) & 255);
      $c1=$conv1;
      var $2=$s2_addr;
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $call3=_tolower($conv2);
      var $conv4=(($call3) & 255);
      $c2=$conv4;
      var $4=$c1;
      var $tobool=(($4 << 24) >> 24)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      label = 7; break;
    case 5: 
      var $5=$s1_addr;
      var $incdec_ptr=(($5+1)|0);
      $s1_addr=$incdec_ptr;
      var $6=$s2_addr;
      var $incdec_ptr5=(($6+1)|0);
      $s2_addr=$incdec_ptr5;
      label = 6; break;
    case 6: 
      var $7=$c1;
      var $conv6=(($7)&255);
      var $8=$c2;
      var $conv7=(($8)&255);
      var $cmp=(($conv6)|0)==(($conv7)|0);
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 7: 
      var $9=$c1;
      var $conv9=(($9)&255);
      var $10=$c2;
      var $conv10=(($10)&255);
      var $sub=((($conv9)-($conv10))|0);

      return $sub;
    default: assert(0, "bad label: " + label);
  }

}


function _isSameLang($l1, $l2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $l1_addr;
      var $l2_addr;
      var $d=__stackBase__;
      var $i;
      var $a;
      var $b;
      $l1_addr=$l1;
      $l2_addr=$l2;
      var $arraydecay=(($d)|0);
      var $0=$l2_addr;
      _setLang($arraydecay, $0);
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)|0) < 3;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $2=$i;
      var $3=$l1_addr;
      var $arrayidx=(($3+$2)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4 << 24) >> 24);
      var $call=_tolower($conv);
      var $conv1=(($call) & 255);
      $a=$conv1;
      var $5=$i;
      var $arrayidx2=(($d+$5)|0);
      var $6=HEAP8[($arrayidx2)];
      var $conv3=(($6 << 24) >> 24);
      var $call4=_tolower($conv3);
      var $conv5=(($call4) & 255);
      $b=$conv5;
      var $7=$a;
      var $conv6=(($7 << 24) >> 24);
      var $cmp7=(($conv6)|0) < 32;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $a=32;
      label = 6; break;
    case 6: 
      var $8=$b;
      var $conv9=(($8 << 24) >> 24);
      var $cmp10=(($conv9)|0) < 32;
      if ($cmp10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $b=32;
      label = 8; break;
    case 8: 
      var $9=$a;
      var $conv14=(($9 << 24) >> 24);
      var $10=$b;
      var $conv15=(($10 << 24) >> 24);
      var $cmp16=(($conv14)|0)!=(($conv15)|0);
      if ($cmp16) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 13; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 12: 
      $retval=1;
      label = 13; break;
    case 13: 
      var $12=$retval;
      STACKTOP = __stackBase__;
      return $12;
    default: assert(0, "bad label: " + label);
  }

}
_isSameLang["X"]=1;

function _frame_id_matches($id, $mask) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $id_addr;
      var $mask_addr;
      var $result;
      var $i;
      var $window;
      var $mw;
      var $iw;
      $id_addr=$id;
      $mask_addr=$mask;
      $result=0;
      $window=255;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 4;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$mask_addr;
      var $2=$window;
      var $and=$1 & $2;
      $mw=$and;
      var $3=$id_addr;
      var $4=$window;
      var $and1=$3 & $4;
      $iw=$and1;
      var $5=$mw;
      var $cmp2=(($5)|0)!=0;
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $6=$mw;
      var $7=$iw;
      var $cmp3=(($6)|0)!=(($7)|0);
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$iw;
      var $9=$result;
      var $or=$9 | $8;
      $result=$or;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      var $11=$window;
      var $shl=$11 << 8;
      $window=$shl;
      label = 3; break;
    case 9: 
      var $12=$result;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _setLang($dst, $src) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dst_addr;
      var $src_addr;
      var $i;
      $dst_addr=$dst;
      $src_addr=$src;
      var $0=$src_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$src_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2 << 24) >> 24);
      var $cmp1=(($conv)|0)==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$dst_addr;
      var $arrayidx3=(($3)|0);
      HEAP8[($arrayidx3)]=88;
      var $4=$dst_addr;
      var $arrayidx4=(($4+1)|0);
      HEAP8[($arrayidx4)]=88;
      var $5=$dst_addr;
      var $arrayidx5=(($5+2)|0);
      HEAP8[($arrayidx5)]=88;
      label = 17; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $6=$i;
      var $cmp6=(($6)|0) < 3;
      if ($cmp6) { label = 7; break; } else { var $10 = 0;label = 9; break; }
    case 7: 
      var $7=$src_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 8; break; } else { var $10 = 0;label = 9; break; }
    case 8: 
      var $8=$src_addr;
      var $9=HEAP8[($8)];
      var $conv8=(($9 << 24) >> 24);
      var $tobool9=(($conv8)|0)!=0;
      var $10 = $tobool9;label = 9; break;
    case 9: 
      var $10;
      if ($10) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $11=$i;
      var $12=$src_addr;
      var $arrayidx10=(($12+$11)|0);
      var $13=HEAP8[($arrayidx10)];
      var $14=$i;
      var $15=$dst_addr;
      var $arrayidx11=(($15+$14)|0);
      HEAP8[($arrayidx11)]=$13;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $17=$i;
      var $cmp13=(($17)|0) < 3;
      if ($cmp13) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $18=$i;
      var $19=$dst_addr;
      var $arrayidx16=(($19+$18)|0);
      HEAP8[($arrayidx16)]=32;
      label = 15; break;
    case 15: 
      var $20=$i;
      var $inc18=((($20)+(1))|0);
      $i=$inc18;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_setLang["X"]=1;

function _local_char_pos($str, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $str_addr;
      var $c_addr;
      var $i;
      $str_addr=$str;
      $c_addr=$c;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$str_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $1=$i;
      var $2=$str_addr;
      var $arrayidx=(($2+$1)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3 << 24) >> 24);
      var $cmp1=(($conv)|0)!=0;
      var $4 = $cmp1;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $5=$i;
      var $6=$str_addr;
      var $arrayidx3=(($6+$5)|0);
      var $7=HEAP8[($arrayidx3)];
      var $conv4=(($7 << 24) >> 24);
      var $8=$c_addr;
      var $conv5=(($8 << 24) >> 24);
      var $cmp6=(($conv4)|0)==(($conv5)|0);
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$i;
      $retval=$9;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 10: 
      $retval=-1;
      label = 11; break;
    case 11: 
      var $11=$retval;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _isSameDescriptorUcs2($node, $dsc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $node_addr;
      var $dsc_addr;
      var $i;
      $node_addr=$node;
      $dsc_addr=$dsc;
      var $0=$node_addr;
      var $dsc1=(($0+12)|0);
      var $enc=(($dsc1+8)|0);
      var $1=HEAP32[(($enc)>>2)];
      var $cmp=(($1)|0)!=1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$node_addr;
      var $dsc2=(($2+12)|0);
      var $dim=(($dsc2+4)|0);
      var $3=HEAP32[(($dim)>>2)];
      var $cmp3=(($3)>>>0) > 0;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=0;
      label = 13; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $4=$i;
      var $5=$node_addr;
      var $dsc4=(($5+12)|0);
      var $dim5=(($dsc4+4)|0);
      var $6=HEAP32[(($dim5)>>2)];
      var $cmp6=(($4)>>>0) < (($6)>>>0);
      if ($cmp6) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $7=$dsc_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$i;
      var $9=$node_addr;
      var $dsc7=(($9+12)|0);
      var $ptr=(($dsc7)|0);
      var $u=$ptr;
      var $10=HEAP32[(($u)>>2)];
      var $arrayidx=(($10+($8<<1))|0);
      var $11=HEAP16[(($arrayidx)>>1)];
      var $conv=(($11)&65535);
      var $12=$i;
      var $13=$dsc_addr;
      var $arrayidx8=(($13+($12<<1))|0);
      var $14=HEAP16[(($arrayidx8)>>1)];
      var $conv9=(($14)&65535);
      var $cmp10=(($conv)|0)!=(($conv9)|0);
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 13; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 12: 
      $retval=1;
      label = 13; break;
    case 13: 
      var $16=$retval;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}
_isSameDescriptorUcs2["X"]=1;

function _local_ucs2_pos($str, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $str_addr;
      var $c_addr;
      var $i;
      $str_addr=$str;
      $c_addr=$c;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$str_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $1=$i;
      var $2=$str_addr;
      var $arrayidx=(($2+($1<<1))|0);
      var $3=HEAP16[(($arrayidx)>>1)];
      var $conv=(($3)&65535);
      var $cmp1=(($conv)|0)!=0;
      var $4 = $cmp1;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $5=$i;
      var $6=$str_addr;
      var $arrayidx3=(($6+($5<<1))|0);
      var $7=HEAP16[(($arrayidx3)>>1)];
      var $conv4=(($7)&65535);
      var $8=$c_addr;
      var $conv5=(($8)&65535);
      var $cmp6=(($conv4)|0)==(($conv5)|0);
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$i;
      $retval=$9;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 10: 
      $retval=-1;
      label = 11; break;
    case 11: 
      var $11=$retval;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _is_lame_global_flags_valid($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $1=$gfp_addr;
      var $class_id=(($1)|0);
      var $2=HEAP32[(($class_id)>>2)];
      var $cmp1=(($2)|0)!=-487877;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      $retval=1;
      label = 7; break;
    case 7: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _is_lame_internal_flags_valid($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $1=$gfc_addr;
      var $class_id=(($1)|0);
      var $2=HEAP32[(($class_id)>>2)];
      var $cmp1=(($2)|0)!=-487877;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      $retval=1;
      label = 7; break;
    case 7: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _local_ucs2_strdup($dst, $src) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dst_addr;
      var $src_addr;
      var $n;
      $dst_addr=$dst;
      $src_addr=$src;
      var $0=$dst_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $1=$dst_addr;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2;
      _free($3);
      var $4=$dst_addr;
      HEAP32[(($4)>>2)]=0;
      var $5=$src_addr;
      var $cmp1=(($5)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 14; break; }
    case 5: 
      $n=0;
      label = 6; break;
    case 6: 
      var $6=$n;
      var $7=$src_addr;
      var $arrayidx=(($7+($6<<1))|0);
      var $8=HEAP16[(($arrayidx)>>1)];
      var $conv=(($8)&65535);
      var $cmp3=(($conv)|0)!=0;
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $9=$n;
      var $inc=((($9)+(1))|0);
      $n=$inc;
      label = 6; break;
    case 9: 
      var $10=$n;
      var $cmp5=(($10)>>>0) > 0;
      if ($cmp5) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $11=$n;
      var $add=((($11)+(1))|0);
      var $call=_calloc($add, 2);
      var $12=$call;
      var $13=$dst_addr;
      HEAP32[(($13)>>2)]=$12;
      var $14=$dst_addr;
      var $15=HEAP32[(($14)>>2)];
      var $cmp8=(($15)|0)!=0;
      if ($cmp8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $16=$dst_addr;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=$src_addr;
      var $20=$19;
      var $21=$n;
      var $mul=((($21<<1))&-1);
      assert($mul % 1 === 0);_memcpy($18, $20, $mul);
      var $22=$n;
      var $23=$dst_addr;
      var $24=HEAP32[(($23)>>2)];
      var $arrayidx11=(($24+($22<<1))|0);
      HEAP16[(($arrayidx11)>>1)]=0;
      var $25=$n;
      $retval=$25;
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $26=$retval;

      return $26;
    default: assert(0, "bad label: " + label);
  }

}
_local_ucs2_strdup["X"]=1;

function _maybeLatin1($text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $text_addr;
      var $bom;
      var $c;
      $text_addr=$text;
      var $0=$text_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$text_addr;
      var $incdec_ptr=(($1+2)|0);
      $text_addr=$incdec_ptr;
      var $2=HEAP16[(($1)>>1)];
      $bom=$2;
      label = 4; break;
    case 4: 
      var $3=$text_addr;
      var $4=HEAP16[(($3)>>1)];
      var $tobool1=(($4 << 16) >> 16)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$bom;
      var $6=$text_addr;
      var $incdec_ptr2=(($6+2)|0);
      $text_addr=$incdec_ptr2;
      var $7=HEAP16[(($6)>>1)];
      var $call=_toLittleEndian($5, $7);
      $c=$call;
      var $8=$c;
      var $conv=(($8)&65535);
      var $cmp=(($conv)|0) > 254;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 10; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      $retval=1;
      label = 10; break;
    case 10: 
      var $9=$retval;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _local_strdup_utf16_to_latin1($utf16) {
  var label = 0;


  var $utf16_addr;
  var $len;
  var $latin1;
  $utf16_addr=$utf16;
  var $0=$utf16_addr;
  var $call=_local_ucs2_strlen($0);
  $len=$call;
  var $1=$len;
  var $add=((($1)+(1))|0);
  var $call1=_calloc($add, 1);
  $latin1=$call1;
  var $2=$latin1;
  var $3=$utf16_addr;
  var $4=$len;
  var $call2=_writeLoBytes($2, $3, $4);
  var $5=$latin1;

  return $5;
}


function _lame_init_params($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $i;
      var $j;
      var $gfc;
      var $cfg;
      var $qval;
      var $d;
      var $q_;
      var $t_;
      var $d284;
      var $lowpass=__stackBase__;
      var $highpass=(__stackBase__)+(8);
      var $a;
      var $b;
      var $m;
      var $a351;
      var $b355;
      var $m360;
      var $a375;
      var $b379;
      var $m384;
      var $size;
      var $start;
      var $size784;
      var $start793;
      var $k;
      var $vbrmode;
      var $m1207=(__stackBase__)+(16);
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      var $3=$gfc;
      var $class_id=(($3)|0);
      HEAP32[(($class_id)>>2)]=0;
      var $4=$gfp_addr;
      var $VBR_hard_min=(($4+180)|0);
      var $5=HEAP32[(($VBR_hard_min)>>2)];
      var $6=$cfg;
      var $enforce_min_bitrate=(($6+108)|0);
      HEAP32[(($enforce_min_bitrate)>>2)]=$5;
      var $7=$gfp_addr;
      var $analysis=(($7+32)|0);
      var $8=HEAP32[(($analysis)>>2)];
      var $9=$cfg;
      var $analysis2=(($9+124)|0);
      HEAP32[(($analysis2)>>2)]=$8;
      var $10=$cfg;
      var $analysis3=(($10+124)|0);
      var $11=HEAP32[(($analysis3)>>2)];
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$gfp_addr;
      var $write_lame_tag=(($12+36)|0);
      HEAP32[(($write_lame_tag)>>2)]=0;
      label = 4; break;
    case 4: 
      var $13=$gfc;
      var $pinfo=(($13+85800)|0);
      var $14=HEAP32[(($pinfo)>>2)];
      var $cmp=(($14)|0)!=0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$gfp_addr;
      var $write_lame_tag5=(($15+36)|0);
      HEAP32[(($write_lame_tag5)>>2)]=0;
      label = 6; break;
    case 6: 
      var $16=$gfp_addr;
      var $report=(($16+272)|0);
      var $msgf=(($report)|0);
      var $17=HEAP32[(($msgf)>>2)];
      var $18=$gfc;
      var $report_msg=(($18+85824)|0);
      HEAP32[(($report_msg)>>2)]=$17;
      var $19=$gfp_addr;
      var $report7=(($19+272)|0);
      var $debugf=(($report7+4)|0);
      var $20=HEAP32[(($debugf)>>2)];
      var $21=$gfc;
      var $report_dbg=(($21+85828)|0);
      HEAP32[(($report_dbg)>>2)]=$20;
      var $22=$gfp_addr;
      var $report8=(($22+272)|0);
      var $errorf=(($report8+8)|0);
      var $23=HEAP32[(($errorf)>>2)];
      var $24=$gfc;
      var $report_err=(($24+85832)|0);
      HEAP32[(($report_err)>>2)]=$23;
      var $25=$gfp_addr;
      var $asm_optimizations=(($25+292)|0);
      var $amd3dnow=(($asm_optimizations+4)|0);
      var $26=HEAP32[(($amd3dnow)>>2)];
      var $tobool9=(($26)|0)!=0;
      if ($tobool9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $call=_has_3DNow();
      var $27=$gfc;
      var $CPU_features=(($27+85752)|0);
      var $bf_value=$call & 1;
      var $28=$CPU_features;
      var $29=$bf_value & 1;
      var $30=$29 << 1;
      var $31=HEAP32[(($28)>>2)];
      var $32=$31 & -3;
      var $33=$32 | $30;
      HEAP32[(($28)>>2)]=$33;
      label = 9; break;
    case 8: 
      var $34=$gfc;
      var $CPU_features11=(($34+85752)|0);
      var $35=$CPU_features11;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & -3;
      HEAP32[(($35)>>2)]=$37;
      label = 9; break;
    case 9: 
      var $38=$gfp_addr;
      var $asm_optimizations13=(($38+292)|0);
      var $mmx=(($asm_optimizations13)|0);
      var $39=HEAP32[(($mmx)>>2)];
      var $tobool14=(($39)|0)!=0;
      if ($tobool14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $call16=_has_MMX();
      var $40=$gfc;
      var $CPU_features17=(($40+85752)|0);
      var $bf_value18=$call16 & 1;
      var $41=$CPU_features17;
      var $42=$bf_value18 & 1;
      var $43=HEAP32[(($41)>>2)];
      var $44=$43 & -2;
      var $45=$44 | $42;
      HEAP32[(($41)>>2)]=$45;
      label = 12; break;
    case 11: 
      var $46=$gfc;
      var $CPU_features20=(($46+85752)|0);
      var $47=$CPU_features20;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 & -2;
      HEAP32[(($47)>>2)]=$49;
      label = 12; break;
    case 12: 
      var $50=$gfp_addr;
      var $asm_optimizations22=(($50+292)|0);
      var $sse=(($asm_optimizations22+8)|0);
      var $51=HEAP32[(($sse)>>2)];
      var $tobool23=(($51)|0)!=0;
      if ($tobool23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $call25=_has_SSE();
      var $52=$gfc;
      var $CPU_features26=(($52+85752)|0);
      var $bf_value27=$call25 & 1;
      var $53=$CPU_features26;
      var $54=$bf_value27 & 1;
      var $55=$54 << 2;
      var $56=HEAP32[(($53)>>2)];
      var $57=$56 & -5;
      var $58=$57 | $55;
      HEAP32[(($53)>>2)]=$58;
      var $call28=_has_SSE2();
      var $59=$gfc;
      var $CPU_features29=(($59+85752)|0);
      var $bf_value30=$call28 & 1;
      var $60=$CPU_features29;
      var $61=$bf_value30 & 1;
      var $62=$61 << 3;
      var $63=HEAP32[(($60)>>2)];
      var $64=$63 & -9;
      var $65=$64 | $62;
      HEAP32[(($60)>>2)]=$65;
      label = 15; break;
    case 14: 
      var $66=$gfc;
      var $CPU_features32=(($66+85752)|0);
      var $67=$CPU_features32;
      var $68=HEAP32[(($67)>>2)];
      var $69=$68 & -5;
      HEAP32[(($67)>>2)]=$69;
      var $70=$gfc;
      var $CPU_features33=(($70+85752)|0);
      var $71=$CPU_features33;
      var $72=HEAP32[(($71)>>2)];
      var $73=$72 & -9;
      HEAP32[(($71)>>2)]=$73;
      label = 15; break;
    case 15: 
      var $74=$gfc;
      var $ATH=(($74+85792)|0);
      var $75=HEAP32[(($ATH)>>2)];
      var $cmp35=0==(($75)|0);
      if ($cmp35) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $call37=_calloc(1, 2772);
      var $76=$call37;
      var $77=$gfc;
      var $ATH38=(($77+85792)|0);
      HEAP32[(($ATH38)>>2)]=$76;
      label = 17; break;
    case 17: 
      var $78=$gfc;
      var $ATH40=(($78+85792)|0);
      var $79=HEAP32[(($ATH40)>>2)];
      var $cmp41=0==(($79)|0);
      if ($cmp41) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $retval=-2;
      label = 296; break;
    case 19: 
      var $80=$gfc;
      var $sv_rpg=(($80+85672)|0);
      var $rgdata=(($sv_rpg)|0);
      var $81=HEAP32[(($rgdata)>>2)];
      var $cmp44=0==(($81)|0);
      if ($cmp44) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $call46=_calloc(1, 134792);
      var $82=$call46;
      var $83=$gfc;
      var $sv_rpg47=(($83+85672)|0);
      var $rgdata48=(($sv_rpg47)|0);
      HEAP32[(($rgdata48)>>2)]=$82;
      label = 21; break;
    case 21: 
      var $84=$gfc;
      var $sv_rpg50=(($84+85672)|0);
      var $rgdata51=(($sv_rpg50)|0);
      var $85=HEAP32[(($rgdata51)>>2)];
      var $cmp52=0==(($85)|0);
      if ($cmp52) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $86=$gfc;
      _freegfc($86);
      var $87=$gfp_addr;
      var $internal_flags54=(($87+288)|0);
      HEAP32[(($internal_flags54)>>2)]=0;
      $retval=-2;
      label = 296; break;
    case 23: 
      var $88=$gfp_addr;
      var $error_protection=(($88+120)|0);
      var $89=HEAP32[(($error_protection)>>2)];
      var $90=$cfg;
      var $error_protection56=(($90+144)|0);
      HEAP32[(($error_protection56)>>2)]=$89;
      var $91=$gfp_addr;
      var $copyright=(($91+104)|0);
      var $92=HEAP32[(($copyright)>>2)];
      var $93=$cfg;
      var $copyright57=(($93+148)|0);
      HEAP32[(($copyright57)>>2)]=$92;
      var $94=$gfp_addr;
      var $original=(($94+108)|0);
      var $95=HEAP32[(($original)>>2)];
      var $96=$cfg;
      var $original58=(($96+152)|0);
      HEAP32[(($original58)>>2)]=$95;
      var $97=$gfp_addr;
      var $extension=(($97+112)|0);
      var $98=HEAP32[(($extension)>>2)];
      var $99=$cfg;
      var $extension59=(($99+156)|0);
      HEAP32[(($extension59)>>2)]=$98;
      var $100=$gfp_addr;
      var $emphasis=(($100+116)|0);
      var $101=HEAP32[(($emphasis)>>2)];
      var $102=$cfg;
      var $emphasis60=(($102+160)|0);
      HEAP32[(($emphasis60)>>2)]=$101;
      var $103=$gfp_addr;
      var $num_channels=(($103+8)|0);
      var $104=HEAP32[(($num_channels)>>2)];
      var $105=$cfg;
      var $channels_in=(($105+52)|0);
      HEAP32[(($channels_in)>>2)]=$104;
      var $106=$cfg;
      var $channels_in61=(($106+52)|0);
      var $107=HEAP32[(($channels_in61)>>2)];
      var $cmp62=(($107)|0)==1;
      if ($cmp62) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $108=$gfp_addr;
      var $mode=(($108+48)|0);
      HEAP32[(($mode)>>2)]=3;
      label = 25; break;
    case 25: 
      var $109=$gfp_addr;
      var $mode65=(($109+48)|0);
      var $110=HEAP32[(($mode65)>>2)];
      var $cmp66=(($110)|0)==3;
      var $cond=$cmp66 ? 1 : 2;
      var $111=$cfg;
      var $channels_out=(($111+56)|0);
      HEAP32[(($channels_out)>>2)]=$cond;
      var $112=$gfp_addr;
      var $mode67=(($112+48)|0);
      var $113=HEAP32[(($mode67)>>2)];
      var $cmp68=(($113)|0)==3;
      if ($cmp68) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $114=$gfp_addr;
      var $force_ms=(($114+52)|0);
      HEAP32[(($force_ms)>>2)]=0;
      label = 27; break;
    case 27: 
      var $115=$gfp_addr;
      var $force_ms71=(($115+52)|0);
      var $116=HEAP32[(($force_ms71)>>2)];
      var $117=$cfg;
      var $force_ms72=(($117+64)|0);
      HEAP32[(($force_ms72)>>2)]=$116;
      var $118=$gfp_addr;
      var $VBR=(($118+156)|0);
      var $119=HEAP32[(($VBR)>>2)];
      var $cmp73=(($119)|0)==0;
      if ($cmp73) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $120=$gfp_addr;
      var $VBR_mean_bitrate_kbps=(($120+168)|0);
      var $121=HEAP32[(($VBR_mean_bitrate_kbps)>>2)];
      var $cmp74=(($121)|0)!=128;
      if ($cmp74) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $122=$gfp_addr;
      var $brate=(($122+96)|0);
      var $123=HEAP32[(($brate)>>2)];
      var $cmp76=(($123)|0)==0;
      if ($cmp76) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $124=$gfp_addr;
      var $VBR_mean_bitrate_kbps78=(($124+168)|0);
      var $125=HEAP32[(($VBR_mean_bitrate_kbps78)>>2)];
      var $126=$gfp_addr;
      var $brate79=(($126+96)|0);
      HEAP32[(($brate79)>>2)]=$125;
      label = 31; break;
    case 31: 
      var $127=$gfp_addr;
      var $VBR81=(($127+156)|0);
      var $128=HEAP32[(($VBR81)>>2)];
      if ((($128)|0)==0 | (($128)|0)==4 | (($128)|0)==1) {
        label = 32; break;
      }
      else {
      label = 33; break;
      }
      
    case 32: 
      label = 34; break;
    case 33: 
      var $129=$gfp_addr;
      var $free_format=(($129+56)|0);
      HEAP32[(($free_format)>>2)]=0;
      label = 34; break;
    case 34: 
      var $130=$gfp_addr;
      var $free_format82=(($130+56)|0);
      var $131=HEAP32[(($free_format82)>>2)];
      var $132=$cfg;
      var $free_format83=(($132+136)|0);
      HEAP32[(($free_format83)>>2)]=$131;
      var $133=$gfp_addr;
      var $VBR84=(($133+156)|0);
      var $134=HEAP32[(($VBR84)>>2)];
      var $cmp85=(($134)|0)==0;
      if ($cmp85) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $135=$gfp_addr;
      var $brate87=(($135+96)|0);
      var $136=HEAP32[(($brate87)>>2)];
      var $cmp88=(($136)|0)==0;
      if ($cmp88) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $137=$gfp_addr;
      var $compression_ratio=(($137+100)|0);
      var $138=HEAPF32[(($compression_ratio)>>2)];
      var $conv=$138;
      var $call90=Math.abs($conv);
      var $call91=Math.abs(0);
      var $cmp92=$call90 > $call91;
      if ($cmp92) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $139=$gfp_addr;
      var $compression_ratio94=(($139+100)|0);
      var $140=HEAPF32[(($compression_ratio94)>>2)];
      var $sub=$140;
      var $conv95=$sub;
      var $call96=Math.abs($conv95);
      var $141=$gfp_addr;
      var $compression_ratio97=(($141+100)|0);
      var $142=HEAPF32[(($compression_ratio97)>>2)];
      var $conv98=$142;
      var $call99=Math.abs($conv98);
      var $mul=($call99)*(9.999999974752427e-7);
      var $cmp100=$call96 <= $mul;
      if ($cmp100) { label = 39; break; } else { label = 40; break; }
    case 38: 
      var $143=$gfp_addr;
      var $compression_ratio102=(($143+100)|0);
      var $144=HEAPF32[(($compression_ratio102)>>2)];
      var $sub103=$144;
      var $conv104=$sub103;
      var $call105=Math.abs($conv104);
      var $call106=Math.abs(0);
      var $mul107=($call106)*(9.999999974752427e-7);
      var $cmp108=$call105 <= $mul107;
      if ($cmp108) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $145=$gfp_addr;
      var $compression_ratio111=(($145+100)|0);
      HEAPF32[(($compression_ratio111)>>2)]=11.024999618530273;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $146=$gfp_addr;
      var $VBR114=(($146+156)|0);
      var $147=HEAP32[(($VBR114)>>2)];
      var $cmp115=(($147)|0)==0;
      if ($cmp115) { label = 42; break; } else { label = 48; break; }
    case 42: 
      var $148=$gfp_addr;
      var $compression_ratio118=(($148+100)|0);
      var $149=HEAPF32[(($compression_ratio118)>>2)];
      var $cmp119=$149 > 0;
      if ($cmp119) { label = 43; break; } else { label = 48; break; }
    case 43: 
      var $150=$gfp_addr;
      var $samplerate_out=(($150+16)|0);
      var $151=HEAP32[(($samplerate_out)>>2)];
      var $cmp122=(($151)|0)==0;
      if ($cmp122) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $152=$gfp_addr;
      var $samplerate_in=(($152+12)|0);
      var $153=HEAP32[(($samplerate_in)>>2)];
      var $conv125=(($153)|0);
      var $mul126=($conv125)*(0.97);
      var $conv127=(($mul126)&-1);
      var $call128=_map2MP3Frequency($conv127);
      var $154=$gfp_addr;
      var $samplerate_out129=(($154+16)|0);
      HEAP32[(($samplerate_out129)>>2)]=$call128;
      label = 45; break;
    case 45: 
      var $155=$gfp_addr;
      var $samplerate_out131=(($155+16)|0);
      var $156=HEAP32[(($samplerate_out131)>>2)];
      var $mul132=((($156<<4))&-1);
      var $157=$cfg;
      var $channels_out133=(($157+56)|0);
      var $158=HEAP32[(($channels_out133)>>2)];
      var $mul134=((($mul132)*($158))&-1);
      var $conv135=(($mul134)|0);
      var $159=$gfp_addr;
      var $compression_ratio136=(($159+100)|0);
      var $160=HEAPF32[(($compression_ratio136)>>2)];
      var $conv137=$160;
      var $mul138=($conv137)*(1000);
      var $div=($conv135)/($mul138);
      var $conv139=(($div)&-1);
      var $161=$gfp_addr;
      var $brate140=(($161+96)|0);
      HEAP32[(($brate140)>>2)]=$conv139;
      var $162=$gfp_addr;
      var $samplerate_out141=(($162+16)|0);
      var $163=HEAP32[(($samplerate_out141)>>2)];
      var $164=$cfg;
      var $version=(($164)|0);
      var $call142=_SmpFrqIndex($163, $version);
      var $165=$cfg;
      var $samplerate_index=(($165+4)|0);
      HEAP32[(($samplerate_index)>>2)]=$call142;
      var $166=$cfg;
      var $free_format143=(($166+136)|0);
      var $167=HEAP32[(($free_format143)>>2)];
      var $tobool144=(($167)|0)!=0;
      if ($tobool144) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $168=$gfp_addr;
      var $brate146=(($168+96)|0);
      var $169=HEAP32[(($brate146)>>2)];
      var $170=$cfg;
      var $version147=(($170)|0);
      var $171=HEAP32[(($version147)>>2)];
      var $172=$gfp_addr;
      var $samplerate_out148=(($172+16)|0);
      var $173=HEAP32[(($samplerate_out148)>>2)];
      var $call149=_FindNearestBitrate($169, $171, $173);
      var $174=$gfp_addr;
      var $brate150=(($174+96)|0);
      HEAP32[(($brate150)>>2)]=$call149;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $175=$gfp_addr;
      var $samplerate_out153=(($175+16)|0);
      var $176=HEAP32[(($samplerate_out153)>>2)];
      var $tobool154=(($176)|0)!=0;
      if ($tobool154) { label = 49; break; } else { label = 74; break; }
    case 49: 
      var $177=$gfp_addr;
      var $samplerate_out156=(($177+16)|0);
      var $178=HEAP32[(($samplerate_out156)>>2)];
      var $cmp157=(($178)|0) < 16000;
      if ($cmp157) { label = 50; break; } else { label = 57; break; }
    case 50: 
      var $179=$gfp_addr;
      var $VBR_mean_bitrate_kbps160=(($179+168)|0);
      var $180=HEAP32[(($VBR_mean_bitrate_kbps160)>>2)];
      var $cmp161=(($180)|0) > 8;
      if ($cmp161) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $181=$gfp_addr;
      var $VBR_mean_bitrate_kbps164=(($181+168)|0);
      var $182=HEAP32[(($VBR_mean_bitrate_kbps164)>>2)];
      var $cond166 = $182;label = 53; break;
    case 52: 
      var $cond166 = 8;label = 53; break;
    case 53: 
      var $cond166;
      var $183=$gfp_addr;
      var $VBR_mean_bitrate_kbps167=(($183+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps167)>>2)]=$cond166;
      var $184=$gfp_addr;
      var $VBR_mean_bitrate_kbps168=(($184+168)|0);
      var $185=HEAP32[(($VBR_mean_bitrate_kbps168)>>2)];
      var $cmp169=(($185)|0) < 64;
      if ($cmp169) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $186=$gfp_addr;
      var $VBR_mean_bitrate_kbps172=(($186+168)|0);
      var $187=HEAP32[(($VBR_mean_bitrate_kbps172)>>2)];
      var $cond175 = $187;label = 56; break;
    case 55: 
      var $cond175 = 64;label = 56; break;
    case 56: 
      var $cond175;
      var $188=$gfp_addr;
      var $VBR_mean_bitrate_kbps176=(($188+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps176)>>2)]=$cond175;
      label = 73; break;
    case 57: 
      var $189=$gfp_addr;
      var $samplerate_out178=(($189+16)|0);
      var $190=HEAP32[(($samplerate_out178)>>2)];
      var $cmp179=(($190)|0) < 32000;
      if ($cmp179) { label = 58; break; } else { label = 65; break; }
    case 58: 
      var $191=$gfp_addr;
      var $VBR_mean_bitrate_kbps182=(($191+168)|0);
      var $192=HEAP32[(($VBR_mean_bitrate_kbps182)>>2)];
      var $cmp183=(($192)|0) > 8;
      if ($cmp183) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $193=$gfp_addr;
      var $VBR_mean_bitrate_kbps186=(($193+168)|0);
      var $194=HEAP32[(($VBR_mean_bitrate_kbps186)>>2)];
      var $cond189 = $194;label = 61; break;
    case 60: 
      var $cond189 = 8;label = 61; break;
    case 61: 
      var $cond189;
      var $195=$gfp_addr;
      var $VBR_mean_bitrate_kbps190=(($195+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps190)>>2)]=$cond189;
      var $196=$gfp_addr;
      var $VBR_mean_bitrate_kbps191=(($196+168)|0);
      var $197=HEAP32[(($VBR_mean_bitrate_kbps191)>>2)];
      var $cmp192=(($197)|0) < 160;
      if ($cmp192) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $198=$gfp_addr;
      var $VBR_mean_bitrate_kbps195=(($198+168)|0);
      var $199=HEAP32[(($VBR_mean_bitrate_kbps195)>>2)];
      var $cond198 = $199;label = 64; break;
    case 63: 
      var $cond198 = 160;label = 64; break;
    case 64: 
      var $cond198;
      var $200=$gfp_addr;
      var $VBR_mean_bitrate_kbps199=(($200+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps199)>>2)]=$cond198;
      label = 72; break;
    case 65: 
      var $201=$gfp_addr;
      var $VBR_mean_bitrate_kbps201=(($201+168)|0);
      var $202=HEAP32[(($VBR_mean_bitrate_kbps201)>>2)];
      var $cmp202=(($202)|0) > 32;
      if ($cmp202) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $203=$gfp_addr;
      var $VBR_mean_bitrate_kbps205=(($203+168)|0);
      var $204=HEAP32[(($VBR_mean_bitrate_kbps205)>>2)];
      var $cond208 = $204;label = 68; break;
    case 67: 
      var $cond208 = 32;label = 68; break;
    case 68: 
      var $cond208;
      var $205=$gfp_addr;
      var $VBR_mean_bitrate_kbps209=(($205+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps209)>>2)]=$cond208;
      var $206=$gfp_addr;
      var $VBR_mean_bitrate_kbps210=(($206+168)|0);
      var $207=HEAP32[(($VBR_mean_bitrate_kbps210)>>2)];
      var $cmp211=(($207)|0) < 320;
      if ($cmp211) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $208=$gfp_addr;
      var $VBR_mean_bitrate_kbps214=(($208+168)|0);
      var $209=HEAP32[(($VBR_mean_bitrate_kbps214)>>2)];
      var $cond217 = $209;label = 71; break;
    case 70: 
      var $cond217 = 320;label = 71; break;
    case 71: 
      var $cond217;
      var $210=$gfp_addr;
      var $VBR_mean_bitrate_kbps218=(($210+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps218)>>2)]=$cond217;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $211=$gfp_addr;
      var $samplerate_out222=(($211+16)|0);
      var $212=HEAP32[(($samplerate_out222)>>2)];
      var $cmp223=(($212)|0)==0;
      if ($cmp223) { label = 75; break; } else { label = 93; break; }
    case 75: 
      var $213=$gfp_addr;
      var $VBR226=(($213+156)|0);
      var $214=HEAP32[(($VBR226)>>2)];
      var $cmp227=(($214)|0)==1;
      if ($cmp227) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $215=$gfp_addr;
      var $VBR229=(($215+156)|0);
      var $216=HEAP32[(($VBR229)>>2)];
      var $cmp230=(($216)|0)==4;
      if ($cmp230) { label = 77; break; } else { label = 93; break; }
    case 77: 
      var $217=$gfp_addr;
      var $VBR_q=(($217+164)|0);
      var $218=HEAP32[(($VBR_q)>>2)];
      var $conv233=(($218)|0);
      var $219=$gfp_addr;
      var $VBR_q_frac=(($219+160)|0);
      var $220=HEAPF32[(($VBR_q_frac)>>2)];
      var $add=($conv233)+($220);
      $qval=$add;
      $i=2;
      label = 78; break;
    case 78: 
      var $221=$i;
      var $cmp234=(($221)|0) < 9;
      if ($cmp234) { label = 79; break; } else { label = 92; break; }
    case 79: 
      var $222=$gfp_addr;
      var $samplerate_in236=(($222+12)|0);
      var $223=HEAP32[(($samplerate_in236)>>2)];
      var $224=$i;
      var $arrayidx=((5317756+($224)*(24))|0);
      var $sr_a=(($arrayidx)|0);
      var $225=HEAP32[(($sr_a)>>2)];
      var $cmp237=(($223)|0)==(($225)|0);
      if ($cmp237) { label = 80; break; } else { label = 83; break; }
    case 80: 
      var $226=$qval;
      var $227=$i;
      var $arrayidx240=((5317756+($227)*(24))|0);
      var $qa=(($arrayidx240+4)|0);
      var $228=HEAPF32[(($qa)>>2)];
      var $cmp241=$226 < $228;
      if ($cmp241) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $229=$qval;
      var $230=$i;
      var $arrayidx244=((5317756+($230)*(24))|0);
      var $qa245=(($arrayidx244+4)|0);
      var $231=HEAPF32[(($qa245)>>2)];
      var $div246=($229)/($231);
      var $conv247=$div246;
      $d=$conv247;
      var $232=$d;
      var $233=$i;
      var $arrayidx248=((5317756+($233)*(24))|0);
      var $ta=(($arrayidx248+12)|0);
      var $234=HEAPF32[(($ta)>>2)];
      var $conv249=$234;
      var $mul250=($232)*($conv249);
      $d=$mul250;
      var $235=$d;
      var $conv251=(($235)&-1);
      var $236=$gfp_addr;
      var $VBR_q252=(($236+164)|0);
      HEAP32[(($VBR_q252)>>2)]=$conv251;
      var $237=$d;
      var $238=$gfp_addr;
      var $VBR_q253=(($238+164)|0);
      var $239=HEAP32[(($VBR_q253)>>2)];
      var $conv254=(($239)|0);
      var $sub255=($237)-($conv254);
      var $conv256=$sub255;
      var $240=$gfp_addr;
      var $VBR_q_frac257=(($240+160)|0);
      HEAPF32[(($VBR_q_frac257)>>2)]=$conv256;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $241=$gfp_addr;
      var $samplerate_in260=(($241+12)|0);
      var $242=HEAP32[(($samplerate_in260)>>2)];
      var $243=$i;
      var $arrayidx261=((5317756+($243)*(24))|0);
      var $sr_a262=(($arrayidx261)|0);
      var $244=HEAP32[(($sr_a262)>>2)];
      var $cmp263=(($242)|0) >= (($244)|0);
      if ($cmp263) { label = 84; break; } else { label = 90; break; }
    case 84: 
      var $245=$i;
      var $arrayidx266=((5317756+($245)*(24))|0);
      var $qa267=(($arrayidx266+4)|0);
      var $246=HEAPF32[(($qa267)>>2)];
      var $247=$qval;
      var $cmp268=$246 <= $247;
      if ($cmp268) { label = 85; break; } else { label = 89; break; }
    case 85: 
      var $248=$qval;
      var $249=$i;
      var $arrayidx271=((5317756+($249)*(24))|0);
      var $qb=(($arrayidx271+8)|0);
      var $250=HEAPF32[(($qb)>>2)];
      var $cmp272=$248 < $250;
      if ($cmp272) { label = 86; break; } else { label = 89; break; }
    case 86: 
      var $251=$i;
      var $arrayidx275=((5317756+($251)*(24))|0);
      var $qb276=(($arrayidx275+8)|0);
      var $252=HEAPF32[(($qb276)>>2)];
      var $253=$i;
      var $arrayidx277=((5317756+($253)*(24))|0);
      var $qa278=(($arrayidx277+4)|0);
      var $254=HEAPF32[(($qa278)>>2)];
      var $sub279=($252)-($254);
      $q_=$sub279;
      var $255=$i;
      var $arrayidx280=((5317756+($255)*(24))|0);
      var $tb=(($arrayidx280+16)|0);
      var $256=HEAPF32[(($tb)>>2)];
      var $257=$i;
      var $arrayidx281=((5317756+($257)*(24))|0);
      var $ta282=(($arrayidx281+12)|0);
      var $258=HEAPF32[(($ta282)>>2)];
      var $sub283=($256)-($258);
      $t_=$sub283;
      var $259=$i;
      var $arrayidx285=((5317756+($259)*(24))|0);
      var $ta286=(($arrayidx285+12)|0);
      var $260=HEAPF32[(($ta286)>>2)];
      var $261=$t_;
      var $262=$qval;
      var $263=$i;
      var $arrayidx287=((5317756+($263)*(24))|0);
      var $qa288=(($arrayidx287+4)|0);
      var $264=HEAPF32[(($qa288)>>2)];
      var $sub289=($262)-($264);
      var $mul290=($261)*($sub289);
      var $265=$q_;
      var $div291=($mul290)/($265);
      var $add292=($260)+($div291);
      var $conv293=$add292;
      $d284=$conv293;
      var $266=$d284;
      var $conv294=(($266)&-1);
      var $267=$gfp_addr;
      var $VBR_q295=(($267+164)|0);
      HEAP32[(($VBR_q295)>>2)]=$conv294;
      var $268=$d284;
      var $269=$gfp_addr;
      var $VBR_q296=(($269+164)|0);
      var $270=HEAP32[(($VBR_q296)>>2)];
      var $conv297=(($270)|0);
      var $sub298=($268)-($conv297);
      var $conv299=$sub298;
      var $271=$gfp_addr;
      var $VBR_q_frac300=(($271+160)|0);
      HEAPF32[(($VBR_q_frac300)>>2)]=$conv299;
      var $272=$i;
      var $arrayidx301=((5317756+($272)*(24))|0);
      var $sr_a302=(($arrayidx301)|0);
      var $273=HEAP32[(($sr_a302)>>2)];
      var $274=$gfp_addr;
      var $samplerate_out303=(($274+16)|0);
      HEAP32[(($samplerate_out303)>>2)]=$273;
      var $275=$gfp_addr;
      var $lowpassfreq=(($275+184)|0);
      var $276=HEAP32[(($lowpassfreq)>>2)];
      var $cmp304=(($276)|0)==0;
      if ($cmp304) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $277=$gfp_addr;
      var $lowpassfreq307=(($277+184)|0);
      HEAP32[(($lowpassfreq307)>>2)]=-1;
      label = 88; break;
    case 88: 
      label = 92; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $278=$i;
      var $inc=((($278)+(1))|0);
      $i=$inc;
      label = 78; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $279=$gfp_addr;
      var $lowpassfreq312=(($279+184)|0);
      var $280=HEAP32[(($lowpassfreq312)>>2)];
      var $cmp313=(($280)|0)==0;
      if ($cmp313) { label = 94; break; } else { label = 117; break; }
    case 94: 
      (HEAPF64[(tempDoublePtr)>>3]=16000,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $281=$gfp_addr;
      var $VBR316=(($281+156)|0);
      var $282=HEAP32[(($VBR316)>>2)];
      if ((($282)|0)==0) {
        label = 95; break;
      }
      else if ((($282)|0)==3) {
        label = 96; break;
      }
      else if ((($282)|0)==2) {
        label = 97; break;
      }
      else if ((($282)|0)==4 | (($282)|0)==1) {
        label = 102; break;
      }
      else {
      label = 107; break;
      }
      
    case 95: 
      var $283=$gfp_addr;
      var $brate318=(($283+96)|0);
      var $284=HEAP32[(($brate318)>>2)];
      _optimum_bandwidth($lowpass, $highpass, $284);
      label = 112; break;
    case 96: 
      var $285=$gfp_addr;
      var $VBR_mean_bitrate_kbps320=(($285+168)|0);
      var $286=HEAP32[(($VBR_mean_bitrate_kbps320)>>2)];
      _optimum_bandwidth($lowpass, $highpass, $286);
      label = 112; break;
    case 97: 
      var $287=$gfp_addr;
      var $VBR_q322=(($287+164)|0);
      var $288=HEAP32[(($VBR_q322)>>2)];
      var $cmp323=0 <= (($288)|0);
      if ($cmp323) { label = 98; break; } else { label = 100; break; }
    case 98: 
      var $289=$gfp_addr;
      var $VBR_q326=(($289+164)|0);
      var $290=HEAP32[(($VBR_q326)>>2)];
      var $cmp327=(($290)|0) <= 9;
      if ($cmp327) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $291=$gfp_addr;
      var $VBR_q330=(($291+164)|0);
      var $292=HEAP32[(($VBR_q330)>>2)];
      var $arrayidx331=((5317696+($292<<2))|0);
      var $293=HEAP32[(($arrayidx331)>>2)];
      var $conv332=(($293)|0);
      $a=$conv332;
      var $294=$gfp_addr;
      var $VBR_q333=(($294+164)|0);
      var $295=HEAP32[(($VBR_q333)>>2)];
      var $add334=((($295)+(1))|0);
      var $arrayidx335=((5317696+($add334<<2))|0);
      var $296=HEAP32[(($arrayidx335)>>2)];
      var $conv336=(($296)|0);
      $b=$conv336;
      var $297=$gfp_addr;
      var $VBR_q_frac337=(($297+160)|0);
      var $298=HEAPF32[(($VBR_q_frac337)>>2)];
      var $conv338=$298;
      $m=$conv338;
      var $299=$a;
      var $300=$b;
      var $301=$m;
      var $call339=_linear_int($299, $300, $301);
      (HEAPF64[(tempDoublePtr)>>3]=$call339,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 101; break;
    case 100: 
      (HEAPF64[(tempDoublePtr)>>3]=19500,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 101; break;
    case 101: 
      label = 112; break;
    case 102: 
      var $302=$gfp_addr;
      var $VBR_q343=(($302+164)|0);
      var $303=HEAP32[(($VBR_q343)>>2)];
      var $cmp344=0 <= (($303)|0);
      if ($cmp344) { label = 103; break; } else { label = 105; break; }
    case 103: 
      var $304=$gfp_addr;
      var $VBR_q347=(($304+164)|0);
      var $305=HEAP32[(($VBR_q347)>>2)];
      var $cmp348=(($305)|0) <= 9;
      if ($cmp348) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $306=$gfp_addr;
      var $VBR_q352=(($306+164)|0);
      var $307=HEAP32[(($VBR_q352)>>2)];
      var $arrayidx353=((5317652+($307<<2))|0);
      var $308=HEAP32[(($arrayidx353)>>2)];
      var $conv354=(($308)|0);
      $a351=$conv354;
      var $309=$gfp_addr;
      var $VBR_q356=(($309+164)|0);
      var $310=HEAP32[(($VBR_q356)>>2)];
      var $add357=((($310)+(1))|0);
      var $arrayidx358=((5317652+($add357<<2))|0);
      var $311=HEAP32[(($arrayidx358)>>2)];
      var $conv359=(($311)|0);
      $b355=$conv359;
      var $312=$gfp_addr;
      var $VBR_q_frac361=(($312+160)|0);
      var $313=HEAPF32[(($VBR_q_frac361)>>2)];
      var $conv362=$313;
      $m360=$conv362;
      var $314=$a351;
      var $315=$b355;
      var $316=$m360;
      var $call363=_linear_int($314, $315, $316);
      (HEAPF64[(tempDoublePtr)>>3]=$call363,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 106; break;
    case 105: 
      (HEAPF64[(tempDoublePtr)>>3]=21500,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 106; break;
    case 106: 
      label = 112; break;
    case 107: 
      var $317=$gfp_addr;
      var $VBR_q367=(($317+164)|0);
      var $318=HEAP32[(($VBR_q367)>>2)];
      var $cmp368=0 <= (($318)|0);
      if ($cmp368) { label = 108; break; } else { label = 110; break; }
    case 108: 
      var $319=$gfp_addr;
      var $VBR_q371=(($319+164)|0);
      var $320=HEAP32[(($VBR_q371)>>2)];
      var $cmp372=(($320)|0) <= 9;
      if ($cmp372) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $321=$gfp_addr;
      var $VBR_q376=(($321+164)|0);
      var $322=HEAP32[(($VBR_q376)>>2)];
      var $arrayidx377=((5317608+($322<<2))|0);
      var $323=HEAP32[(($arrayidx377)>>2)];
      var $conv378=(($323)|0);
      $a375=$conv378;
      var $324=$gfp_addr;
      var $VBR_q380=(($324+164)|0);
      var $325=HEAP32[(($VBR_q380)>>2)];
      var $add381=((($325)+(1))|0);
      var $arrayidx382=((5317608+($add381<<2))|0);
      var $326=HEAP32[(($arrayidx382)>>2)];
      var $conv383=(($326)|0);
      $b379=$conv383;
      var $327=$gfp_addr;
      var $VBR_q_frac385=(($327+160)|0);
      var $328=HEAPF32[(($VBR_q_frac385)>>2)];
      var $conv386=$328;
      $m384=$conv386;
      var $329=$a375;
      var $330=$b379;
      var $331=$m384;
      var $call387=_linear_int($329, $330, $331);
      (HEAPF64[(tempDoublePtr)>>3]=$call387,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 111; break;
    case 110: 
      (HEAPF64[(tempDoublePtr)>>3]=19500,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      var $332=$gfp_addr;
      var $mode391=(($332+48)|0);
      var $333=HEAP32[(($mode391)>>2)];
      var $cmp392=(($333)|0)==3;
      if ($cmp392) { label = 113; break; } else { label = 116; break; }
    case 113: 
      var $334=$gfp_addr;
      var $VBR395=(($334+156)|0);
      var $335=HEAP32[(($VBR395)>>2)];
      var $cmp396=(($335)|0)==0;
      if ($cmp396) { label = 115; break; } else { label = 114; break; }
    case 114: 
      var $336=$gfp_addr;
      var $VBR399=(($336+156)|0);
      var $337=HEAP32[(($VBR399)>>2)];
      var $cmp400=(($337)|0)==3;
      if ($cmp400) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $338=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($lowpass)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($lowpass)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul403=($338)*(1.5);
      (HEAPF64[(tempDoublePtr)>>3]=$mul403,HEAP32[(($lowpass)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($lowpass)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 116; break;
    case 116: 
      var $339=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($lowpass)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($lowpass)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $conv405=(($339)&-1);
      var $340=$gfp_addr;
      var $lowpassfreq406=(($340+184)|0);
      HEAP32[(($lowpassfreq406)>>2)]=$conv405;
      label = 117; break;
    case 117: 
      var $341=$gfp_addr;
      var $samplerate_out408=(($341+16)|0);
      var $342=HEAP32[(($samplerate_out408)>>2)];
      var $cmp409=(($342)|0)==0;
      if ($cmp409) { label = 118; break; } else { label = 121; break; }
    case 118: 
      var $343=$gfp_addr;
      var $lowpassfreq412=(($343+184)|0);
      var $344=HEAP32[(($lowpassfreq412)>>2)];
      var $mul413=((($344<<1))&-1);
      var $345=$gfp_addr;
      var $samplerate_in414=(($345+12)|0);
      var $346=HEAP32[(($samplerate_in414)>>2)];
      var $cmp415=(($mul413)|0) > (($346)|0);
      if ($cmp415) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $347=$gfp_addr;
      var $samplerate_in418=(($347+12)|0);
      var $348=HEAP32[(($samplerate_in418)>>2)];
      var $div419=((((($348)|0))/(2))&-1);
      var $349=$gfp_addr;
      var $lowpassfreq420=(($349+184)|0);
      HEAP32[(($lowpassfreq420)>>2)]=$div419;
      label = 120; break;
    case 120: 
      var $350=$gfp_addr;
      var $lowpassfreq422=(($350+184)|0);
      var $351=HEAP32[(($lowpassfreq422)>>2)];
      var $352=$gfp_addr;
      var $samplerate_in423=(($352+12)|0);
      var $353=HEAP32[(($samplerate_in423)>>2)];
      var $call424=_optimum_samplefreq($351, $353);
      var $354=$gfp_addr;
      var $samplerate_out425=(($354+16)|0);
      HEAP32[(($samplerate_out425)>>2)]=$call424;
      label = 121; break;
    case 121: 
      var $355=$gfp_addr;
      var $VBR427=(($355+156)|0);
      var $356=HEAP32[(($VBR427)>>2)];
      var $cmp428=(($356)|0)==1;
      if ($cmp428) { label = 123; break; } else { label = 122; break; }
    case 122: 
      var $357=$gfp_addr;
      var $VBR431=(($357+156)|0);
      var $358=HEAP32[(($VBR431)>>2)];
      var $cmp432=(($358)|0)==4;
      if ($cmp432) { label = 123; break; } else { label = 127; break; }
    case 123: 
      var $359=$gfp_addr;
      var $lowpassfreq435=(($359+184)|0);
      var $360=HEAP32[(($lowpassfreq435)>>2)];
      var $cmp436=24000 < (($360)|0);
      if ($cmp436) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $cond442 = 24000;label = 126; break;
    case 125: 
      var $361=$gfp_addr;
      var $lowpassfreq440=(($361+184)|0);
      var $362=HEAP32[(($lowpassfreq440)>>2)];
      var $cond442 = $362;label = 126; break;
    case 126: 
      var $cond442;
      var $363=$gfp_addr;
      var $lowpassfreq443=(($363+184)|0);
      HEAP32[(($lowpassfreq443)>>2)]=$cond442;
      label = 131; break;
    case 127: 
      var $364=$gfp_addr;
      var $lowpassfreq445=(($364+184)|0);
      var $365=HEAP32[(($lowpassfreq445)>>2)];
      var $cmp446=20500 < (($365)|0);
      if ($cmp446) { label = 128; break; } else { label = 129; break; }
    case 128: 
      var $cond452 = 20500;label = 130; break;
    case 129: 
      var $366=$gfp_addr;
      var $lowpassfreq450=(($366+184)|0);
      var $367=HEAP32[(($lowpassfreq450)>>2)];
      var $cond452 = $367;label = 130; break;
    case 130: 
      var $cond452;
      var $368=$gfp_addr;
      var $lowpassfreq453=(($368+184)|0);
      HEAP32[(($lowpassfreq453)>>2)]=$cond452;
      label = 131; break;
    case 131: 
      var $369=$gfp_addr;
      var $samplerate_out455=(($369+16)|0);
      var $370=HEAP32[(($samplerate_out455)>>2)];
      var $div456=((((($370)|0))/(2))&-1);
      var $371=$gfp_addr;
      var $lowpassfreq457=(($371+184)|0);
      var $372=HEAP32[(($lowpassfreq457)>>2)];
      var $cmp458=(($div456)|0) < (($372)|0);
      if ($cmp458) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $373=$gfp_addr;
      var $samplerate_out461=(($373+16)|0);
      var $374=HEAP32[(($samplerate_out461)>>2)];
      var $div462=((((($374)|0))/(2))&-1);
      var $cond466 = $div462;label = 134; break;
    case 133: 
      var $375=$gfp_addr;
      var $lowpassfreq464=(($375+184)|0);
      var $376=HEAP32[(($lowpassfreq464)>>2)];
      var $cond466 = $376;label = 134; break;
    case 134: 
      var $cond466;
      var $377=$gfp_addr;
      var $lowpassfreq467=(($377+184)|0);
      HEAP32[(($lowpassfreq467)>>2)]=$cond466;
      var $378=$gfp_addr;
      var $VBR468=(($378+156)|0);
      var $379=HEAP32[(($VBR468)>>2)];
      var $cmp469=(($379)|0)==0;
      if ($cmp469) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $380=$gfp_addr;
      var $samplerate_out472=(($380+16)|0);
      var $381=HEAP32[(($samplerate_out472)>>2)];
      var $mul473=((($381<<4))&-1);
      var $382=$cfg;
      var $channels_out474=(($382+56)|0);
      var $383=HEAP32[(($channels_out474)>>2)];
      var $mul475=((($mul473)*($383))&-1);
      var $conv476=(($mul475)|0);
      var $384=$gfp_addr;
      var $brate477=(($384+96)|0);
      var $385=HEAP32[(($brate477)>>2)];
      var $conv478=(($385)|0);
      var $mul479=($conv478)*(1000);
      var $div480=($conv476)/($mul479);
      var $conv481=$div480;
      var $386=$gfp_addr;
      var $compression_ratio482=(($386+100)|0);
      HEAPF32[(($compression_ratio482)>>2)]=$conv481;
      label = 136; break;
    case 136: 
      var $387=$gfp_addr;
      var $VBR484=(($387+156)|0);
      var $388=HEAP32[(($VBR484)>>2)];
      var $cmp485=(($388)|0)==3;
      if ($cmp485) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $389=$gfp_addr;
      var $samplerate_out488=(($389+16)|0);
      var $390=HEAP32[(($samplerate_out488)>>2)];
      var $mul489=((($390<<4))&-1);
      var $391=$cfg;
      var $channels_out490=(($391+56)|0);
      var $392=HEAP32[(($channels_out490)>>2)];
      var $mul491=((($mul489)*($392))&-1);
      var $conv492=(($mul491)|0);
      var $393=$gfp_addr;
      var $VBR_mean_bitrate_kbps493=(($393+168)|0);
      var $394=HEAP32[(($VBR_mean_bitrate_kbps493)>>2)];
      var $conv494=(($394)|0);
      var $mul495=($conv494)*(1000);
      var $div496=($conv492)/($mul495);
      var $conv497=$div496;
      var $395=$gfp_addr;
      var $compression_ratio498=(($395+100)|0);
      HEAPF32[(($compression_ratio498)>>2)]=$conv497;
      label = 138; break;
    case 138: 
      var $396=$gfp_addr;
      var $write_lame_tag500=(($396+36)|0);
      var $397=HEAP32[(($write_lame_tag500)>>2)];
      var $tobool501=(($397)|0)!=0;
      if ($tobool501) { label = 140; break; } else { label = 139; break; }
    case 139: 
      var $398=$gfp_addr;
      var $findReplayGain=(($398+60)|0);
      HEAP32[(($findReplayGain)>>2)]=0;
      var $399=$gfp_addr;
      var $decode_on_the_fly=(($399+64)|0);
      HEAP32[(($decode_on_the_fly)>>2)]=0;
      var $400=$cfg;
      var $findPeakSample=(($400+116)|0);
      HEAP32[(($findPeakSample)>>2)]=0;
      label = 140; break;
    case 140: 
      var $401=$gfp_addr;
      var $findReplayGain504=(($401+60)|0);
      var $402=HEAP32[(($findReplayGain504)>>2)];
      var $403=$cfg;
      var $findReplayGain505=(($403+112)|0);
      HEAP32[(($findReplayGain505)>>2)]=$402;
      var $404=$gfp_addr;
      var $decode_on_the_fly506=(($404+64)|0);
      var $405=HEAP32[(($decode_on_the_fly506)>>2)];
      var $406=$cfg;
      var $decode_on_the_fly507=(($406+120)|0);
      HEAP32[(($decode_on_the_fly507)>>2)]=$405;
      var $407=$cfg;
      var $decode_on_the_fly508=(($407+120)|0);
      var $408=HEAP32[(($decode_on_the_fly508)>>2)];
      var $tobool509=(($408)|0)!=0;
      if ($tobool509) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $409=$cfg;
      var $findPeakSample511=(($409+116)|0);
      HEAP32[(($findPeakSample511)>>2)]=1;
      label = 142; break;
    case 142: 
      var $410=$cfg;
      var $findReplayGain513=(($410+112)|0);
      var $411=HEAP32[(($findReplayGain513)>>2)];
      var $tobool514=(($411)|0)!=0;
      if ($tobool514) { label = 143; break; } else { label = 146; break; }
    case 143: 
      var $412=$gfc;
      var $sv_rpg516=(($412+85672)|0);
      var $rgdata517=(($sv_rpg516)|0);
      var $413=HEAP32[(($rgdata517)>>2)];
      var $414=$gfp_addr;
      var $samplerate_out518=(($414+16)|0);
      var $415=HEAP32[(($samplerate_out518)>>2)];
      var $call519=_InitGainAnalysis($413, $415);
      var $cmp520=(($call519)|0)==0;
      if ($cmp520) { label = 144; break; } else { label = 145; break; }
    case 144: 
      var $416=$gfc;
      _freegfc($416);
      var $417=$gfp_addr;
      var $internal_flags523=(($417+288)|0);
      HEAP32[(($internal_flags523)>>2)]=0;
      $retval=-6;
      label = 296; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $418=$cfg;
      var $decode_on_the_fly526=(($418+120)|0);
      var $419=HEAP32[(($decode_on_the_fly526)>>2)];
      var $tobool527=(($419)|0)!=0;
      if ($tobool527) { label = 147; break; } else { label = 151; break; }
    case 147: 
      var $420=$gfp_addr;
      var $decode_only=(($420+40)|0);
      var $421=HEAP32[(($decode_only)>>2)];
      var $tobool529=(($421)|0)!=0;
      if ($tobool529) { label = 151; break; } else { label = 148; break; }
    case 148: 
      var $422=$gfc;
      var $hip=(($422+85804)|0);
      var $423=HEAP32[(($hip)>>2)];
      var $tobool531=(($423)|0)!=0;
      if ($tobool531) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $424=$gfc;
      var $hip533=(($424+85804)|0);
      var $425=HEAP32[(($hip533)>>2)];
      var $call534=_hip_decode_exit($425);
      label = 150; break;
    case 150: 
      var $call536=_hip_decode_init();
      var $426=$gfc;
      var $hip537=(($426+85804)|0);
      HEAP32[(($hip537)>>2)]=$call536;
      var $427=$gfc;
      var $hip538=(($427+85804)|0);
      var $428=HEAP32[(($hip538)>>2)];
      var $429=$gfp_addr;
      var $report539=(($429+272)|0);
      var $errorf540=(($report539+8)|0);
      var $430=HEAP32[(($errorf540)>>2)];
      _hip_set_errorf($428, $430);
      var $431=$gfc;
      var $hip541=(($431+85804)|0);
      var $432=HEAP32[(($hip541)>>2)];
      var $433=$gfp_addr;
      var $report542=(($433+272)|0);
      var $debugf543=(($report542+4)|0);
      var $434=HEAP32[(($debugf543)>>2)];
      _hip_set_debugf($432, $434);
      var $435=$gfc;
      var $hip544=(($435+85804)|0);
      var $436=HEAP32[(($hip544)>>2)];
      var $437=$gfp_addr;
      var $report545=(($437+272)|0);
      var $msgf546=(($report545)|0);
      var $438=HEAP32[(($msgf546)>>2)];
      _hip_set_msgf($436, $438);
      label = 151; break;
    case 151: 
      var $439=$gfp_addr;
      var $disable_reservoir=(($439+128)|0);
      var $440=HEAP32[(($disable_reservoir)>>2)];
      var $441=$cfg;
      var $disable_reservoir548=(($441+128)|0);
      HEAP32[(($disable_reservoir548)>>2)]=$440;
      var $442=$gfp_addr;
      var $lowpassfreq549=(($442+184)|0);
      var $443=HEAP32[(($lowpassfreq549)>>2)];
      var $444=$cfg;
      var $lowpassfreq550=(($444+36)|0);
      HEAP32[(($lowpassfreq550)>>2)]=$443;
      var $445=$gfp_addr;
      var $highpassfreq=(($445+188)|0);
      var $446=HEAP32[(($highpassfreq)>>2)];
      var $447=$cfg;
      var $highpassfreq551=(($447+40)|0);
      HEAP32[(($highpassfreq551)>>2)]=$446;
      var $448=$gfp_addr;
      var $samplerate_in552=(($448+12)|0);
      var $449=HEAP32[(($samplerate_in552)>>2)];
      var $450=$cfg;
      var $samplerate_in553=(($450+44)|0);
      HEAP32[(($samplerate_in553)>>2)]=$449;
      var $451=$gfp_addr;
      var $samplerate_out554=(($451+16)|0);
      var $452=HEAP32[(($samplerate_out554)>>2)];
      var $453=$cfg;
      var $samplerate_out555=(($453+48)|0);
      HEAP32[(($samplerate_out555)>>2)]=$452;
      var $454=$cfg;
      var $samplerate_out556=(($454+48)|0);
      var $455=HEAP32[(($samplerate_out556)>>2)];
      var $cmp557=(($455)|0) <= 24000;
      var $cond559=$cmp557 ? 1 : 2;
      var $456=$cfg;
      var $mode_gr=(($456+60)|0);
      HEAP32[(($mode_gr)>>2)]=$cond559;
      var $457=$gfc;
      var $ov_enc=(($457+84036)|0);
      var $encoder_delay=(($ov_enc+720)|0);
      HEAP32[(($encoder_delay)>>2)]=576;
      var $458=$gfp_addr;
      var $VBR560=(($458+156)|0);
      var $459=HEAP32[(($VBR560)>>2)];
      if ((($459)|0)==1 | (($459)|0)==2 | (($459)|0)==4) {
        label = 152; break;
      }
      else if ((($459)|0)==3) {
        label = 153; break;
      }
      else {
      label = 154; break;
      }
      
    case 152: 
      var $460=$gfp_addr;
      var $VBR_q562=(($460+164)|0);
      var $461=HEAP32[(($VBR_q562)>>2)];
      var $arrayidx563=((5317972+($461<<2))|0);
      var $462=HEAPF32[(($arrayidx563)>>2)];
      var $463=$gfp_addr;
      var $compression_ratio564=(($463+100)|0);
      HEAPF32[(($compression_ratio564)>>2)]=$462;
      label = 155; break;
    case 153: 
      var $464=$cfg;
      var $samplerate_out566=(($464+48)|0);
      var $465=HEAP32[(($samplerate_out566)>>2)];
      var $mul567=((($465<<4))&-1);
      var $466=$cfg;
      var $channels_out568=(($466+56)|0);
      var $467=HEAP32[(($channels_out568)>>2)];
      var $mul569=((($mul567)*($467))&-1);
      var $conv570=(($mul569)|0);
      var $468=$gfp_addr;
      var $VBR_mean_bitrate_kbps571=(($468+168)|0);
      var $469=HEAP32[(($VBR_mean_bitrate_kbps571)>>2)];
      var $conv572=(($469)|0);
      var $mul573=($conv572)*(1000);
      var $div574=($conv570)/($mul573);
      var $conv575=$div574;
      var $470=$gfp_addr;
      var $compression_ratio576=(($470+100)|0);
      HEAPF32[(($compression_ratio576)>>2)]=$conv575;
      label = 155; break;
    case 154: 
      var $471=$cfg;
      var $samplerate_out578=(($471+48)|0);
      var $472=HEAP32[(($samplerate_out578)>>2)];
      var $mul579=((($472<<4))&-1);
      var $473=$cfg;
      var $channels_out580=(($473+56)|0);
      var $474=HEAP32[(($channels_out580)>>2)];
      var $mul581=((($mul579)*($474))&-1);
      var $conv582=(($mul581)|0);
      var $475=$gfp_addr;
      var $brate583=(($475+96)|0);
      var $476=HEAP32[(($brate583)>>2)];
      var $conv584=(($476)|0);
      var $mul585=($conv584)*(1000);
      var $div586=($conv582)/($mul585);
      var $conv587=$div586;
      var $477=$gfp_addr;
      var $compression_ratio588=(($477+100)|0);
      HEAPF32[(($compression_ratio588)>>2)]=$conv587;
      label = 155; break;
    case 155: 
      var $478=$gfp_addr;
      var $mode590=(($478+48)|0);
      var $479=HEAP32[(($mode590)>>2)];
      var $cmp591=(($479)|0)==4;
      if ($cmp591) { label = 156; break; } else { label = 157; break; }
    case 156: 
      var $480=$gfp_addr;
      var $mode594=(($480+48)|0);
      HEAP32[(($mode594)>>2)]=1;
      label = 157; break;
    case 157: 
      var $481=$gfp_addr;
      var $mode596=(($481+48)|0);
      var $482=HEAP32[(($mode596)>>2)];
      var $483=$cfg;
      var $mode597=(($483+164)|0);
      HEAP32[(($mode597)>>2)]=$482;
      var $484=$cfg;
      var $highpassfreq598=(($484+40)|0);
      var $485=HEAP32[(($highpassfreq598)>>2)];
      var $cmp599=(($485)|0) > 0;
      if ($cmp599) { label = 158; break; } else { label = 162; break; }
    case 158: 
      var $486=$cfg;
      var $highpassfreq602=(($486+40)|0);
      var $487=HEAP32[(($highpassfreq602)>>2)];
      var $conv603=(($487)|0);
      var $mul604=($conv603)*(2);
      var $conv605=$mul604;
      var $488=$cfg;
      var $highpass1=(($488+240)|0);
      HEAPF32[(($highpass1)>>2)]=$conv605;
      var $489=$gfp_addr;
      var $highpasswidth=(($489+196)|0);
      var $490=HEAP32[(($highpasswidth)>>2)];
      var $cmp606=(($490)|0) >= 0;
      if ($cmp606) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $491=$cfg;
      var $highpassfreq609=(($491+40)|0);
      var $492=HEAP32[(($highpassfreq609)>>2)];
      var $493=$gfp_addr;
      var $highpasswidth610=(($493+196)|0);
      var $494=HEAP32[(($highpasswidth610)>>2)];
      var $add611=((($492)+($494))|0);
      var $conv612=(($add611)|0);
      var $mul613=($conv612)*(2);
      var $conv614=$mul613;
      var $495=$cfg;
      var $highpass2=(($495+244)|0);
      HEAPF32[(($highpass2)>>2)]=$conv614;
      label = 161; break;
    case 160: 
      var $496=$cfg;
      var $highpassfreq616=(($496+40)|0);
      var $497=HEAP32[(($highpassfreq616)>>2)];
      var $conv617=(($497)|0);
      var $mul618=($conv617)*(2);
      var $conv619=$mul618;
      var $498=$cfg;
      var $highpass2620=(($498+244)|0);
      HEAPF32[(($highpass2620)>>2)]=$conv619;
      label = 161; break;
    case 161: 
      var $499=$cfg;
      var $samplerate_out622=(($499+48)|0);
      var $500=HEAP32[(($samplerate_out622)>>2)];
      var $conv623=(($500)|0);
      var $501=$cfg;
      var $highpass1624=(($501+240)|0);
      var $502=HEAPF32[(($highpass1624)>>2)];
      var $div625=($502)/($conv623);
      HEAPF32[(($highpass1624)>>2)]=$div625;
      var $503=$cfg;
      var $samplerate_out626=(($503+48)|0);
      var $504=HEAP32[(($samplerate_out626)>>2)];
      var $conv627=(($504)|0);
      var $505=$cfg;
      var $highpass2628=(($505+244)|0);
      var $506=HEAPF32[(($highpass2628)>>2)];
      var $div629=($506)/($conv627);
      HEAPF32[(($highpass2628)>>2)]=$div629;
      label = 163; break;
    case 162: 
      var $507=$cfg;
      var $highpass1631=(($507+240)|0);
      HEAPF32[(($highpass1631)>>2)]=0;
      var $508=$cfg;
      var $highpass2632=(($508+244)|0);
      HEAPF32[(($highpass2632)>>2)]=0;
      label = 163; break;
    case 163: 
      var $509=$cfg;
      var $lowpass1=(($509+232)|0);
      HEAPF32[(($lowpass1)>>2)]=0;
      var $510=$cfg;
      var $lowpass2=(($510+236)|0);
      HEAPF32[(($lowpass2)>>2)]=0;
      var $511=$cfg;
      var $lowpassfreq634=(($511+36)|0);
      var $512=HEAP32[(($lowpassfreq634)>>2)];
      var $cmp635=(($512)|0) > 0;
      if ($cmp635) { label = 164; break; } else { label = 171; break; }
    case 164: 
      var $513=$cfg;
      var $lowpassfreq638=(($513+36)|0);
      var $514=HEAP32[(($lowpassfreq638)>>2)];
      var $515=$cfg;
      var $samplerate_out639=(($515+48)|0);
      var $516=HEAP32[(($samplerate_out639)>>2)];
      var $div640=((((($516)|0))/(2))&-1);
      var $cmp641=(($514)|0) < (($div640)|0);
      if ($cmp641) { label = 165; break; } else { label = 171; break; }
    case 165: 
      var $517=$cfg;
      var $lowpassfreq644=(($517+36)|0);
      var $518=HEAP32[(($lowpassfreq644)>>2)];
      var $conv645=(($518)|0);
      var $mul646=($conv645)*(2);
      var $conv647=$mul646;
      var $519=$cfg;
      var $lowpass2648=(($519+236)|0);
      HEAPF32[(($lowpass2648)>>2)]=$conv647;
      var $520=$gfp_addr;
      var $lowpasswidth=(($520+192)|0);
      var $521=HEAP32[(($lowpasswidth)>>2)];
      var $cmp649=(($521)|0) >= 0;
      if ($cmp649) { label = 166; break; } else { label = 169; break; }
    case 166: 
      var $522=$cfg;
      var $lowpassfreq652=(($522+36)|0);
      var $523=HEAP32[(($lowpassfreq652)>>2)];
      var $524=$gfp_addr;
      var $lowpasswidth653=(($524+192)|0);
      var $525=HEAP32[(($lowpasswidth653)>>2)];
      var $sub654=((($523)-($525))|0);
      var $conv655=(($sub654)|0);
      var $mul656=($conv655)*(2);
      var $conv657=$mul656;
      var $526=$cfg;
      var $lowpass1658=(($526+232)|0);
      HEAPF32[(($lowpass1658)>>2)]=$conv657;
      var $527=$cfg;
      var $lowpass1659=(($527+232)|0);
      var $528=HEAPF32[(($lowpass1659)>>2)];
      var $cmp660=$528 < 0;
      if ($cmp660) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $529=$cfg;
      var $lowpass1663=(($529+232)|0);
      HEAPF32[(($lowpass1663)>>2)]=0;
      label = 168; break;
    case 168: 
      label = 170; break;
    case 169: 
      var $530=$cfg;
      var $lowpassfreq666=(($530+36)|0);
      var $531=HEAP32[(($lowpassfreq666)>>2)];
      var $conv667=(($531)|0);
      var $mul668=($conv667)*(2);
      var $conv669=$mul668;
      var $532=$cfg;
      var $lowpass1670=(($532+232)|0);
      HEAPF32[(($lowpass1670)>>2)]=$conv669;
      label = 170; break;
    case 170: 
      var $533=$cfg;
      var $samplerate_out672=(($533+48)|0);
      var $534=HEAP32[(($samplerate_out672)>>2)];
      var $conv673=(($534)|0);
      var $535=$cfg;
      var $lowpass1674=(($535+232)|0);
      var $536=HEAPF32[(($lowpass1674)>>2)];
      var $div675=($536)/($conv673);
      HEAPF32[(($lowpass1674)>>2)]=$div675;
      var $537=$cfg;
      var $samplerate_out676=(($537+48)|0);
      var $538=HEAP32[(($samplerate_out676)>>2)];
      var $conv677=(($538)|0);
      var $539=$cfg;
      var $lowpass2678=(($539+236)|0);
      var $540=HEAPF32[(($lowpass2678)>>2)];
      var $div679=($540)/($conv677);
      HEAPF32[(($lowpass2678)>>2)]=$div679;
      label = 171; break;
    case 171: 
      var $541=$gfc;
      _lame_init_params_ppflt($541);
      var $542=$cfg;
      var $samplerate_out681=(($542+48)|0);
      var $543=HEAP32[(($samplerate_out681)>>2)];
      var $544=$cfg;
      var $version682=(($544)|0);
      var $call683=_SmpFrqIndex($543, $version682);
      var $545=$cfg;
      var $samplerate_index684=(($545+4)|0);
      HEAP32[(($samplerate_index684)>>2)]=$call683;
      var $546=$cfg;
      var $samplerate_index685=(($546+4)|0);
      var $547=HEAP32[(($samplerate_index685)>>2)];
      var $cmp686=(($547)|0) < 0;
      if ($cmp686) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $548=$gfc;
      _freegfc($548);
      var $549=$gfp_addr;
      var $internal_flags689=(($549+288)|0);
      HEAP32[(($internal_flags689)>>2)]=0;
      $retval=-1;
      label = 296; break;
    case 173: 
      var $550=$gfp_addr;
      var $VBR691=(($550+156)|0);
      var $551=HEAP32[(($VBR691)>>2)];
      var $cmp692=(($551)|0)==0;
      if ($cmp692) { label = 174; break; } else { label = 180; break; }
    case 174: 
      var $552=$cfg;
      var $free_format695=(($552+136)|0);
      var $553=HEAP32[(($free_format695)>>2)];
      var $tobool696=(($553)|0)!=0;
      if ($tobool696) { label = 175; break; } else { label = 176; break; }
    case 175: 
      var $554=$gfc;
      var $ov_enc698=(($554+84036)|0);
      var $bitrate_index=(($ov_enc698+704)|0);
      HEAP32[(($bitrate_index)>>2)]=0;
      label = 179; break;
    case 176: 
      var $555=$gfp_addr;
      var $brate700=(($555+96)|0);
      var $556=HEAP32[(($brate700)>>2)];
      var $557=$cfg;
      var $version701=(($557)|0);
      var $558=HEAP32[(($version701)>>2)];
      var $559=$cfg;
      var $samplerate_out702=(($559+48)|0);
      var $560=HEAP32[(($samplerate_out702)>>2)];
      var $call703=_FindNearestBitrate($556, $558, $560);
      var $561=$gfp_addr;
      var $brate704=(($561+96)|0);
      HEAP32[(($brate704)>>2)]=$call703;
      var $562=$gfp_addr;
      var $brate705=(($562+96)|0);
      var $563=HEAP32[(($brate705)>>2)];
      var $564=$cfg;
      var $version706=(($564)|0);
      var $565=HEAP32[(($version706)>>2)];
      var $566=$cfg;
      var $samplerate_out707=(($566+48)|0);
      var $567=HEAP32[(($samplerate_out707)>>2)];
      var $call708=_BitrateIndex($563, $565, $567);
      var $568=$gfc;
      var $ov_enc709=(($568+84036)|0);
      var $bitrate_index710=(($ov_enc709+704)|0);
      HEAP32[(($bitrate_index710)>>2)]=$call708;
      var $569=$gfc;
      var $ov_enc711=(($569+84036)|0);
      var $bitrate_index712=(($ov_enc711+704)|0);
      var $570=HEAP32[(($bitrate_index712)>>2)];
      var $cmp713=(($570)|0) <= 0;
      if ($cmp713) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $571=$gfc;
      _freegfc($571);
      var $572=$gfp_addr;
      var $internal_flags716=(($572+288)|0);
      HEAP32[(($internal_flags716)>>2)]=0;
      $retval=-1;
      label = 296; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 181; break;
    case 180: 
      var $573=$gfc;
      var $ov_enc720=(($573+84036)|0);
      var $bitrate_index721=(($ov_enc720+704)|0);
      HEAP32[(($bitrate_index721)>>2)]=1;
      label = 181; break;
    case 181: 
      var $574=$gfc;
      _init_bit_stream_w($574);
      var $575=$cfg;
      var $samplerate_index723=(($575+4)|0);
      var $576=HEAP32[(($samplerate_index723)>>2)];
      var $577=$cfg;
      var $version724=(($577)|0);
      var $578=HEAP32[(($version724)>>2)];
      var $mul725=((($578)*(3))&-1);
      var $add726=((($576)+($mul725))|0);
      var $579=$cfg;
      var $samplerate_out727=(($579+48)|0);
      var $580=HEAP32[(($samplerate_out727)>>2)];
      var $cmp728=(($580)|0) < 16000;
      var $conv729=(($cmp728)&1);
      var $mul730=((($conv729)*(6))&-1);
      var $add731=((($add726)+($mul730))|0);
      $j=$add731;
      $i=0;
      label = 182; break;
    case 182: 
      var $581=$i;
      var $cmp733=(($581)|0) < 23;
      if ($cmp733) { label = 183; break; } else { label = 185; break; }
    case 183: 
      var $582=$i;
      var $583=$j;
      var $arrayidx736=((5254748+($583)*(204))|0);
      var $l=(($arrayidx736)|0);
      var $arrayidx737=(($l+($582<<2))|0);
      var $584=HEAP32[(($arrayidx737)>>2)];
      var $585=$i;
      var $586=$gfc;
      var $scalefac_band=(($586+21360)|0);
      var $l738=(($scalefac_band)|0);
      var $arrayidx739=(($l738+($585<<2))|0);
      HEAP32[(($arrayidx739)>>2)]=$584;
      label = 184; break;
    case 184: 
      var $587=$i;
      var $inc741=((($587)+(1))|0);
      $i=$inc741;
      label = 182; break;
    case 185: 
      $i=0;
      label = 186; break;
    case 186: 
      var $588=$i;
      var $cmp744=(($588)|0) < 7;
      if ($cmp744) { label = 187; break; } else { label = 189; break; }
    case 187: 
      var $589=$gfc;
      var $scalefac_band747=(($589+21360)|0);
      var $l748=(($scalefac_band747)|0);
      var $arrayidx749=(($l748+88)|0);
      var $590=HEAP32[(($arrayidx749)>>2)];
      var $591=$gfc;
      var $scalefac_band750=(($591+21360)|0);
      var $l751=(($scalefac_band750)|0);
      var $arrayidx752=(($l751+84)|0);
      var $592=HEAP32[(($arrayidx752)>>2)];
      var $sub753=((($590)-($592))|0);
      var $div754=((((($sub753)|0))/(6))&-1);
      $size=$div754;
      var $593=$gfc;
      var $scalefac_band755=(($593+21360)|0);
      var $l756=(($scalefac_band755)|0);
      var $arrayidx757=(($l756+84)|0);
      var $594=HEAP32[(($arrayidx757)>>2)];
      var $595=$i;
      var $596=$size;
      var $mul758=((($595)*($596))&-1);
      var $add759=((($594)+($mul758))|0);
      $start=$add759;
      var $597=$start;
      var $598=$i;
      var $599=$gfc;
      var $scalefac_band760=(($599+21360)|0);
      var $psfb21=(($scalefac_band760+148)|0);
      var $arrayidx761=(($psfb21+($598<<2))|0);
      HEAP32[(($arrayidx761)>>2)]=$597;
      label = 188; break;
    case 188: 
      var $600=$i;
      var $inc763=((($600)+(1))|0);
      $i=$inc763;
      label = 186; break;
    case 189: 
      var $601=$gfc;
      var $scalefac_band765=(($601+21360)|0);
      var $psfb21766=(($scalefac_band765+148)|0);
      var $arrayidx767=(($psfb21766+24)|0);
      HEAP32[(($arrayidx767)>>2)]=576;
      $i=0;
      label = 190; break;
    case 190: 
      var $602=$i;
      var $cmp769=(($602)|0) < 14;
      if ($cmp769) { label = 191; break; } else { label = 193; break; }
    case 191: 
      var $603=$i;
      var $604=$j;
      var $arrayidx772=((5254748+($604)*(204))|0);
      var $s=(($arrayidx772+92)|0);
      var $arrayidx773=(($s+($603<<2))|0);
      var $605=HEAP32[(($arrayidx773)>>2)];
      var $606=$i;
      var $607=$gfc;
      var $scalefac_band774=(($607+21360)|0);
      var $s775=(($scalefac_band774+92)|0);
      var $arrayidx776=(($s775+($606<<2))|0);
      HEAP32[(($arrayidx776)>>2)]=$605;
      label = 192; break;
    case 192: 
      var $608=$i;
      var $inc778=((($608)+(1))|0);
      $i=$inc778;
      label = 190; break;
    case 193: 
      $i=0;
      label = 194; break;
    case 194: 
      var $609=$i;
      var $cmp781=(($609)|0) < 7;
      if ($cmp781) { label = 195; break; } else { label = 197; break; }
    case 195: 
      var $610=$gfc;
      var $scalefac_band785=(($610+21360)|0);
      var $s786=(($scalefac_band785+92)|0);
      var $arrayidx787=(($s786+52)|0);
      var $611=HEAP32[(($arrayidx787)>>2)];
      var $612=$gfc;
      var $scalefac_band788=(($612+21360)|0);
      var $s789=(($scalefac_band788+92)|0);
      var $arrayidx790=(($s789+48)|0);
      var $613=HEAP32[(($arrayidx790)>>2)];
      var $sub791=((($611)-($613))|0);
      var $div792=((((($sub791)|0))/(6))&-1);
      $size784=$div792;
      var $614=$gfc;
      var $scalefac_band794=(($614+21360)|0);
      var $s795=(($scalefac_band794+92)|0);
      var $arrayidx796=(($s795+48)|0);
      var $615=HEAP32[(($arrayidx796)>>2)];
      var $616=$i;
      var $617=$size784;
      var $mul797=((($616)*($617))&-1);
      var $add798=((($615)+($mul797))|0);
      $start793=$add798;
      var $618=$start793;
      var $619=$i;
      var $620=$gfc;
      var $scalefac_band799=(($620+21360)|0);
      var $psfb12=(($scalefac_band799+176)|0);
      var $arrayidx800=(($psfb12+($619<<2))|0);
      HEAP32[(($arrayidx800)>>2)]=$618;
      label = 196; break;
    case 196: 
      var $621=$i;
      var $inc802=((($621)+(1))|0);
      $i=$inc802;
      label = 194; break;
    case 197: 
      var $622=$gfc;
      var $scalefac_band804=(($622+21360)|0);
      var $psfb12805=(($scalefac_band804+176)|0);
      var $arrayidx806=(($psfb12805+24)|0);
      HEAP32[(($arrayidx806)>>2)]=192;
      var $623=$cfg;
      var $mode_gr807=(($623+60)|0);
      var $624=HEAP32[(($mode_gr807)>>2)];
      var $cmp808=(($624)|0)==2;
      if ($cmp808) { label = 198; break; } else { label = 199; break; }
    case 198: 
      var $625=$cfg;
      var $channels_out811=(($625+56)|0);
      var $626=HEAP32[(($channels_out811)>>2)];
      var $cmp812=(($626)|0)==1;
      var $cond814=$cmp812 ? 21 : 36;
      var $627=$cfg;
      var $sideinfo_len=(($627+8)|0);
      HEAP32[(($sideinfo_len)>>2)]=$cond814;
      label = 200; break;
    case 199: 
      var $628=$cfg;
      var $channels_out816=(($628+56)|0);
      var $629=HEAP32[(($channels_out816)>>2)];
      var $cmp817=(($629)|0)==1;
      var $cond819=$cmp817 ? 13 : 21;
      var $630=$cfg;
      var $sideinfo_len820=(($630+8)|0);
      HEAP32[(($sideinfo_len820)>>2)]=$cond819;
      label = 200; break;
    case 200: 
      var $631=$cfg;
      var $error_protection822=(($631+144)|0);
      var $632=HEAP32[(($error_protection822)>>2)];
      var $tobool823=(($632)|0)!=0;
      if ($tobool823) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $633=$cfg;
      var $sideinfo_len825=(($633+8)|0);
      var $634=HEAP32[(($sideinfo_len825)>>2)];
      var $add826=((($634)+(2))|0);
      HEAP32[(($sideinfo_len825)>>2)]=$add826;
      label = 202; break;
    case 202: 
      var $635=$gfc;
      var $class_id828=(($635)|0);
      HEAP32[(($class_id828)>>2)]=-487877;
      $k=0;
      label = 203; break;
    case 203: 
      var $636=$k;
      var $cmp830=(($636)|0) < 19;
      if ($cmp830) { label = 204; break; } else { label = 206; break; }
    case 204: 
      var $637=$cfg;
      var $mode_gr833=(($637+60)|0);
      var $638=HEAP32[(($mode_gr833)>>2)];
      var $mul834=((($638)*(700))&-1);
      var $639=$cfg;
      var $channels_out835=(($639+56)|0);
      var $640=HEAP32[(($channels_out835)>>2)];
      var $mul836=((($mul834)*($640))&-1);
      var $conv837=(($mul836)|0);
      var $641=$k;
      var $642=$gfc;
      var $sv_enc=(($642+27820)|0);
      var $pefirbuf=(($sv_enc+11932)|0);
      var $arrayidx838=(($pefirbuf+($641<<2))|0);
      HEAPF32[(($arrayidx838)>>2)]=$conv837;
      label = 205; break;
    case 205: 
      var $643=$k;
      var $inc840=((($643)+(1))|0);
      $k=$inc840;
      label = 203; break;
    case 206: 
      var $644=$gfp_addr;
      var $ATHtype=(($644+220)|0);
      var $645=HEAP32[(($ATHtype)>>2)];
      var $cmp842=(($645)|0)==-1;
      if ($cmp842) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $646=$gfp_addr;
      var $ATHtype845=(($646+220)|0);
      HEAP32[(($ATHtype845)>>2)]=4;
      label = 208; break;
    case 208: 
      var $647=$gfp_addr;
      var $VBR847=(($647+156)|0);
      var $648=HEAP32[(($VBR847)>>2)];
      if ((($648)|0)==1 | (($648)|0)==4) {
        label = 209; break;
      }
      else if ((($648)|0)==2) {
        label = 223; break;
      }
      else {
      label = 231; break;
      }
      
    case 209: 
      var $649=$gfp_addr;
      var $strict_ISO=(($649+124)|0);
      var $650=HEAP32[(($strict_ISO)>>2)];
      var $cmp849=(($650)|0) < 0;
      if ($cmp849) { label = 210; break; } else { label = 211; break; }
    case 210: 
      var $651=$gfp_addr;
      var $strict_ISO852=(($651+124)|0);
      HEAP32[(($strict_ISO852)>>2)]=2;
      label = 211; break;
    case 211: 
      var $652=$gfp_addr;
      var $useTemporal=(($652+244)|0);
      var $653=HEAP32[(($useTemporal)>>2)];
      var $cmp854=(($653)|0) < 0;
      if ($cmp854) { label = 212; break; } else { label = 213; break; }
    case 212: 
      var $654=$gfp_addr;
      var $useTemporal857=(($654+244)|0);
      HEAP32[(($useTemporal857)>>2)]=0;
      label = 213; break;
    case 213: 
      var $655=$gfp_addr;
      var $656=$gfp_addr;
      var $VBR_q859=(($656+164)|0);
      var $657=HEAP32[(($VBR_q859)>>2)];
      var $mul860=((($657)*(10))&-1);
      var $sub861=(((500)-($mul860))|0);
      var $call862=_apply_preset($655, $sub861, 0);
      var $658=$gfp_addr;
      var $quality=(($658+44)|0);
      var $659=HEAP32[(($quality)>>2)];
      var $cmp863=(($659)|0) < 0;
      if ($cmp863) { label = 214; break; } else { label = 215; break; }
    case 214: 
      var $660=$gfp_addr;
      var $quality866=(($660+44)|0);
      HEAP32[(($quality866)>>2)]=3;
      label = 215; break;
    case 215: 
      var $661=$gfp_addr;
      var $quality868=(($661+44)|0);
      var $662=HEAP32[(($quality868)>>2)];
      var $cmp869=(($662)|0) < 5;
      if ($cmp869) { label = 216; break; } else { label = 217; break; }
    case 216: 
      var $663=$gfp_addr;
      var $quality872=(($663+44)|0);
      HEAP32[(($quality872)>>2)]=0;
      label = 217; break;
    case 217: 
      var $664=$gfp_addr;
      var $quality874=(($664+44)|0);
      var $665=HEAP32[(($quality874)>>2)];
      var $cmp875=(($665)|0) > 7;
      if ($cmp875) { label = 218; break; } else { label = 219; break; }
    case 218: 
      var $666=$gfp_addr;
      var $quality878=(($666+44)|0);
      HEAP32[(($quality878)>>2)]=7;
      label = 219; break;
    case 219: 
      var $667=$gfp_addr;
      var $experimentalY=(($667+140)|0);
      var $668=HEAP32[(($experimentalY)>>2)];
      var $tobool880=(($668)|0)!=0;
      if ($tobool880) { label = 220; break; } else { label = 221; break; }
    case 220: 
      var $669=$gfc;
      var $sv_qnt=(($669+84764)|0);
      var $sfb21_extra=(($sv_qnt+324)|0);
      HEAP32[(($sfb21_extra)>>2)]=0;
      label = 222; break;
    case 221: 
      var $670=$cfg;
      var $samplerate_out883=(($670+48)|0);
      var $671=HEAP32[(($samplerate_out883)>>2)];
      var $cmp884=(($671)|0) > 44000;
      var $conv885=(($cmp884)&1);
      var $672=$gfc;
      var $sv_qnt886=(($672+84764)|0);
      var $sfb21_extra887=(($sv_qnt886+324)|0);
      HEAP32[(($sfb21_extra887)>>2)]=$conv885;
      label = 222; break;
    case 222: 
      var $673=$gfc;
      var $iteration_loop=(($673+85808)|0);
      HEAP32[(($iteration_loop)>>2)]=20;
      label = 239; break;
    case 223: 
      var $674=$gfp_addr;
      var $675=$gfp_addr;
      var $VBR_q890=(($675+164)|0);
      var $676=HEAP32[(($VBR_q890)>>2)];
      var $mul891=((($676)*(10))&-1);
      var $sub892=(((500)-($mul891))|0);
      var $call893=_apply_preset($674, $sub892, 0);
      var $677=$gfp_addr;
      var $experimentalY894=(($677+140)|0);
      var $678=HEAP32[(($experimentalY894)>>2)];
      var $tobool895=(($678)|0)!=0;
      if ($tobool895) { label = 224; break; } else { label = 225; break; }
    case 224: 
      var $679=$gfc;
      var $sv_qnt897=(($679+84764)|0);
      var $sfb21_extra898=(($sv_qnt897+324)|0);
      HEAP32[(($sfb21_extra898)>>2)]=0;
      label = 226; break;
    case 225: 
      var $680=$cfg;
      var $samplerate_out900=(($680+48)|0);
      var $681=HEAP32[(($samplerate_out900)>>2)];
      var $cmp901=(($681)|0) > 44000;
      var $conv902=(($cmp901)&1);
      var $682=$gfc;
      var $sv_qnt903=(($682+84764)|0);
      var $sfb21_extra904=(($sv_qnt903+324)|0);
      HEAP32[(($sfb21_extra904)>>2)]=$conv902;
      label = 226; break;
    case 226: 
      var $683=$gfp_addr;
      var $quality906=(($683+44)|0);
      var $684=HEAP32[(($quality906)>>2)];
      var $cmp907=(($684)|0) > 6;
      if ($cmp907) { label = 227; break; } else { label = 228; break; }
    case 227: 
      var $685=$gfp_addr;
      var $quality910=(($685+44)|0);
      HEAP32[(($quality910)>>2)]=6;
      label = 228; break;
    case 228: 
      var $686=$gfp_addr;
      var $quality912=(($686+44)|0);
      var $687=HEAP32[(($quality912)>>2)];
      var $cmp913=(($687)|0) < 0;
      if ($cmp913) { label = 229; break; } else { label = 230; break; }
    case 229: 
      var $688=$gfp_addr;
      var $quality916=(($688+44)|0);
      HEAP32[(($quality916)>>2)]=3;
      label = 230; break;
    case 230: 
      var $689=$gfc;
      var $iteration_loop918=(($689+85808)|0);
      HEAP32[(($iteration_loop918)>>2)]=12;
      label = 239; break;
    case 231: 
      var $690=$gfc;
      var $sv_qnt920=(($690+84764)|0);
      var $sfb21_extra921=(($sv_qnt920+324)|0);
      HEAP32[(($sfb21_extra921)>>2)]=0;
      var $691=$gfp_addr;
      var $quality922=(($691+44)|0);
      var $692=HEAP32[(($quality922)>>2)];
      var $cmp923=(($692)|0) < 0;
      if ($cmp923) { label = 232; break; } else { label = 233; break; }
    case 232: 
      var $693=$gfp_addr;
      var $quality926=(($693+44)|0);
      HEAP32[(($quality926)>>2)]=3;
      label = 233; break;
    case 233: 
      var $694=$gfp_addr;
      var $VBR928=(($694+156)|0);
      var $695=HEAP32[(($VBR928)>>2)];
      $vbrmode=$695;
      var $696=$vbrmode;
      var $cmp929=(($696)|0)==0;
      if ($cmp929) { label = 234; break; } else { label = 235; break; }
    case 234: 
      var $697=$gfp_addr;
      var $698=$gfp_addr;
      var $brate932=(($698+96)|0);
      var $699=HEAP32[(($brate932)>>2)];
      var $call933=_lame_set_VBR_mean_bitrate_kbps($697, $699);
      label = 235; break;
    case 235: 
      var $700=$gfp_addr;
      var $701=$gfp_addr;
      var $VBR_mean_bitrate_kbps935=(($701+168)|0);
      var $702=HEAP32[(($VBR_mean_bitrate_kbps935)>>2)];
      var $call936=_apply_preset($700, $702, 0);
      var $703=$vbrmode;
      var $704=$gfp_addr;
      var $VBR937=(($704+156)|0);
      HEAP32[(($VBR937)>>2)]=$703;
      var $705=$vbrmode;
      var $cmp938=(($705)|0)==0;
      if ($cmp938) { label = 236; break; } else { label = 237; break; }
    case 236: 
      var $706=$gfc;
      var $iteration_loop941=(($706+85808)|0);
      HEAP32[(($iteration_loop941)>>2)]=26;
      label = 238; break;
    case 237: 
      var $707=$gfc;
      var $iteration_loop943=(($707+85808)|0);
      HEAP32[(($iteration_loop943)>>2)]=4;
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      var $708=$gfp_addr;
      var $maskingadjust=(($708+200)|0);
      var $709=HEAPF32[(($maskingadjust)>>2)];
      var $710=$gfc;
      var $sv_qnt946=(($710+84764)|0);
      var $mask_adjust=(($sv_qnt946+144)|0);
      HEAPF32[(($mask_adjust)>>2)]=$709;
      var $711=$gfp_addr;
      var $maskingadjust_short=(($711+204)|0);
      var $712=HEAPF32[(($maskingadjust_short)>>2)];
      var $713=$gfc;
      var $sv_qnt947=(($713+84764)|0);
      var $mask_adjust_short=(($sv_qnt947+148)|0);
      HEAPF32[(($mask_adjust_short)>>2)]=$712;
      var $714=$gfp_addr;
      var $tune=(($714+256)|0);
      var $715=HEAP32[(($tune)>>2)];
      var $tobool948=(($715)|0)!=0;
      if ($tobool948) { label = 240; break; } else { label = 241; break; }
    case 240: 
      var $716=$gfp_addr;
      var $tune_value_a=(($716+260)|0);
      var $717=HEAPF32[(($tune_value_a)>>2)];
      var $718=$gfc;
      var $sv_qnt950=(($718+84764)|0);
      var $mask_adjust951=(($sv_qnt950+144)|0);
      var $719=HEAPF32[(($mask_adjust951)>>2)];
      var $add952=($719)+($717);
      HEAPF32[(($mask_adjust951)>>2)]=$add952;
      var $720=$gfp_addr;
      var $tune_value_a953=(($720+260)|0);
      var $721=HEAPF32[(($tune_value_a953)>>2)];
      var $722=$gfc;
      var $sv_qnt954=(($722+84764)|0);
      var $mask_adjust_short955=(($sv_qnt954+148)|0);
      var $723=HEAPF32[(($mask_adjust_short955)>>2)];
      var $add956=($723)+($721);
      HEAPF32[(($mask_adjust_short955)>>2)]=$add956;
      label = 241; break;
    case 241: 
      var $724=$gfp_addr;
      var $VBR958=(($724+156)|0);
      var $725=HEAP32[(($VBR958)>>2)];
      var $cmp959=(($725)|0)!=0;
      if ($cmp959) { label = 242; break; } else { label = 259; break; }
    case 242: 
      var $726=$cfg;
      var $vbr_min_bitrate_index=(($726+96)|0);
      HEAP32[(($vbr_min_bitrate_index)>>2)]=1;
      var $727=$cfg;
      var $vbr_max_bitrate_index=(($727+100)|0);
      HEAP32[(($vbr_max_bitrate_index)>>2)]=14;
      var $728=$cfg;
      var $samplerate_out962=(($728+48)|0);
      var $729=HEAP32[(($samplerate_out962)>>2)];
      var $cmp963=(($729)|0) < 16000;
      if ($cmp963) { label = 243; break; } else { label = 244; break; }
    case 243: 
      var $730=$cfg;
      var $vbr_max_bitrate_index966=(($730+100)|0);
      HEAP32[(($vbr_max_bitrate_index966)>>2)]=8;
      label = 244; break;
    case 244: 
      var $731=$gfp_addr;
      var $VBR_min_bitrate_kbps=(($731+172)|0);
      var $732=HEAP32[(($VBR_min_bitrate_kbps)>>2)];
      var $tobool968=(($732)|0)!=0;
      if ($tobool968) { label = 245; break; } else { label = 248; break; }
    case 245: 
      var $733=$gfp_addr;
      var $VBR_min_bitrate_kbps970=(($733+172)|0);
      var $734=HEAP32[(($VBR_min_bitrate_kbps970)>>2)];
      var $735=$cfg;
      var $version971=(($735)|0);
      var $736=HEAP32[(($version971)>>2)];
      var $737=$cfg;
      var $samplerate_out972=(($737+48)|0);
      var $738=HEAP32[(($samplerate_out972)>>2)];
      var $call973=_FindNearestBitrate($734, $736, $738);
      var $739=$gfp_addr;
      var $VBR_min_bitrate_kbps974=(($739+172)|0);
      HEAP32[(($VBR_min_bitrate_kbps974)>>2)]=$call973;
      var $740=$gfp_addr;
      var $VBR_min_bitrate_kbps975=(($740+172)|0);
      var $741=HEAP32[(($VBR_min_bitrate_kbps975)>>2)];
      var $742=$cfg;
      var $version976=(($742)|0);
      var $743=HEAP32[(($version976)>>2)];
      var $744=$cfg;
      var $samplerate_out977=(($744+48)|0);
      var $745=HEAP32[(($samplerate_out977)>>2)];
      var $call978=_BitrateIndex($741, $743, $745);
      var $746=$cfg;
      var $vbr_min_bitrate_index979=(($746+96)|0);
      HEAP32[(($vbr_min_bitrate_index979)>>2)]=$call978;
      var $747=$cfg;
      var $vbr_min_bitrate_index980=(($747+96)|0);
      var $748=HEAP32[(($vbr_min_bitrate_index980)>>2)];
      var $cmp981=(($748)|0) < 0;
      if ($cmp981) { label = 246; break; } else { label = 247; break; }
    case 246: 
      $retval=-1;
      label = 296; break;
    case 247: 
      label = 248; break;
    case 248: 
      var $749=$gfp_addr;
      var $VBR_max_bitrate_kbps=(($749+176)|0);
      var $750=HEAP32[(($VBR_max_bitrate_kbps)>>2)];
      var $tobool986=(($750)|0)!=0;
      if ($tobool986) { label = 249; break; } else { label = 252; break; }
    case 249: 
      var $751=$gfp_addr;
      var $VBR_max_bitrate_kbps988=(($751+176)|0);
      var $752=HEAP32[(($VBR_max_bitrate_kbps988)>>2)];
      var $753=$cfg;
      var $version989=(($753)|0);
      var $754=HEAP32[(($version989)>>2)];
      var $755=$cfg;
      var $samplerate_out990=(($755+48)|0);
      var $756=HEAP32[(($samplerate_out990)>>2)];
      var $call991=_FindNearestBitrate($752, $754, $756);
      var $757=$gfp_addr;
      var $VBR_max_bitrate_kbps992=(($757+176)|0);
      HEAP32[(($VBR_max_bitrate_kbps992)>>2)]=$call991;
      var $758=$gfp_addr;
      var $VBR_max_bitrate_kbps993=(($758+176)|0);
      var $759=HEAP32[(($VBR_max_bitrate_kbps993)>>2)];
      var $760=$cfg;
      var $version994=(($760)|0);
      var $761=HEAP32[(($version994)>>2)];
      var $762=$cfg;
      var $samplerate_out995=(($762+48)|0);
      var $763=HEAP32[(($samplerate_out995)>>2)];
      var $call996=_BitrateIndex($759, $761, $763);
      var $764=$cfg;
      var $vbr_max_bitrate_index997=(($764+100)|0);
      HEAP32[(($vbr_max_bitrate_index997)>>2)]=$call996;
      var $765=$cfg;
      var $vbr_max_bitrate_index998=(($765+100)|0);
      var $766=HEAP32[(($vbr_max_bitrate_index998)>>2)];
      var $cmp999=(($766)|0) < 0;
      if ($cmp999) { label = 250; break; } else { label = 251; break; }
    case 250: 
      $retval=-1;
      label = 296; break;
    case 251: 
      label = 252; break;
    case 252: 
      var $767=$cfg;
      var $vbr_min_bitrate_index1004=(($767+96)|0);
      var $768=HEAP32[(($vbr_min_bitrate_index1004)>>2)];
      var $769=$cfg;
      var $version1005=(($769)|0);
      var $770=HEAP32[(($version1005)>>2)];
      var $arrayidx1006=((5348820+($770<<6))|0);
      var $arrayidx1007=(($arrayidx1006+($768<<2))|0);
      var $771=HEAP32[(($arrayidx1007)>>2)];
      var $772=$gfp_addr;
      var $VBR_min_bitrate_kbps1008=(($772+172)|0);
      HEAP32[(($VBR_min_bitrate_kbps1008)>>2)]=$771;
      var $773=$cfg;
      var $vbr_max_bitrate_index1009=(($773+100)|0);
      var $774=HEAP32[(($vbr_max_bitrate_index1009)>>2)];
      var $775=$cfg;
      var $version1010=(($775)|0);
      var $776=HEAP32[(($version1010)>>2)];
      var $arrayidx1011=((5348820+($776<<6))|0);
      var $arrayidx1012=(($arrayidx1011+($774<<2))|0);
      var $777=HEAP32[(($arrayidx1012)>>2)];
      var $778=$gfp_addr;
      var $VBR_max_bitrate_kbps1013=(($778+176)|0);
      HEAP32[(($VBR_max_bitrate_kbps1013)>>2)]=$777;
      var $779=$cfg;
      var $vbr_max_bitrate_index1014=(($779+100)|0);
      var $780=HEAP32[(($vbr_max_bitrate_index1014)>>2)];
      var $781=$cfg;
      var $version1015=(($781)|0);
      var $782=HEAP32[(($version1015)>>2)];
      var $arrayidx1016=((5348820+($782<<6))|0);
      var $arrayidx1017=(($arrayidx1016+($780<<2))|0);
      var $783=HEAP32[(($arrayidx1017)>>2)];
      var $784=$gfp_addr;
      var $VBR_mean_bitrate_kbps1018=(($784+168)|0);
      var $785=HEAP32[(($VBR_mean_bitrate_kbps1018)>>2)];
      var $cmp1019=(($783)|0) < (($785)|0);
      if ($cmp1019) { label = 253; break; } else { label = 254; break; }
    case 253: 
      var $786=$cfg;
      var $vbr_max_bitrate_index1022=(($786+100)|0);
      var $787=HEAP32[(($vbr_max_bitrate_index1022)>>2)];
      var $788=$cfg;
      var $version1023=(($788)|0);
      var $789=HEAP32[(($version1023)>>2)];
      var $arrayidx1024=((5348820+($789<<6))|0);
      var $arrayidx1025=(($arrayidx1024+($787<<2))|0);
      var $790=HEAP32[(($arrayidx1025)>>2)];
      var $cond1029 = $790;label = 255; break;
    case 254: 
      var $791=$gfp_addr;
      var $VBR_mean_bitrate_kbps1027=(($791+168)|0);
      var $792=HEAP32[(($VBR_mean_bitrate_kbps1027)>>2)];
      var $cond1029 = $792;label = 255; break;
    case 255: 
      var $cond1029;
      var $793=$gfp_addr;
      var $VBR_mean_bitrate_kbps1030=(($793+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps1030)>>2)]=$cond1029;
      var $794=$cfg;
      var $vbr_min_bitrate_index1031=(($794+96)|0);
      var $795=HEAP32[(($vbr_min_bitrate_index1031)>>2)];
      var $796=$cfg;
      var $version1032=(($796)|0);
      var $797=HEAP32[(($version1032)>>2)];
      var $arrayidx1033=((5348820+($797<<6))|0);
      var $arrayidx1034=(($arrayidx1033+($795<<2))|0);
      var $798=HEAP32[(($arrayidx1034)>>2)];
      var $799=$gfp_addr;
      var $VBR_mean_bitrate_kbps1035=(($799+168)|0);
      var $800=HEAP32[(($VBR_mean_bitrate_kbps1035)>>2)];
      var $cmp1036=(($798)|0) > (($800)|0);
      if ($cmp1036) { label = 256; break; } else { label = 257; break; }
    case 256: 
      var $801=$cfg;
      var $vbr_min_bitrate_index1039=(($801+96)|0);
      var $802=HEAP32[(($vbr_min_bitrate_index1039)>>2)];
      var $803=$cfg;
      var $version1040=(($803)|0);
      var $804=HEAP32[(($version1040)>>2)];
      var $arrayidx1041=((5348820+($804<<6))|0);
      var $arrayidx1042=(($arrayidx1041+($802<<2))|0);
      var $805=HEAP32[(($arrayidx1042)>>2)];
      var $cond1046 = $805;label = 258; break;
    case 257: 
      var $806=$gfp_addr;
      var $VBR_mean_bitrate_kbps1044=(($806+168)|0);
      var $807=HEAP32[(($VBR_mean_bitrate_kbps1044)>>2)];
      var $cond1046 = $807;label = 258; break;
    case 258: 
      var $cond1046;
      var $808=$gfp_addr;
      var $VBR_mean_bitrate_kbps1047=(($808+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps1047)>>2)]=$cond1046;
      label = 259; break;
    case 259: 
      var $809=$gfp_addr;
      var $preset=(($809+152)|0);
      var $810=HEAP32[(($preset)>>2)];
      var $811=$cfg;
      var $preset1049=(($811+84)|0);
      HEAP32[(($preset1049)>>2)]=$810;
      var $812=$gfp_addr;
      var $write_lame_tag1050=(($812+36)|0);
      var $813=HEAP32[(($write_lame_tag1050)>>2)];
      var $814=$cfg;
      var $write_lame_tag1051=(($814+140)|0);
      HEAP32[(($write_lame_tag1051)>>2)]=$813;
      var $815=$gfp_addr;
      var $VBR1052=(($815+156)|0);
      var $816=HEAP32[(($VBR1052)>>2)];
      var $817=$cfg;
      var $vbr=(($817+88)|0);
      HEAP32[(($vbr)>>2)]=$816;
      var $818=$gfp_addr;
      var $substep_shaping=(($818+80)|0);
      var $819=HEAP32[(($substep_shaping)>>2)];
      var $820=$gfc;
      var $sv_qnt1053=(($820+84764)|0);
      var $substep_shaping1054=(($sv_qnt1053+328)|0);
      HEAP32[(($substep_shaping1054)>>2)]=$819;
      var $821=$gfp_addr;
      var $noise_shaping=(($821+84)|0);
      var $822=HEAP32[(($noise_shaping)>>2)];
      var $823=$cfg;
      var $noise_shaping1055=(($823+12)|0);
      HEAP32[(($noise_shaping1055)>>2)]=$822;
      var $824=$gfp_addr;
      var $subblock_gain=(($824+88)|0);
      var $825=HEAP32[(($subblock_gain)>>2)];
      var $826=$cfg;
      var $subblock_gain1056=(($826+16)|0);
      HEAP32[(($subblock_gain1056)>>2)]=$825;
      var $827=$gfp_addr;
      var $use_best_huffman=(($827+92)|0);
      var $828=HEAP32[(($use_best_huffman)>>2)];
      var $829=$cfg;
      var $use_best_huffman1057=(($829+20)|0);
      HEAP32[(($use_best_huffman1057)>>2)]=$828;
      var $830=$gfp_addr;
      var $brate1058=(($830+96)|0);
      var $831=HEAP32[(($brate1058)>>2)];
      var $832=$cfg;
      var $avg_bitrate=(($832+104)|0);
      HEAP32[(($avg_bitrate)>>2)]=$831;
      var $833=$gfp_addr;
      var $VBR_mean_bitrate_kbps1059=(($833+168)|0);
      var $834=HEAP32[(($VBR_mean_bitrate_kbps1059)>>2)];
      var $835=$cfg;
      var $vbr_avg_bitrate_kbps=(($835+92)|0);
      HEAP32[(($vbr_avg_bitrate_kbps)>>2)]=$834;
      var $836=$gfp_addr;
      var $compression_ratio1060=(($836+100)|0);
      var $837=HEAPF32[(($compression_ratio1060)>>2)];
      var $838=$cfg;
      var $compression_ratio1061=(($838+228)|0);
      HEAPF32[(($compression_ratio1061)>>2)]=$837;
      var $839=$gfp_addr;
      _lame_init_qval($839);
      var $840=$gfp_addr;
      var $athaa_type=(($840+232)|0);
      var $841=HEAP32[(($athaa_type)>>2)];
      var $cmp1062=(($841)|0) < 0;
      if ($cmp1062) { label = 260; break; } else { label = 261; break; }
    case 260: 
      var $842=$gfc;
      var $ATH1065=(($842+85792)|0);
      var $843=HEAP32[(($ATH1065)>>2)];
      var $use_adjust=(($843)|0);
      HEAP32[(($use_adjust)>>2)]=3;
      label = 262; break;
    case 261: 
      var $844=$gfp_addr;
      var $athaa_type1067=(($844+232)|0);
      var $845=HEAP32[(($athaa_type1067)>>2)];
      var $846=$gfc;
      var $ATH1068=(($846+85792)|0);
      var $847=HEAP32[(($ATH1068)>>2)];
      var $use_adjust1069=(($847)|0);
      HEAP32[(($use_adjust1069)>>2)]=$845;
      label = 262; break;
    case 262: 
      var $848=$gfp_addr;
      var $athaa_sensitivity=(($848+236)|0);
      var $849=HEAPF32[(($athaa_sensitivity)>>2)];
      var $conv1071=$849;
      var $div1072=($conv1071)/(-10);
      var $850=Math.pow(10, $div1072);
      var $conv1073=$850;
      var $851=$gfc;
      var $ATH1074=(($851+85792)|0);
      var $852=HEAP32[(($ATH1074)>>2)];
      var $aa_sensitivity_p=(($852+4)|0);
      HEAPF32[(($aa_sensitivity_p)>>2)]=$conv1073;
      var $853=$gfp_addr;
      var $short_blocks=(($853+240)|0);
      var $854=HEAP32[(($short_blocks)>>2)];
      var $cmp1075=(($854)|0)==-1;
      if ($cmp1075) { label = 263; break; } else { label = 264; break; }
    case 263: 
      var $855=$gfp_addr;
      var $short_blocks1078=(($855+240)|0);
      HEAP32[(($short_blocks1078)>>2)]=0;
      label = 264; break;
    case 264: 
      var $856=$gfp_addr;
      var $short_blocks1080=(($856+240)|0);
      var $857=HEAP32[(($short_blocks1080)>>2)];
      var $cmp1081=(($857)|0)==0;
      if ($cmp1081) { label = 265; break; } else { label = 268; break; }
    case 265: 
      var $858=$cfg;
      var $mode1084=(($858+164)|0);
      var $859=HEAP32[(($mode1084)>>2)];
      var $cmp1085=(($859)|0)==1;
      if ($cmp1085) { label = 267; break; } else { label = 266; break; }
    case 266: 
      var $860=$cfg;
      var $mode1088=(($860+164)|0);
      var $861=HEAP32[(($mode1088)>>2)];
      var $cmp1089=(($861)|0)==0;
      if ($cmp1089) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $862=$gfp_addr;
      var $short_blocks1092=(($862+240)|0);
      HEAP32[(($short_blocks1092)>>2)]=1;
      label = 268; break;
    case 268: 
      var $863=$gfp_addr;
      var $short_blocks1094=(($863+240)|0);
      var $864=HEAP32[(($short_blocks1094)>>2)];
      var $865=$cfg;
      var $short_blocks1095=(($865+168)|0);
      HEAP32[(($short_blocks1095)>>2)]=$864;
      var $866=$gfp_addr;
      var $call1096=_lame_get_quant_comp($866);
      var $cmp1097=(($call1096)|0) < 0;
      if ($cmp1097) { label = 269; break; } else { label = 270; break; }
    case 269: 
      var $867=$gfp_addr;
      var $call1100=_lame_set_quant_comp($867, 1);
      label = 270; break;
    case 270: 
      var $868=$gfp_addr;
      var $call1102=_lame_get_quant_comp_short($868);
      var $cmp1103=(($call1102)|0) < 0;
      if ($cmp1103) { label = 271; break; } else { label = 272; break; }
    case 271: 
      var $869=$gfp_addr;
      var $call1106=_lame_set_quant_comp_short($869, 0);
      label = 272; break;
    case 272: 
      var $870=$gfp_addr;
      var $call1108=_lame_get_msfix($870);
      var $cmp1109=$call1108 < 0;
      if ($cmp1109) { label = 273; break; } else { label = 274; break; }
    case 273: 
      var $871=$gfp_addr;
      _lame_set_msfix($871, 0);
      label = 274; break;
    case 274: 
      var $872=$gfp_addr;
      var $873=$gfp_addr;
      var $call1113=_lame_get_exp_nspsytune($873);
      var $or=$call1113 | 1;
      var $call1114=_lame_set_exp_nspsytune($872, $or);
      var $874=$gfp_addr;
      var $ATHtype1115=(($874+220)|0);
      var $875=HEAP32[(($ATHtype1115)>>2)];
      var $cmp1116=(($875)|0) < 0;
      if ($cmp1116) { label = 275; break; } else { label = 276; break; }
    case 275: 
      var $876=$gfp_addr;
      var $ATHtype1119=(($876+220)|0);
      HEAP32[(($ATHtype1119)>>2)]=4;
      label = 276; break;
    case 276: 
      var $877=$gfp_addr;
      var $ATHcurve=(($877+224)|0);
      var $878=HEAPF32[(($ATHcurve)>>2)];
      var $cmp1121=$878 < 0;
      if ($cmp1121) { label = 277; break; } else { label = 278; break; }
    case 277: 
      var $879=$gfp_addr;
      var $ATHcurve1124=(($879+224)|0);
      HEAPF32[(($ATHcurve1124)>>2)]=4;
      label = 278; break;
    case 278: 
      var $880=$gfp_addr;
      var $interChRatio=(($880+248)|0);
      var $881=HEAPF32[(($interChRatio)>>2)];
      var $cmp1126=$881 < 0;
      if ($cmp1126) { label = 279; break; } else { label = 280; break; }
    case 279: 
      var $882=$gfp_addr;
      var $interChRatio1129=(($882+248)|0);
      HEAPF32[(($interChRatio1129)>>2)]=0;
      label = 280; break;
    case 280: 
      var $883=$gfp_addr;
      var $useTemporal1131=(($883+244)|0);
      var $884=HEAP32[(($useTemporal1131)>>2)];
      var $cmp1132=(($884)|0) < 0;
      if ($cmp1132) { label = 281; break; } else { label = 282; break; }
    case 281: 
      var $885=$gfp_addr;
      var $useTemporal1135=(($885+244)|0);
      HEAP32[(($useTemporal1135)>>2)]=1;
      label = 282; break;
    case 282: 
      var $886=$gfp_addr;
      var $interChRatio1137=(($886+248)|0);
      var $887=HEAPF32[(($interChRatio1137)>>2)];
      var $888=$cfg;
      var $interChRatio1138=(($888+172)|0);
      HEAPF32[(($interChRatio1138)>>2)]=$887;
      var $889=$gfp_addr;
      var $msfix=(($889+252)|0);
      var $890=HEAPF32[(($msfix)>>2)];
      var $891=$cfg;
      var $msfix1139=(($891+176)|0);
      HEAPF32[(($msfix1139)>>2)]=$890;
      var $892=$gfp_addr;
      var $ATH_lower_db=(($892+228)|0);
      var $893=HEAPF32[(($ATH_lower_db)>>2)];
      var $sub1140=(-$893);
      var $894=$cfg;
      var $ATH_offset_db=(($894+180)|0);
      HEAPF32[(($ATH_offset_db)>>2)]=$sub1140;
      var $895=$cfg;
      var $ATH_offset_db1141=(($895+180)|0);
      var $896=HEAPF32[(($ATH_offset_db1141)>>2)];
      var $mul1142=($896)*(0.10000000149011612);
      var $897=Math.pow(10, $mul1142);
      var $898=$cfg;
      var $ATH_offset_factor=(($898+184)|0);
      HEAPF32[(($ATH_offset_factor)>>2)]=$897;
      var $899=$gfp_addr;
      var $ATHcurve1143=(($899+224)|0);
      var $900=HEAPF32[(($ATHcurve1143)>>2)];
      var $901=$cfg;
      var $ATHcurve1144=(($901+188)|0);
      HEAPF32[(($ATHcurve1144)>>2)]=$900;
      var $902=$gfp_addr;
      var $ATHtype1145=(($902+220)|0);
      var $903=HEAP32[(($ATHtype1145)>>2)];
      var $904=$cfg;
      var $ATHtype1146=(($904+192)|0);
      HEAP32[(($ATHtype1146)>>2)]=$903;
      var $905=$gfp_addr;
      var $ATHonly=(($905+208)|0);
      var $906=HEAP32[(($ATHonly)>>2)];
      var $907=$cfg;
      var $ATHonly1147=(($907+196)|0);
      HEAP32[(($ATHonly1147)>>2)]=$906;
      var $908=$gfp_addr;
      var $ATHshort=(($908+212)|0);
      var $909=HEAP32[(($ATHshort)>>2)];
      var $910=$cfg;
      var $ATHshort1148=(($910+200)|0);
      HEAP32[(($ATHshort1148)>>2)]=$909;
      var $911=$gfp_addr;
      var $noATH=(($911+216)|0);
      var $912=HEAP32[(($noATH)>>2)];
      var $913=$cfg;
      var $noATH1149=(($913+204)|0);
      HEAP32[(($noATH1149)>>2)]=$912;
      var $914=$gfp_addr;
      var $quant_comp=(($914+132)|0);
      var $915=HEAP32[(($quant_comp)>>2)];
      var $916=$cfg;
      var $quant_comp1150=(($916+68)|0);
      HEAP32[(($quant_comp1150)>>2)]=$915;
      var $917=$gfp_addr;
      var $quant_comp_short=(($917+136)|0);
      var $918=HEAP32[(($quant_comp_short)>>2)];
      var $919=$cfg;
      var $quant_comp_short1151=(($919+72)|0);
      HEAP32[(($quant_comp_short1151)>>2)]=$918;
      var $920=$gfp_addr;
      var $useTemporal1152=(($920+244)|0);
      var $921=HEAP32[(($useTemporal1152)>>2)];
      var $922=$cfg;
      var $use_temporal_masking_effect=(($922+76)|0);
      HEAP32[(($use_temporal_masking_effect)>>2)]=$921;
      var $923=$gfp_addr;
      var $exp_nspsytune=(($923+148)|0);
      var $924=HEAP32[(($exp_nspsytune)>>2)];
      var $and=$924 & 2;
      var $925=$cfg;
      var $use_safe_joint_stereo=(($925+80)|0);
      HEAP32[(($use_safe_joint_stereo)>>2)]=$and;
      var $926=$gfp_addr;
      var $exp_nspsytune1153=(($926+148)|0);
      var $927=HEAP32[(($exp_nspsytune1153)>>2)];
      var $shr=$927 >> 2;
      var $and1154=$shr & 63;
      var $conv1155=(($and1154)|0);
      var $928=$cfg;
      var $adjust_bass_db=(($928+216)|0);
      HEAPF32[(($adjust_bass_db)>>2)]=$conv1155;
      var $929=$cfg;
      var $adjust_bass_db1156=(($929+216)|0);
      var $930=HEAPF32[(($adjust_bass_db1156)>>2)];
      var $cmp1157=$930 >= 32;
      if ($cmp1157) { label = 283; break; } else { label = 284; break; }
    case 283: 
      var $931=$cfg;
      var $adjust_bass_db1160=(($931+216)|0);
      var $932=HEAPF32[(($adjust_bass_db1160)>>2)];
      var $sub1161=($932)-(64);
      HEAPF32[(($adjust_bass_db1160)>>2)]=$sub1161;
      label = 284; break;
    case 284: 
      var $933=$cfg;
      var $adjust_bass_db1163=(($933+216)|0);
      var $934=HEAPF32[(($adjust_bass_db1163)>>2)];
      var $mul1164=($934)*(0.25);
      HEAPF32[(($adjust_bass_db1163)>>2)]=$mul1164;
      var $935=$gfp_addr;
      var $exp_nspsytune1165=(($935+148)|0);
      var $936=HEAP32[(($exp_nspsytune1165)>>2)];
      var $shr1166=$936 >> 8;
      var $and1167=$shr1166 & 63;
      var $conv1168=(($and1167)|0);
      var $937=$cfg;
      var $adjust_alto_db=(($937+212)|0);
      HEAPF32[(($adjust_alto_db)>>2)]=$conv1168;
      var $938=$cfg;
      var $adjust_alto_db1169=(($938+212)|0);
      var $939=HEAPF32[(($adjust_alto_db1169)>>2)];
      var $cmp1170=$939 >= 32;
      if ($cmp1170) { label = 285; break; } else { label = 286; break; }
    case 285: 
      var $940=$cfg;
      var $adjust_alto_db1173=(($940+212)|0);
      var $941=HEAPF32[(($adjust_alto_db1173)>>2)];
      var $sub1174=($941)-(64);
      HEAPF32[(($adjust_alto_db1173)>>2)]=$sub1174;
      label = 286; break;
    case 286: 
      var $942=$cfg;
      var $adjust_alto_db1176=(($942+212)|0);
      var $943=HEAPF32[(($adjust_alto_db1176)>>2)];
      var $mul1177=($943)*(0.25);
      HEAPF32[(($adjust_alto_db1176)>>2)]=$mul1177;
      var $944=$gfp_addr;
      var $exp_nspsytune1178=(($944+148)|0);
      var $945=HEAP32[(($exp_nspsytune1178)>>2)];
      var $shr1179=$945 >> 14;
      var $and1180=$shr1179 & 63;
      var $conv1181=(($and1180)|0);
      var $946=$cfg;
      var $adjust_treble_db=(($946+220)|0);
      HEAPF32[(($adjust_treble_db)>>2)]=$conv1181;
      var $947=$cfg;
      var $adjust_treble_db1182=(($947+220)|0);
      var $948=HEAPF32[(($adjust_treble_db1182)>>2)];
      var $cmp1183=$948 >= 32;
      if ($cmp1183) { label = 287; break; } else { label = 288; break; }
    case 287: 
      var $949=$cfg;
      var $adjust_treble_db1186=(($949+220)|0);
      var $950=HEAPF32[(($adjust_treble_db1186)>>2)];
      var $sub1187=($950)-(64);
      HEAPF32[(($adjust_treble_db1186)>>2)]=$sub1187;
      label = 288; break;
    case 288: 
      var $951=$cfg;
      var $adjust_treble_db1189=(($951+220)|0);
      var $952=HEAPF32[(($adjust_treble_db1189)>>2)];
      var $mul1190=($952)*(0.25);
      HEAPF32[(($adjust_treble_db1189)>>2)]=$mul1190;
      var $953=$gfp_addr;
      var $exp_nspsytune1191=(($953+148)|0);
      var $954=HEAP32[(($exp_nspsytune1191)>>2)];
      var $shr1192=$954 >> 20;
      var $and1193=$shr1192 & 63;
      var $conv1194=(($and1193)|0);
      var $955=$cfg;
      var $adjust_sfb21_db=(($955+224)|0);
      HEAPF32[(($adjust_sfb21_db)>>2)]=$conv1194;
      var $956=$cfg;
      var $adjust_sfb21_db1195=(($956+224)|0);
      var $957=HEAPF32[(($adjust_sfb21_db1195)>>2)];
      var $cmp1196=$957 >= 32;
      if ($cmp1196) { label = 289; break; } else { label = 290; break; }
    case 289: 
      var $958=$cfg;
      var $adjust_sfb21_db1199=(($958+224)|0);
      var $959=HEAPF32[(($adjust_sfb21_db1199)>>2)];
      var $sub1200=($959)-(64);
      HEAPF32[(($adjust_sfb21_db1199)>>2)]=$sub1200;
      label = 290; break;
    case 290: 
      var $960=$cfg;
      var $adjust_sfb21_db1202=(($960+224)|0);
      var $961=HEAPF32[(($adjust_sfb21_db1202)>>2)];
      var $mul1203=($961)*(0.25);
      HEAPF32[(($adjust_sfb21_db1202)>>2)]=$mul1203;
      var $962=$cfg;
      var $adjust_treble_db1204=(($962+220)|0);
      var $963=HEAPF32[(($adjust_treble_db1204)>>2)];
      var $964=$cfg;
      var $adjust_sfb21_db1205=(($964+224)|0);
      var $965=HEAPF32[(($adjust_sfb21_db1205)>>2)];
      var $add1206=($965)+($963);
      HEAPF32[(($adjust_sfb21_db1205)>>2)]=$add1206;
      var $966=$m1207;
      assert(16 % 1 === 0);HEAP32[(($966)>>2)]=HEAP32[((5317740)>>2)];HEAP32[((($966)+(4))>>2)]=HEAP32[((5317744)>>2)];HEAP32[((($966)+(8))>>2)]=HEAP32[((5317748)>>2)];HEAP32[((($966)+(12))>>2)]=HEAP32[((5317752)>>2)];
      var $967=$gfp_addr;
      var $scale=(($967+20)|0);
      var $968=HEAPF32[(($scale)>>2)];
      var $arrayidx1208=(($m1207)|0);
      var $arrayidx1209=(($arrayidx1208)|0);
      var $969=HEAPF32[(($arrayidx1209)>>2)];
      var $mul1210=($969)*($968);
      HEAPF32[(($arrayidx1209)>>2)]=$mul1210;
      var $970=$gfp_addr;
      var $scale1211=(($970+20)|0);
      var $971=HEAPF32[(($scale1211)>>2)];
      var $arrayidx1212=(($m1207)|0);
      var $arrayidx1213=(($arrayidx1212+4)|0);
      var $972=HEAPF32[(($arrayidx1213)>>2)];
      var $mul1214=($972)*($971);
      HEAPF32[(($arrayidx1213)>>2)]=$mul1214;
      var $973=$gfp_addr;
      var $scale1215=(($973+20)|0);
      var $974=HEAPF32[(($scale1215)>>2)];
      var $arrayidx1216=(($m1207+8)|0);
      var $arrayidx1217=(($arrayidx1216)|0);
      var $975=HEAPF32[(($arrayidx1217)>>2)];
      var $mul1218=($975)*($974);
      HEAPF32[(($arrayidx1217)>>2)]=$mul1218;
      var $976=$gfp_addr;
      var $scale1219=(($976+20)|0);
      var $977=HEAPF32[(($scale1219)>>2)];
      var $arrayidx1220=(($m1207+8)|0);
      var $arrayidx1221=(($arrayidx1220+4)|0);
      var $978=HEAPF32[(($arrayidx1221)>>2)];
      var $mul1222=($978)*($977);
      HEAPF32[(($arrayidx1221)>>2)]=$mul1222;
      var $979=$gfp_addr;
      var $scale_left=(($979+24)|0);
      var $980=HEAPF32[(($scale_left)>>2)];
      var $arrayidx1223=(($m1207)|0);
      var $arrayidx1224=(($arrayidx1223)|0);
      var $981=HEAPF32[(($arrayidx1224)>>2)];
      var $mul1225=($981)*($980);
      HEAPF32[(($arrayidx1224)>>2)]=$mul1225;
      var $982=$gfp_addr;
      var $scale_left1226=(($982+24)|0);
      var $983=HEAPF32[(($scale_left1226)>>2)];
      var $arrayidx1227=(($m1207)|0);
      var $arrayidx1228=(($arrayidx1227+4)|0);
      var $984=HEAPF32[(($arrayidx1228)>>2)];
      var $mul1229=($984)*($983);
      HEAPF32[(($arrayidx1228)>>2)]=$mul1229;
      var $985=$gfp_addr;
      var $scale_right=(($985+28)|0);
      var $986=HEAPF32[(($scale_right)>>2)];
      var $arrayidx1230=(($m1207+8)|0);
      var $arrayidx1231=(($arrayidx1230)|0);
      var $987=HEAPF32[(($arrayidx1231)>>2)];
      var $mul1232=($987)*($986);
      HEAPF32[(($arrayidx1231)>>2)]=$mul1232;
      var $988=$gfp_addr;
      var $scale_right1233=(($988+28)|0);
      var $989=HEAPF32[(($scale_right1233)>>2)];
      var $arrayidx1234=(($m1207+8)|0);
      var $arrayidx1235=(($arrayidx1234+4)|0);
      var $990=HEAPF32[(($arrayidx1235)>>2)];
      var $mul1236=($990)*($989);
      HEAPF32[(($arrayidx1235)>>2)]=$mul1236;
      var $991=$cfg;
      var $channels_in1237=(($991+52)|0);
      var $992=HEAP32[(($channels_in1237)>>2)];
      var $cmp1238=(($992)|0)==2;
      if ($cmp1238) { label = 291; break; } else { label = 293; break; }
    case 291: 
      var $993=$cfg;
      var $channels_out1241=(($993+56)|0);
      var $994=HEAP32[(($channels_out1241)>>2)];
      var $cmp1242=(($994)|0)==1;
      if ($cmp1242) { label = 292; break; } else { label = 293; break; }
    case 292: 
      var $arrayidx1245=(($m1207)|0);
      var $arrayidx1246=(($arrayidx1245)|0);
      var $995=HEAPF32[(($arrayidx1246)>>2)];
      var $arrayidx1247=(($m1207+8)|0);
      var $arrayidx1248=(($arrayidx1247)|0);
      var $996=HEAPF32[(($arrayidx1248)>>2)];
      var $add1249=($995)+($996);
      var $mul1250=($add1249)*(0.5);
      var $arrayidx1251=(($m1207)|0);
      var $arrayidx1252=(($arrayidx1251)|0);
      HEAPF32[(($arrayidx1252)>>2)]=$mul1250;
      var $arrayidx1253=(($m1207)|0);
      var $arrayidx1254=(($arrayidx1253+4)|0);
      var $997=HEAPF32[(($arrayidx1254)>>2)];
      var $arrayidx1255=(($m1207+8)|0);
      var $arrayidx1256=(($arrayidx1255+4)|0);
      var $998=HEAPF32[(($arrayidx1256)>>2)];
      var $add1257=($997)+($998);
      var $mul1258=($add1257)*(0.5);
      var $arrayidx1259=(($m1207)|0);
      var $arrayidx1260=(($arrayidx1259+4)|0);
      HEAPF32[(($arrayidx1260)>>2)]=$mul1258;
      var $arrayidx1261=(($m1207+8)|0);
      var $arrayidx1262=(($arrayidx1261)|0);
      HEAPF32[(($arrayidx1262)>>2)]=0;
      var $arrayidx1263=(($m1207+8)|0);
      var $arrayidx1264=(($arrayidx1263+4)|0);
      HEAPF32[(($arrayidx1264)>>2)]=0;
      label = 293; break;
    case 293: 
      var $arrayidx1266=(($m1207)|0);
      var $arrayidx1267=(($arrayidx1266)|0);
      var $999=HEAPF32[(($arrayidx1267)>>2)];
      var $1000=$cfg;
      var $pcm_transform=(($1000+248)|0);
      var $arrayidx1268=(($pcm_transform)|0);
      var $arrayidx1269=(($arrayidx1268)|0);
      HEAPF32[(($arrayidx1269)>>2)]=$999;
      var $arrayidx1270=(($m1207)|0);
      var $arrayidx1271=(($arrayidx1270+4)|0);
      var $1001=HEAPF32[(($arrayidx1271)>>2)];
      var $1002=$cfg;
      var $pcm_transform1272=(($1002+248)|0);
      var $arrayidx1273=(($pcm_transform1272)|0);
      var $arrayidx1274=(($arrayidx1273+4)|0);
      HEAPF32[(($arrayidx1274)>>2)]=$1001;
      var $arrayidx1275=(($m1207+8)|0);
      var $arrayidx1276=(($arrayidx1275)|0);
      var $1003=HEAPF32[(($arrayidx1276)>>2)];
      var $1004=$cfg;
      var $pcm_transform1277=(($1004+248)|0);
      var $arrayidx1278=(($pcm_transform1277+8)|0);
      var $arrayidx1279=(($arrayidx1278)|0);
      HEAPF32[(($arrayidx1279)>>2)]=$1003;
      var $arrayidx1280=(($m1207+8)|0);
      var $arrayidx1281=(($arrayidx1280+4)|0);
      var $1005=HEAPF32[(($arrayidx1281)>>2)];
      var $1006=$cfg;
      var $pcm_transform1282=(($1006+248)|0);
      var $arrayidx1283=(($pcm_transform1282+8)|0);
      var $arrayidx1284=(($arrayidx1283+4)|0);
      HEAPF32[(($arrayidx1284)>>2)]=$1005;
      var $1007=$gfc;
      var $sv_enc1285=(($1007+27820)|0);
      var $frac_SpF=(($sv_enc1285+12008)|0);
      HEAP32[(($frac_SpF)>>2)]=0;
      var $1008=$gfc;
      var $sv_enc1286=(($1008+27820)|0);
      var $slot_lag=(($sv_enc1286+12012)|0);
      HEAP32[(($slot_lag)>>2)]=0;
      var $1009=$cfg;
      var $vbr1287=(($1009+88)|0);
      var $1010=HEAP32[(($vbr1287)>>2)];
      var $cmp1288=(($1010)|0)==0;
      if ($cmp1288) { label = 294; break; } else { label = 295; break; }
    case 294: 
      var $1011=$cfg;
      var $version1291=(($1011)|0);
      var $1012=HEAP32[(($version1291)>>2)];
      var $add1292=((($1012)+(1))|0);
      var $mul1293=((($add1292)*(72000))&-1);
      var $1013=$cfg;
      var $avg_bitrate1294=(($1013+104)|0);
      var $1014=HEAP32[(($avg_bitrate1294)>>2)];
      var $mul1295=((($mul1293)*($1014))&-1);
      var $1015=$cfg;
      var $samplerate_out1296=(($1015+48)|0);
      var $1016=HEAP32[(($samplerate_out1296)>>2)];
      var $rem=((($mul1295)|0))%((($1016)|0));
      var $1017=$gfc;
      var $sv_enc1297=(($1017+27820)|0);
      var $frac_SpF1298=(($sv_enc1297+12008)|0);
      HEAP32[(($frac_SpF1298)>>2)]=$rem;
      var $1018=$gfc;
      var $sv_enc1299=(($1018+27820)|0);
      var $slot_lag1300=(($sv_enc1299+12012)|0);
      HEAP32[(($slot_lag1300)>>2)]=$rem;
      label = 295; break;
    case 295: 
      var $1019=$gfp_addr;
      var $call1302=_lame_init_bitstream($1019);
      var $1020=$gfc;
      _iteration_init($1020);
      var $1021=$gfp_addr;
      var $call1303=_psymodel_init($1021);
      var $1022=$cfg;
      var $1023=$gfp_addr;
      var $strict_ISO1304=(($1023+124)|0);
      var $1024=HEAP32[(($strict_ISO1304)>>2)];
      var $call1305=_get_max_frame_buffer_size_by_constraint($1022, $1024);
      var $1025=$cfg;
      var $buffer_constraint=(($1025+132)|0);
      HEAP32[(($buffer_constraint)>>2)]=$call1305;
      $retval=0;
      label = 296; break;
    case 296: 
      var $1026=$retval;
      STACKTOP = __stackBase__;
      return $1026;
    default: assert(0, "bad label: " + label);
  }

}
_lame_init_params["X"]=1;

function _linear_int($a, $b, $m) {
  var label = 0;


  var $a_addr;
  var $b_addr;
  var $m_addr;
  $a_addr=$a;
  $b_addr=$b;
  $m_addr=$m;
  var $0=$a_addr;
  var $1=$m_addr;
  var $2=$b_addr;
  var $3=$a_addr;
  var $sub=($2)-($3);
  var $mul=($1)*($sub);
  var $add=($0)+($mul);

  return $add;
}


function _optimum_samplefreq($lowpassfreq, $input_samplefreq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $lowpassfreq_addr;
      var $input_samplefreq_addr;
      var $suggested_samplefreq;
      $lowpassfreq_addr=$lowpassfreq;
      $input_samplefreq_addr=$input_samplefreq;
      $suggested_samplefreq=44100;
      var $0=$input_samplefreq_addr;
      var $cmp=(($0)|0) >= 48000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $suggested_samplefreq=48000;
      label = 28; break;
    case 4: 
      var $1=$input_samplefreq_addr;
      var $cmp1=(($1)|0) >= 44100;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $suggested_samplefreq=44100;
      label = 27; break;
    case 6: 
      var $2=$input_samplefreq_addr;
      var $cmp4=(($2)|0) >= 32000;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $suggested_samplefreq=32000;
      label = 26; break;
    case 8: 
      var $3=$input_samplefreq_addr;
      var $cmp7=(($3)|0) >= 24000;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $suggested_samplefreq=24000;
      label = 25; break;
    case 10: 
      var $4=$input_samplefreq_addr;
      var $cmp10=(($4)|0) >= 22050;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $suggested_samplefreq=22050;
      label = 24; break;
    case 12: 
      var $5=$input_samplefreq_addr;
      var $cmp13=(($5)|0) >= 16000;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $suggested_samplefreq=16000;
      label = 23; break;
    case 14: 
      var $6=$input_samplefreq_addr;
      var $cmp16=(($6)|0) >= 12000;
      if ($cmp16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $suggested_samplefreq=12000;
      label = 22; break;
    case 16: 
      var $7=$input_samplefreq_addr;
      var $cmp19=(($7)|0) >= 11025;
      if ($cmp19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $suggested_samplefreq=11025;
      label = 21; break;
    case 18: 
      var $8=$input_samplefreq_addr;
      var $cmp22=(($8)|0) >= 8000;
      if ($cmp22) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $suggested_samplefreq=8000;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $9=$lowpassfreq_addr;
      var $cmp32=(($9)|0)==-1;
      if ($cmp32) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $10=$suggested_samplefreq;
      $retval=$10;
      label = 65; break;
    case 30: 
      var $11=$lowpassfreq_addr;
      var $cmp35=(($11)|0) <= 15960;
      if ($cmp35) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $suggested_samplefreq=44100;
      label = 32; break;
    case 32: 
      var $12=$lowpassfreq_addr;
      var $cmp38=(($12)|0) <= 15250;
      if ($cmp38) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $suggested_samplefreq=32000;
      label = 34; break;
    case 34: 
      var $13=$lowpassfreq_addr;
      var $cmp41=(($13)|0) <= 11220;
      if ($cmp41) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $suggested_samplefreq=24000;
      label = 36; break;
    case 36: 
      var $14=$lowpassfreq_addr;
      var $cmp44=(($14)|0) <= 9970;
      if ($cmp44) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $suggested_samplefreq=22050;
      label = 38; break;
    case 38: 
      var $15=$lowpassfreq_addr;
      var $cmp47=(($15)|0) <= 7230;
      if ($cmp47) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $suggested_samplefreq=16000;
      label = 40; break;
    case 40: 
      var $16=$lowpassfreq_addr;
      var $cmp50=(($16)|0) <= 5420;
      if ($cmp50) { label = 41; break; } else { label = 42; break; }
    case 41: 
      $suggested_samplefreq=12000;
      label = 42; break;
    case 42: 
      var $17=$lowpassfreq_addr;
      var $cmp53=(($17)|0) <= 4510;
      if ($cmp53) { label = 43; break; } else { label = 44; break; }
    case 43: 
      $suggested_samplefreq=11025;
      label = 44; break;
    case 44: 
      var $18=$lowpassfreq_addr;
      var $cmp56=(($18)|0) <= 3970;
      if ($cmp56) { label = 45; break; } else { label = 46; break; }
    case 45: 
      $suggested_samplefreq=8000;
      label = 46; break;
    case 46: 
      var $19=$input_samplefreq_addr;
      var $20=$suggested_samplefreq;
      var $cmp59=(($19)|0) < (($20)|0);
      if ($cmp59) { label = 47; break; } else { label = 64; break; }
    case 47: 
      var $21=$input_samplefreq_addr;
      var $cmp61=(($21)|0) > 44100;
      if ($cmp61) { label = 48; break; } else { label = 49; break; }
    case 48: 
      $retval=48000;
      label = 65; break;
    case 49: 
      var $22=$input_samplefreq_addr;
      var $cmp64=(($22)|0) > 32000;
      if ($cmp64) { label = 50; break; } else { label = 51; break; }
    case 50: 
      $retval=44100;
      label = 65; break;
    case 51: 
      var $23=$input_samplefreq_addr;
      var $cmp67=(($23)|0) > 24000;
      if ($cmp67) { label = 52; break; } else { label = 53; break; }
    case 52: 
      $retval=32000;
      label = 65; break;
    case 53: 
      var $24=$input_samplefreq_addr;
      var $cmp70=(($24)|0) > 22050;
      if ($cmp70) { label = 54; break; } else { label = 55; break; }
    case 54: 
      $retval=24000;
      label = 65; break;
    case 55: 
      var $25=$input_samplefreq_addr;
      var $cmp73=(($25)|0) > 16000;
      if ($cmp73) { label = 56; break; } else { label = 57; break; }
    case 56: 
      $retval=22050;
      label = 65; break;
    case 57: 
      var $26=$input_samplefreq_addr;
      var $cmp76=(($26)|0) > 12000;
      if ($cmp76) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $retval=16000;
      label = 65; break;
    case 59: 
      var $27=$input_samplefreq_addr;
      var $cmp79=(($27)|0) > 11025;
      if ($cmp79) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $retval=12000;
      label = 65; break;
    case 61: 
      var $28=$input_samplefreq_addr;
      var $cmp82=(($28)|0) > 8000;
      if ($cmp82) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $retval=11025;
      label = 65; break;
    case 63: 
      $retval=8000;
      label = 65; break;
    case 64: 
      var $29=$suggested_samplefreq;
      $retval=$29;
      label = 65; break;
    case 65: 
      var $30=$retval;

      return $30;
    default: assert(0, "bad label: " + label);
  }

}
_optimum_samplefreq["X"]=1;

function _optimum_bandwidth($lowerlimit, $upperlimit, $bitrate) {
  var label = 0;


  var $lowerlimit_addr;
  var $upperlimit_addr;
  var $bitrate_addr;
  var $table_index;
  $lowerlimit_addr=$lowerlimit;
  $upperlimit_addr=$upperlimit;
  $bitrate_addr=$bitrate;
  var $0=$bitrate_addr;
  var $conv=(($0) & 65535);
  var $call=_nearestBitrateFullIndex($conv);
  $table_index=$call;
  var $1=$table_index;
  var $arrayidx=((5291756+($1<<3))|0);
  var $bitrate1=(($arrayidx)|0);
  var $2=HEAP32[(($bitrate1)>>2)];
  var $3=$table_index;
  var $arrayidx2=((5291756+($3<<3))|0);
  var $lowpass=(($arrayidx2+4)|0);
  var $4=HEAP32[(($lowpass)>>2)];
  var $conv3=(($4)|0);
  var $5=$lowerlimit_addr;
  (HEAPF64[(tempDoublePtr)>>3]=$conv3,HEAP32[(($5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=$upperlimit_addr;

  return;
}


function _lame_init_params_ppflt($gfc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $band;
      var $maxband;
      var $minband;
      var $freq;
      var $lowpass_band;
      var $highpass_band;
      var $fc1;
      var $fc2;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      $lowpass_band=32;
      $highpass_band=-1;
      var $1=$cfg;
      var $lowpass1=(($1+232)|0);
      var $2=HEAPF32[(($lowpass1)>>2)];
      var $cmp=$2 > 0;
      if ($cmp) { label = 3; break; } else { label = 22; break; }
    case 3: 
      $minband=999;
      $band=0;
      label = 4; break;
    case 4: 
      var $3=$band;
      var $cmp2=(($3)|0) <= 31;
      if ($cmp2) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $4=$band;
      var $conv=(($4)|0);
      var $div=($conv)/(31);
      var $conv3=$div;
      $freq=$conv3;
      var $5=$freq;
      var $6=$cfg;
      var $lowpass2=(($6+236)|0);
      var $7=HEAPF32[(($lowpass2)>>2)];
      var $cmp4=$5 >= $7;
      if ($cmp4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $8=$lowpass_band;
      var $9=$band;
      var $cmp7=(($8)|0) < (($9)|0);
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$lowpass_band;
      var $cond = $10;label = 9; break;
    case 8: 
      var $11=$band;
      var $cond = $11;label = 9; break;
    case 9: 
      var $cond;
      $lowpass_band=$cond;
      label = 10; break;
    case 10: 
      var $12=$cfg;
      var $lowpass19=(($12+232)|0);
      var $13=HEAPF32[(($lowpass19)>>2)];
      var $14=$freq;
      var $cmp10=$13 < $14;
      if ($cmp10) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $15=$freq;
      var $16=$cfg;
      var $lowpass212=(($16+236)|0);
      var $17=HEAPF32[(($lowpass212)>>2)];
      var $cmp13=$15 < $17;
      if ($cmp13) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $18=$minband;
      var $19=$band;
      var $cmp16=(($18)|0) < (($19)|0);
      if ($cmp16) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=$minband;
      var $cond21 = $20;label = 15; break;
    case 14: 
      var $21=$band;
      var $cond21 = $21;label = 15; break;
    case 15: 
      var $cond21;
      $minband=$cond21;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $22=$band;
      var $inc=((($22)+(1))|0);
      $band=$inc;
      label = 4; break;
    case 18: 
      var $23=$minband;
      var $cmp23=(($23)|0)==999;
      if ($cmp23) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $24=$lowpass_band;
      var $conv26=(($24)|0);
      var $sub=($conv26)-(0.75);
      var $div27=($sub)/(31);
      var $conv28=$div27;
      var $25=$cfg;
      var $lowpass129=(($25+232)|0);
      HEAPF32[(($lowpass129)>>2)]=$conv28;
      label = 21; break;
    case 20: 
      var $26=$minband;
      var $conv30=(($26)|0);
      var $sub31=($conv30)-(0.75);
      var $div32=($sub31)/(31);
      var $conv33=$div32;
      var $27=$cfg;
      var $lowpass134=(($27+232)|0);
      HEAPF32[(($lowpass134)>>2)]=$conv33;
      label = 21; break;
    case 21: 
      var $28=$lowpass_band;
      var $conv36=(($28)|0);
      var $div37=($conv36)/(31);
      var $conv38=$div37;
      var $29=$cfg;
      var $lowpass239=(($29+236)|0);
      HEAPF32[(($lowpass239)>>2)]=$conv38;
      label = 22; break;
    case 22: 
      var $30=$cfg;
      var $highpass2=(($30+244)|0);
      var $31=HEAPF32[(($highpass2)>>2)];
      var $cmp41=$31 > 0;
      if ($cmp41) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $32=$cfg;
      var $highpass244=(($32+244)|0);
      var $33=HEAPF32[(($highpass244)>>2)];
      var $conv45=$33;
      var $cmp46=$conv45 < 0.021774193548387097;
      if ($cmp46) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $34=$cfg;
      var $highpass1=(($34+240)|0);
      HEAPF32[(($highpass1)>>2)]=0;
      var $35=$cfg;
      var $highpass249=(($35+244)|0);
      HEAPF32[(($highpass249)>>2)]=0;
      var $36=$gfc_addr;
      _lame_msgf($36, ((5382796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $37=$cfg;
      var $highpass252=(($37+244)|0);
      var $38=HEAPF32[(($highpass252)>>2)];
      var $cmp53=$38 > 0;
      if ($cmp53) { label = 27; break; } else { label = 46; break; }
    case 27: 
      $maxband=-1;
      $band=0;
      label = 28; break;
    case 28: 
      var $39=$band;
      var $cmp57=(($39)|0) <= 31;
      if ($cmp57) { label = 29; break; } else { label = 42; break; }
    case 29: 
      var $40=$band;
      var $conv60=(($40)|0);
      var $div61=($conv60)/(31);
      var $conv62=$div61;
      $freq=$conv62;
      var $41=$freq;
      var $42=$cfg;
      var $highpass163=(($42+240)|0);
      var $43=HEAPF32[(($highpass163)>>2)];
      var $cmp64=$41 <= $43;
      if ($cmp64) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $44=$highpass_band;
      var $45=$band;
      var $cmp67=(($44)|0) > (($45)|0);
      if ($cmp67) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $46=$highpass_band;
      var $cond72 = $46;label = 33; break;
    case 32: 
      var $47=$band;
      var $cond72 = $47;label = 33; break;
    case 33: 
      var $cond72;
      $highpass_band=$cond72;
      label = 34; break;
    case 34: 
      var $48=$cfg;
      var $highpass174=(($48+240)|0);
      var $49=HEAPF32[(($highpass174)>>2)];
      var $50=$freq;
      var $cmp75=$49 < $50;
      if ($cmp75) { label = 35; break; } else { label = 40; break; }
    case 35: 
      var $51=$freq;
      var $52=$cfg;
      var $highpass278=(($52+244)|0);
      var $53=HEAPF32[(($highpass278)>>2)];
      var $cmp79=$51 < $53;
      if ($cmp79) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $54=$maxband;
      var $55=$band;
      var $cmp82=(($54)|0) > (($55)|0);
      if ($cmp82) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $56=$maxband;
      var $cond87 = $56;label = 39; break;
    case 38: 
      var $57=$band;
      var $cond87 = $57;label = 39; break;
    case 39: 
      var $cond87;
      $maxband=$cond87;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $58=$band;
      var $inc90=((($58)+(1))|0);
      $band=$inc90;
      label = 28; break;
    case 42: 
      var $59=$highpass_band;
      var $conv92=(($59)|0);
      var $div93=($conv92)/(31);
      var $conv94=$div93;
      var $60=$cfg;
      var $highpass195=(($60+240)|0);
      HEAPF32[(($highpass195)>>2)]=$conv94;
      var $61=$maxband;
      var $cmp96=(($61)|0)==-1;
      if ($cmp96) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $62=$highpass_band;
      var $conv99=(($62)|0);
      var $add=($conv99)+(0.75);
      var $div100=($add)/(31);
      var $conv101=$div100;
      var $63=$cfg;
      var $highpass2102=(($63+244)|0);
      HEAPF32[(($highpass2102)>>2)]=$conv101;
      label = 45; break;
    case 44: 
      var $64=$maxband;
      var $conv104=(($64)|0);
      var $add105=($conv104)+(0.75);
      var $div106=($add105)/(31);
      var $conv107=$div106;
      var $65=$cfg;
      var $highpass2108=(($65+244)|0);
      HEAPF32[(($highpass2108)>>2)]=$conv107;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      $band=0;
      label = 47; break;
    case 47: 
      var $66=$band;
      var $cmp112=(($66)|0) < 32;
      if ($cmp112) { label = 48; break; } else { label = 56; break; }
    case 48: 
      var $67=$band;
      var $conv115=(($67)|0);
      var $div116=($conv115)/(31);
      $freq=$div116;
      var $68=$cfg;
      var $highpass2117=(($68+244)|0);
      var $69=HEAPF32[(($highpass2117)>>2)];
      var $70=$cfg;
      var $highpass1118=(($70+240)|0);
      var $71=HEAPF32[(($highpass1118)>>2)];
      var $cmp119=$69 > $71;
      if ($cmp119) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $72=$cfg;
      var $highpass2122=(($72+244)|0);
      var $73=HEAPF32[(($highpass2122)>>2)];
      var $74=$freq;
      var $sub123=($73)-($74);
      var $conv124=$sub123;
      var $75=$cfg;
      var $highpass2125=(($75+244)|0);
      var $76=HEAPF32[(($highpass2125)>>2)];
      var $77=$cfg;
      var $highpass1126=(($77+240)|0);
      var $78=HEAPF32[(($highpass1126)>>2)];
      var $sub127=($76)-($78);
      var $conv128=$sub127;
      var $add129=($conv128)+(1e-20);
      var $div130=($conv124)/($add129);
      var $conv131=$div130;
      var $call=_filter_coef($conv131);
      $fc1=$call;
      label = 51; break;
    case 50: 
      $fc1=1;
      label = 51; break;
    case 51: 
      var $79=$cfg;
      var $lowpass2134=(($79+236)|0);
      var $80=HEAPF32[(($lowpass2134)>>2)];
      var $81=$cfg;
      var $lowpass1135=(($81+232)|0);
      var $82=HEAPF32[(($lowpass1135)>>2)];
      var $cmp136=$80 > $82;
      if ($cmp136) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $83=$freq;
      var $84=$cfg;
      var $lowpass1139=(($84+232)|0);
      var $85=HEAPF32[(($lowpass1139)>>2)];
      var $sub140=($83)-($85);
      var $conv141=$sub140;
      var $86=$cfg;
      var $lowpass2142=(($86+236)|0);
      var $87=HEAPF32[(($lowpass2142)>>2)];
      var $88=$cfg;
      var $lowpass1143=(($88+232)|0);
      var $89=HEAPF32[(($lowpass1143)>>2)];
      var $sub144=($87)-($89);
      var $conv145=$sub144;
      var $add146=($conv145)+(1e-20);
      var $div147=($conv141)/($add146);
      var $conv148=$div147;
      var $call149=_filter_coef($conv148);
      $fc2=$call149;
      label = 54; break;
    case 53: 
      $fc2=1;
      label = 54; break;
    case 54: 
      var $90=$fc1;
      var $91=$fc2;
      var $mul=($90)*($91);
      var $92=$band;
      var $93=$gfc_addr;
      var $sv_enc=(($93+27820)|0);
      var $amp_filter=(($sv_enc+9216)|0);
      var $arrayidx=(($amp_filter+($92<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=$mul;
      label = 55; break;
    case 55: 
      var $94=$band;
      var $inc153=((($94)+(1))|0);
      $band=$inc153;
      label = 47; break;
    case 56: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_init_params_ppflt["X"]=1;

function _lame_init_qval($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $gfc;
      var $cfg;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      var $3=$gfp_addr;
      var $quality=(($3+44)|0);
      var $4=HEAP32[(($quality)>>2)];
      if ((($4)|0)==9) {
        label = 4; break;
      }
      else if ((($4)|0)==8) {
        label = 5; break;
      }
      else if ((($4)|0)==7) {
        label = 6; break;
      }
      else if ((($4)|0)==6) {
        label = 10; break;
      }
      else if ((($4)|0)==5) {
        label = 15; break;
      }
      else if ((($4)|0)==4) {
        label = 20; break;
      }
      else if ((($4)|0)==3) {
        label = 25; break;
      }
      else if ((($4)|0)==2) {
        label = 30; break;
      }
      else if ((($4)|0)==1) {
        label = 37; break;
      }
      else if ((($4)|0)==0) {
        label = 44; break;
      }
      else {
      label = 3; break;
      }
      
    case 3: 
      label = 4; break;
    case 4: 
      var $5=$cfg;
      var $noise_shaping=(($5+12)|0);
      HEAP32[(($noise_shaping)>>2)]=0;
      var $6=$cfg;
      var $noise_shaping_amp=(($6+24)|0);
      HEAP32[(($noise_shaping_amp)>>2)]=0;
      var $7=$cfg;
      var $noise_shaping_stop=(($7+28)|0);
      HEAP32[(($noise_shaping_stop)>>2)]=0;
      var $8=$cfg;
      var $use_best_huffman=(($8+20)|0);
      HEAP32[(($use_best_huffman)>>2)]=0;
      var $9=$cfg;
      var $full_outer_loop=(($9+32)|0);
      HEAP32[(($full_outer_loop)>>2)]=0;
      label = 51; break;
    case 5: 
      var $10=$gfp_addr;
      var $quality3=(($10+44)|0);
      HEAP32[(($quality3)>>2)]=7;
      label = 6; break;
    case 6: 
      var $11=$cfg;
      var $noise_shaping5=(($11+12)|0);
      HEAP32[(($noise_shaping5)>>2)]=0;
      var $12=$cfg;
      var $noise_shaping_amp6=(($12+24)|0);
      HEAP32[(($noise_shaping_amp6)>>2)]=0;
      var $13=$cfg;
      var $noise_shaping_stop7=(($13+28)|0);
      HEAP32[(($noise_shaping_stop7)>>2)]=0;
      var $14=$cfg;
      var $use_best_huffman8=(($14+20)|0);
      HEAP32[(($use_best_huffman8)>>2)]=0;
      var $15=$cfg;
      var $full_outer_loop9=(($15+32)|0);
      HEAP32[(($full_outer_loop9)>>2)]=0;
      var $16=$gfp_addr;
      var $VBR=(($16+156)|0);
      var $17=HEAP32[(($VBR)>>2)];
      var $cmp=(($17)|0)==1;
      if ($cmp) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$gfp_addr;
      var $VBR10=(($18+156)|0);
      var $19=HEAP32[(($VBR10)>>2)];
      var $cmp11=(($19)|0)==4;
      if ($cmp11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$cfg;
      var $full_outer_loop12=(($20+32)|0);
      HEAP32[(($full_outer_loop12)>>2)]=-1;
      label = 9; break;
    case 9: 
      label = 51; break;
    case 10: 
      var $21=$cfg;
      var $noise_shaping14=(($21+12)|0);
      var $22=HEAP32[(($noise_shaping14)>>2)];
      var $cmp15=(($22)|0)==0;
      if ($cmp15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$cfg;
      var $noise_shaping17=(($23+12)|0);
      HEAP32[(($noise_shaping17)>>2)]=1;
      label = 12; break;
    case 12: 
      var $24=$cfg;
      var $noise_shaping_amp19=(($24+24)|0);
      HEAP32[(($noise_shaping_amp19)>>2)]=0;
      var $25=$cfg;
      var $noise_shaping_stop20=(($25+28)|0);
      HEAP32[(($noise_shaping_stop20)>>2)]=0;
      var $26=$cfg;
      var $subblock_gain=(($26+16)|0);
      var $27=HEAP32[(($subblock_gain)>>2)];
      var $cmp21=(($27)|0)==-1;
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$cfg;
      var $subblock_gain23=(($28+16)|0);
      HEAP32[(($subblock_gain23)>>2)]=1;
      label = 14; break;
    case 14: 
      var $29=$cfg;
      var $use_best_huffman25=(($29+20)|0);
      HEAP32[(($use_best_huffman25)>>2)]=0;
      var $30=$cfg;
      var $full_outer_loop26=(($30+32)|0);
      HEAP32[(($full_outer_loop26)>>2)]=0;
      label = 51; break;
    case 15: 
      var $31=$cfg;
      var $noise_shaping28=(($31+12)|0);
      var $32=HEAP32[(($noise_shaping28)>>2)];
      var $cmp29=(($32)|0)==0;
      if ($cmp29) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $33=$cfg;
      var $noise_shaping31=(($33+12)|0);
      HEAP32[(($noise_shaping31)>>2)]=1;
      label = 17; break;
    case 17: 
      var $34=$cfg;
      var $noise_shaping_amp33=(($34+24)|0);
      HEAP32[(($noise_shaping_amp33)>>2)]=0;
      var $35=$cfg;
      var $noise_shaping_stop34=(($35+28)|0);
      HEAP32[(($noise_shaping_stop34)>>2)]=0;
      var $36=$cfg;
      var $subblock_gain35=(($36+16)|0);
      var $37=HEAP32[(($subblock_gain35)>>2)];
      var $cmp36=(($37)|0)==-1;
      if ($cmp36) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $38=$cfg;
      var $subblock_gain38=(($38+16)|0);
      HEAP32[(($subblock_gain38)>>2)]=1;
      label = 19; break;
    case 19: 
      var $39=$cfg;
      var $use_best_huffman40=(($39+20)|0);
      HEAP32[(($use_best_huffman40)>>2)]=0;
      var $40=$cfg;
      var $full_outer_loop41=(($40+32)|0);
      HEAP32[(($full_outer_loop41)>>2)]=0;
      label = 51; break;
    case 20: 
      var $41=$cfg;
      var $noise_shaping43=(($41+12)|0);
      var $42=HEAP32[(($noise_shaping43)>>2)];
      var $cmp44=(($42)|0)==0;
      if ($cmp44) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $43=$cfg;
      var $noise_shaping46=(($43+12)|0);
      HEAP32[(($noise_shaping46)>>2)]=1;
      label = 22; break;
    case 22: 
      var $44=$cfg;
      var $noise_shaping_amp48=(($44+24)|0);
      HEAP32[(($noise_shaping_amp48)>>2)]=0;
      var $45=$cfg;
      var $noise_shaping_stop49=(($45+28)|0);
      HEAP32[(($noise_shaping_stop49)>>2)]=0;
      var $46=$cfg;
      var $subblock_gain50=(($46+16)|0);
      var $47=HEAP32[(($subblock_gain50)>>2)];
      var $cmp51=(($47)|0)==-1;
      if ($cmp51) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $48=$cfg;
      var $subblock_gain53=(($48+16)|0);
      HEAP32[(($subblock_gain53)>>2)]=1;
      label = 24; break;
    case 24: 
      var $49=$cfg;
      var $use_best_huffman55=(($49+20)|0);
      HEAP32[(($use_best_huffman55)>>2)]=1;
      var $50=$cfg;
      var $full_outer_loop56=(($50+32)|0);
      HEAP32[(($full_outer_loop56)>>2)]=0;
      label = 51; break;
    case 25: 
      var $51=$cfg;
      var $noise_shaping58=(($51+12)|0);
      var $52=HEAP32[(($noise_shaping58)>>2)];
      var $cmp59=(($52)|0)==0;
      if ($cmp59) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $53=$cfg;
      var $noise_shaping61=(($53+12)|0);
      HEAP32[(($noise_shaping61)>>2)]=1;
      label = 27; break;
    case 27: 
      var $54=$cfg;
      var $noise_shaping_amp63=(($54+24)|0);
      HEAP32[(($noise_shaping_amp63)>>2)]=1;
      var $55=$cfg;
      var $noise_shaping_stop64=(($55+28)|0);
      HEAP32[(($noise_shaping_stop64)>>2)]=1;
      var $56=$cfg;
      var $subblock_gain65=(($56+16)|0);
      var $57=HEAP32[(($subblock_gain65)>>2)];
      var $cmp66=(($57)|0)==-1;
      if ($cmp66) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $58=$cfg;
      var $subblock_gain68=(($58+16)|0);
      HEAP32[(($subblock_gain68)>>2)]=1;
      label = 29; break;
    case 29: 
      var $59=$cfg;
      var $use_best_huffman70=(($59+20)|0);
      HEAP32[(($use_best_huffman70)>>2)]=1;
      var $60=$cfg;
      var $full_outer_loop71=(($60+32)|0);
      HEAP32[(($full_outer_loop71)>>2)]=0;
      label = 51; break;
    case 30: 
      var $61=$cfg;
      var $noise_shaping73=(($61+12)|0);
      var $62=HEAP32[(($noise_shaping73)>>2)];
      var $cmp74=(($62)|0)==0;
      if ($cmp74) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $63=$cfg;
      var $noise_shaping76=(($63+12)|0);
      HEAP32[(($noise_shaping76)>>2)]=1;
      label = 32; break;
    case 32: 
      var $64=$gfc;
      var $sv_qnt=(($64+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $65=HEAP32[(($substep_shaping)>>2)];
      var $cmp78=(($65)|0)==0;
      if ($cmp78) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $66=$gfc;
      var $sv_qnt80=(($66+84764)|0);
      var $substep_shaping81=(($sv_qnt80+328)|0);
      HEAP32[(($substep_shaping81)>>2)]=2;
      label = 34; break;
    case 34: 
      var $67=$cfg;
      var $noise_shaping_amp83=(($67+24)|0);
      HEAP32[(($noise_shaping_amp83)>>2)]=1;
      var $68=$cfg;
      var $noise_shaping_stop84=(($68+28)|0);
      HEAP32[(($noise_shaping_stop84)>>2)]=1;
      var $69=$cfg;
      var $subblock_gain85=(($69+16)|0);
      var $70=HEAP32[(($subblock_gain85)>>2)];
      var $cmp86=(($70)|0)==-1;
      if ($cmp86) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $71=$cfg;
      var $subblock_gain88=(($71+16)|0);
      HEAP32[(($subblock_gain88)>>2)]=1;
      label = 36; break;
    case 36: 
      var $72=$cfg;
      var $use_best_huffman90=(($72+20)|0);
      HEAP32[(($use_best_huffman90)>>2)]=1;
      var $73=$cfg;
      var $full_outer_loop91=(($73+32)|0);
      HEAP32[(($full_outer_loop91)>>2)]=0;
      label = 51; break;
    case 37: 
      var $74=$cfg;
      var $noise_shaping93=(($74+12)|0);
      var $75=HEAP32[(($noise_shaping93)>>2)];
      var $cmp94=(($75)|0)==0;
      if ($cmp94) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $76=$cfg;
      var $noise_shaping96=(($76+12)|0);
      HEAP32[(($noise_shaping96)>>2)]=1;
      label = 39; break;
    case 39: 
      var $77=$gfc;
      var $sv_qnt98=(($77+84764)|0);
      var $substep_shaping99=(($sv_qnt98+328)|0);
      var $78=HEAP32[(($substep_shaping99)>>2)];
      var $cmp100=(($78)|0)==0;
      if ($cmp100) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $79=$gfc;
      var $sv_qnt102=(($79+84764)|0);
      var $substep_shaping103=(($sv_qnt102+328)|0);
      HEAP32[(($substep_shaping103)>>2)]=2;
      label = 41; break;
    case 41: 
      var $80=$cfg;
      var $noise_shaping_amp105=(($80+24)|0);
      HEAP32[(($noise_shaping_amp105)>>2)]=2;
      var $81=$cfg;
      var $noise_shaping_stop106=(($81+28)|0);
      HEAP32[(($noise_shaping_stop106)>>2)]=1;
      var $82=$cfg;
      var $subblock_gain107=(($82+16)|0);
      var $83=HEAP32[(($subblock_gain107)>>2)];
      var $cmp108=(($83)|0)==-1;
      if ($cmp108) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $84=$cfg;
      var $subblock_gain110=(($84+16)|0);
      HEAP32[(($subblock_gain110)>>2)]=1;
      label = 43; break;
    case 43: 
      var $85=$cfg;
      var $use_best_huffman112=(($85+20)|0);
      HEAP32[(($use_best_huffman112)>>2)]=1;
      var $86=$cfg;
      var $full_outer_loop113=(($86+32)|0);
      HEAP32[(($full_outer_loop113)>>2)]=0;
      label = 51; break;
    case 44: 
      var $87=$cfg;
      var $noise_shaping115=(($87+12)|0);
      var $88=HEAP32[(($noise_shaping115)>>2)];
      var $cmp116=(($88)|0)==0;
      if ($cmp116) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $89=$cfg;
      var $noise_shaping118=(($89+12)|0);
      HEAP32[(($noise_shaping118)>>2)]=1;
      label = 46; break;
    case 46: 
      var $90=$gfc;
      var $sv_qnt120=(($90+84764)|0);
      var $substep_shaping121=(($sv_qnt120+328)|0);
      var $91=HEAP32[(($substep_shaping121)>>2)];
      var $cmp122=(($91)|0)==0;
      if ($cmp122) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $92=$gfc;
      var $sv_qnt124=(($92+84764)|0);
      var $substep_shaping125=(($sv_qnt124+328)|0);
      HEAP32[(($substep_shaping125)>>2)]=2;
      label = 48; break;
    case 48: 
      var $93=$cfg;
      var $noise_shaping_amp127=(($93+24)|0);
      HEAP32[(($noise_shaping_amp127)>>2)]=2;
      var $94=$cfg;
      var $noise_shaping_stop128=(($94+28)|0);
      HEAP32[(($noise_shaping_stop128)>>2)]=1;
      var $95=$cfg;
      var $subblock_gain129=(($95+16)|0);
      var $96=HEAP32[(($subblock_gain129)>>2)];
      var $cmp130=(($96)|0)==-1;
      if ($cmp130) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $97=$cfg;
      var $subblock_gain132=(($97+16)|0);
      HEAP32[(($subblock_gain132)>>2)]=1;
      label = 50; break;
    case 50: 
      var $98=$cfg;
      var $use_best_huffman134=(($98+20)|0);
      HEAP32[(($use_best_huffman134)>>2)]=1;
      var $99=$cfg;
      var $full_outer_loop135=(($99+32)|0);
      HEAP32[(($full_outer_loop135)>>2)]=1;
      label = 51; break;
    case 51: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_init_qval["X"]=1;

function _lame_init_bitstream($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $4=$gfc;
      var $ov_enc=(($4+84036)|0);
      var $frame_number=(($ov_enc+708)|0);
      HEAP32[(($frame_number)>>2)]=0;
      var $5=$gfp_addr;
      var $write_id3tag_automatic=(($5+68)|0);
      var $6=HEAP32[(($write_id3tag_automatic)>>2)];
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$gfp_addr;
      var $call4=_id3tag_write_v2($7);
      label = 6; break;
    case 6: 
      var $8=$gfc;
      var $ov_enc5=(($8+84036)|0);
      var $bitrate_channelmode_hist=(($ov_enc5)|0);
      var $9=$bitrate_channelmode_hist;
      for (var $$dest = $9>>2, $$stop = $$dest + 80; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $10=$gfc;
      var $ov_enc6=(($10+84036)|0);
      var $bitrate_blocktype_hist=(($ov_enc6+320)|0);
      var $11=$bitrate_blocktype_hist;
      for (var $$dest = $11>>2, $$stop = $$dest + 96; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $12=$gfc;
      var $ov_rpg=(($12+85676)|0);
      var $PeakSample=(($ov_rpg+4)|0);
      HEAPF32[(($PeakSample)>>2)]=0;
      var $13=$gfc;
      var $cfg=(($13+16)|0);
      var $write_lame_tag=(($cfg+140)|0);
      var $14=HEAP32[(($write_lame_tag)>>2)];
      var $tobool7=(($14)|0)!=0;
      if ($tobool7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$gfp_addr;
      var $call9=_InitVbrTag($15);
      label = 8; break;
    case 8: 
      $retval=0;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      $retval=-3;
      label = 11; break;
    case 11: 
      var $16=$retval;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}
_lame_init_bitstream["X"]=1;

function _lame_print_config($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $gfc;
      var $cfg;
      var $out_samplerate;
      var $in_samplerate;
      var $text=__stackBase__;
      var $fft_asm_used;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      var $3=$cfg;
      var $samplerate_out=(($3+48)|0);
      var $4=HEAP32[(($samplerate_out)>>2)];
      var $conv=(($4)|0);
      $out_samplerate=$conv;
      var $5=$cfg;
      var $samplerate_in=(($5+44)|0);
      var $6=HEAP32[(($samplerate_in)>>2)];
      var $conv2=(($6)|0);
      $in_samplerate=$conv2;
      var $7=$gfc;
      var $call=_get_lame_version();
      var $call3=_get_lame_os_bitness();
      var $call4=_get_lame_url();
      _lame_msgf($7, ((5386456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call,HEAP32[(((tempInt)+(4))>>2)]=$call3,HEAP32[(((tempInt)+(8))>>2)]=$call4,tempInt));
      var $8=$gfc;
      var $CPU_features=(($8+85752)|0);
      var $9=$CPU_features;
      var $10=HEAP32[(($9)>>2)];
      var $bf_clear=$10 & 1;
      var $tobool=(($bf_clear)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $11=$gfc;
      var $CPU_features5=(($11+85752)|0);
      var $12=$CPU_features5;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 >>> 1;
      var $bf_clear6=$14 & 1;
      var $tobool7=(($bf_clear6)|0)!=0;
      if ($tobool7) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $15=$gfc;
      var $CPU_features9=(($15+85752)|0);
      var $16=$CPU_features9;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 2;
      var $bf_clear10=$18 & 1;
      var $tobool11=(($bf_clear10)|0)!=0;
      if ($tobool11) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $19=$gfc;
      var $CPU_features13=(($19+85752)|0);
      var $20=$CPU_features13;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 3;
      var $bf_clear14=$22 & 1;
      var $tobool15=(($bf_clear14)|0)!=0;
      if ($tobool15) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $23=$text;
      _memset($23, 0, 256);
      $fft_asm_used=0;
      var $24=$gfc;
      var $CPU_features16=(($24+85752)|0);
      var $25=$CPU_features16;
      var $26=HEAP32[(($25)>>2)];
      var $bf_clear17=$26 & 1;
      var $tobool18=(($bf_clear17)|0)!=0;
      if ($tobool18) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $arraydecay=(($text)|0);
      _concatSep($arraydecay, ((5385028)|0), ((5384548)|0));
      label = 8; break;
    case 8: 
      var $27=$gfc;
      var $CPU_features20=(($27+85752)|0);
      var $28=$CPU_features20;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 1;
      var $bf_clear21=$30 & 1;
      var $tobool22=(($bf_clear21)|0)!=0;
      if ($tobool22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $arraydecay24=(($text)|0);
      var $31=$fft_asm_used;
      var $cmp=(($31)|0)==1;
      var $cond=$cmp ? (((5384164)|0)) : (((5383720)|0));
      _concatSep($arraydecay24, ((5385028)|0), $cond);
      label = 10; break;
    case 10: 
      var $32=$gfc;
      var $CPU_features27=(($32+85752)|0);
      var $33=$CPU_features27;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 >>> 2;
      var $bf_clear28=$35 & 1;
      var $tobool29=(($bf_clear28)|0)!=0;
      if ($tobool29) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $arraydecay31=(($text)|0);
      var $36=$fft_asm_used;
      var $cmp32=(($36)|0)==2;
      var $cond34=$cmp32 ? (((5383344)|0)) : (((5382876)|0));
      _concatSep($arraydecay31, ((5385028)|0), $cond34);
      label = 12; break;
    case 12: 
      var $37=$gfc;
      var $CPU_features36=(($37+85752)|0);
      var $38=$CPU_features36;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 3;
      var $bf_clear37=$40 & 1;
      var $tobool38=(($bf_clear37)|0)!=0;
      if ($tobool38) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $arraydecay40=(($text)|0);
      var $41=$fft_asm_used;
      var $cmp41=(($41)|0)==3;
      var $cond43=$cmp41 ? (((5387592)|0)) : (((5387444)|0));
      _concatSep($arraydecay40, ((5385028)|0), $cond43);
      label = 14; break;
    case 14: 
      var $42=$gfc;
      var $arraydecay45=(($text)|0);
      _lame_msgf($42, ((5387292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$arraydecay45,tempInt));
      label = 15; break;
    case 15: 
      var $43=$cfg;
      var $channels_in=(($43+52)|0);
      var $44=HEAP32[(($channels_in)>>2)];
      var $cmp47=(($44)|0)==2;
      if ($cmp47) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $45=$cfg;
      var $channels_out=(($45+56)|0);
      var $46=HEAP32[(($channels_out)>>2)];
      var $cmp49=(($46)|0)==1;
      if ($cmp49) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $47=$gfc;
      _lame_msgf($47, ((5387060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 18; break;
    case 18: 
      var $48=$cfg;
      var $call53=_isResamplingNecessary($48);
      var $tobool54=(($call53)|0)!=0;
      if ($tobool54) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $49=$gfc;
      var $50=$in_samplerate;
      var $mul=($50)*(0.001);
      var $51=$out_samplerate;
      var $mul56=($51)*(0.001);
      _lame_msgf($49, ((5386892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$mul56,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 20; break;
    case 20: 
      var $52=$cfg;
      var $highpass2=(($52+244)|0);
      var $53=HEAPF32[(($highpass2)>>2)];
      var $conv58=$53;
      var $cmp59=$conv58 > 0;
      if ($cmp59) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $54=$gfc;
      var $55=$cfg;
      var $highpass1=(($55+240)|0);
      var $56=HEAPF32[(($highpass1)>>2)];
      var $conv62=$56;
      var $mul63=($conv62)*(0.5);
      var $57=$out_samplerate;
      var $mul64=($mul63)*($57);
      var $58=$cfg;
      var $highpass265=(($58+244)|0);
      var $59=HEAPF32[(($highpass265)>>2)];
      var $conv66=$59;
      var $mul67=($conv66)*(0.5);
      var $60=$out_samplerate;
      var $mul68=($mul67)*($60);
      _lame_msgf($54, ((5386556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$mul64,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$mul68,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 22; break;
    case 22: 
      var $61=$cfg;
      var $lowpass1=(($61+232)|0);
      var $62=HEAPF32[(($lowpass1)>>2)];
      var $conv70=$62;
      var $cmp71=0 < $conv70;
      if ($cmp71) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $63=$cfg;
      var $lowpass2=(($63+236)|0);
      var $64=HEAPF32[(($lowpass2)>>2)];
      var $conv74=$64;
      var $cmp75=0 < $conv74;
      if ($cmp75) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $65=$gfc;
      var $66=$cfg;
      var $lowpass178=(($66+232)|0);
      var $67=HEAPF32[(($lowpass178)>>2)];
      var $conv79=$67;
      var $mul80=($conv79)*(0.5);
      var $68=$out_samplerate;
      var $mul81=($mul80)*($68);
      var $69=$cfg;
      var $lowpass282=(($69+236)|0);
      var $70=HEAPF32[(($lowpass282)>>2)];
      var $conv83=$70;
      var $mul84=($conv83)*(0.5);
      var $71=$out_samplerate;
      var $mul85=($mul84)*($71);
      _lame_msgf($65, ((5386376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$mul81,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$mul85,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 26; break;
    case 25: 
      var $72=$gfc;
      _lame_msgf($72, ((5386332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 26; break;
    case 26: 
      var $73=$cfg;
      var $free_format=(($73+136)|0);
      var $74=HEAP32[(($free_format)>>2)];
      var $tobool87=(($74)|0)!=0;
      if ($tobool87) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $75=$gfc;
      _lame_msgf($75, ((5386260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $76=$cfg;
      var $avg_bitrate=(($76+104)|0);
      var $77=HEAP32[(($avg_bitrate)>>2)];
      var $cmp89=(($77)|0) > 320;
      if ($cmp89) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $78=$gfc;
      _lame_msgf($78, ((5386160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_print_config["X"]=1;

function _concatSep($dest, $sep, $str) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dest_addr;
      var $sep_addr;
      var $str_addr;
      $dest_addr=$dest;
      $sep_addr=$sep;
      $str_addr=$str;
      var $0=$dest_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$dest_addr;
      var $3=$sep_addr;
      var $call=_strcat($2, $3);
      label = 4; break;
    case 4: 
      var $4=$dest_addr;
      var $5=$str_addr;
      var $call2=_strcat($4, $5);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_print_internals($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $gfc;
      var $cfg;
      var $pc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      $pc=((5386112)|0);
      var $3=$gfc;
      _lame_msgf($3, ((5386092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=$gfc;
      var $5=$gfp_addr;
      var $scale=(($5+20)|0);
      var $6=HEAPF32[(($scale)>>2)];
      var $conv=$6;
      _lame_msgf($4, ((5386064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $7=$gfc;
      var $8=$gfp_addr;
      var $scale_left=(($8+24)|0);
      var $9=HEAPF32[(($scale_left)>>2)];
      var $conv2=$9;
      _lame_msgf($7, ((5386028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv2,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $10=$gfc;
      var $11=$gfp_addr;
      var $scale_right=(($11+28)|0);
      var $12=HEAPF32[(($scale_right)>>2)];
      var $conv3=$12;
      _lame_msgf($10, ((5385720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv3,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $13=$cfg;
      var $use_best_huffman=(($13+20)|0);
      var $14=HEAP32[(($use_best_huffman)>>2)];
      if ((($14)|0)==1) {
        label = 4; break;
      }
      else if ((($14)|0)==2) {
        label = 5; break;
      }
      else {
      label = 3; break;
      }
      
    case 3: 
      $pc=((5385664)|0);
      label = 6; break;
    case 4: 
      $pc=((5385640)|0);
      label = 6; break;
    case 5: 
      $pc=((5385548)|0);
      label = 6; break;
    case 6: 
      var $15=$gfc;
      var $16=$pc;
      _lame_msgf($15, ((5385516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=$gfc;
      var $18=$gfp_addr;
      var $experimentalY=(($18+140)|0);
      var $19=HEAP32[(($experimentalY)>>2)];
      _lame_msgf($17, ((5385488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
      var $20=$gfc;
      _lame_msgf($20, ((5385412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=$gfc;
      _lame_msgf($21, ((5385380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $22=$cfg;
      var $version=(($22)|0);
      var $23=HEAP32[(($version)>>2)];
      if ((($23)|0)==0) {
        label = 7; break;
      }
      else if ((($23)|0)==1) {
        label = 8; break;
      }
      else if ((($23)|0)==2) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 7: 
      $pc=((5385368)|0);
      label = 11; break;
    case 8: 
      $pc=((5385352)|0);
      label = 11; break;
    case 9: 
      $pc=((5385340)|0);
      label = 11; break;
    case 10: 
      $pc=((5385304)|0);
      label = 11; break;
    case 11: 
      var $24=$gfc;
      var $25=$pc;
      _lame_msgf($24, ((5385272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$25,tempInt));
      var $26=$cfg;
      var $mode=(($26+164)|0);
      var $27=HEAP32[(($mode)>>2)];
      if ((($27)|0)==1) {
        label = 12; break;
      }
      else if ((($27)|0)==0) {
        label = 13; break;
      }
      else if ((($27)|0)==2) {
        label = 14; break;
      }
      else if ((($27)|0)==3) {
        label = 15; break;
      }
      else if ((($27)|0)==4) {
        label = 16; break;
      }
      else {
      label = 17; break;
      }
      
    case 12: 
      $pc=((5385248)|0);
      label = 18; break;
    case 13: 
      $pc=((5385228)|0);
      label = 18; break;
    case 14: 
      $pc=((5385164)|0);
      label = 18; break;
    case 15: 
      $pc=((5385068)|0);
      label = 18; break;
    case 16: 
      $pc=((5385044)|0);
      label = 18; break;
    case 17: 
      $pc=((5385004)|0);
      label = 18; break;
    case 18: 
      var $28=$gfc;
      var $29=$cfg;
      var $channels_out=(($29+56)|0);
      var $30=HEAP32[(($channels_out)>>2)];
      var $31=$pc;
      _lame_msgf($28, ((5384972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$30,HEAP32[(((tempInt)+(4))>>2)]=$31,tempInt));
      var $32=$cfg;
      var $vbr=(($32+88)|0);
      var $33=HEAP32[(($vbr)>>2)];
      if ((($33)|0)==0) {
        label = 19; break;
      }
      else {
      label = 20; break;
      }
      
    case 19: 
      $pc=((5384952)|0);
      label = 21; break;
    case 20: 
      $pc=((5384824)|0);
      label = 21; break;
    case 21: 
      var $34=$gfc;
      var $35=$pc;
      _lame_msgf($34, ((5384800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,tempInt));
      var $36=$cfg;
      var $vbr20=(($36+88)|0);
      var $37=HEAP32[(($vbr20)>>2)];
      var $cmp=4==(($37)|0);
      if ($cmp) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $pc=((5384752)|0);
      label = 27; break;
    case 23: 
      var $38=$cfg;
      var $free_format=(($38+136)|0);
      var $39=HEAP32[(($free_format)>>2)];
      var $tobool=(($39)|0)!=0;
      if ($tobool) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $pc=((5384724)|0);
      label = 26; break;
    case 25: 
      $pc=((5386112)|0);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $40=$cfg;
      var $vbr25=(($40+88)|0);
      var $41=HEAP32[(($vbr25)>>2)];
      if ((($41)|0)==0) {
        label = 28; break;
      }
      else if ((($41)|0)==3) {
        label = 29; break;
      }
      else if ((($41)|0)==2) {
        label = 30; break;
      }
      else if ((($41)|0)==1) {
        label = 31; break;
      }
      else if ((($41)|0)==4) {
        label = 32; break;
      }
      else {
      label = 33; break;
      }
      
    case 28: 
      var $42=$gfc;
      var $43=$pc;
      _lame_msgf($42, ((5384688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$43,tempInt));
      label = 34; break;
    case 29: 
      var $44=$gfc;
      var $45=$pc;
      _lame_msgf($44, ((5384616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$45,tempInt));
      label = 34; break;
    case 30: 
      var $46=$gfc;
      var $47=$pc;
      _lame_msgf($46, ((5384564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$47,tempInt));
      label = 34; break;
    case 31: 
      var $48=$gfc;
      var $49=$pc;
      _lame_msgf($48, ((5384508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$49,tempInt));
      label = 34; break;
    case 32: 
      var $50=$gfc;
      var $51=$pc;
      _lame_msgf($50, ((5384464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$51,tempInt));
      label = 34; break;
    case 33: 
      var $52=$gfc;
      _lame_msgf($52, ((5384424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 34; break;
    case 34: 
      var $53=$cfg;
      var $write_lame_tag=(($53+140)|0);
      var $54=HEAP32[(($write_lame_tag)>>2)];
      var $tobool33=(($54)|0)!=0;
      if ($tobool33) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $55=$gfc;
      _lame_msgf($55, ((5384392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 36; break;
    case 36: 
      var $56=$gfc;
      _lame_msgf($56, ((5385412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $57=$gfc;
      _lame_msgf($57, ((5384360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $58=$cfg;
      var $short_blocks=(($58+168)|0);
      var $59=HEAP32[(($short_blocks)>>2)];
      if ((($59)|0)==-1) {
        label = 38; break;
      }
      else if ((($59)|0)==0) {
        label = 39; break;
      }
      else if ((($59)|0)==1) {
        label = 40; break;
      }
      else if ((($59)|0)==2) {
        label = 41; break;
      }
      else if ((($59)|0)==3) {
        label = 42; break;
      }
      else {
      label = 37; break;
      }
      
    case 37: 
      label = 38; break;
    case 38: 
      $pc=((5385304)|0);
      label = 43; break;
    case 39: 
      $pc=((5384332)|0);
      label = 43; break;
    case 40: 
      $pc=((5384296)|0);
      label = 43; break;
    case 41: 
      $pc=((5384276)|0);
      label = 43; break;
    case 42: 
      $pc=((5384224)|0);
      label = 43; break;
    case 43: 
      var $60=$gfc;
      var $61=$pc;
      _lame_msgf($60, ((5384184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,tempInt));
      var $62=$gfc;
      var $63=$cfg;
      var $subblock_gain=(($63+16)|0);
      var $64=HEAP32[(($subblock_gain)>>2)];
      _lame_msgf($62, ((5384112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,tempInt));
      var $65=$gfc;
      var $66=$gfc;
      var $sv_qnt=(($66+84764)|0);
      var $mask_adjust=(($sv_qnt+144)|0);
      var $67=HEAPF32[(($mask_adjust)>>2)];
      var $conv43=$67;
      _lame_msgf($65, ((5384076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv43,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $68=$gfc;
      var $69=$gfc;
      var $sv_qnt44=(($69+84764)|0);
      var $mask_adjust_short=(($sv_qnt44+148)|0);
      var $70=HEAPF32[(($mask_adjust_short)>>2)];
      var $conv45=$70;
      _lame_msgf($68, ((5384032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv45,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $71=$gfc;
      var $72=$cfg;
      var $quant_comp=(($72+68)|0);
      var $73=HEAP32[(($quant_comp)>>2)];
      _lame_msgf($71, ((5383980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$73,tempInt));
      var $74=$gfc;
      var $75=$cfg;
      var $quant_comp_short=(($75+72)|0);
      var $76=HEAP32[(($quant_comp_short)>>2)];
      _lame_msgf($74, ((5383936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$76,tempInt));
      var $77=$gfc;
      var $78=$cfg;
      var $noise_shaping=(($78+12)|0);
      var $79=HEAP32[(($noise_shaping)>>2)];
      _lame_msgf($77, ((5383900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$79,tempInt));
      var $80=$gfc;
      var $81=$cfg;
      var $noise_shaping_amp=(($81+24)|0);
      var $82=HEAP32[(($noise_shaping_amp)>>2)];
      _lame_msgf($80, ((5383868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$82,tempInt));
      var $83=$gfc;
      var $84=$cfg;
      var $noise_shaping_stop=(($84+28)|0);
      var $85=HEAP32[(($noise_shaping_stop)>>2)];
      _lame_msgf($83, ((5383840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$85,tempInt));
      $pc=((5383772)|0);
      var $86=$cfg;
      var $ATHshort=(($86+200)|0);
      var $87=HEAP32[(($ATHshort)>>2)];
      var $tobool46=(($87)|0)!=0;
      if ($tobool46) { label = 44; break; } else { label = 45; break; }
    case 44: 
      $pc=((5383728)|0);
      label = 45; break;
    case 45: 
      var $88=$cfg;
      var $ATHonly=(($88+196)|0);
      var $89=HEAP32[(($ATHonly)>>2)];
      var $tobool49=(($89)|0)!=0;
      if ($tobool49) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $pc=((5383680)|0);
      label = 47; break;
    case 47: 
      var $90=$cfg;
      var $noATH=(($90+204)|0);
      var $91=HEAP32[(($noATH)>>2)];
      var $tobool52=(($91)|0)!=0;
      if ($tobool52) { label = 48; break; } else { label = 49; break; }
    case 48: 
      $pc=((5383656)|0);
      label = 49; break;
    case 49: 
      var $92=$gfc;
      var $93=$pc;
      _lame_msgf($92, ((5383636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$93,tempInt));
      var $94=$gfc;
      var $95=$cfg;
      var $ATHtype=(($95+192)|0);
      var $96=HEAP32[(($ATHtype)>>2)];
      _lame_msgf($94, ((5383600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$96,tempInt));
      var $97=$gfc;
      var $98=$cfg;
      var $ATHcurve=(($98+188)|0);
      var $99=HEAPF32[(($ATHcurve)>>2)];
      var $conv55=$99;
      _lame_msgf($97, ((5383572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv55,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),HEAP32[(((tempInt)+(8))>>2)]=((5383540)|0),tempInt));
      var $100=$gfc;
      var $101=$cfg;
      var $ATH_offset_db=(($101+180)|0);
      var $102=HEAPF32[(($ATH_offset_db)>>2)];
      var $conv56=$102;
      _lame_msgf($100, ((5383496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv56,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $103=$gfc;
      var $104=$gfc;
      var $ATH=(($104+85792)|0);
      var $105=HEAP32[(($ATH)>>2)];
      var $use_adjust=(($105)|0);
      var $106=HEAP32[(($use_adjust)>>2)];
      _lame_msgf($103, ((5383464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$106,tempInt));
      var $107=$gfc;
      var $108=$gfc;
      var $ATH57=(($108+85792)|0);
      var $109=HEAP32[(($ATH57)>>2)];
      var $aa_sensitivity_p=(($109+4)|0);
      var $110=HEAPF32[(($aa_sensitivity_p)>>2)];
      var $conv58=$110;
      _lame_msgf($107, ((5383412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv58,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $111=$gfc;
      _lame_msgf($111, ((5383360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $112=$gfc;
      var $113=$gfc;
      var $sv_qnt59=(($113+84764)|0);
      var $longfact=(($sv_qnt59)|0);
      var $arrayidx=(($longfact)|0);
      var $114=HEAPF32[(($arrayidx)>>2)];
      var $conv60=$114;
      var $call=_log10($conv60);
      var $mul=($call)*(10);
      var $115=$gfc;
      var $sv_qnt61=(($115+84764)|0);
      var $longfact62=(($sv_qnt61)|0);
      var $arrayidx63=(($longfact62+28)|0);
      var $116=HEAPF32[(($arrayidx63)>>2)];
      var $conv64=$116;
      var $call65=_log10($conv64);
      var $mul66=($call65)*(10);
      var $117=$gfc;
      var $sv_qnt67=(($117+84764)|0);
      var $longfact68=(($sv_qnt67)|0);
      var $arrayidx69=(($longfact68+56)|0);
      var $118=HEAPF32[(($arrayidx69)>>2)];
      var $conv70=$118;
      var $call71=_log10($conv70);
      var $mul72=($call71)*(10);
      var $119=$gfc;
      var $sv_qnt73=(($119+84764)|0);
      var $longfact74=(($sv_qnt73)|0);
      var $arrayidx75=(($longfact74+84)|0);
      var $120=HEAPF32[(($arrayidx75)>>2)];
      var $conv76=$120;
      var $call77=_log10($conv76);
      var $mul78=($call77)*(10);
      _lame_msgf($112, ((5383264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$mul66,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$mul72,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$mul78,HEAP32[(((tempInt)+(24))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $121=$cfg;
      var $use_temporal_masking_effect=(($121+76)|0);
      var $122=HEAP32[(($use_temporal_masking_effect)>>2)];
      var $tobool79=(($122)|0)!=0;
      var $cond=$tobool79 ? (((5383252)|0)) : (((5383236)|0));
      $pc=$cond;
      var $123=$gfc;
      var $124=$pc;
      _lame_msgf($123, ((5383188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$124,tempInt));
      var $125=$gfc;
      var $126=$cfg;
      var $interChRatio=(($126+172)|0);
      var $127=HEAPF32[(($interChRatio)>>2)];
      var $conv80=$127;
      _lame_msgf($125, ((5383144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$conv80,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $128=$gfc;
      _lame_msgf($128, ((5385412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $129=$gfc;
      _lame_msgf($129, ((5383132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_print_internals["X"]=1;

function _lame_encode_buffer($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 0, 1, 1);

  return $call;
}


function _lame_encode_buffer_template($gfp, $buffer_l, $buffer_r, $nsamples, $mp3buf, $mp3buf_size, $pcm_type, $aa, $norm) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $buffer_l_addr;
      var $buffer_r_addr;
      var $nsamples_addr;
      var $mp3buf_addr;
      var $mp3buf_size_addr;
      var $pcm_type_addr;
      var $aa_addr;
      var $norm_addr;
      var $gfc;
      var $cfg;
      $gfp_addr=$gfp;
      $buffer_l_addr=$buffer_l;
      $buffer_r_addr=$buffer_r;
      $nsamples_addr=$nsamples;
      $mp3buf_addr=$mp3buf;
      $mp3buf_size_addr=$mp3buf_size;
      $pcm_type_addr=$pcm_type;
      $aa_addr=$aa;
      $norm_addr=$norm;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 18; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$nsamples_addr;
      var $cmp=(($5)|0)==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 19; break;
    case 6: 
      var $6=$gfc;
      var $7=$nsamples_addr;
      var $call6=_update_inbuffer_size($6, $7);
      var $cmp7=(($call6)|0)!=0;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=-2;
      label = 19; break;
    case 8: 
      var $8=$cfg;
      var $channels_in=(($8+52)|0);
      var $9=HEAP32[(($channels_in)>>2)];
      var $cmp10=(($9)|0) > 1;
      if ($cmp10) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $10=$buffer_l_addr;
      var $cmp12=(($10)|0)==0;
      if ($cmp12) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $11=$buffer_r_addr;
      var $cmp13=(($11)|0)==0;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 19; break;
    case 12: 
      var $12=$gfc;
      var $13=$buffer_l_addr;
      var $14=$buffer_r_addr;
      var $15=$nsamples_addr;
      var $16=$pcm_type_addr;
      var $17=$aa_addr;
      var $18=$norm_addr;
      _lame_copy_inbuffer($12, $13, $14, $15, $16, $17, $18);
      label = 16; break;
    case 13: 
      var $19=$buffer_l_addr;
      var $cmp16=(($19)|0)==0;
      if ($cmp16) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $retval=0;
      label = 19; break;
    case 15: 
      var $20=$gfc;
      var $21=$buffer_l_addr;
      var $22=$buffer_l_addr;
      var $23=$nsamples_addr;
      var $24=$pcm_type_addr;
      var $25=$aa_addr;
      var $26=$norm_addr;
      _lame_copy_inbuffer($20, $21, $22, $23, $24, $25, $26);
      label = 16; break;
    case 16: 
      var $27=$gfc;
      var $28=$nsamples_addr;
      var $29=$mp3buf_addr;
      var $30=$mp3buf_size_addr;
      var $call20=_lame_encode_buffer_sample_t($27, $28, $29, $30);
      $retval=$call20;
      label = 19; break;
    case 17: 
      label = 18; break;
    case 18: 
      $retval=-3;
      label = 19; break;
    case 19: 
      var $31=$retval;

      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_lame_encode_buffer_template["X"]=1;

function _lame_encode_buffer_float($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 3, 1, 1);

  return $call;
}


function _lame_encode_buffer_ieee_float($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 3, 1, 32767);

  return $call;
}


function _lame_encode_buffer_interleaved_ieee_float($gfp, $pcm, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_addr=$pcm;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_addr;
  var $2=$1;
  var $3=$pcm_addr;
  var $add_ptr=(($3+4)|0);
  var $4=$add_ptr;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 3, 2, 32767);

  return $call;
}


function _lame_encode_buffer_ieee_double($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 4, 1, 32767);

  return $call;
}


function _lame_encode_buffer_interleaved_ieee_double($gfp, $pcm, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_addr=$pcm;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_addr;
  var $2=$1;
  var $3=$pcm_addr;
  var $add_ptr=(($3+8)|0);
  var $4=$add_ptr;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 4, 2, 32767);

  return $call;
}


function _lame_encode_buffer_int($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  var $norm;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  $norm=0.0000152587890625;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 1, 1, 0.0000152587890625);

  return $call;
}


function _lame_encode_buffer_long2($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  var $norm;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  $norm=0.0000152587890625;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 2, 1, 0.0000152587890625);

  return $call;
}


function _lame_encode_buffer_long($gfp, $pcm_l, $pcm_r, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_l_addr;
  var $2=$1;
  var $3=$pcm_r_addr;
  var $4=$3;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 2, 1, 1);

  return $call;
}


function _lame_encode_buffer_interleaved($gfp, $pcm, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;


  var $gfp_addr;
  var $pcm_addr;
  var $nsamples_addr;
  var $mp3buf_addr;
  var $mp3buf_size_addr;
  $gfp_addr=$gfp;
  $pcm_addr=$pcm;
  $nsamples_addr=$nsamples;
  $mp3buf_addr=$mp3buf;
  $mp3buf_size_addr=$mp3buf_size;
  var $0=$gfp_addr;
  var $1=$pcm_addr;
  var $2=$1;
  var $3=$pcm_addr;
  var $add_ptr=(($3+2)|0);
  var $4=$add_ptr;
  var $5=$nsamples_addr;
  var $6=$mp3buf_addr;
  var $7=$mp3buf_size_addr;
  var $call=_lame_encode_buffer_template($0, $2, $4, $5, $6, $7, 0, 2, 1);

  return $call;
}


function _lame_encode_flush_nogap($gfp, $mp3buffer, $mp3buffer_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $mp3buffer_addr;
      var $mp3buffer_size_addr;
      var $rc;
      var $gfc;
      $gfp_addr=$gfp;
      $mp3buffer_addr=$mp3buffer;
      $mp3buffer_size_addr=$mp3buffer_size;
      $rc=-3;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      _flush_bitstream($4);
      var $5=$gfc;
      var $6=$mp3buffer_addr;
      var $7=$mp3buffer_size_addr;
      var $call4=_copy_buffer($5, $6, $7, 1);
      $rc=$call4;
      var $8=$gfc;
      _save_gain_values($8);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $9=$rc;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}



function _calcNeeded($cfg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cfg_addr;
      var $mf_needed;
      var $pcm_samples_per_frame;
      $cfg_addr=$cfg;
      var $0=$cfg_addr;
      var $mode_gr=(($0+60)|0);
      var $1=HEAP32[(($mode_gr)>>2)];
      var $mul=((($1)*(576))&-1);
      $pcm_samples_per_frame=$mul;
      var $2=$pcm_samples_per_frame;
      var $add=((($2)+(1024))|0);
      var $sub=((($add)-(272))|0);
      $mf_needed=$sub;
      var $3=$mf_needed;
      var $4=$pcm_samples_per_frame;
      var $add1=((($4)+(512))|0);
      var $sub2=((($add1)-(32))|0);
      var $cmp=(($3)|0) > (($sub2)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mf_needed;
      var $cond = $5;label = 5; break;
    case 4: 
      var $6=$pcm_samples_per_frame;
      var $add3=((($6)+(512))|0);
      var $sub4=((($add3)-(32))|0);
      var $cond = $sub4;label = 5; break;
    case 5: 
      var $cond;
      $mf_needed=$cond;
      var $7=$mf_needed;

      return $7;
    default: assert(0, "bad label: " + label);
  }

}


function _save_gain_values($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $rsv;
      var $rov;
      var $RadioGain;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_rpg=(($1+85672)|0);
      $rsv=$sv_rpg;
      var $2=$gfc_addr;
      var $ov_rpg=(($2+85676)|0);
      $rov=$ov_rpg;
      var $3=$cfg;
      var $findReplayGain=(($3+112)|0);
      var $4=HEAP32[(($findReplayGain)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $5=$rsv;
      var $rgdata=(($5)|0);
      var $6=HEAP32[(($rgdata)>>2)];
      var $call=_GetTitleGain($6);
      $RadioGain=$call;
      var $7=$RadioGain;
      var $conv=$7;
      var $call2=Math.abs($conv);
      var $call3=Math.abs(-24601);
      var $cmp=$call2 > $call3;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$RadioGain;
      var $sub=($8)+(24601);
      var $conv5=$sub;
      var $call6=Math.abs($conv5);
      var $9=$RadioGain;
      var $conv7=$9;
      var $call8=Math.abs($conv7);
      var $mul=($call8)*(9.999999974752427e-7);
      var $cmp9=$call6 <= $mul;
      if ($cmp9) { label = 7; break; } else { label = 6; break; }
    case 5: 
      var $10=$RadioGain;
      var $sub11=($10)+(24601);
      var $conv12=$sub11;
      var $call13=Math.abs($conv12);
      var $call14=Math.abs(-24601);
      var $mul15=($call14)*(9.999999974752427e-7);
      var $cmp16=$call13 <= $mul15;
      if ($cmp16) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $11=$RadioGain;
      var $conv19=$11;
      var $mul20=($conv19)*(10);
      var $add=($mul20)+(0.5);
      var $call21=Math.floor($add);
      var $conv22=(($call21)&-1);
      var $12=$rov;
      var $RadioGain23=(($12+8)|0);
      HEAP32[(($RadioGain23)>>2)]=$conv22;
      label = 8; break;
    case 7: 
      var $13=$rov;
      var $RadioGain24=(($13+8)|0);
      HEAP32[(($RadioGain24)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $14=$cfg;
      var $findPeakSample=(($14+116)|0);
      var $15=HEAP32[(($findPeakSample)>>2)];
      var $tobool26=(($15)|0)!=0;
      if ($tobool26) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $16=$rov;
      var $PeakSample=(($16+4)|0);
      var $17=HEAPF32[(($PeakSample)>>2)];
      var $conv28=$17;
      var $div=($conv28)/(32767);
      var $call29=_log10($div);
      var $mul30=($call29)*(20);
      var $mul31=($mul30)*(10);
      var $call32=Math.ceil($mul31);
      var $conv33=(($call32)&-1);
      var $18=$rov;
      var $noclipGainChange=(($18+12)|0);
      HEAP32[(($noclipGainChange)>>2)]=$conv33;
      var $19=$rov;
      var $noclipGainChange34=(($19+12)|0);
      var $20=HEAP32[(($noclipGainChange34)>>2)];
      var $cmp35=(($20)|0) > 0;
      if ($cmp35) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=$rov;
      var $PeakSample38=(($21+4)|0);
      var $22=HEAPF32[(($PeakSample38)>>2)];
      var $div39=(32767)/($22);
      var $mul40=($div39)*(100);
      var $conv41=$mul40;
      var $call42=Math.floor($conv41);
      var $div43=($call42)/(100);
      var $conv44=$div43;
      var $23=$rov;
      var $noclipScale=(($23)|0);
      HEAPF32[(($noclipScale)>>2)]=$conv44;
      label = 13; break;
    case 12: 
      var $24=$rov;
      var $noclipScale46=(($24)|0);
      HEAPF32[(($noclipScale46)>>2)]=-1;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_save_gain_values["X"]=1;

function _lame_encode_flush($gfp, $mp3buffer, $mp3buffer_size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4608)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $mp3buffer_addr;
      var $mp3buffer_size_addr;
      var $gfc;
      var $cfg;
      var $esv;
      var $buffer=__stackBase__;
      var $imp3;
      var $mp3count;
      var $mp3buffer_size_remaining;
      var $end_padding;
      var $frames_left;
      var $samples_to_encode;
      var $pcm_samples_per_frame;
      var $mf_needed;
      var $is_resampling_necessary;
      var $resample_ratio;
      var $frame_num;
      var $bunch;
      $gfp_addr=$gfp;
      $mp3buffer_addr=$mp3buffer;
      $mp3buffer_size_addr=$mp3buffer_size;
      $imp3=0;
      $resample_ratio=1;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=-3;
      label = 36; break;
    case 4: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=-3;
      label = 36; break;
    case 6: 
      var $4=$gfc;
      var $cfg5=(($4+16)|0);
      $cfg=$cfg5;
      var $5=$gfc;
      var $sv_enc=(($5+27820)|0);
      $esv=$sv_enc;
      var $6=$esv;
      var $mf_samples_to_encode=(($6+56208)|0);
      var $7=HEAP32[(($mf_samples_to_encode)>>2)];
      var $cmp=(($7)|0) < 1;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 36; break;
    case 8: 
      var $8=$cfg;
      var $mode_gr=(($8+60)|0);
      var $9=HEAP32[(($mode_gr)>>2)];
      var $mul=((($9)*(576))&-1);
      $pcm_samples_per_frame=$mul;
      var $10=$cfg;
      var $call8=_calcNeeded($10);
      $mf_needed=$call8;
      var $11=$esv;
      var $mf_samples_to_encode9=(($11+56208)|0);
      var $12=HEAP32[(($mf_samples_to_encode9)>>2)];
      var $sub=((($12)-(1152))|0);
      $samples_to_encode=$sub;
      var $13=$buffer;
      _memset($13, 0, 4608);
      $mp3count=0;
      var $14=$cfg;
      var $call10=_isResamplingNecessary($14);
      $is_resampling_necessary=$call10;
      var $15=$is_resampling_necessary;
      var $tobool11=(($15)|0)!=0;
      if ($tobool11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$cfg;
      var $samplerate_in=(($16+44)|0);
      var $17=HEAP32[(($samplerate_in)>>2)];
      var $conv=(($17)|0);
      var $18=$cfg;
      var $samplerate_out=(($18+48)|0);
      var $19=HEAP32[(($samplerate_out)>>2)];
      var $conv13=(($19)|0);
      var $div=($conv)/($conv13);
      $resample_ratio=$div;
      var $20=$resample_ratio;
      var $div14=(16)/($20);
      var $21=$samples_to_encode;
      var $conv15=(($21)|0);
      var $add=($conv15)+($div14);
      var $conv16=(($add)&-1);
      $samples_to_encode=$conv16;
      label = 10; break;
    case 10: 
      var $22=$pcm_samples_per_frame;
      var $23=$samples_to_encode;
      var $24=$pcm_samples_per_frame;
      var $rem=((($23)|0))%((($24)|0));
      var $sub18=((($22)-($rem))|0);
      $end_padding=$sub18;
      var $25=$end_padding;
      var $cmp19=(($25)|0) < 576;
      if ($cmp19) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $26=$pcm_samples_per_frame;
      var $27=$end_padding;
      var $add22=((($27)+($26))|0);
      $end_padding=$add22;
      label = 12; break;
    case 12: 
      var $28=$end_padding;
      var $29=$gfc;
      var $ov_enc=(($29+84036)|0);
      var $encoder_padding=(($ov_enc+724)|0);
      HEAP32[(($encoder_padding)>>2)]=$28;
      var $30=$samples_to_encode;
      var $31=$end_padding;
      var $add24=((($30)+($31))|0);
      var $32=$pcm_samples_per_frame;
      var $div25=((((($add24)|0))/((($32)|0)))&-1);
      $frames_left=$div25;
      label = 13; break;
    case 13: 
      var $33=$frames_left;
      var $cmp26=(($33)|0) > 0;
      if ($cmp26) { label = 14; break; } else { var $35 = 0;label = 15; break; }
    case 14: 
      var $34=$imp3;
      var $cmp28=(($34)|0) >= 0;
      var $35 = $cmp28;label = 15; break;
    case 15: 
      var $35;
      if ($35) { label = 16; break; } else { label = 23; break; }
    case 16: 
      var $36=$gfc;
      var $ov_enc30=(($36+84036)|0);
      var $frame_number=(($ov_enc30+708)|0);
      var $37=HEAP32[(($frame_number)>>2)];
      $frame_num=$37;
      var $38=$mf_needed;
      var $39=$esv;
      var $mf_size=(($39+56212)|0);
      var $40=HEAP32[(($mf_size)>>2)];
      var $sub31=((($38)-($40))|0);
      $bunch=$sub31;
      var $41=$resample_ratio;
      var $42=$bunch;
      var $conv32=(($42)|0);
      var $mul33=($conv32)*($41);
      var $conv34=(($mul33)&-1);
      $bunch=$conv34;
      var $43=$bunch;
      var $cmp35=(($43)|0) > 1152;
      if ($cmp35) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $bunch=1152;
      label = 18; break;
    case 18: 
      var $44=$bunch;
      var $cmp39=(($44)|0) < 1;
      if ($cmp39) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $bunch=1;
      label = 20; break;
    case 20: 
      var $45=$mp3buffer_size_addr;
      var $46=$mp3count;
      var $sub43=((($45)-($46))|0);
      $mp3buffer_size_remaining=$sub43;
      var $47=$mp3buffer_size_addr;
      var $cmp44=(($47)|0)==0;
      if ($cmp44) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $mp3buffer_size_remaining=0;
      label = 22; break;
    case 22: 
      var $48=$gfp_addr;
      var $arrayidx=(($buffer)|0);
      var $arraydecay=(($arrayidx)|0);
      var $arrayidx48=(($buffer+2304)|0);
      var $arraydecay49=(($arrayidx48)|0);
      var $49=$bunch;
      var $50=$mp3buffer_addr;
      var $51=$mp3buffer_size_remaining;
      var $call50=_lame_encode_buffer($48, $arraydecay, $arraydecay49, $49, $50, $51);
      $imp3=$call50;
      var $52=$imp3;
      var $53=$mp3buffer_addr;
      var $add_ptr=(($53+$52)|0);
      $mp3buffer_addr=$add_ptr;
      var $54=$imp3;
      var $55=$mp3count;
      var $add51=((($55)+($54))|0);
      $mp3count=$add51;
      var $56=$frame_num;
      var $57=$gfc;
      var $ov_enc52=(($57+84036)|0);
      var $frame_number53=(($ov_enc52+708)|0);
      var $58=HEAP32[(($frame_number53)>>2)];
      var $cmp54=(($56)|0)!=(($58)|0);
      var $cond=$cmp54 ? 1 : 0;
      var $59=$frames_left;
      var $sub56=((($59)-($cond))|0);
      $frames_left=$sub56;
      label = 13; break;
    case 23: 
      var $60=$esv;
      var $mf_samples_to_encode57=(($60+56208)|0);
      HEAP32[(($mf_samples_to_encode57)>>2)]=0;
      var $61=$imp3;
      var $cmp58=(($61)|0) < 0;
      if ($cmp58) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $62=$imp3;
      $retval=$62;
      label = 36; break;
    case 25: 
      var $63=$mp3buffer_size_addr;
      var $64=$mp3count;
      var $sub62=((($63)-($64))|0);
      $mp3buffer_size_remaining=$sub62;
      var $65=$mp3buffer_size_addr;
      var $cmp63=(($65)|0)==0;
      if ($cmp63) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $mp3buffer_size_remaining=0;
      label = 27; break;
    case 27: 
      var $66=$gfc;
      _flush_bitstream($66);
      var $67=$gfc;
      var $68=$mp3buffer_addr;
      var $69=$mp3buffer_size_remaining;
      var $call67=_copy_buffer($67, $68, $69, 1);
      $imp3=$call67;
      var $70=$gfc;
      _save_gain_values($70);
      var $71=$imp3;
      var $cmp68=(($71)|0) < 0;
      if ($cmp68) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $72=$imp3;
      $retval=$72;
      label = 36; break;
    case 29: 
      var $73=$imp3;
      var $74=$mp3buffer_addr;
      var $add_ptr72=(($74+$73)|0);
      $mp3buffer_addr=$add_ptr72;
      var $75=$imp3;
      var $76=$mp3count;
      var $add73=((($76)+($75))|0);
      $mp3count=$add73;
      var $77=$mp3buffer_size_addr;
      var $78=$mp3count;
      var $sub74=((($77)-($78))|0);
      $mp3buffer_size_remaining=$sub74;
      var $79=$mp3buffer_size_addr;
      var $cmp75=(($79)|0)==0;
      if ($cmp75) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $mp3buffer_size_remaining=0;
      label = 31; break;
    case 31: 
      var $80=$gfp_addr;
      var $write_id3tag_automatic=(($80+68)|0);
      var $81=HEAP32[(($write_id3tag_automatic)>>2)];
      var $tobool79=(($81)|0)!=0;
      if ($tobool79) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $82=$gfp_addr;
      var $call81=_id3tag_write_v1($82);
      var $83=$gfc;
      var $84=$mp3buffer_addr;
      var $85=$mp3buffer_size_remaining;
      var $call82=_copy_buffer($83, $84, $85, 0);
      $imp3=$call82;
      var $86=$imp3;
      var $cmp83=(($86)|0) < 0;
      if ($cmp83) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $87=$imp3;
      $retval=$87;
      label = 36; break;
    case 34: 
      var $88=$imp3;
      var $89=$mp3count;
      var $add87=((($89)+($88))|0);
      $mp3count=$add87;
      label = 35; break;
    case 35: 
      var $90=$mp3count;
      $retval=$90;
      label = 36; break;
    case 36: 
      var $91=$retval;
      STACKTOP = __stackBase__;
      return $91;
    default: assert(0, "bad label: " + label);
  }

}
_lame_encode_flush["X"]=1;

function _lame_close($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $ret;
      var $gfc;
      $gfp_addr=$gfp;
      $ret=0;
      var $0=$gfp_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $1=$gfp_addr;
      var $class_id=(($1)|0);
      var $2=HEAP32[(($class_id)>>2)];
      var $cmp=(($2)|0)==-487877;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $3=$gfp_addr;
      var $internal_flags=(($3+288)|0);
      var $4=HEAP32[(($internal_flags)>>2)];
      $gfc=$4;
      var $5=$gfp_addr;
      var $class_id1=(($5)|0);
      HEAP32[(($class_id1)>>2)]=0;
      var $6=$gfc;
      var $cmp2=0==(($6)|0);
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=$gfc;
      var $class_id3=(($7)|0);
      var $8=HEAP32[(($class_id3)>>2)];
      var $cmp4=(($8)|0)!=-487877;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $ret=-3;
      label = 7; break;
    case 7: 
      var $9=$gfc;
      var $cmp6=0!=(($9)|0);
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$gfc;
      var $class_id8=(($10)|0);
      HEAP32[(($class_id8)>>2)]=0;
      var $11=$gfc;
      _freegfc($11);
      var $12=$gfp_addr;
      var $internal_flags9=(($12+288)|0);
      HEAP32[(($internal_flags9)>>2)]=0;
      label = 9; break;
    case 9: 
      var $13=$gfp_addr;
      var $lame_allocated_gfp=(($13+284)|0);
      var $14=HEAP32[(($lame_allocated_gfp)>>2)];
      var $tobool11=(($14)|0)!=0;
      if ($tobool11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$gfp_addr;
      var $lame_allocated_gfp13=(($15+284)|0);
      HEAP32[(($lame_allocated_gfp13)>>2)]=0;
      var $16=$gfp_addr;
      var $17=$16;
      _free($17);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $18=$ret;

      return $18;
    default: assert(0, "bad label: " + label);
  }

}
_lame_close["X"]=1;

function _lame_encode_finish($gfp, $mp3buffer, $mp3buffer_size) {
  var label = 0;


  var $gfp_addr;
  var $mp3buffer_addr;
  var $mp3buffer_size_addr;
  var $ret;
  $gfp_addr=$gfp;
  $mp3buffer_addr=$mp3buffer;
  $mp3buffer_size_addr=$mp3buffer_size;
  var $0=$gfp_addr;
  var $1=$mp3buffer_addr;
  var $2=$mp3buffer_size_addr;
  var $call=_lame_encode_flush($0, $1, $2);
  $ret=$call;
  var $3=$gfp_addr;
  var $call1=_lame_close($3);
  var $4=$ret;

  return $4;
}


function _lame_mp3_tags_fid($gfp, $fpStream) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $fpStream_addr;
      var $gfc;
      var $cfg;
      var $rc;
      $gfp_addr=$gfp;
      $fpStream_addr=$fpStream;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 16; break;
    case 4: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 16; break;
    case 6: 
      var $4=$gfc;
      var $cfg5=(($4+16)|0);
      $cfg=$cfg5;
      var $5=$cfg;
      var $write_lame_tag=(($5+140)|0);
      var $6=HEAP32[(($write_lame_tag)>>2)];
      var $tobool6=(($6)|0)!=0;
      if ($tobool6) { label = 8; break; } else { label = 7; break; }
    case 7: 
      label = 16; break;
    case 8: 
      var $7=$fpStream_addr;
      var $tobool9=(($7)|0)!=0;
      if ($tobool9) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $8=$fpStream_addr;
      var $call10=_fseek($8, 0, 0);
      var $tobool11=(($call10)|0)!=0;
      if ($tobool11) { label = 16; break; } else { label = 10; break; }
    case 10: 
      var $9=$gfp_addr;
      var $10=$fpStream_addr;
      var $call13=_PutVbrTag($9, $10);
      $rc=$call13;
      var $11=$rc;
      if ((($11)|0)==-1) {
        label = 12; break;
      }
      else if ((($11)|0)==-2) {
        label = 13; break;
      }
      else if ((($11)|0)==-3) {
        label = 14; break;
      }
      else {
      label = 11; break;
      }
      
    case 11: 
      label = 15; break;
    case 12: 
      var $12=$gfc;
      _lame_errorf($12, ((5383088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 13: 
      var $13=$gfc;
      _lame_errorf($13, ((5383020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 14: 
      var $14=$gfc;
      _lame_errorf($14, ((5382928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_mp3_tags_fid["X"]=1;

function _lame_init() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp;
      var $ret;
      _init_log_table();
      var $call=_calloc(1, 304);
      var $0=$call;
      $gfp=$0;
      var $1=$gfp;
      var $cmp=(($1)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $2=$gfp;
      var $call1=_lame_init_old($2);
      $ret=$call1;
      var $3=$ret;
      var $cmp2=(($3)|0)!=0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$gfp;
      var $5=$4;
      _free($5);
      $retval=0;
      label = 7; break;
    case 6: 
      var $6=$gfp;
      var $lame_allocated_gfp=(($6+284)|0);
      HEAP32[(($lame_allocated_gfp)>>2)]=1;
      var $7=$gfp;
      $retval=$7;
      label = 7; break;
    case 7: 
      var $8=$retval;

      return $8;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_init_old($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $cfg;
      $gfp_addr=$gfp;
      _disable_FPE();
      var $0=$gfp_addr;
      var $1=$0;
      for (var $$dest = $1>>2, $$stop = $$dest + 76; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $2=$gfp_addr;
      var $class_id=(($2)|0);
      HEAP32[(($class_id)>>2)]=-487877;
      var $call=_calloc(1, 85836);
      var $3=$call;
      var $4=$gfp_addr;
      var $internal_flags=(($4+288)|0);
      HEAP32[(($internal_flags)>>2)]=$3;
      $gfc=$3;
      var $cmp=0==(($3)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 5; break;
    case 4: 
      var $5=$gfc;
      var $cfg1=(($5+16)|0);
      $cfg=$cfg1;
      var $6=$gfp_addr;
      var $strict_ISO=(($6+124)|0);
      HEAP32[(($strict_ISO)>>2)]=2;
      var $7=$gfp_addr;
      var $mode=(($7+48)|0);
      HEAP32[(($mode)>>2)]=4;
      var $8=$gfp_addr;
      var $original=(($8+108)|0);
      HEAP32[(($original)>>2)]=1;
      var $9=$gfp_addr;
      var $samplerate_in=(($9+12)|0);
      HEAP32[(($samplerate_in)>>2)]=44100;
      var $10=$gfp_addr;
      var $num_channels=(($10+8)|0);
      HEAP32[(($num_channels)>>2)]=2;
      var $11=$gfp_addr;
      var $num_samples=(($11+4)|0);
      HEAP32[(($num_samples)>>2)]=-1;
      var $12=$gfp_addr;
      var $write_lame_tag=(($12+36)|0);
      HEAP32[(($write_lame_tag)>>2)]=1;
      var $13=$gfp_addr;
      var $quality=(($13+44)|0);
      HEAP32[(($quality)>>2)]=-1;
      var $14=$gfp_addr;
      var $short_blocks=(($14+240)|0);
      HEAP32[(($short_blocks)>>2)]=-1;
      var $15=$gfp_addr;
      var $subblock_gain=(($15+88)|0);
      HEAP32[(($subblock_gain)>>2)]=-1;
      var $16=$gfp_addr;
      var $lowpassfreq=(($16+184)|0);
      HEAP32[(($lowpassfreq)>>2)]=0;
      var $17=$gfp_addr;
      var $highpassfreq=(($17+188)|0);
      HEAP32[(($highpassfreq)>>2)]=0;
      var $18=$gfp_addr;
      var $lowpasswidth=(($18+192)|0);
      HEAP32[(($lowpasswidth)>>2)]=-1;
      var $19=$gfp_addr;
      var $highpasswidth=(($19+196)|0);
      HEAP32[(($highpasswidth)>>2)]=-1;
      var $20=$gfp_addr;
      var $VBR=(($20+156)|0);
      HEAP32[(($VBR)>>2)]=0;
      var $21=$gfp_addr;
      var $VBR_q=(($21+164)|0);
      HEAP32[(($VBR_q)>>2)]=4;
      var $22=$gfp_addr;
      var $ATHcurve=(($22+224)|0);
      HEAPF32[(($ATHcurve)>>2)]=-1;
      var $23=$gfp_addr;
      var $VBR_mean_bitrate_kbps=(($23+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps)>>2)]=128;
      var $24=$gfp_addr;
      var $VBR_min_bitrate_kbps=(($24+172)|0);
      HEAP32[(($VBR_min_bitrate_kbps)>>2)]=0;
      var $25=$gfp_addr;
      var $VBR_max_bitrate_kbps=(($25+176)|0);
      HEAP32[(($VBR_max_bitrate_kbps)>>2)]=0;
      var $26=$gfp_addr;
      var $VBR_hard_min=(($26+180)|0);
      HEAP32[(($VBR_hard_min)>>2)]=0;
      var $27=$cfg;
      var $vbr_min_bitrate_index=(($27+96)|0);
      HEAP32[(($vbr_min_bitrate_index)>>2)]=1;
      var $28=$cfg;
      var $vbr_max_bitrate_index=(($28+100)|0);
      HEAP32[(($vbr_max_bitrate_index)>>2)]=13;
      var $29=$gfp_addr;
      var $quant_comp=(($29+132)|0);
      HEAP32[(($quant_comp)>>2)]=-1;
      var $30=$gfp_addr;
      var $quant_comp_short=(($30+136)|0);
      HEAP32[(($quant_comp_short)>>2)]=-1;
      var $31=$gfp_addr;
      var $msfix=(($31+252)|0);
      HEAPF32[(($msfix)>>2)]=-1;
      var $32=$gfc;
      var $sv_qnt=(($32+84764)|0);
      var $OldValue=(($sv_qnt+152)|0);
      var $arrayidx=(($OldValue)|0);
      HEAP32[(($arrayidx)>>2)]=180;
      var $33=$gfc;
      var $sv_qnt2=(($33+84764)|0);
      var $OldValue3=(($sv_qnt2+152)|0);
      var $arrayidx4=(($OldValue3+4)|0);
      HEAP32[(($arrayidx4)>>2)]=180;
      var $34=$gfc;
      var $sv_qnt5=(($34+84764)|0);
      var $CurrentStep=(($sv_qnt5+160)|0);
      var $arrayidx6=(($CurrentStep)|0);
      HEAP32[(($arrayidx6)>>2)]=4;
      var $35=$gfc;
      var $sv_qnt7=(($35+84764)|0);
      var $CurrentStep8=(($sv_qnt7+160)|0);
      var $arrayidx9=(($CurrentStep8+4)|0);
      HEAP32[(($arrayidx9)>>2)]=4;
      var $36=$gfc;
      var $sv_qnt10=(($36+84764)|0);
      var $masking_lower=(($sv_qnt10+140)|0);
      HEAPF32[(($masking_lower)>>2)]=1;
      var $37=$gfp_addr;
      var $attackthre=(($37+264)|0);
      HEAPF32[(($attackthre)>>2)]=-1;
      var $38=$gfp_addr;
      var $attackthre_s=(($38+268)|0);
      HEAPF32[(($attackthre_s)>>2)]=-1;
      var $39=$gfp_addr;
      var $scale=(($39+20)|0);
      HEAPF32[(($scale)>>2)]=1;
      var $40=$gfp_addr;
      var $scale_left=(($40+24)|0);
      HEAPF32[(($scale_left)>>2)]=1;
      var $41=$gfp_addr;
      var $scale_right=(($41+28)|0);
      HEAPF32[(($scale_right)>>2)]=1;
      var $42=$gfp_addr;
      var $athaa_type=(($42+232)|0);
      HEAP32[(($athaa_type)>>2)]=-1;
      var $43=$gfp_addr;
      var $ATHtype=(($43+220)|0);
      HEAP32[(($ATHtype)>>2)]=-1;
      var $44=$gfp_addr;
      var $athaa_sensitivity=(($44+236)|0);
      HEAPF32[(($athaa_sensitivity)>>2)]=0;
      var $45=$gfp_addr;
      var $useTemporal=(($45+244)|0);
      HEAP32[(($useTemporal)>>2)]=-1;
      var $46=$gfp_addr;
      var $interChRatio=(($46+248)|0);
      HEAPF32[(($interChRatio)>>2)]=-1;
      var $47=$gfc;
      var $sv_enc=(($47+27820)|0);
      var $mf_samples_to_encode=(($sv_enc+56208)|0);
      HEAP32[(($mf_samples_to_encode)>>2)]=1728;
      var $48=$gfc;
      var $ov_enc=(($48+84036)|0);
      var $encoder_padding=(($ov_enc+724)|0);
      HEAP32[(($encoder_padding)>>2)]=0;
      var $49=$gfc;
      var $sv_enc11=(($49+27820)|0);
      var $mf_size=(($sv_enc11+56212)|0);
      HEAP32[(($mf_size)>>2)]=528;
      var $50=$gfp_addr;
      var $findReplayGain=(($50+60)|0);
      HEAP32[(($findReplayGain)>>2)]=0;
      var $51=$gfp_addr;
      var $decode_on_the_fly=(($51+64)|0);
      HEAP32[(($decode_on_the_fly)>>2)]=0;
      var $52=$gfc;
      var $cfg12=(($52+16)|0);
      var $decode_on_the_fly13=(($cfg12+120)|0);
      HEAP32[(($decode_on_the_fly13)>>2)]=0;
      var $53=$gfc;
      var $cfg14=(($53+16)|0);
      var $findReplayGain15=(($cfg14+112)|0);
      HEAP32[(($findReplayGain15)>>2)]=0;
      var $54=$gfc;
      var $cfg16=(($54+16)|0);
      var $findPeakSample=(($cfg16+116)|0);
      HEAP32[(($findPeakSample)>>2)]=0;
      var $55=$gfc;
      var $ov_rpg=(($55+85676)|0);
      var $RadioGain=(($ov_rpg+8)|0);
      HEAP32[(($RadioGain)>>2)]=0;
      var $56=$gfc;
      var $ov_rpg17=(($56+85676)|0);
      var $noclipGainChange=(($ov_rpg17+12)|0);
      HEAP32[(($noclipGainChange)>>2)]=0;
      var $57=$gfc;
      var $ov_rpg18=(($57+85676)|0);
      var $noclipScale=(($ov_rpg18)|0);
      HEAPF32[(($noclipScale)>>2)]=-1;
      var $58=$gfp_addr;
      var $asm_optimizations=(($58+292)|0);
      var $mmx=(($asm_optimizations)|0);
      HEAP32[(($mmx)>>2)]=1;
      var $59=$gfp_addr;
      var $asm_optimizations19=(($59+292)|0);
      var $amd3dnow=(($asm_optimizations19+4)|0);
      HEAP32[(($amd3dnow)>>2)]=1;
      var $60=$gfp_addr;
      var $asm_optimizations20=(($60+292)|0);
      var $sse=(($asm_optimizations20+8)|0);
      HEAP32[(($sse)>>2)]=1;
      var $61=$gfp_addr;
      var $preset=(($61+152)|0);
      HEAP32[(($preset)>>2)]=0;
      var $62=$gfp_addr;
      var $write_id3tag_automatic=(($62+68)|0);
      HEAP32[(($write_id3tag_automatic)>>2)]=1;
      var $63=$gfp_addr;
      var $report=(($63+272)|0);
      var $debugf=(($report+4)|0);
      HEAP32[(($debugf)>>2)]=50;
      var $64=$gfp_addr;
      var $report21=(($64+272)|0);
      var $errorf=(($report21+8)|0);
      HEAP32[(($errorf)>>2)]=50;
      var $65=$gfp_addr;
      var $report22=(($65+272)|0);
      var $msgf=(($report22)|0);
      HEAP32[(($msgf)>>2)]=50;
      $retval=0;
      label = 5; break;
    case 5: 
      var $66=$retval;

      return $66;
    default: assert(0, "bad label: " + label);
  }

}
_lame_init_old["X"]=1;

function _lame_bitrate_kbps($gfp, $bitrate_kbps) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $bitrate_kbps_addr;
      var $gfc;
      var $cfg;
      var $i;
      $gfp_addr=$gfp;
      $bitrate_kbps_addr=$bitrate_kbps;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 17; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$cfg;
      var $free_format=(($5+136)|0);
      var $6=HEAP32[(($free_format)>>2)];
      var $tobool5=(($6)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 10; break; }
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $7=$i;
      var $cmp=(($7)|0) < 14;
      if ($cmp) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $8=$i;
      var $9=$bitrate_kbps_addr;
      var $arrayidx=(($9+($8<<2))|0);
      HEAP32[(($arrayidx)>>2)]=-1;
      label = 8; break;
    case 8: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $11=$cfg;
      var $avg_bitrate=(($11+104)|0);
      var $12=HEAP32[(($avg_bitrate)>>2)];
      var $13=$bitrate_kbps_addr;
      var $arrayidx7=(($13)|0);
      HEAP32[(($arrayidx7)>>2)]=$12;
      label = 15; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $14=$i;
      var $cmp9=(($14)|0) < 14;
      if ($cmp9) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $15=$i;
      var $add=((($15)+(1))|0);
      var $16=$cfg;
      var $version=(($16)|0);
      var $17=HEAP32[(($version)>>2)];
      var $arrayidx11=((5348820+($17<<6))|0);
      var $arrayidx12=(($arrayidx11+($add<<2))|0);
      var $18=HEAP32[(($arrayidx12)>>2)];
      var $19=$i;
      var $20=$bitrate_kbps_addr;
      var $arrayidx13=(($20+($19<<2))|0);
      HEAP32[(($arrayidx13)>>2)]=$18;
      label = 13; break;
    case 13: 
      var $21=$i;
      var $inc15=((($21)+(1))|0);
      $i=$inc15;
      label = 11; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_bitrate_kbps["X"]=1;

function _lame_bitrate_hist($gfp, $bitrate_count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $bitrate_count_addr;
      var $gfc;
      var $cfg;
      var $eov;
      var $i;
      $gfp_addr=$gfp;
      $bitrate_count_addr=$bitrate_count;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 17; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$gfc;
      var $ov_enc=(($5+84036)|0);
      $eov=$ov_enc;
      var $6=$cfg;
      var $free_format=(($6+136)|0);
      var $7=HEAP32[(($free_format)>>2)];
      var $tobool5=(($7)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 10; break; }
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $8=$i;
      var $cmp=(($8)|0) < 14;
      if ($cmp) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $9=$i;
      var $10=$bitrate_count_addr;
      var $arrayidx=(($10+($9<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 8; break;
    case 8: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $12=$eov;
      var $bitrate_channelmode_hist=(($12)|0);
      var $arrayidx7=(($bitrate_channelmode_hist)|0);
      var $arrayidx8=(($arrayidx7+16)|0);
      var $13=HEAP32[(($arrayidx8)>>2)];
      var $14=$bitrate_count_addr;
      var $arrayidx9=(($14)|0);
      HEAP32[(($arrayidx9)>>2)]=$13;
      label = 15; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $15=$i;
      var $cmp11=(($15)|0) < 14;
      if ($cmp11) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $16=$i;
      var $add=((($16)+(1))|0);
      var $17=$eov;
      var $bitrate_channelmode_hist13=(($17)|0);
      var $arrayidx14=(($bitrate_channelmode_hist13+($add)*(20))|0);
      var $arrayidx15=(($arrayidx14+16)|0);
      var $18=HEAP32[(($arrayidx15)>>2)];
      var $19=$i;
      var $20=$bitrate_count_addr;
      var $arrayidx16=(($20+($19<<2))|0);
      HEAP32[(($arrayidx16)>>2)]=$18;
      label = 13; break;
    case 13: 
      var $21=$i;
      var $inc18=((($21)+(1))|0);
      $i=$inc18;
      label = 11; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_bitrate_hist["X"]=1;

function _lame_stereo_mode_hist($gfp, $stmode_count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $stmode_count_addr;
      var $gfc;
      var $eov;
      var $i;
      $gfp_addr=$gfp;
      $stmode_count_addr=$stmode_count;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $4=$gfc;
      var $ov_enc=(($4+84036)|0);
      $eov=$ov_enc;
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $cmp=(($5)|0) < 4;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$i;
      var $7=$eov;
      var $bitrate_channelmode_hist=(($7)|0);
      var $arrayidx=(($bitrate_channelmode_hist+300)|0);
      var $arrayidx4=(($arrayidx+($6<<2))|0);
      var $8=HEAP32[(($arrayidx4)>>2)];
      var $9=$i;
      var $10=$stmode_count_addr;
      var $arrayidx5=(($10+($9<<2))|0);
      HEAP32[(($arrayidx5)>>2)]=$8;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_bitrate_stereo_mode_hist($gfp, $bitrate_stmode_count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $bitrate_stmode_count_addr;
      var $gfc;
      var $cfg;
      var $eov;
      var $i;
      var $j;
      $gfp_addr=$gfp;
      $bitrate_stmode_count_addr=$bitrate_stmode_count;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 29; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 28; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$gfc;
      var $ov_enc=(($5+84036)|0);
      $eov=$ov_enc;
      var $6=$cfg;
      var $free_format=(($6+136)|0);
      var $7=HEAP32[(($free_format)>>2)];
      var $tobool5=(($7)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 18; break; }
    case 5: 
      $j=0;
      label = 6; break;
    case 6: 
      var $8=$j;
      var $cmp=(($8)|0) < 14;
      if ($cmp) { label = 7; break; } else { label = 13; break; }
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $9=$i;
      var $cmp8=(($9)|0) < 4;
      if ($cmp8) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $10=$i;
      var $11=$j;
      var $12=$bitrate_stmode_count_addr;
      var $arrayidx=(($12+($11<<4))|0);
      var $arrayidx10=(($arrayidx+($10<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=0;
      label = 10; break;
    case 10: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $14=$j;
      var $inc12=((($14)+(1))|0);
      $j=$inc12;
      label = 6; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $15=$i;
      var $cmp15=(($15)|0) < 4;
      if ($cmp15) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $16=$i;
      var $17=$eov;
      var $bitrate_channelmode_hist=(($17)|0);
      var $arrayidx17=(($bitrate_channelmode_hist)|0);
      var $arrayidx18=(($arrayidx17+($16<<2))|0);
      var $18=HEAP32[(($arrayidx18)>>2)];
      var $19=$i;
      var $20=$bitrate_stmode_count_addr;
      var $arrayidx19=(($20)|0);
      var $arrayidx20=(($arrayidx19+($19<<2))|0);
      HEAP32[(($arrayidx20)>>2)]=$18;
      label = 16; break;
    case 16: 
      var $21=$i;
      var $inc22=((($21)+(1))|0);
      $i=$inc22;
      label = 14; break;
    case 17: 
      label = 27; break;
    case 18: 
      $j=0;
      label = 19; break;
    case 19: 
      var $22=$j;
      var $cmp25=(($22)|0) < 14;
      if ($cmp25) { label = 20; break; } else { label = 26; break; }
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $23=$i;
      var $cmp28=(($23)|0) < 4;
      if ($cmp28) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $24=$i;
      var $25=$j;
      var $add=((($25)+(1))|0);
      var $26=$eov;
      var $bitrate_channelmode_hist30=(($26)|0);
      var $arrayidx31=(($bitrate_channelmode_hist30+($add)*(20))|0);
      var $arrayidx32=(($arrayidx31+($24<<2))|0);
      var $27=HEAP32[(($arrayidx32)>>2)];
      var $28=$i;
      var $29=$j;
      var $30=$bitrate_stmode_count_addr;
      var $arrayidx33=(($30+($29<<4))|0);
      var $arrayidx34=(($arrayidx33+($28<<2))|0);
      HEAP32[(($arrayidx34)>>2)]=$27;
      label = 23; break;
    case 23: 
      var $31=$i;
      var $inc36=((($31)+(1))|0);
      $i=$inc36;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $32=$j;
      var $inc39=((($32)+(1))|0);
      $j=$inc39;
      label = 19; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_bitrate_stereo_mode_hist["X"]=1;

function _lame_block_type_hist($gfp, $btype_count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $btype_count_addr;
      var $gfc;
      var $eov;
      var $i;
      $gfp_addr=$gfp;
      $btype_count_addr=$btype_count;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $4=$gfc;
      var $ov_enc=(($4+84036)|0);
      $eov=$ov_enc;
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $cmp=(($5)|0) < 6;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$i;
      var $7=$eov;
      var $bitrate_blocktype_hist=(($7+320)|0);
      var $arrayidx=(($bitrate_blocktype_hist+360)|0);
      var $arrayidx4=(($arrayidx+($6<<2))|0);
      var $8=HEAP32[(($arrayidx4)>>2)];
      var $9=$i;
      var $10=$btype_count_addr;
      var $arrayidx5=(($10+($9<<2))|0);
      HEAP32[(($arrayidx5)>>2)]=$8;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_bitrate_block_type_hist($gfp, $bitrate_btype_count) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $bitrate_btype_count_addr;
      var $gfc;
      var $cfg;
      var $eov;
      var $i;
      var $j;
      $gfp_addr=$gfp;
      $bitrate_btype_count_addr=$bitrate_btype_count;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 29; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 28; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$gfc;
      var $ov_enc=(($5+84036)|0);
      $eov=$ov_enc;
      var $6=$cfg;
      var $free_format=(($6+136)|0);
      var $7=HEAP32[(($free_format)>>2)];
      var $tobool5=(($7)|0)!=0;
      if ($tobool5) { label = 5; break; } else { label = 18; break; }
    case 5: 
      $j=0;
      label = 6; break;
    case 6: 
      var $8=$j;
      var $cmp=(($8)|0) < 14;
      if ($cmp) { label = 7; break; } else { label = 13; break; }
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $9=$i;
      var $cmp8=(($9)|0) < 6;
      if ($cmp8) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $10=$i;
      var $11=$j;
      var $12=$bitrate_btype_count_addr;
      var $arrayidx=(($12+($11)*(24))|0);
      var $arrayidx10=(($arrayidx+($10<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=0;
      label = 10; break;
    case 10: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $14=$j;
      var $inc12=((($14)+(1))|0);
      $j=$inc12;
      label = 6; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $15=$i;
      var $cmp15=(($15)|0) < 6;
      if ($cmp15) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $16=$i;
      var $17=$eov;
      var $bitrate_blocktype_hist=(($17+320)|0);
      var $arrayidx17=(($bitrate_blocktype_hist)|0);
      var $arrayidx18=(($arrayidx17+($16<<2))|0);
      var $18=HEAP32[(($arrayidx18)>>2)];
      var $19=$i;
      var $20=$bitrate_btype_count_addr;
      var $arrayidx19=(($20)|0);
      var $arrayidx20=(($arrayidx19+($19<<2))|0);
      HEAP32[(($arrayidx20)>>2)]=$18;
      label = 16; break;
    case 16: 
      var $21=$i;
      var $inc22=((($21)+(1))|0);
      $i=$inc22;
      label = 14; break;
    case 17: 
      label = 27; break;
    case 18: 
      $j=0;
      label = 19; break;
    case 19: 
      var $22=$j;
      var $cmp25=(($22)|0) < 14;
      if ($cmp25) { label = 20; break; } else { label = 26; break; }
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $23=$i;
      var $cmp28=(($23)|0) < 6;
      if ($cmp28) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $24=$i;
      var $25=$j;
      var $add=((($25)+(1))|0);
      var $26=$eov;
      var $bitrate_blocktype_hist30=(($26+320)|0);
      var $arrayidx31=(($bitrate_blocktype_hist30+($add)*(24))|0);
      var $arrayidx32=(($arrayidx31+($24<<2))|0);
      var $27=HEAP32[(($arrayidx32)>>2)];
      var $28=$i;
      var $29=$j;
      var $30=$bitrate_btype_count_addr;
      var $arrayidx33=(($30+($29)*(24))|0);
      var $arrayidx34=(($arrayidx33+($28<<2))|0);
      HEAP32[(($arrayidx34)>>2)]=$27;
      label = 23; break;
    case 23: 
      var $31=$i;
      var $inc36=((($31)+(1))|0);
      $i=$inc36;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $32=$j;
      var $inc39=((($32)+(1))|0);
      $j=$inc39;
      label = 19; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_bitrate_block_type_hist["X"]=1;

function _update_inbuffer_size($gfc, $nsamples) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $nsamples_addr;
      var $esv;
      $gfc_addr=$gfc;
      $nsamples_addr=$nsamples;
      var $0=$gfc_addr;
      var $sv_enc=(($0+27820)|0);
      $esv=$sv_enc;
      var $1=$esv;
      var $in_buffer_0=(($1+24328)|0);
      var $2=HEAP32[(($in_buffer_0)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$esv;
      var $in_buffer_nsamples=(($3+24324)|0);
      var $4=HEAP32[(($in_buffer_nsamples)>>2)];
      var $5=$nsamples_addr;
      var $cmp1=(($4)|0) < (($5)|0);
      if ($cmp1) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $6=$esv;
      var $in_buffer_02=(($6+24328)|0);
      var $7=HEAP32[(($in_buffer_02)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$esv;
      var $in_buffer_04=(($8+24328)|0);
      var $9=HEAP32[(($in_buffer_04)>>2)];
      var $10=$9;
      _free($10);
      label = 6; break;
    case 6: 
      var $11=$esv;
      var $in_buffer_1=(($11+24332)|0);
      var $12=HEAP32[(($in_buffer_1)>>2)];
      var $tobool5=(($12)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$esv;
      var $in_buffer_17=(($13+24332)|0);
      var $14=HEAP32[(($in_buffer_17)>>2)];
      var $15=$14;
      _free($15);
      label = 8; break;
    case 8: 
      var $16=$nsamples_addr;
      var $call=_calloc($16, 4);
      var $17=$call;
      var $18=$esv;
      var $in_buffer_09=(($18+24328)|0);
      HEAP32[(($in_buffer_09)>>2)]=$17;
      var $19=$nsamples_addr;
      var $call10=_calloc($19, 4);
      var $20=$call10;
      var $21=$esv;
      var $in_buffer_111=(($21+24332)|0);
      HEAP32[(($in_buffer_111)>>2)]=$20;
      var $22=$nsamples_addr;
      var $23=$esv;
      var $in_buffer_nsamples12=(($23+24324)|0);
      HEAP32[(($in_buffer_nsamples12)>>2)]=$22;
      label = 9; break;
    case 9: 
      var $24=$esv;
      var $in_buffer_014=(($24+24328)|0);
      var $25=HEAP32[(($in_buffer_014)>>2)];
      var $cmp15=(($25)|0)==0;
      if ($cmp15) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $26=$esv;
      var $in_buffer_117=(($26+24332)|0);
      var $27=HEAP32[(($in_buffer_117)>>2)];
      var $cmp18=(($27)|0)==0;
      if ($cmp18) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $28=$esv;
      var $in_buffer_020=(($28+24328)|0);
      var $29=HEAP32[(($in_buffer_020)>>2)];
      var $tobool21=(($29)|0)!=0;
      if ($tobool21) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $30=$esv;
      var $in_buffer_023=(($30+24328)|0);
      var $31=HEAP32[(($in_buffer_023)>>2)];
      var $32=$31;
      _free($32);
      label = 13; break;
    case 13: 
      var $33=$esv;
      var $in_buffer_125=(($33+24332)|0);
      var $34=HEAP32[(($in_buffer_125)>>2)];
      var $tobool26=(($34)|0)!=0;
      if ($tobool26) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=$esv;
      var $in_buffer_128=(($35+24332)|0);
      var $36=HEAP32[(($in_buffer_128)>>2)];
      var $37=$36;
      _free($37);
      label = 15; break;
    case 15: 
      var $38=$esv;
      var $in_buffer_030=(($38+24328)|0);
      HEAP32[(($in_buffer_030)>>2)]=0;
      var $39=$esv;
      var $in_buffer_131=(($39+24332)|0);
      HEAP32[(($in_buffer_131)>>2)]=0;
      var $40=$esv;
      var $in_buffer_nsamples32=(($40+24324)|0);
      HEAP32[(($in_buffer_nsamples32)>>2)]=0;
      var $41=$gfc_addr;
      _lame_errorf($41, ((5382880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=-2;
      label = 17; break;
    case 16: 
      $retval=0;
      label = 17; break;
    case 17: 
      var $42=$retval;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }

}
_update_inbuffer_size["X"]=1;

function _lame_copy_inbuffer($gfc, $l, $r, $nsamples, $pcm_type, $jump, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $l_addr;
      var $r_addr;
      var $nsamples_addr;
      var $pcm_type_addr;
      var $jump_addr;
      var $s_addr;
      var $cfg;
      var $esv;
      var $ib0;
      var $ib1;
      var $m=__stackBase__;
      var $bl;
      var $br;
      var $i;
      var $xl;
      var $xr;
      var $u;
      var $v;
      var $bl41;
      var $br42;
      var $i43;
      var $xl48;
      var $xr50;
      var $u52;
      var $v60;
      var $bl76;
      var $br77;
      var $i78;
      var $xl83;
      var $xr85;
      var $u87;
      var $v95;
      var $bl111;
      var $br112;
      var $i113;
      var $xl118;
      var $xr119;
      var $u120;
      var $v128;
      var $bl144;
      var $br145;
      var $i146;
      var $xl151;
      var $xr153;
      var $u155;
      var $v163;
      $gfc_addr=$gfc;
      $l_addr=$l;
      $r_addr=$r;
      $nsamples_addr=$nsamples;
      $pcm_type_addr=$pcm_type;
      $jump_addr=$jump;
      $s_addr=$s;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$esv;
      var $in_buffer_0=(($2+24328)|0);
      var $3=HEAP32[(($in_buffer_0)>>2)];
      $ib0=$3;
      var $4=$esv;
      var $in_buffer_1=(($4+24332)|0);
      var $5=HEAP32[(($in_buffer_1)>>2)];
      $ib1=$5;
      var $6=$s_addr;
      var $7=$cfg;
      var $pcm_transform=(($7+248)|0);
      var $arrayidx=(($pcm_transform)|0);
      var $arrayidx2=(($arrayidx)|0);
      var $8=HEAPF32[(($arrayidx2)>>2)];
      var $mul=($6)*($8);
      var $arrayidx3=(($m)|0);
      var $arrayidx4=(($arrayidx3)|0);
      HEAPF32[(($arrayidx4)>>2)]=$mul;
      var $9=$s_addr;
      var $10=$cfg;
      var $pcm_transform5=(($10+248)|0);
      var $arrayidx6=(($pcm_transform5)|0);
      var $arrayidx7=(($arrayidx6+4)|0);
      var $11=HEAPF32[(($arrayidx7)>>2)];
      var $mul8=($9)*($11);
      var $arrayidx9=(($m)|0);
      var $arrayidx10=(($arrayidx9+4)|0);
      HEAPF32[(($arrayidx10)>>2)]=$mul8;
      var $12=$s_addr;
      var $13=$cfg;
      var $pcm_transform11=(($13+248)|0);
      var $arrayidx12=(($pcm_transform11+8)|0);
      var $arrayidx13=(($arrayidx12)|0);
      var $14=HEAPF32[(($arrayidx13)>>2)];
      var $mul14=($12)*($14);
      var $arrayidx15=(($m+8)|0);
      var $arrayidx16=(($arrayidx15)|0);
      HEAPF32[(($arrayidx16)>>2)]=$mul14;
      var $15=$s_addr;
      var $16=$cfg;
      var $pcm_transform17=(($16+248)|0);
      var $arrayidx18=(($pcm_transform17+8)|0);
      var $arrayidx19=(($arrayidx18+4)|0);
      var $17=HEAPF32[(($arrayidx19)>>2)];
      var $mul20=($15)*($17);
      var $arrayidx21=(($m+8)|0);
      var $arrayidx22=(($arrayidx21+4)|0);
      HEAPF32[(($arrayidx22)>>2)]=$mul20;
      var $18=$pcm_type_addr;
      if ((($18)|0)==0) {
        label = 3; break;
      }
      else if ((($18)|0)==1) {
        label = 8; break;
      }
      else if ((($18)|0)==2) {
        label = 13; break;
      }
      else if ((($18)|0)==3) {
        label = 18; break;
      }
      else if ((($18)|0)==4) {
        label = 23; break;
      }
      else {
      label = 28; break;
      }
      
    case 3: 
      var $19=$l_addr;
      var $20=$19;
      $bl=$20;
      var $21=$r_addr;
      var $22=$21;
      $br=$22;
      $i=0;
      label = 4; break;
    case 4: 
      var $23=$i;
      var $24=$nsamples_addr;
      var $cmp=(($23)|0) < (($24)|0);
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $25=$bl;
      var $26=HEAP16[(($25)>>1)];
      var $conv=(($26 << 16) >> 16);
      $xl=$conv;
      var $27=$br;
      var $28=HEAP16[(($27)>>1)];
      var $conv23=(($28 << 16) >> 16);
      $xr=$conv23;
      var $29=$xl;
      var $arrayidx24=(($m)|0);
      var $arrayidx25=(($arrayidx24)|0);
      var $30=HEAPF32[(($arrayidx25)>>2)];
      var $mul26=($29)*($30);
      var $31=$xr;
      var $arrayidx27=(($m)|0);
      var $arrayidx28=(($arrayidx27+4)|0);
      var $32=HEAPF32[(($arrayidx28)>>2)];
      var $mul29=($31)*($32);
      var $add=($mul26)+($mul29);
      $u=$add;
      var $33=$xl;
      var $arrayidx30=(($m+8)|0);
      var $arrayidx31=(($arrayidx30)|0);
      var $34=HEAPF32[(($arrayidx31)>>2)];
      var $mul32=($33)*($34);
      var $35=$xr;
      var $arrayidx33=(($m+8)|0);
      var $arrayidx34=(($arrayidx33+4)|0);
      var $36=HEAPF32[(($arrayidx34)>>2)];
      var $mul35=($35)*($36);
      var $add36=($mul32)+($mul35);
      $v=$add36;
      var $37=$u;
      var $38=$i;
      var $39=$ib0;
      var $arrayidx37=(($39+($38<<2))|0);
      HEAPF32[(($arrayidx37)>>2)]=$37;
      var $40=$v;
      var $41=$i;
      var $42=$ib1;
      var $arrayidx38=(($42+($41<<2))|0);
      HEAPF32[(($arrayidx38)>>2)]=$40;
      var $43=$jump_addr;
      var $44=$bl;
      var $add_ptr=(($44+($43<<1))|0);
      $bl=$add_ptr;
      var $45=$jump_addr;
      var $46=$br;
      var $add_ptr39=(($46+($45<<1))|0);
      $br=$add_ptr39;
      label = 6; break;
    case 6: 
      var $47=$i;
      var $inc=((($47)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      label = 28; break;
    case 8: 
      var $48=$l_addr;
      var $49=$48;
      $bl41=$49;
      var $50=$r_addr;
      var $51=$50;
      $br42=$51;
      $i43=0;
      label = 9; break;
    case 9: 
      var $52=$i43;
      var $53=$nsamples_addr;
      var $cmp45=(($52)|0) < (($53)|0);
      if ($cmp45) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $54=$bl41;
      var $55=HEAP32[(($54)>>2)];
      var $conv49=(($55)|0);
      $xl48=$conv49;
      var $56=$br42;
      var $57=HEAP32[(($56)>>2)];
      var $conv51=(($57)|0);
      $xr50=$conv51;
      var $58=$xl48;
      var $arrayidx53=(($m)|0);
      var $arrayidx54=(($arrayidx53)|0);
      var $59=HEAPF32[(($arrayidx54)>>2)];
      var $mul55=($58)*($59);
      var $60=$xr50;
      var $arrayidx56=(($m)|0);
      var $arrayidx57=(($arrayidx56+4)|0);
      var $61=HEAPF32[(($arrayidx57)>>2)];
      var $mul58=($60)*($61);
      var $add59=($mul55)+($mul58);
      $u52=$add59;
      var $62=$xl48;
      var $arrayidx61=(($m+8)|0);
      var $arrayidx62=(($arrayidx61)|0);
      var $63=HEAPF32[(($arrayidx62)>>2)];
      var $mul63=($62)*($63);
      var $64=$xr50;
      var $arrayidx64=(($m+8)|0);
      var $arrayidx65=(($arrayidx64+4)|0);
      var $65=HEAPF32[(($arrayidx65)>>2)];
      var $mul66=($64)*($65);
      var $add67=($mul63)+($mul66);
      $v60=$add67;
      var $66=$u52;
      var $67=$i43;
      var $68=$ib0;
      var $arrayidx68=(($68+($67<<2))|0);
      HEAPF32[(($arrayidx68)>>2)]=$66;
      var $69=$v60;
      var $70=$i43;
      var $71=$ib1;
      var $arrayidx69=(($71+($70<<2))|0);
      HEAPF32[(($arrayidx69)>>2)]=$69;
      var $72=$jump_addr;
      var $73=$bl41;
      var $add_ptr70=(($73+($72<<2))|0);
      $bl41=$add_ptr70;
      var $74=$jump_addr;
      var $75=$br42;
      var $add_ptr71=(($75+($74<<2))|0);
      $br42=$add_ptr71;
      label = 11; break;
    case 11: 
      var $76=$i43;
      var $inc73=((($76)+(1))|0);
      $i43=$inc73;
      label = 9; break;
    case 12: 
      label = 28; break;
    case 13: 
      var $77=$l_addr;
      var $78=$77;
      $bl76=$78;
      var $79=$r_addr;
      var $80=$79;
      $br77=$80;
      $i78=0;
      label = 14; break;
    case 14: 
      var $81=$i78;
      var $82=$nsamples_addr;
      var $cmp80=(($81)|0) < (($82)|0);
      if ($cmp80) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $83=$bl76;
      var $84=HEAP32[(($83)>>2)];
      var $conv84=(($84)|0);
      $xl83=$conv84;
      var $85=$br77;
      var $86=HEAP32[(($85)>>2)];
      var $conv86=(($86)|0);
      $xr85=$conv86;
      var $87=$xl83;
      var $arrayidx88=(($m)|0);
      var $arrayidx89=(($arrayidx88)|0);
      var $88=HEAPF32[(($arrayidx89)>>2)];
      var $mul90=($87)*($88);
      var $89=$xr85;
      var $arrayidx91=(($m)|0);
      var $arrayidx92=(($arrayidx91+4)|0);
      var $90=HEAPF32[(($arrayidx92)>>2)];
      var $mul93=($89)*($90);
      var $add94=($mul90)+($mul93);
      $u87=$add94;
      var $91=$xl83;
      var $arrayidx96=(($m+8)|0);
      var $arrayidx97=(($arrayidx96)|0);
      var $92=HEAPF32[(($arrayidx97)>>2)];
      var $mul98=($91)*($92);
      var $93=$xr85;
      var $arrayidx99=(($m+8)|0);
      var $arrayidx100=(($arrayidx99+4)|0);
      var $94=HEAPF32[(($arrayidx100)>>2)];
      var $mul101=($93)*($94);
      var $add102=($mul98)+($mul101);
      $v95=$add102;
      var $95=$u87;
      var $96=$i78;
      var $97=$ib0;
      var $arrayidx103=(($97+($96<<2))|0);
      HEAPF32[(($arrayidx103)>>2)]=$95;
      var $98=$v95;
      var $99=$i78;
      var $100=$ib1;
      var $arrayidx104=(($100+($99<<2))|0);
      HEAPF32[(($arrayidx104)>>2)]=$98;
      var $101=$jump_addr;
      var $102=$bl76;
      var $add_ptr105=(($102+($101<<2))|0);
      $bl76=$add_ptr105;
      var $103=$jump_addr;
      var $104=$br77;
      var $add_ptr106=(($104+($103<<2))|0);
      $br77=$add_ptr106;
      label = 16; break;
    case 16: 
      var $105=$i78;
      var $inc108=((($105)+(1))|0);
      $i78=$inc108;
      label = 14; break;
    case 17: 
      label = 28; break;
    case 18: 
      var $106=$l_addr;
      var $107=$106;
      $bl111=$107;
      var $108=$r_addr;
      var $109=$108;
      $br112=$109;
      $i113=0;
      label = 19; break;
    case 19: 
      var $110=$i113;
      var $111=$nsamples_addr;
      var $cmp115=(($110)|0) < (($111)|0);
      if ($cmp115) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $112=$bl111;
      var $113=HEAPF32[(($112)>>2)];
      $xl118=$113;
      var $114=$br112;
      var $115=HEAPF32[(($114)>>2)];
      $xr119=$115;
      var $116=$xl118;
      var $arrayidx121=(($m)|0);
      var $arrayidx122=(($arrayidx121)|0);
      var $117=HEAPF32[(($arrayidx122)>>2)];
      var $mul123=($116)*($117);
      var $118=$xr119;
      var $arrayidx124=(($m)|0);
      var $arrayidx125=(($arrayidx124+4)|0);
      var $119=HEAPF32[(($arrayidx125)>>2)];
      var $mul126=($118)*($119);
      var $add127=($mul123)+($mul126);
      $u120=$add127;
      var $120=$xl118;
      var $arrayidx129=(($m+8)|0);
      var $arrayidx130=(($arrayidx129)|0);
      var $121=HEAPF32[(($arrayidx130)>>2)];
      var $mul131=($120)*($121);
      var $122=$xr119;
      var $arrayidx132=(($m+8)|0);
      var $arrayidx133=(($arrayidx132+4)|0);
      var $123=HEAPF32[(($arrayidx133)>>2)];
      var $mul134=($122)*($123);
      var $add135=($mul131)+($mul134);
      $v128=$add135;
      var $124=$u120;
      var $125=$i113;
      var $126=$ib0;
      var $arrayidx136=(($126+($125<<2))|0);
      HEAPF32[(($arrayidx136)>>2)]=$124;
      var $127=$v128;
      var $128=$i113;
      var $129=$ib1;
      var $arrayidx137=(($129+($128<<2))|0);
      HEAPF32[(($arrayidx137)>>2)]=$127;
      var $130=$jump_addr;
      var $131=$bl111;
      var $add_ptr138=(($131+($130<<2))|0);
      $bl111=$add_ptr138;
      var $132=$jump_addr;
      var $133=$br112;
      var $add_ptr139=(($133+($132<<2))|0);
      $br112=$add_ptr139;
      label = 21; break;
    case 21: 
      var $134=$i113;
      var $inc141=((($134)+(1))|0);
      $i113=$inc141;
      label = 19; break;
    case 22: 
      label = 28; break;
    case 23: 
      var $135=$l_addr;
      var $136=$135;
      $bl144=$136;
      var $137=$r_addr;
      var $138=$137;
      $br145=$138;
      $i146=0;
      label = 24; break;
    case 24: 
      var $139=$i146;
      var $140=$nsamples_addr;
      var $cmp148=(($139)|0) < (($140)|0);
      if ($cmp148) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $141=$bl144;
      var $142=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($141)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($141)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $conv152=$142;
      $xl151=$conv152;
      var $143=$br145;
      var $144=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($143)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($143)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $conv154=$144;
      $xr153=$conv154;
      var $145=$xl151;
      var $arrayidx156=(($m)|0);
      var $arrayidx157=(($arrayidx156)|0);
      var $146=HEAPF32[(($arrayidx157)>>2)];
      var $mul158=($145)*($146);
      var $147=$xr153;
      var $arrayidx159=(($m)|0);
      var $arrayidx160=(($arrayidx159+4)|0);
      var $148=HEAPF32[(($arrayidx160)>>2)];
      var $mul161=($147)*($148);
      var $add162=($mul158)+($mul161);
      $u155=$add162;
      var $149=$xl151;
      var $arrayidx164=(($m+8)|0);
      var $arrayidx165=(($arrayidx164)|0);
      var $150=HEAPF32[(($arrayidx165)>>2)];
      var $mul166=($149)*($150);
      var $151=$xr153;
      var $arrayidx167=(($m+8)|0);
      var $arrayidx168=(($arrayidx167+4)|0);
      var $152=HEAPF32[(($arrayidx168)>>2)];
      var $mul169=($151)*($152);
      var $add170=($mul166)+($mul169);
      $v163=$add170;
      var $153=$u155;
      var $154=$i146;
      var $155=$ib0;
      var $arrayidx171=(($155+($154<<2))|0);
      HEAPF32[(($arrayidx171)>>2)]=$153;
      var $156=$v163;
      var $157=$i146;
      var $158=$ib1;
      var $arrayidx172=(($158+($157<<2))|0);
      HEAPF32[(($arrayidx172)>>2)]=$156;
      var $159=$jump_addr;
      var $160=$bl144;
      var $add_ptr173=(($160+($159<<3))|0);
      $bl144=$add_ptr173;
      var $161=$jump_addr;
      var $162=$br145;
      var $add_ptr174=(($162+($161<<3))|0);
      $br145=$add_ptr174;
      label = 26; break;
    case 26: 
      var $163=$i146;
      var $inc176=((($163)+(1))|0);
      $i146=$inc176;
      label = 24; break;
    case 27: 
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_lame_copy_inbuffer["X"]=1;

function _lame_encode_buffer_sample_t($gfc, $nsamples, $mp3buf, $mp3buf_size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $nsamples_addr;
      var $mp3buf_addr;
      var $mp3buf_size_addr;
      var $cfg;
      var $esv;
      var $pcm_samples_per_frame;
      var $mp3size;
      var $ret;
      var $i;
      var $ch;
      var $mf_needed;
      var $mp3out;
      var $mfbuf=__stackBase__;
      var $in_buffer=(__stackBase__)+(8);
      var $in_buffer_ptr=(__stackBase__)+(16);
      var $n_in=(__stackBase__)+(24);
      var $n_out=(__stackBase__)+(28);
      var $buf_size;
      $gfc_addr=$gfc;
      $nsamples_addr=$nsamples;
      $mp3buf_addr=$mp3buf;
      $mp3buf_size_addr=$mp3buf_size;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$cfg;
      var $mode_gr=(($2+60)|0);
      var $3=HEAP32[(($mode_gr)>>2)];
      var $mul=((($3)*(576))&-1);
      $pcm_samples_per_frame=$mul;
      $mp3size=0;
      var $4=$gfc_addr;
      var $class_id=(($4)|0);
      var $5=HEAP32[(($class_id)>>2)];
      var $cmp=(($5)|0)!=-487877;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-3;
      label = 35; break;
    case 4: 
      var $6=$nsamples_addr;
      var $cmp2=(($6)|0)==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 35; break;
    case 6: 
      var $7=$gfc_addr;
      var $8=$mp3buf_addr;
      var $9=$mp3buf_size_addr;
      var $call=_copy_buffer($7, $8, $9, 0);
      $mp3out=$call;
      var $10=$mp3out;
      var $cmp5=(($10)|0) < 0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$mp3out;
      $retval=$11;
      label = 35; break;
    case 8: 
      var $12=$mp3out;
      var $13=$mp3buf_addr;
      var $add_ptr=(($13+$12)|0);
      $mp3buf_addr=$add_ptr;
      var $14=$mp3out;
      var $15=$mp3size;
      var $add=((($15)+($14))|0);
      $mp3size=$add;
      var $16=$esv;
      var $in_buffer_0=(($16+24328)|0);
      var $17=HEAP32[(($in_buffer_0)>>2)];
      var $arrayidx=(($in_buffer)|0);
      HEAP32[(($arrayidx)>>2)]=$17;
      var $18=$esv;
      var $in_buffer_1=(($18+24332)|0);
      var $19=HEAP32[(($in_buffer_1)>>2)];
      var $arrayidx8=(($in_buffer+4)|0);
      HEAP32[(($arrayidx8)>>2)]=$19;
      var $20=$cfg;
      var $call9=_calcNeeded($20);
      $mf_needed=$call9;
      var $21=$esv;
      var $mfbuf10=(($21+24336)|0);
      var $arrayidx11=(($mfbuf10)|0);
      var $arraydecay=(($arrayidx11)|0);
      var $arrayidx12=(($mfbuf)|0);
      HEAP32[(($arrayidx12)>>2)]=$arraydecay;
      var $22=$esv;
      var $mfbuf13=(($22+24336)|0);
      var $arrayidx14=(($mfbuf13+15936)|0);
      var $arraydecay15=(($arrayidx14)|0);
      var $arrayidx16=(($mfbuf+4)|0);
      HEAP32[(($arrayidx16)>>2)]=$arraydecay15;
      label = 9; break;
    case 9: 
      var $23=$nsamples_addr;
      var $cmp17=(($23)|0) > 0;
      if ($cmp17) { label = 10; break; } else { label = 34; break; }
    case 10: 
      HEAP32[(($n_in)>>2)]=0;
      HEAP32[(($n_out)>>2)]=0;
      var $arrayidx18=(($in_buffer)|0);
      var $24=HEAP32[(($arrayidx18)>>2)];
      var $arrayidx19=(($in_buffer_ptr)|0);
      HEAP32[(($arrayidx19)>>2)]=$24;
      var $arrayidx20=(($in_buffer+4)|0);
      var $25=HEAP32[(($arrayidx20)>>2)];
      var $arrayidx21=(($in_buffer_ptr+4)|0);
      HEAP32[(($arrayidx21)>>2)]=$25;
      var $26=$gfc_addr;
      var $arraydecay22=(($mfbuf)|0);
      var $arrayidx23=(($in_buffer_ptr)|0);
      var $27=$nsamples_addr;
      _fill_buffer($26, $arraydecay22, $arrayidx23, $27, $n_in, $n_out);
      var $28=$cfg;
      var $findReplayGain=(($28+112)|0);
      var $29=HEAP32[(($findReplayGain)>>2)];
      var $tobool=(($29)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $30=$cfg;
      var $decode_on_the_fly=(($30+120)|0);
      var $31=HEAP32[(($decode_on_the_fly)>>2)];
      var $tobool24=(($31)|0)!=0;
      if ($tobool24) { label = 15; break; } else { label = 12; break; }
    case 12: 
      var $32=$gfc_addr;
      var $sv_rpg=(($32+85672)|0);
      var $rgdata=(($sv_rpg)|0);
      var $33=HEAP32[(($rgdata)>>2)];
      var $34=$esv;
      var $mf_size=(($34+56212)|0);
      var $35=HEAP32[(($mf_size)>>2)];
      var $arrayidx26=(($mfbuf)|0);
      var $36=HEAP32[(($arrayidx26)>>2)];
      var $arrayidx27=(($36+($35<<2))|0);
      var $37=$esv;
      var $mf_size28=(($37+56212)|0);
      var $38=HEAP32[(($mf_size28)>>2)];
      var $arrayidx29=(($mfbuf+4)|0);
      var $39=HEAP32[(($arrayidx29)>>2)];
      var $arrayidx30=(($39+($38<<2))|0);
      var $40=HEAP32[(($n_out)>>2)];
      var $41=$cfg;
      var $channels_out=(($41+56)|0);
      var $42=HEAP32[(($channels_out)>>2)];
      var $call31=_AnalyzeSamples($33, $arrayidx27, $arrayidx30, $40, $42);
      var $cmp32=(($call31)|0)==0;
      if ($cmp32) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=-6;
      label = 35; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=HEAP32[(($n_in)>>2)];
      var $44=$nsamples_addr;
      var $sub=((($44)-($43))|0);
      $nsamples_addr=$sub;
      var $45=HEAP32[(($n_in)>>2)];
      var $arrayidx36=(($in_buffer)|0);
      var $46=HEAP32[(($arrayidx36)>>2)];
      var $add_ptr37=(($46+($45<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=$add_ptr37;
      var $47=$cfg;
      var $channels_out38=(($47+56)|0);
      var $48=HEAP32[(($channels_out38)>>2)];
      var $cmp39=(($48)|0)==2;
      if ($cmp39) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $49=HEAP32[(($n_in)>>2)];
      var $arrayidx41=(($in_buffer+4)|0);
      var $50=HEAP32[(($arrayidx41)>>2)];
      var $add_ptr42=(($50+($49<<2))|0);
      HEAP32[(($arrayidx41)>>2)]=$add_ptr42;
      label = 17; break;
    case 17: 
      var $51=HEAP32[(($n_out)>>2)];
      var $52=$esv;
      var $mf_size44=(($52+56212)|0);
      var $53=HEAP32[(($mf_size44)>>2)];
      var $add45=((($53)+($51))|0);
      HEAP32[(($mf_size44)>>2)]=$add45;
      var $54=$esv;
      var $mf_samples_to_encode=(($54+56208)|0);
      var $55=HEAP32[(($mf_samples_to_encode)>>2)];
      var $cmp46=(($55)|0) < 1;
      if ($cmp46) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $56=$esv;
      var $mf_samples_to_encode48=(($56+56208)|0);
      HEAP32[(($mf_samples_to_encode48)>>2)]=1728;
      label = 19; break;
    case 19: 
      var $57=HEAP32[(($n_out)>>2)];
      var $58=$esv;
      var $mf_samples_to_encode50=(($58+56208)|0);
      var $59=HEAP32[(($mf_samples_to_encode50)>>2)];
      var $add51=((($59)+($57))|0);
      HEAP32[(($mf_samples_to_encode50)>>2)]=$add51;
      var $60=$esv;
      var $mf_size52=(($60+56212)|0);
      var $61=HEAP32[(($mf_size52)>>2)];
      var $62=$mf_needed;
      var $cmp53=(($61)|0) >= (($62)|0);
      if ($cmp53) { label = 20; break; } else { label = 33; break; }
    case 20: 
      var $63=$mp3buf_size_addr;
      var $64=$mp3size;
      var $sub55=((($63)-($64))|0);
      $buf_size=$sub55;
      var $65=$mp3buf_size_addr;
      var $cmp56=(($65)|0)==0;
      if ($cmp56) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $buf_size=0;
      label = 22; break;
    case 22: 
      var $66=$gfc_addr;
      var $arrayidx59=(($mfbuf)|0);
      var $67=HEAP32[(($arrayidx59)>>2)];
      var $arrayidx60=(($mfbuf+4)|0);
      var $68=HEAP32[(($arrayidx60)>>2)];
      var $69=$mp3buf_addr;
      var $70=$buf_size;
      var $call61=_lame_encode_mp3_frame($66, $67, $68, $69, $70);
      $ret=$call61;
      var $71=$ret;
      var $cmp62=(($71)|0) < 0;
      if ($cmp62) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $72=$ret;
      $retval=$72;
      label = 35; break;
    case 24: 
      var $73=$ret;
      var $74=$mp3buf_addr;
      var $add_ptr65=(($74+$73)|0);
      $mp3buf_addr=$add_ptr65;
      var $75=$ret;
      var $76=$mp3size;
      var $add66=((($76)+($75))|0);
      $mp3size=$add66;
      var $77=$pcm_samples_per_frame;
      var $78=$esv;
      var $mf_size67=(($78+56212)|0);
      var $79=HEAP32[(($mf_size67)>>2)];
      var $sub68=((($79)-($77))|0);
      HEAP32[(($mf_size67)>>2)]=$sub68;
      var $80=$pcm_samples_per_frame;
      var $81=$esv;
      var $mf_samples_to_encode69=(($81+56208)|0);
      var $82=HEAP32[(($mf_samples_to_encode69)>>2)];
      var $sub70=((($82)-($80))|0);
      HEAP32[(($mf_samples_to_encode69)>>2)]=$sub70;
      $ch=0;
      label = 25; break;
    case 25: 
      var $83=$ch;
      var $84=$cfg;
      var $channels_out71=(($84+56)|0);
      var $85=HEAP32[(($channels_out71)>>2)];
      var $cmp72=(($83)|0) < (($85)|0);
      if ($cmp72) { label = 26; break; } else { label = 32; break; }
    case 26: 
      $i=0;
      label = 27; break;
    case 27: 
      var $86=$i;
      var $87=$esv;
      var $mf_size74=(($87+56212)|0);
      var $88=HEAP32[(($mf_size74)>>2)];
      var $cmp75=(($86)|0) < (($88)|0);
      if ($cmp75) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $89=$i;
      var $90=$pcm_samples_per_frame;
      var $add77=((($89)+($90))|0);
      var $91=$ch;
      var $arrayidx78=(($mfbuf+($91<<2))|0);
      var $92=HEAP32[(($arrayidx78)>>2)];
      var $arrayidx79=(($92+($add77<<2))|0);
      var $93=HEAPF32[(($arrayidx79)>>2)];
      var $94=$i;
      var $95=$ch;
      var $arrayidx80=(($mfbuf+($95<<2))|0);
      var $96=HEAP32[(($arrayidx80)>>2)];
      var $arrayidx81=(($96+($94<<2))|0);
      HEAPF32[(($arrayidx81)>>2)]=$93;
      label = 29; break;
    case 29: 
      var $97=$i;
      var $inc=((($97)+(1))|0);
      $i=$inc;
      label = 27; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $98=$ch;
      var $inc83=((($98)+(1))|0);
      $ch=$inc83;
      label = 25; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 9; break;
    case 34: 
      var $99=$mp3size;
      $retval=$99;
      label = 35; break;
    case 35: 
      var $100=$retval;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }

}
_lame_encode_buffer_sample_t["X"]=1;

function _filter_coef($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x_addr;
      $x_addr=$x;
      var $0=$x_addr;
      var $conv=$0;
      var $cmp=$conv > 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $1=$x_addr;
      var $conv2=$1;
      var $cmp3=$conv2 <= 0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      var $2=$x_addr;
      var $conv7=$2;
      var $mul=($conv7)*(1.5707963267948966);
      var $call=Math.cos($mul);
      var $conv8=$call;
      $retval=$conv8;
      label = 7; break;
    case 7: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_decode_exit() {
  var label = 0;


  _ExitMP3(5292336);

  return 0;
}


function _lame_decode_init() {
  var label = 0;


  var $call=_InitMP3(5292336);

  return 0;
}


function _lame_decode1_headersB($buffer, $len, $pcm_l, $pcm_r, $mp3data, $enc_delay, $enc_padding) {
  var label = 0;


  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data_addr;
  var $enc_delay_addr;
  var $enc_padding_addr;
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $mp3data_addr=$mp3data;
  $enc_delay_addr=$enc_delay;
  $enc_padding_addr=$enc_padding;
  var $0=$buffer_addr;
  var $1=$len_addr;
  var $2=$pcm_l_addr;
  var $3=$2;
  var $4=$pcm_r_addr;
  var $5=$4;
  var $6=$mp3data_addr;
  var $7=$enc_delay_addr;
  var $8=$enc_padding_addr;
  var $call=_decode1_headersB_clipchoice(5292336, $0, $1, $3, $5, $6, $7, $8, ((5318068)|0), 8192, 2, 44);

  return $call;
}


function _hip_set_pinfo($hip, $pinfo) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hip_addr;
      var $pinfo_addr;
      $hip_addr=$hip;
      $pinfo_addr=$pinfo;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$pinfo_addr;
      var $2=$hip_addr;
      var $pinfo1=(($2+21984)|0);
      HEAP32[(($pinfo1)>>2)]=$1;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_set_errorf($hip, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hip_addr;
      var $func_addr;
      $hip_addr=$hip;
      $func_addr=$func;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$func_addr;
      var $2=$hip_addr;
      var $report_err=(($2+21996)|0);
      HEAP32[(($report_err)>>2)]=$1;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_set_debugf($hip, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hip_addr;
      var $func_addr;
      $hip_addr=$hip;
      $func_addr=$func;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$func_addr;
      var $2=$hip_addr;
      var $report_dbg=(($2+21992)|0);
      HEAP32[(($report_dbg)>>2)]=$1;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_set_msgf($hip, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hip_addr;
      var $func_addr;
      $hip_addr=$hip;
      $func_addr=$func;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$func_addr;
      var $2=$hip_addr;
      var $report_msg=(($2+21988)|0);
      HEAP32[(($report_msg)>>2)]=$1;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _decode1_headersB_clipchoice($pmp, $buffer, $len, $pcm_l_raw, $pcm_r_raw, $mp3data, $enc_delay, $enc_padding, $p, $psize, $decoded_sample_size, $decodeMP3_ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pmp_addr;
      var $buffer_addr;
      var $len_addr;
      var $pcm_l_raw_addr;
      var $pcm_r_raw_addr;
      var $mp3data_addr;
      var $enc_delay_addr;
      var $enc_padding_addr;
      var $p_addr;
      var $psize_addr;
      var $decoded_sample_size_addr;
      var $decodeMP3_ptr_addr;
      var $processed_bytes=__stackBase__;
      var $processed_samples;
      var $ret;
      var $i;
      var $pcm_l;
      var $p_samples;
      var $pcm_l77;
      var $p_samples78;
      var $pcm_l94;
      var $pcm_r;
      var $p_samples95;
      var $pcm_l108;
      var $pcm_r109;
      var $p_samples110;
      $pmp_addr=$pmp;
      $buffer_addr=$buffer;
      $len_addr=$len;
      $pcm_l_raw_addr=$pcm_l_raw;
      $pcm_r_raw_addr=$pcm_r_raw;
      $mp3data_addr=$mp3data;
      $enc_delay_addr=$enc_delay;
      $enc_padding_addr=$enc_padding;
      $p_addr=$p;
      $psize_addr=$psize;
      $decoded_sample_size_addr=$decoded_sample_size;
      $decodeMP3_ptr_addr=$decodeMP3_ptr;
      var $0=$mp3data_addr;
      var $header_parsed=(($0)|0);
      HEAP32[(($header_parsed)>>2)]=0;
      var $1=$decodeMP3_ptr_addr;
      var $2=$pmp_addr;
      var $3=$buffer_addr;
      var $4=$len_addr;
      var $5=$p_addr;
      var $6=$psize_addr;
      var $call=FUNCTION_TABLE[$1]($2, $3, $4, $5, $6, $processed_bytes);
      $ret=$call;
      var $7=$pmp_addr;
      var $header_parsed1=(($7+24)|0);
      var $8=HEAP32[(($header_parsed1)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $9=$pmp_addr;
      var $fsizeold=(($9+60)|0);
      var $10=HEAP32[(($fsizeold)>>2)];
      var $cmp=(($10)|0) > 0;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $11=$pmp_addr;
      var $framesize=(($11+48)|0);
      var $12=HEAP32[(($framesize)>>2)];
      var $cmp3=(($12)|0) > 0;
      if ($cmp3) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $13=$mp3data_addr;
      var $header_parsed4=(($13)|0);
      HEAP32[(($header_parsed4)>>2)]=1;
      var $14=$pmp_addr;
      var $fr=(($14+68)|0);
      var $stereo=(($fr)|0);
      var $15=HEAP32[(($stereo)>>2)];
      var $16=$mp3data_addr;
      var $stereo5=(($16+4)|0);
      HEAP32[(($stereo5)>>2)]=$15;
      var $17=$pmp_addr;
      var $fr6=(($17+68)|0);
      var $sampling_frequency=(($fr6+32)|0);
      var $18=HEAP32[(($sampling_frequency)>>2)];
      var $arrayidx=((_freqs+($18<<2))|0);
      var $19=HEAP32[(($arrayidx)>>2)];
      var $20=$mp3data_addr;
      var $samplerate=(($20+8)|0);
      HEAP32[(($samplerate)>>2)]=$19;
      var $21=$pmp_addr;
      var $fr7=(($21+68)|0);
      var $mode=(($fr7+44)|0);
      var $22=HEAP32[(($mode)>>2)];
      var $23=$mp3data_addr;
      var $mode8=(($23+16)|0);
      HEAP32[(($mode8)>>2)]=$22;
      var $24=$pmp_addr;
      var $fr9=(($24+68)|0);
      var $mode_ext=(($fr9+48)|0);
      var $25=HEAP32[(($mode_ext)>>2)];
      var $26=$mp3data_addr;
      var $mode_ext10=(($26+20)|0);
      HEAP32[(($mode_ext10)>>2)]=$25;
      var $27=$pmp_addr;
      var $fr11=(($27+68)|0);
      var $lay=(($fr11+20)|0);
      var $28=HEAP32[(($lay)>>2)];
      var $29=$pmp_addr;
      var $fr12=(($29+68)|0);
      var $lsf=(($fr12+8)|0);
      var $30=HEAP32[(($lsf)>>2)];
      var $arrayidx13=((5347668+($30<<4))|0);
      var $arrayidx14=(($arrayidx13+($28<<2))|0);
      var $31=HEAP32[(($arrayidx14)>>2)];
      var $32=$mp3data_addr;
      var $framesize15=(($32+24)|0);
      HEAP32[(($framesize15)>>2)]=$31;
      var $33=$pmp_addr;
      var $fsizeold16=(($33+60)|0);
      var $34=HEAP32[(($fsizeold16)>>2)];
      var $cmp17=(($34)|0) > 0;
      if ($cmp17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $35=$pmp_addr;
      var $fsizeold19=(($35+60)|0);
      var $36=HEAP32[(($fsizeold19)>>2)];
      var $add=((($36)+(4))|0);
      var $mul=((($add<<3))&-1);
      var $37=$mp3data_addr;
      var $samplerate20=(($37+8)|0);
      var $38=HEAP32[(($samplerate20)>>2)];
      var $mul21=((($mul)*($38))&-1);
      var $conv=(($mul21)|0);
      var $39=$mp3data_addr;
      var $framesize22=(($39+24)|0);
      var $40=HEAP32[(($framesize22)>>2)];
      var $conv23=(($40)|0);
      var $mul24=($conv23)*(1000);
      var $div=($conv)/($mul24);
      var $add25=($div)+(0.5);
      var $conv26=(($add25)&-1);
      var $41=$mp3data_addr;
      var $bitrate=(($41+12)|0);
      HEAP32[(($bitrate)>>2)]=$conv26;
      label = 11; break;
    case 7: 
      var $42=$pmp_addr;
      var $framesize27=(($42+48)|0);
      var $43=HEAP32[(($framesize27)>>2)];
      var $cmp28=(($43)|0) > 0;
      if ($cmp28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$pmp_addr;
      var $framesize31=(($44+48)|0);
      var $45=HEAP32[(($framesize31)>>2)];
      var $add32=((($45)+(4))|0);
      var $mul33=((($add32<<3))&-1);
      var $46=$mp3data_addr;
      var $samplerate34=(($46+8)|0);
      var $47=HEAP32[(($samplerate34)>>2)];
      var $mul35=((($mul33)*($47))&-1);
      var $conv36=(($mul35)|0);
      var $48=$mp3data_addr;
      var $framesize37=(($48+24)|0);
      var $49=HEAP32[(($framesize37)>>2)];
      var $conv38=(($49)|0);
      var $mul39=($conv38)*(1000);
      var $div40=($conv36)/($mul39);
      var $add41=($div40)+(0.5);
      var $conv42=(($add41)&-1);
      var $50=$mp3data_addr;
      var $bitrate43=(($50+12)|0);
      HEAP32[(($bitrate43)>>2)]=$conv42;
      label = 10; break;
    case 9: 
      var $51=$pmp_addr;
      var $fr45=(($51+68)|0);
      var $bitrate_index=(($fr45+28)|0);
      var $52=HEAP32[(($bitrate_index)>>2)];
      var $53=$pmp_addr;
      var $fr46=(($53+68)|0);
      var $lay47=(($fr46+20)|0);
      var $54=HEAP32[(($lay47)>>2)];
      var $sub=((($54)-(1))|0);
      var $55=$pmp_addr;
      var $fr48=(($55+68)|0);
      var $lsf49=(($fr48+8)|0);
      var $56=HEAP32[(($lsf49)>>2)];
      var $arrayidx50=((_tabsel_123+($56)*(192))|0);
      var $arrayidx51=(($arrayidx50+($sub<<6))|0);
      var $arrayidx52=(($arrayidx51+($52<<2))|0);
      var $57=HEAP32[(($arrayidx52)>>2)];
      var $58=$mp3data_addr;
      var $bitrate53=(($58+12)|0);
      HEAP32[(($bitrate53)>>2)]=$57;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $59=$pmp_addr;
      var $num_frames=(($59+12)|0);
      var $60=HEAP32[(($num_frames)>>2)];
      var $cmp55=(($60)|0) > 0;
      if ($cmp55) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $61=$pmp_addr;
      var $num_frames58=(($61+12)|0);
      var $62=HEAP32[(($num_frames58)>>2)];
      var $63=$mp3data_addr;
      var $totalframes=(($63+32)|0);
      HEAP32[(($totalframes)>>2)]=$62;
      var $64=$mp3data_addr;
      var $framesize59=(($64+24)|0);
      var $65=HEAP32[(($framesize59)>>2)];
      var $66=$pmp_addr;
      var $num_frames60=(($66+12)|0);
      var $67=HEAP32[(($num_frames60)>>2)];
      var $mul61=((($65)*($67))&-1);
      var $68=$mp3data_addr;
      var $nsamp=(($68+28)|0);
      HEAP32[(($nsamp)>>2)]=$mul61;
      var $69=$pmp_addr;
      var $enc_delay62=(($69+16)|0);
      var $70=HEAP32[(($enc_delay62)>>2)];
      var $71=$enc_delay_addr;
      HEAP32[(($71)>>2)]=$70;
      var $72=$pmp_addr;
      var $enc_padding63=(($72+20)|0);
      var $73=HEAP32[(($enc_padding63)>>2)];
      var $74=$enc_padding_addr;
      HEAP32[(($74)>>2)]=$73;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $75=$ret;
      if ((($75)|0)==0) {
        label = 15; break;
      }
      else if ((($75)|0)==1) {
        label = 42; break;
      }
      else if ((($75)|0)==-1) {
        label = 43; break;
      }
      else {
      label = 44; break;
      }
      
    case 15: 
      var $76=$pmp_addr;
      var $fr66=(($76+68)|0);
      var $stereo67=(($fr66)|0);
      var $77=HEAP32[(($stereo67)>>2)];
      if ((($77)|0)==1) {
        label = 16; break;
      }
      else if ((($77)|0)==2) {
        label = 28; break;
      }
      else {
      label = 40; break;
      }
      
    case 16: 
      var $78=HEAP32[(($processed_bytes)>>2)];
      var $79=$decoded_sample_size_addr;
      var $div69=((((($78)|0))/((($79)|0)))&-1);
      $processed_samples=$div69;
      var $80=$decoded_sample_size_addr;
      var $cmp70=(($80)|0)==2;
      if ($cmp70) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $81=$pcm_l_raw_addr;
      var $82=$81;
      $pcm_l=$82;
      var $83=$p_addr;
      var $84=$83;
      $p_samples=$84;
      $i=0;
      label = 18; break;
    case 18: 
      var $85=$i;
      var $86=$processed_samples;
      var $cmp73=(($85)|0) < (($86)|0);
      if ($cmp73) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $87=$p_samples;
      var $incdec_ptr=(($87+2)|0);
      $p_samples=$incdec_ptr;
      var $88=HEAP16[(($87)>>1)];
      var $89=$pcm_l;
      var $incdec_ptr75=(($89+2)|0);
      $pcm_l=$incdec_ptr75;
      HEAP16[(($89)>>1)]=$88;
      label = 20; break;
    case 20: 
      var $90=$i;
      var $inc=((($90)+(1))|0);
      $i=$inc;
      label = 18; break;
    case 21: 
      label = 27; break;
    case 22: 
      var $91=$pcm_l_raw_addr;
      var $92=$91;
      $pcm_l77=$92;
      var $93=$p_addr;
      var $94=$93;
      $p_samples78=$94;
      $i=0;
      label = 23; break;
    case 23: 
      var $95=$i;
      var $96=$processed_samples;
      var $cmp80=(($95)|0) < (($96)|0);
      if ($cmp80) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $97=$p_samples78;
      var $incdec_ptr83=(($97+4)|0);
      $p_samples78=$incdec_ptr83;
      var $98=HEAPF32[(($97)>>2)];
      var $99=$pcm_l77;
      var $incdec_ptr84=(($99+4)|0);
      $pcm_l77=$incdec_ptr84;
      HEAPF32[(($99)>>2)]=$98;
      label = 25; break;
    case 25: 
      var $100=$i;
      var $inc86=((($100)+(1))|0);
      $i=$inc86;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 41; break;
    case 28: 
      var $101=HEAP32[(($processed_bytes)>>2)];
      var $102=$decoded_sample_size_addr;
      var $div90=((((($101)|0))/((($102)|0)))&-1);
      var $shr=$div90 >> 1;
      $processed_samples=$shr;
      var $103=$decoded_sample_size_addr;
      var $cmp91=(($103)|0)==2;
      if ($cmp91) { label = 29; break; } else { label = 34; break; }
    case 29: 
      var $104=$pcm_l_raw_addr;
      var $105=$104;
      $pcm_l94=$105;
      var $106=$pcm_r_raw_addr;
      var $107=$106;
      $pcm_r=$107;
      var $108=$p_addr;
      var $109=$108;
      $p_samples95=$109;
      $i=0;
      label = 30; break;
    case 30: 
      var $110=$i;
      var $111=$processed_samples;
      var $cmp97=(($110)|0) < (($111)|0);
      if ($cmp97) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $112=$p_samples95;
      var $incdec_ptr100=(($112+2)|0);
      $p_samples95=$incdec_ptr100;
      var $113=HEAP16[(($112)>>1)];
      var $114=$pcm_l94;
      var $incdec_ptr101=(($114+2)|0);
      $pcm_l94=$incdec_ptr101;
      HEAP16[(($114)>>1)]=$113;
      var $115=$p_samples95;
      var $incdec_ptr102=(($115+2)|0);
      $p_samples95=$incdec_ptr102;
      var $116=HEAP16[(($115)>>1)];
      var $117=$pcm_r;
      var $incdec_ptr103=(($117+2)|0);
      $pcm_r=$incdec_ptr103;
      HEAP16[(($117)>>1)]=$116;
      label = 32; break;
    case 32: 
      var $118=$i;
      var $inc105=((($118)+(1))|0);
      $i=$inc105;
      label = 30; break;
    case 33: 
      label = 39; break;
    case 34: 
      var $119=$pcm_l_raw_addr;
      var $120=$119;
      $pcm_l108=$120;
      var $121=$pcm_r_raw_addr;
      var $122=$121;
      $pcm_r109=$122;
      var $123=$p_addr;
      var $124=$123;
      $p_samples110=$124;
      $i=0;
      label = 35; break;
    case 35: 
      var $125=$i;
      var $126=$processed_samples;
      var $cmp112=(($125)|0) < (($126)|0);
      if ($cmp112) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $127=$p_samples110;
      var $incdec_ptr115=(($127+4)|0);
      $p_samples110=$incdec_ptr115;
      var $128=HEAPF32[(($127)>>2)];
      var $129=$pcm_l108;
      var $incdec_ptr116=(($129+4)|0);
      $pcm_l108=$incdec_ptr116;
      HEAPF32[(($129)>>2)]=$128;
      var $130=$p_samples110;
      var $incdec_ptr117=(($130+4)|0);
      $p_samples110=$incdec_ptr117;
      var $131=HEAPF32[(($130)>>2)];
      var $132=$pcm_r109;
      var $incdec_ptr118=(($132+4)|0);
      $pcm_r109=$incdec_ptr118;
      HEAPF32[(($132)>>2)]=$131;
      label = 37; break;
    case 37: 
      var $133=$i;
      var $inc120=((($133)+(1))|0);
      $i=$inc120;
      label = 35; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      $processed_samples=-1;
      label = 41; break;
    case 41: 
      label = 45; break;
    case 42: 
      $processed_samples=0;
      label = 45; break;
    case 43: 
      $processed_samples=-1;
      label = 45; break;
    case 44: 
      $processed_samples=-1;
      label = 45; break;
    case 45: 
      var $134=$processed_samples;
      STACKTOP = __stackBase__;
      return $134;
    default: assert(0, "bad label: " + label);
  }

}
_decode1_headersB_clipchoice["X"]=1;

function _lame_decode1_headers($buffer, $len, $pcm_l, $pcm_r, $mp3data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data_addr;
  var $enc_delay=__stackBase__;
  var $enc_padding=(__stackBase__)+(4);
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $mp3data_addr=$mp3data;
  var $0=$buffer_addr;
  var $1=$len_addr;
  var $2=$pcm_l_addr;
  var $3=$pcm_r_addr;
  var $4=$mp3data_addr;
  var $call=_lame_decode1_headersB($0, $1, $2, $3, $4, $enc_delay, $enc_padding);
  STACKTOP = __stackBase__;
  return $call;
}


function _lame_decode1($buffer, $len, $pcm_l, $pcm_r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data=__stackBase__;
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  var $0=$buffer_addr;
  var $1=$len_addr;
  var $2=$pcm_l_addr;
  var $3=$pcm_r_addr;
  var $call=_lame_decode1_headers($0, $1, $2, $3, $mp3data);
  STACKTOP = __stackBase__;
  return $call;
}


function _lame_decode_headers($buffer, $len, $pcm_l, $pcm_r, $mp3data) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $buffer_addr;
      var $len_addr;
      var $pcm_l_addr;
      var $pcm_r_addr;
      var $mp3data_addr;
      var $ret;
      var $totsize;
      $buffer_addr=$buffer;
      $len_addr=$len;
      $pcm_l_addr=$pcm_l;
      $pcm_r_addr=$pcm_r;
      $mp3data_addr=$mp3data;
      $totsize=0;
      label = 3; break;
    case 3: 
      var $0=$buffer_addr;
      var $1=$len_addr;
      var $2=$pcm_l_addr;
      var $3=$totsize;
      var $add_ptr=(($2+($3<<1))|0);
      var $4=$pcm_r_addr;
      var $5=$totsize;
      var $add_ptr1=(($4+($5<<1))|0);
      var $6=$mp3data_addr;
      var $call=_lame_decode1_headers($0, $1, $add_ptr, $add_ptr1, $6);
      $ret=$call;
      if ((($call)|0)==-1) {
        label = 4; break;
      }
      else if ((($call)|0)==0) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 4: 
      var $7=$ret;
      $retval=$7;
      label = 8; break;
    case 5: 
      var $8=$totsize;
      $retval=$8;
      label = 8; break;
    case 6: 
      var $9=$ret;
      var $10=$totsize;
      var $add=((($10)+($9))|0);
      $totsize=$add;
      $len_addr=0;
      label = 7; break;
    case 7: 
      label = 3; break;
    case 8: 
      var $11=$retval;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_decode($buffer, $len, $pcm_l, $pcm_r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data=__stackBase__;
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  var $0=$buffer_addr;
  var $1=$len_addr;
  var $2=$pcm_l_addr;
  var $3=$pcm_r_addr;
  var $call=_lame_decode_headers($0, $1, $2, $3, $mp3data);
  STACKTOP = __stackBase__;
  return $call;
}


function _hip_decode_init() {
  var label = 0;


  var $hip;
  var $call=_calloc(1, 22000);
  var $0=$call;
  $hip=$0;
  var $1=$hip;
  var $call1=_InitMP3($1);
  var $2=$hip;

  return $2;
}


function _hip_decode_exit($hip) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $hip_addr;
      $hip_addr=$hip;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$hip_addr;
      _ExitMP3($1);
      var $2=$hip_addr;
      var $3=$2;
      _free($3);
      label = 4; break;
    case 4: 

      return 0;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_decode1_unclipped($hip, $buffer, $len, $pcm_l, $pcm_r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $hip_addr;
      var $buffer_addr;
      var $len_addr;
      var $pcm_l_addr;
      var $pcm_r_addr;
      var $mp3data=__stackBase__;
      var $enc_delay=(__stackBase__)+(40);
      var $enc_padding=(__stackBase__)+(44);
      $hip_addr=$hip;
      $buffer_addr=$buffer;
      $len_addr=$len;
      $pcm_l_addr=$pcm_l;
      $pcm_r_addr=$pcm_r;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$hip_addr;
      var $2=$buffer_addr;
      var $3=$len_addr;
      var $4=$pcm_l_addr;
      var $5=$4;
      var $6=$pcm_r_addr;
      var $7=$6;
      var $call=_decode1_headersB_clipchoice($1, $2, $3, $5, $7, $mp3data, $enc_delay, $enc_padding, ((5327896)|0), 9216, 4, 40);
      $retval=$call;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $8=$retval;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_decode1_headers($hip, $buffer, $len, $pcm_l, $pcm_r, $mp3data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $hip_addr;
  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data_addr;
  var $enc_delay=__stackBase__;
  var $enc_padding=(__stackBase__)+(4);
  $hip_addr=$hip;
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  $mp3data_addr=$mp3data;
  var $0=$hip_addr;
  var $1=$buffer_addr;
  var $2=$len_addr;
  var $3=$pcm_l_addr;
  var $4=$pcm_r_addr;
  var $5=$mp3data_addr;
  var $call=_hip_decode1_headersB($0, $1, $2, $3, $4, $5, $enc_delay, $enc_padding);
  STACKTOP = __stackBase__;
  return $call;
}


function _hip_decode1_headersB($hip, $buffer, $len, $pcm_l, $pcm_r, $mp3data, $enc_delay, $enc_padding) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $hip_addr;
      var $buffer_addr;
      var $len_addr;
      var $pcm_l_addr;
      var $pcm_r_addr;
      var $mp3data_addr;
      var $enc_delay_addr;
      var $enc_padding_addr;
      $hip_addr=$hip;
      $buffer_addr=$buffer;
      $len_addr=$len;
      $pcm_l_addr=$pcm_l;
      $pcm_r_addr=$pcm_r;
      $mp3data_addr=$mp3data;
      $enc_delay_addr=$enc_delay;
      $enc_padding_addr=$enc_padding;
      var $0=$hip_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$hip_addr;
      var $2=$buffer_addr;
      var $3=$len_addr;
      var $4=$pcm_l_addr;
      var $5=$4;
      var $6=$pcm_r_addr;
      var $7=$6;
      var $8=$mp3data_addr;
      var $9=$enc_delay_addr;
      var $10=$enc_padding_addr;
      var $call=_decode1_headersB_clipchoice($1, $2, $3, $5, $7, $8, $9, $10, ((5337112)|0), 8192, 2, 44);
      $retval=$call;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $11=$retval;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_decode1($hip, $buffer, $len, $pcm_l, $pcm_r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $hip_addr;
  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data=__stackBase__;
  $hip_addr=$hip;
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  var $0=$hip_addr;
  var $1=$buffer_addr;
  var $2=$len_addr;
  var $3=$pcm_l_addr;
  var $4=$pcm_r_addr;
  var $call=_hip_decode1_headers($0, $1, $2, $3, $4, $mp3data);
  STACKTOP = __stackBase__;
  return $call;
}


function _hip_decode_headers($hip, $buffer, $len, $pcm_l, $pcm_r, $mp3data) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $hip_addr;
      var $buffer_addr;
      var $len_addr;
      var $pcm_l_addr;
      var $pcm_r_addr;
      var $mp3data_addr;
      var $ret;
      var $totsize;
      $hip_addr=$hip;
      $buffer_addr=$buffer;
      $len_addr=$len;
      $pcm_l_addr=$pcm_l;
      $pcm_r_addr=$pcm_r;
      $mp3data_addr=$mp3data;
      $totsize=0;
      label = 3; break;
    case 3: 
      var $0=$hip_addr;
      var $1=$buffer_addr;
      var $2=$len_addr;
      var $3=$pcm_l_addr;
      var $4=$totsize;
      var $add_ptr=(($3+($4<<1))|0);
      var $5=$pcm_r_addr;
      var $6=$totsize;
      var $add_ptr1=(($5+($6<<1))|0);
      var $7=$mp3data_addr;
      var $call=_hip_decode1_headers($0, $1, $2, $add_ptr, $add_ptr1, $7);
      $ret=$call;
      if ((($call)|0)==-1) {
        label = 4; break;
      }
      else if ((($call)|0)==0) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 4: 
      var $8=$ret;
      $retval=$8;
      label = 8; break;
    case 5: 
      var $9=$totsize;
      $retval=$9;
      label = 8; break;
    case 6: 
      var $10=$ret;
      var $11=$totsize;
      var $add=((($11)+($10))|0);
      $totsize=$add;
      $len_addr=0;
      label = 7; break;
    case 7: 
      label = 3; break;
    case 8: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _hip_decode($hip, $buffer, $len, $pcm_l, $pcm_r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $hip_addr;
  var $buffer_addr;
  var $len_addr;
  var $pcm_l_addr;
  var $pcm_r_addr;
  var $mp3data=__stackBase__;
  $hip_addr=$hip;
  $buffer_addr=$buffer;
  $len_addr=$len;
  $pcm_l_addr=$pcm_l;
  $pcm_r_addr=$pcm_r;
  var $0=$hip_addr;
  var $1=$buffer_addr;
  var $2=$len_addr;
  var $3=$pcm_l_addr;
  var $4=$pcm_r_addr;
  var $call=_hip_decode_headers($0, $1, $2, $3, $4, $mp3data);
  STACKTOP = __stackBase__;
  return $call;
}


function _mdct_sub48($gfc, $w0, $w1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $w0_addr;
      var $w1_addr;
      var $cfg;
      var $esv;
      var $gr;
      var $k;
      var $ch;
      var $wk;
      var $band;
      var $gi;
      var $mdct_enc;
      var $samp;
      var $type;
      var $band0;
      var $band1;
      var $w;
      var $work=__stackBase__;
      var $a;
      var $b;
      var $bu;
      var $bd;
      $gfc_addr=$gfc;
      $w0_addr=$w0;
      $w1_addr=$w1;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$w0_addr;
      var $add_ptr=(($2+1144)|0);
      $wk=$add_ptr;
      $ch=0;
      label = 3; break;
    case 3: 
      var $3=$ch;
      var $4=$cfg;
      var $channels_out=(($4+56)|0);
      var $5=HEAP32[(($channels_out)>>2)];
      var $cmp=(($3)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 54; break; }
    case 4: 
      $gr=0;
      label = 5; break;
    case 5: 
      var $6=$gr;
      var $7=$cfg;
      var $mode_gr=(($7+60)|0);
      var $8=HEAP32[(($mode_gr)>>2)];
      var $cmp3=(($6)|0) < (($8)|0);
      if ($cmp3) { label = 6; break; } else { label = 50; break; }
    case 6: 
      var $9=$ch;
      var $10=$gr;
      var $11=$gfc_addr;
      var $l3_side=(($11+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx=(($tt+($10)*(10504))|0);
      var $arrayidx5=(($arrayidx+($9)*(5252))|0);
      $gi=$arrayidx5;
      var $12=$gi;
      var $xr=(($12)|0);
      var $arraydecay=(($xr)|0);
      $mdct_enc=$arraydecay;
      var $13=$gr;
      var $sub=(((1)-($13))|0);
      var $14=$ch;
      var $15=$esv;
      var $sb_sample=(($15)|0);
      var $arrayidx6=(($sb_sample+($14)*(4608))|0);
      var $arrayidx7=(($arrayidx6+($sub)*(2304))|0);
      var $arrayidx8=(($arrayidx7)|0);
      var $arraydecay9=(($arrayidx8)|0);
      $samp=$arraydecay9;
      $k=0;
      label = 7; break;
    case 7: 
      var $16=$k;
      var $cmp11=(($16)|0) < 9;
      if ($cmp11) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $17=$wk;
      var $18=$samp;
      _window_subband($17, $18);
      var $19=$wk;
      var $add_ptr13=(($19+128)|0);
      var $20=$samp;
      var $add_ptr14=(($20+128)|0);
      _window_subband($add_ptr13, $add_ptr14);
      var $21=$samp;
      var $add_ptr15=(($21+256)|0);
      $samp=$add_ptr15;
      var $22=$wk;
      var $add_ptr16=(($22+256)|0);
      $wk=$add_ptr16;
      $band=1;
      label = 9; break;
    case 9: 
      var $23=$band;
      var $cmp18=(($23)|0) < 32;
      if ($cmp18) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $24=$band;
      var $sub20=((($24)-(32))|0);
      var $25=$samp;
      var $arrayidx21=(($25+($sub20<<2))|0);
      var $26=HEAPF32[(($arrayidx21)>>2)];
      var $mul=($26)*(-1);
      HEAPF32[(($arrayidx21)>>2)]=$mul;
      label = 11; break;
    case 11: 
      var $27=$band;
      var $add=((($27)+(2))|0);
      $band=$add;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $28=$k;
      var $inc=((($28)+(1))|0);
      $k=$inc;
      label = 7; break;
    case 14: 
      $band=0;
      label = 15; break;
    case 15: 
      var $29=$band;
      var $cmp25=(($29)|0) < 32;
      if ($cmp25) { label = 16; break; } else { label = 48; break; }
    case 16: 
      var $30=$gi;
      var $block_type=(($30+4788)|0);
      var $31=HEAP32[(($block_type)>>2)];
      $type=$31;
      var $32=$gr;
      var $33=$ch;
      var $34=$esv;
      var $sb_sample27=(($34)|0);
      var $arrayidx28=(($sb_sample27+($33)*(4608))|0);
      var $arrayidx29=(($arrayidx28+($32)*(2304))|0);
      var $arrayidx30=(($arrayidx29)|0);
      var $arraydecay31=(($arrayidx30)|0);
      var $35=$band;
      var $arrayidx32=((5291628+($35<<2))|0);
      var $36=HEAP32[(($arrayidx32)>>2)];
      var $add_ptr33=(($arraydecay31+($36<<2))|0);
      $band0=$add_ptr33;
      var $37=$gr;
      var $sub34=(((1)-($37))|0);
      var $38=$ch;
      var $39=$esv;
      var $sb_sample35=(($39)|0);
      var $arrayidx36=(($sb_sample35+($38)*(4608))|0);
      var $arrayidx37=(($arrayidx36+($sub34)*(2304))|0);
      var $arrayidx38=(($arrayidx37)|0);
      var $arraydecay39=(($arrayidx38)|0);
      var $40=$band;
      var $arrayidx40=((5291628+($40<<2))|0);
      var $41=HEAP32[(($arrayidx40)>>2)];
      var $add_ptr41=(($arraydecay39+($41<<2))|0);
      $band1=$add_ptr41;
      var $42=$gi;
      var $mixed_block_flag=(($42+4792)|0);
      var $43=HEAP32[(($mixed_block_flag)>>2)];
      var $tobool=(($43)|0)!=0;
      if ($tobool) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $44=$band;
      var $cmp42=(($44)|0) < 2;
      if ($cmp42) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $type=0;
      label = 19; break;
    case 19: 
      var $45=$band;
      var $46=$esv;
      var $amp_filter=(($46+9216)|0);
      var $arrayidx43=(($amp_filter+($45<<2))|0);
      var $47=HEAPF32[(($arrayidx43)>>2)];
      var $conv=$47;
      var $cmp44=$conv < 1e-12;
      if ($cmp44) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $48=$mdct_enc;
      var $49=$48;
      for (var $$dest = $49>>2, $$stop = $$dest + 18; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      label = 39; break;
    case 21: 
      var $50=$band;
      var $51=$esv;
      var $amp_filter47=(($51+9216)|0);
      var $arrayidx48=(($amp_filter47+($50<<2))|0);
      var $52=HEAPF32[(($arrayidx48)>>2)];
      var $conv49=$52;
      var $cmp50=$conv49 < 1;
      if ($cmp50) { label = 22; break; } else { label = 27; break; }
    case 22: 
      $k=0;
      label = 23; break;
    case 23: 
      var $53=$k;
      var $cmp54=(($53)|0) < 18;
      if ($cmp54) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $54=$band;
      var $55=$esv;
      var $amp_filter57=(($55+9216)|0);
      var $arrayidx58=(($amp_filter57+($54<<2))|0);
      var $56=HEAPF32[(($arrayidx58)>>2)];
      var $57=$k;
      var $mul59=((($57<<5))&-1);
      var $58=$band1;
      var $arrayidx60=(($58+($mul59<<2))|0);
      var $59=HEAPF32[(($arrayidx60)>>2)];
      var $mul61=($59)*($56);
      HEAPF32[(($arrayidx60)>>2)]=$mul61;
      label = 25; break;
    case 25: 
      var $60=$k;
      var $inc63=((($60)+(1))|0);
      $k=$inc63;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $61=$type;
      var $cmp66=(($61)|0)==2;
      if ($cmp66) { label = 28; break; } else { label = 33; break; }
    case 28: 
      $k=-3;
      label = 29; break;
    case 29: 
      var $62=$k;
      var $cmp70=(($62)|0) < 0;
      if ($cmp70) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $63=$k;
      var $add73=((($63)+(3))|0);
      var $arrayidx74=((((5247776)|0)+($add73<<2))|0);
      var $64=HEAPF32[(($arrayidx74)>>2)];
      $w=$64;
      var $65=$k;
      var $add75=((($65)+(9))|0);
      var $mul76=((($add75<<5))&-1);
      var $66=$band0;
      var $arrayidx77=(($66+($mul76<<2))|0);
      var $67=HEAPF32[(($arrayidx77)>>2)];
      var $68=$w;
      var $mul78=($67)*($68);
      var $69=$k;
      var $sub79=(((8)-($69))|0);
      var $mul80=((($sub79<<5))&-1);
      var $70=$band0;
      var $arrayidx81=(($70+($mul80<<2))|0);
      var $71=HEAPF32[(($arrayidx81)>>2)];
      var $sub82=($mul78)-($71);
      var $72=$k;
      var $mul83=((($72)*(3))&-1);
      var $add84=((($mul83)+(9))|0);
      var $73=$mdct_enc;
      var $arrayidx85=(($73+($add84<<2))|0);
      HEAPF32[(($arrayidx85)>>2)]=$sub82;
      var $74=$k;
      var $sub86=(((14)-($74))|0);
      var $mul87=((($sub86<<5))&-1);
      var $75=$band0;
      var $arrayidx88=(($75+($mul87<<2))|0);
      var $76=HEAPF32[(($arrayidx88)>>2)];
      var $77=$w;
      var $mul89=($76)*($77);
      var $78=$k;
      var $add90=((($78)+(15))|0);
      var $mul91=((($add90<<5))&-1);
      var $79=$band0;
      var $arrayidx92=(($79+($mul91<<2))|0);
      var $80=HEAPF32[(($arrayidx92)>>2)];
      var $add93=($mul89)+($80);
      var $81=$k;
      var $mul94=((($81)*(3))&-1);
      var $add95=((($mul94)+(18))|0);
      var $82=$mdct_enc;
      var $arrayidx96=(($82+($add95<<2))|0);
      HEAPF32[(($arrayidx96)>>2)]=$add93;
      var $83=$k;
      var $add97=((($83)+(15))|0);
      var $mul98=((($add97<<5))&-1);
      var $84=$band0;
      var $arrayidx99=(($84+($mul98<<2))|0);
      var $85=HEAPF32[(($arrayidx99)>>2)];
      var $86=$w;
      var $mul100=($85)*($86);
      var $87=$k;
      var $sub101=(((14)-($87))|0);
      var $mul102=((($sub101<<5))&-1);
      var $88=$band0;
      var $arrayidx103=(($88+($mul102<<2))|0);
      var $89=HEAPF32[(($arrayidx103)>>2)];
      var $sub104=($mul100)-($89);
      var $90=$k;
      var $mul105=((($90)*(3))&-1);
      var $add106=((($mul105)+(10))|0);
      var $91=$mdct_enc;
      var $arrayidx107=(($91+($add106<<2))|0);
      HEAPF32[(($arrayidx107)>>2)]=$sub104;
      var $92=$k;
      var $sub108=(((2)-($92))|0);
      var $mul109=((($sub108<<5))&-1);
      var $93=$band1;
      var $arrayidx110=(($93+($mul109<<2))|0);
      var $94=HEAPF32[(($arrayidx110)>>2)];
      var $95=$w;
      var $mul111=($94)*($95);
      var $96=$k;
      var $add112=((($96)+(3))|0);
      var $mul113=((($add112<<5))&-1);
      var $97=$band1;
      var $arrayidx114=(($97+($mul113<<2))|0);
      var $98=HEAPF32[(($arrayidx114)>>2)];
      var $add115=($mul111)+($98);
      var $99=$k;
      var $mul116=((($99)*(3))&-1);
      var $add117=((($mul116)+(19))|0);
      var $100=$mdct_enc;
      var $arrayidx118=(($100+($add117<<2))|0);
      HEAPF32[(($arrayidx118)>>2)]=$add115;
      var $101=$k;
      var $add119=((($101)+(3))|0);
      var $mul120=((($add119<<5))&-1);
      var $102=$band1;
      var $arrayidx121=(($102+($mul120<<2))|0);
      var $103=HEAPF32[(($arrayidx121)>>2)];
      var $104=$w;
      var $mul122=($103)*($104);
      var $105=$k;
      var $sub123=(((2)-($105))|0);
      var $mul124=((($sub123<<5))&-1);
      var $106=$band1;
      var $arrayidx125=(($106+($mul124<<2))|0);
      var $107=HEAPF32[(($arrayidx125)>>2)];
      var $sub126=($mul122)-($107);
      var $108=$k;
      var $mul127=((($108)*(3))&-1);
      var $add128=((($mul127)+(11))|0);
      var $109=$mdct_enc;
      var $arrayidx129=(($109+($add128<<2))|0);
      HEAPF32[(($arrayidx129)>>2)]=$sub126;
      var $110=$k;
      var $sub130=(((8)-($110))|0);
      var $mul131=((($sub130<<5))&-1);
      var $111=$band1;
      var $arrayidx132=(($111+($mul131<<2))|0);
      var $112=HEAPF32[(($arrayidx132)>>2)];
      var $113=$w;
      var $mul133=($112)*($113);
      var $114=$k;
      var $add134=((($114)+(9))|0);
      var $mul135=((($add134<<5))&-1);
      var $115=$band1;
      var $arrayidx136=(($115+($mul135<<2))|0);
      var $116=HEAPF32[(($arrayidx136)>>2)];
      var $add137=($mul133)+($116);
      var $117=$k;
      var $mul138=((($117)*(3))&-1);
      var $add139=((($mul138)+(20))|0);
      var $118=$mdct_enc;
      var $arrayidx140=(($118+($add139<<2))|0);
      HEAPF32[(($arrayidx140)>>2)]=$add137;
      label = 31; break;
    case 31: 
      var $119=$k;
      var $inc142=((($119)+(1))|0);
      $k=$inc142;
      label = 29; break;
    case 32: 
      var $120=$mdct_enc;
      _mdct_short($120);
      label = 38; break;
    case 33: 
      $k=-9;
      label = 34; break;
    case 34: 
      var $121=$k;
      var $cmp146=(($121)|0) < 0;
      if ($cmp146) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $122=$k;
      var $add149=((($122)+(27))|0);
      var $123=$type;
      var $arrayidx150=((5247488+($123)*(144))|0);
      var $arrayidx151=(($arrayidx150+($add149<<2))|0);
      var $124=HEAPF32[(($arrayidx151)>>2)];
      var $125=$k;
      var $add152=((($125)+(9))|0);
      var $mul153=((($add152<<5))&-1);
      var $126=$band1;
      var $arrayidx154=(($126+($mul153<<2))|0);
      var $127=HEAPF32[(($arrayidx154)>>2)];
      var $mul155=($124)*($127);
      var $128=$k;
      var $add156=((($128)+(36))|0);
      var $129=$type;
      var $arrayidx157=((5247488+($129)*(144))|0);
      var $arrayidx158=(($arrayidx157+($add156<<2))|0);
      var $130=HEAPF32[(($arrayidx158)>>2)];
      var $131=$k;
      var $sub159=(((8)-($131))|0);
      var $mul160=((($sub159<<5))&-1);
      var $132=$band1;
      var $arrayidx161=(($132+($mul160<<2))|0);
      var $133=HEAPF32[(($arrayidx161)>>2)];
      var $mul162=($130)*($133);
      var $add163=($mul155)+($mul162);
      $a=$add163;
      var $134=$k;
      var $add164=((($134)+(9))|0);
      var $135=$type;
      var $arrayidx165=((5247488+($135)*(144))|0);
      var $arrayidx166=(($arrayidx165+($add164<<2))|0);
      var $136=HEAPF32[(($arrayidx166)>>2)];
      var $137=$k;
      var $add167=((($137)+(9))|0);
      var $mul168=((($add167<<5))&-1);
      var $138=$band0;
      var $arrayidx169=(($138+($mul168<<2))|0);
      var $139=HEAPF32[(($arrayidx169)>>2)];
      var $mul170=($136)*($139);
      var $140=$k;
      var $add171=((($140)+(18))|0);
      var $141=$type;
      var $arrayidx172=((5247488+($141)*(144))|0);
      var $arrayidx173=(($arrayidx172+($add171<<2))|0);
      var $142=HEAPF32[(($arrayidx173)>>2)];
      var $143=$k;
      var $sub174=(((8)-($143))|0);
      var $mul175=((($sub174<<5))&-1);
      var $144=$band0;
      var $arrayidx176=(($144+($mul175<<2))|0);
      var $145=HEAPF32[(($arrayidx176)>>2)];
      var $mul177=($142)*($145);
      var $sub178=($mul170)-($mul177);
      $b=$sub178;
      var $146=$a;
      var $147=$b;
      var $148=$k;
      var $add179=((($148)+(9))|0);
      var $arrayidx180=((((5247788)|0)+($add179<<2))|0);
      var $149=HEAPF32[(($arrayidx180)>>2)];
      var $mul181=($147)*($149);
      var $sub182=($146)-($mul181);
      var $150=$k;
      var $add183=((($150)+(9))|0);
      var $arrayidx184=(($work+($add183<<2))|0);
      HEAPF32[(($arrayidx184)>>2)]=$sub182;
      var $151=$a;
      var $152=$k;
      var $add185=((($152)+(9))|0);
      var $arrayidx186=((((5247788)|0)+($add185<<2))|0);
      var $153=HEAPF32[(($arrayidx186)>>2)];
      var $mul187=($151)*($153);
      var $154=$b;
      var $add188=($mul187)+($154);
      var $155=$k;
      var $add189=((($155)+(18))|0);
      var $arrayidx190=(($work+($add189<<2))|0);
      HEAPF32[(($arrayidx190)>>2)]=$add188;
      label = 36; break;
    case 36: 
      var $156=$k;
      var $inc192=((($156)+(1))|0);
      $k=$inc192;
      label = 34; break;
    case 37: 
      var $157=$mdct_enc;
      var $arraydecay194=(($work)|0);
      _mdct_long($157, $arraydecay194);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $158=$type;
      var $cmp197=(($158)|0)!=2;
      if ($cmp197) { label = 40; break; } else { label = 46; break; }
    case 40: 
      var $159=$band;
      var $cmp200=(($159)|0)!=0;
      if ($cmp200) { label = 41; break; } else { label = 46; break; }
    case 41: 
      $k=7;
      label = 42; break;
    case 42: 
      var $160=$k;
      var $cmp204=(($160)|0) >= 0;
      if ($cmp204) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $161=$k;
      var $162=$mdct_enc;
      var $arrayidx207=(($162+($161<<2))|0);
      var $163=HEAPF32[(($arrayidx207)>>2)];
      var $164=$k;
      var $arrayidx208=((((5247856)|0)+($164<<2))|0);
      var $165=HEAPF32[(($arrayidx208)>>2)];
      var $mul209=($163)*($165);
      var $166=$k;
      var $sub210=(((-1)-($166))|0);
      var $167=$mdct_enc;
      var $arrayidx211=(($167+($sub210<<2))|0);
      var $168=HEAPF32[(($arrayidx211)>>2)];
      var $169=$k;
      var $arrayidx212=((((5247888)|0)+($169<<2))|0);
      var $170=HEAPF32[(($arrayidx212)>>2)];
      var $mul213=($168)*($170);
      var $add214=($mul209)+($mul213);
      $bu=$add214;
      var $171=$k;
      var $172=$mdct_enc;
      var $arrayidx215=(($172+($171<<2))|0);
      var $173=HEAPF32[(($arrayidx215)>>2)];
      var $174=$k;
      var $arrayidx216=((((5247888)|0)+($174<<2))|0);
      var $175=HEAPF32[(($arrayidx216)>>2)];
      var $mul217=($173)*($175);
      var $176=$k;
      var $sub218=(((-1)-($176))|0);
      var $177=$mdct_enc;
      var $arrayidx219=(($177+($sub218<<2))|0);
      var $178=HEAPF32[(($arrayidx219)>>2)];
      var $179=$k;
      var $arrayidx220=((((5247856)|0)+($179<<2))|0);
      var $180=HEAPF32[(($arrayidx220)>>2)];
      var $mul221=($178)*($180);
      var $sub222=($mul217)-($mul221);
      $bd=$sub222;
      var $181=$bu;
      var $182=$k;
      var $sub223=(((-1)-($182))|0);
      var $183=$mdct_enc;
      var $arrayidx224=(($183+($sub223<<2))|0);
      HEAPF32[(($arrayidx224)>>2)]=$181;
      var $184=$bd;
      var $185=$k;
      var $186=$mdct_enc;
      var $arrayidx225=(($186+($185<<2))|0);
      HEAPF32[(($arrayidx225)>>2)]=$184;
      label = 44; break;
    case 44: 
      var $187=$k;
      var $dec=((($187)-(1))|0);
      $k=$dec;
      label = 42; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $188=$band;
      var $inc230=((($188)+(1))|0);
      $band=$inc230;
      var $189=$mdct_enc;
      var $add_ptr231=(($189+72)|0);
      $mdct_enc=$add_ptr231;
      label = 15; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $190=$gr;
      var $inc234=((($190)+(1))|0);
      $gr=$inc234;
      label = 5; break;
    case 50: 
      var $191=$w1_addr;
      var $add_ptr236=(($191+1144)|0);
      $wk=$add_ptr236;
      var $192=$cfg;
      var $mode_gr237=(($192+60)|0);
      var $193=HEAP32[(($mode_gr237)>>2)];
      var $cmp238=(($193)|0)==1;
      if ($cmp238) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $194=$ch;
      var $195=$esv;
      var $sb_sample241=(($195)|0);
      var $arrayidx242=(($sb_sample241+($194)*(4608))|0);
      var $arrayidx243=(($arrayidx242)|0);
      var $196=$arrayidx243;
      var $197=$ch;
      var $198=$esv;
      var $sb_sample244=(($198)|0);
      var $arrayidx245=(($sb_sample244+($197)*(4608))|0);
      var $arrayidx246=(($arrayidx245+2304)|0);
      var $199=$arrayidx246;
      assert(2304 % 1 === 0);for (var $$src = $199>>2, $$dest = $196>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $200=$ch;
      var $inc249=((($200)+(1))|0);
      $ch=$inc249;
      label = 3; break;
    case 54: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_mdct_sub48["X"]=1;

function _window_subband($x1, $a) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x1_addr;
      var $a_addr;
      var $i;
      var $wp;
      var $x2;
      var $w;
      var $s;
      var $t;
      var $s121;
      var $t122;
      var $u;
      var $v;
      var $xr;
      $x1_addr=$x1;
      $a_addr=$a;
      $wp=((5346568)|0);
      var $0=$x1_addr;
      var $arrayidx=((($0)-(248))|0);
      $x2=$arrayidx;
      $i=-15;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$wp;
      var $arrayidx1=((($2)-(40))|0);
      var $3=HEAPF32[(($arrayidx1)>>2)];
      $w=$3;
      var $4=$x2;
      var $arrayidx2=((($4)-(896))|0);
      var $5=HEAPF32[(($arrayidx2)>>2)];
      var $6=$w;
      var $mul=($5)*($6);
      $s=$mul;
      var $7=$x1_addr;
      var $arrayidx3=(($7+896)|0);
      var $8=HEAPF32[(($arrayidx3)>>2)];
      var $9=$w;
      var $mul4=($8)*($9);
      $t=$mul4;
      var $10=$wp;
      var $arrayidx5=((($10)-(36))|0);
      var $11=HEAPF32[(($arrayidx5)>>2)];
      $w=$11;
      var $12=$x2;
      var $arrayidx6=((($12)-(640))|0);
      var $13=HEAPF32[(($arrayidx6)>>2)];
      var $14=$w;
      var $mul7=($13)*($14);
      var $15=$s;
      var $add=($15)+($mul7);
      $s=$add;
      var $16=$x1_addr;
      var $arrayidx8=(($16+640)|0);
      var $17=HEAPF32[(($arrayidx8)>>2)];
      var $18=$w;
      var $mul9=($17)*($18);
      var $19=$t;
      var $add10=($19)+($mul9);
      $t=$add10;
      var $20=$wp;
      var $arrayidx11=((($20)-(32))|0);
      var $21=HEAPF32[(($arrayidx11)>>2)];
      $w=$21;
      var $22=$x2;
      var $arrayidx12=((($22)-(384))|0);
      var $23=HEAPF32[(($arrayidx12)>>2)];
      var $24=$w;
      var $mul13=($23)*($24);
      var $25=$s;
      var $add14=($25)+($mul13);
      $s=$add14;
      var $26=$x1_addr;
      var $arrayidx15=(($26+384)|0);
      var $27=HEAPF32[(($arrayidx15)>>2)];
      var $28=$w;
      var $mul16=($27)*($28);
      var $29=$t;
      var $add17=($29)+($mul16);
      $t=$add17;
      var $30=$wp;
      var $arrayidx18=((($30)-(28))|0);
      var $31=HEAPF32[(($arrayidx18)>>2)];
      $w=$31;
      var $32=$x2;
      var $arrayidx19=((($32)-(128))|0);
      var $33=HEAPF32[(($arrayidx19)>>2)];
      var $34=$w;
      var $mul20=($33)*($34);
      var $35=$s;
      var $add21=($35)+($mul20);
      $s=$add21;
      var $36=$x1_addr;
      var $arrayidx22=(($36+128)|0);
      var $37=HEAPF32[(($arrayidx22)>>2)];
      var $38=$w;
      var $mul23=($37)*($38);
      var $39=$t;
      var $add24=($39)+($mul23);
      $t=$add24;
      var $40=$wp;
      var $arrayidx25=((($40)-(24))|0);
      var $41=HEAPF32[(($arrayidx25)>>2)];
      $w=$41;
      var $42=$x2;
      var $arrayidx26=(($42+128)|0);
      var $43=HEAPF32[(($arrayidx26)>>2)];
      var $44=$w;
      var $mul27=($43)*($44);
      var $45=$s;
      var $add28=($45)+($mul27);
      $s=$add28;
      var $46=$x1_addr;
      var $arrayidx29=((($46)-(128))|0);
      var $47=HEAPF32[(($arrayidx29)>>2)];
      var $48=$w;
      var $mul30=($47)*($48);
      var $49=$t;
      var $add31=($49)+($mul30);
      $t=$add31;
      var $50=$wp;
      var $arrayidx32=((($50)-(20))|0);
      var $51=HEAPF32[(($arrayidx32)>>2)];
      $w=$51;
      var $52=$x2;
      var $arrayidx33=(($52+384)|0);
      var $53=HEAPF32[(($arrayidx33)>>2)];
      var $54=$w;
      var $mul34=($53)*($54);
      var $55=$s;
      var $add35=($55)+($mul34);
      $s=$add35;
      var $56=$x1_addr;
      var $arrayidx36=((($56)-(384))|0);
      var $57=HEAPF32[(($arrayidx36)>>2)];
      var $58=$w;
      var $mul37=($57)*($58);
      var $59=$t;
      var $add38=($59)+($mul37);
      $t=$add38;
      var $60=$wp;
      var $arrayidx39=((($60)-(16))|0);
      var $61=HEAPF32[(($arrayidx39)>>2)];
      $w=$61;
      var $62=$x2;
      var $arrayidx40=(($62+640)|0);
      var $63=HEAPF32[(($arrayidx40)>>2)];
      var $64=$w;
      var $mul41=($63)*($64);
      var $65=$s;
      var $add42=($65)+($mul41);
      $s=$add42;
      var $66=$x1_addr;
      var $arrayidx43=((($66)-(640))|0);
      var $67=HEAPF32[(($arrayidx43)>>2)];
      var $68=$w;
      var $mul44=($67)*($68);
      var $69=$t;
      var $add45=($69)+($mul44);
      $t=$add45;
      var $70=$wp;
      var $arrayidx46=((($70)-(12))|0);
      var $71=HEAPF32[(($arrayidx46)>>2)];
      $w=$71;
      var $72=$x2;
      var $arrayidx47=(($72+896)|0);
      var $73=HEAPF32[(($arrayidx47)>>2)];
      var $74=$w;
      var $mul48=($73)*($74);
      var $75=$s;
      var $add49=($75)+($mul48);
      $s=$add49;
      var $76=$x1_addr;
      var $arrayidx50=((($76)-(896))|0);
      var $77=HEAPF32[(($arrayidx50)>>2)];
      var $78=$w;
      var $mul51=($77)*($78);
      var $79=$t;
      var $add52=($79)+($mul51);
      $t=$add52;
      var $80=$wp;
      var $arrayidx53=((($80)-(8))|0);
      var $81=HEAPF32[(($arrayidx53)>>2)];
      $w=$81;
      var $82=$x1_addr;
      var $arrayidx54=((($82)-(1024))|0);
      var $83=HEAPF32[(($arrayidx54)>>2)];
      var $84=$w;
      var $mul55=($83)*($84);
      var $85=$s;
      var $add56=($85)+($mul55);
      $s=$add56;
      var $86=$x2;
      var $arrayidx57=(($86+1024)|0);
      var $87=HEAPF32[(($arrayidx57)>>2)];
      var $88=$w;
      var $mul58=($87)*($88);
      var $89=$t;
      var $sub=($89)-($mul58);
      $t=$sub;
      var $90=$wp;
      var $arrayidx59=((($90)-(4))|0);
      var $91=HEAPF32[(($arrayidx59)>>2)];
      $w=$91;
      var $92=$x1_addr;
      var $arrayidx60=((($92)-(768))|0);
      var $93=HEAPF32[(($arrayidx60)>>2)];
      var $94=$w;
      var $mul61=($93)*($94);
      var $95=$s;
      var $add62=($95)+($mul61);
      $s=$add62;
      var $96=$x2;
      var $arrayidx63=(($96+768)|0);
      var $97=HEAPF32[(($arrayidx63)>>2)];
      var $98=$w;
      var $mul64=($97)*($98);
      var $99=$t;
      var $sub65=($99)-($mul64);
      $t=$sub65;
      var $100=$wp;
      var $arrayidx66=(($100)|0);
      var $101=HEAPF32[(($arrayidx66)>>2)];
      $w=$101;
      var $102=$x1_addr;
      var $arrayidx67=((($102)-(512))|0);
      var $103=HEAPF32[(($arrayidx67)>>2)];
      var $104=$w;
      var $mul68=($103)*($104);
      var $105=$s;
      var $add69=($105)+($mul68);
      $s=$add69;
      var $106=$x2;
      var $arrayidx70=(($106+512)|0);
      var $107=HEAPF32[(($arrayidx70)>>2)];
      var $108=$w;
      var $mul71=($107)*($108);
      var $109=$t;
      var $sub72=($109)-($mul71);
      $t=$sub72;
      var $110=$wp;
      var $arrayidx73=(($110+4)|0);
      var $111=HEAPF32[(($arrayidx73)>>2)];
      $w=$111;
      var $112=$x1_addr;
      var $arrayidx74=((($112)-(256))|0);
      var $113=HEAPF32[(($arrayidx74)>>2)];
      var $114=$w;
      var $mul75=($113)*($114);
      var $115=$s;
      var $add76=($115)+($mul75);
      $s=$add76;
      var $116=$x2;
      var $arrayidx77=(($116+256)|0);
      var $117=HEAPF32[(($arrayidx77)>>2)];
      var $118=$w;
      var $mul78=($117)*($118);
      var $119=$t;
      var $sub79=($119)-($mul78);
      $t=$sub79;
      var $120=$wp;
      var $arrayidx80=(($120+8)|0);
      var $121=HEAPF32[(($arrayidx80)>>2)];
      $w=$121;
      var $122=$x1_addr;
      var $arrayidx81=(($122)|0);
      var $123=HEAPF32[(($arrayidx81)>>2)];
      var $124=$w;
      var $mul82=($123)*($124);
      var $125=$s;
      var $add83=($125)+($mul82);
      $s=$add83;
      var $126=$x2;
      var $arrayidx84=(($126)|0);
      var $127=HEAPF32[(($arrayidx84)>>2)];
      var $128=$w;
      var $mul85=($127)*($128);
      var $129=$t;
      var $sub86=($129)-($mul85);
      $t=$sub86;
      var $130=$wp;
      var $arrayidx87=(($130+12)|0);
      var $131=HEAPF32[(($arrayidx87)>>2)];
      $w=$131;
      var $132=$x1_addr;
      var $arrayidx88=(($132+256)|0);
      var $133=HEAPF32[(($arrayidx88)>>2)];
      var $134=$w;
      var $mul89=($133)*($134);
      var $135=$s;
      var $add90=($135)+($mul89);
      $s=$add90;
      var $136=$x2;
      var $arrayidx91=((($136)-(256))|0);
      var $137=HEAPF32[(($arrayidx91)>>2)];
      var $138=$w;
      var $mul92=($137)*($138);
      var $139=$t;
      var $sub93=($139)-($mul92);
      $t=$sub93;
      var $140=$wp;
      var $arrayidx94=(($140+16)|0);
      var $141=HEAPF32[(($arrayidx94)>>2)];
      $w=$141;
      var $142=$x1_addr;
      var $arrayidx95=(($142+512)|0);
      var $143=HEAPF32[(($arrayidx95)>>2)];
      var $144=$w;
      var $mul96=($143)*($144);
      var $145=$s;
      var $add97=($145)+($mul96);
      $s=$add97;
      var $146=$x2;
      var $arrayidx98=((($146)-(512))|0);
      var $147=HEAPF32[(($arrayidx98)>>2)];
      var $148=$w;
      var $mul99=($147)*($148);
      var $149=$t;
      var $sub100=($149)-($mul99);
      $t=$sub100;
      var $150=$wp;
      var $arrayidx101=(($150+20)|0);
      var $151=HEAPF32[(($arrayidx101)>>2)];
      $w=$151;
      var $152=$x1_addr;
      var $arrayidx102=(($152+768)|0);
      var $153=HEAPF32[(($arrayidx102)>>2)];
      var $154=$w;
      var $mul103=($153)*($154);
      var $155=$s;
      var $add104=($155)+($mul103);
      $s=$add104;
      var $156=$x2;
      var $arrayidx105=((($156)-(768))|0);
      var $157=HEAPF32[(($arrayidx105)>>2)];
      var $158=$w;
      var $mul106=($157)*($158);
      var $159=$t;
      var $sub107=($159)-($mul106);
      $t=$sub107;
      var $160=$wp;
      var $arrayidx108=(($160+24)|0);
      var $161=HEAPF32[(($arrayidx108)>>2)];
      var $162=$s;
      var $mul109=($162)*($161);
      $s=$mul109;
      var $163=$t;
      var $164=$s;
      var $sub110=($163)-($164);
      $w=$sub110;
      var $165=$t;
      var $166=$s;
      var $add111=($165)+($166);
      var $167=$i;
      var $mul112=((($167<<1))&-1);
      var $add113=((($mul112)+(30))|0);
      var $168=$a_addr;
      var $arrayidx114=(($168+($add113<<2))|0);
      HEAPF32[(($arrayidx114)>>2)]=$add111;
      var $169=$wp;
      var $arrayidx115=(($169+28)|0);
      var $170=HEAPF32[(($arrayidx115)>>2)];
      var $171=$w;
      var $mul116=($170)*($171);
      var $172=$i;
      var $mul117=((($172<<1))&-1);
      var $add118=((($mul117)+(31))|0);
      var $173=$a_addr;
      var $arrayidx119=(($173+($add118<<2))|0);
      HEAPF32[(($arrayidx119)>>2)]=$mul116;
      var $174=$wp;
      var $add_ptr=(($174+72)|0);
      $wp=$add_ptr;
      var $175=$x1_addr;
      var $incdec_ptr=((($175)-(4))|0);
      $x1_addr=$incdec_ptr;
      var $176=$x2;
      var $incdec_ptr120=(($176+4)|0);
      $x2=$incdec_ptr120;
      label = 5; break;
    case 5: 
      var $177=$i;
      var $inc=((($177)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $178=$x1_addr;
      var $arrayidx123=((($178)-(64))|0);
      var $179=HEAPF32[(($arrayidx123)>>2)];
      var $180=$wp;
      var $arrayidx124=((($180)-(40))|0);
      var $181=HEAPF32[(($arrayidx124)>>2)];
      var $mul125=($179)*($181);
      $t122=$mul125;
      var $182=$x1_addr;
      var $arrayidx126=((($182)-(128))|0);
      var $183=HEAPF32[(($arrayidx126)>>2)];
      var $184=$wp;
      var $arrayidx127=((($184)-(8))|0);
      var $185=HEAPF32[(($arrayidx127)>>2)];
      var $mul128=($183)*($185);
      $s121=$mul128;
      var $186=$x1_addr;
      var $arrayidx129=((($186)-(192))|0);
      var $187=HEAPF32[(($arrayidx129)>>2)];
      var $188=$x1_addr;
      var $arrayidx130=(($188+64)|0);
      var $189=HEAPF32[(($arrayidx130)>>2)];
      var $sub131=($187)-($189);
      var $190=$wp;
      var $arrayidx132=((($190)-(36))|0);
      var $191=HEAPF32[(($arrayidx132)>>2)];
      var $mul133=($sub131)*($191);
      var $192=$t122;
      var $add134=($192)+($mul133);
      $t122=$add134;
      var $193=$x1_addr;
      var $arrayidx135=((($193)-(384))|0);
      var $194=HEAPF32[(($arrayidx135)>>2)];
      var $195=$wp;
      var $arrayidx136=((($195)-(4))|0);
      var $196=HEAPF32[(($arrayidx136)>>2)];
      var $mul137=($194)*($196);
      var $197=$s121;
      var $add138=($197)+($mul137);
      $s121=$add138;
      var $198=$x1_addr;
      var $arrayidx139=((($198)-(320))|0);
      var $199=HEAPF32[(($arrayidx139)>>2)];
      var $200=$x1_addr;
      var $arrayidx140=(($200+192)|0);
      var $201=HEAPF32[(($arrayidx140)>>2)];
      var $add141=($199)+($201);
      var $202=$wp;
      var $arrayidx142=((($202)-(32))|0);
      var $203=HEAPF32[(($arrayidx142)>>2)];
      var $mul143=($add141)*($203);
      var $204=$t122;
      var $add144=($204)+($mul143);
      $t122=$add144;
      var $205=$x1_addr;
      var $arrayidx145=((($205)-(640))|0);
      var $206=HEAPF32[(($arrayidx145)>>2)];
      var $207=$wp;
      var $arrayidx146=(($207)|0);
      var $208=HEAPF32[(($arrayidx146)>>2)];
      var $mul147=($206)*($208);
      var $209=$s121;
      var $add148=($209)+($mul147);
      $s121=$add148;
      var $210=$x1_addr;
      var $arrayidx149=((($210)-(448))|0);
      var $211=HEAPF32[(($arrayidx149)>>2)];
      var $212=$x1_addr;
      var $arrayidx150=(($212+320)|0);
      var $213=HEAPF32[(($arrayidx150)>>2)];
      var $sub151=($211)-($213);
      var $214=$wp;
      var $arrayidx152=((($214)-(28))|0);
      var $215=HEAPF32[(($arrayidx152)>>2)];
      var $mul153=($sub151)*($215);
      var $216=$t122;
      var $add154=($216)+($mul153);
      $t122=$add154;
      var $217=$x1_addr;
      var $arrayidx155=((($217)-(896))|0);
      var $218=HEAPF32[(($arrayidx155)>>2)];
      var $219=$wp;
      var $arrayidx156=(($219+4)|0);
      var $220=HEAPF32[(($arrayidx156)>>2)];
      var $mul157=($218)*($220);
      var $221=$s121;
      var $add158=($221)+($mul157);
      $s121=$add158;
      var $222=$x1_addr;
      var $arrayidx159=((($222)-(576))|0);
      var $223=HEAPF32[(($arrayidx159)>>2)];
      var $224=$x1_addr;
      var $arrayidx160=(($224+448)|0);
      var $225=HEAPF32[(($arrayidx160)>>2)];
      var $add161=($223)+($225);
      var $226=$wp;
      var $arrayidx162=((($226)-(24))|0);
      var $227=HEAPF32[(($arrayidx162)>>2)];
      var $mul163=($add161)*($227);
      var $228=$t122;
      var $add164=($228)+($mul163);
      $t122=$add164;
      var $229=$x1_addr;
      var $arrayidx165=(($229+128)|0);
      var $230=HEAPF32[(($arrayidx165)>>2)];
      var $231=$wp;
      var $arrayidx166=(($231+8)|0);
      var $232=HEAPF32[(($arrayidx166)>>2)];
      var $mul167=($230)*($232);
      var $233=$s121;
      var $sub168=($233)-($mul167);
      $s121=$sub168;
      var $234=$x1_addr;
      var $arrayidx169=((($234)-(704))|0);
      var $235=HEAPF32[(($arrayidx169)>>2)];
      var $236=$x1_addr;
      var $arrayidx170=(($236+576)|0);
      var $237=HEAPF32[(($arrayidx170)>>2)];
      var $sub171=($235)-($237);
      var $238=$wp;
      var $arrayidx172=((($238)-(20))|0);
      var $239=HEAPF32[(($arrayidx172)>>2)];
      var $mul173=($sub171)*($239);
      var $240=$t122;
      var $add174=($240)+($mul173);
      $t122=$add174;
      var $241=$x1_addr;
      var $arrayidx175=(($241+384)|0);
      var $242=HEAPF32[(($arrayidx175)>>2)];
      var $243=$wp;
      var $arrayidx176=(($243+12)|0);
      var $244=HEAPF32[(($arrayidx176)>>2)];
      var $mul177=($242)*($244);
      var $245=$s121;
      var $sub178=($245)-($mul177);
      $s121=$sub178;
      var $246=$x1_addr;
      var $arrayidx179=((($246)-(832))|0);
      var $247=HEAPF32[(($arrayidx179)>>2)];
      var $248=$x1_addr;
      var $arrayidx180=(($248+704)|0);
      var $249=HEAPF32[(($arrayidx180)>>2)];
      var $add181=($247)+($249);
      var $250=$wp;
      var $arrayidx182=((($250)-(16))|0);
      var $251=HEAPF32[(($arrayidx182)>>2)];
      var $mul183=($add181)*($251);
      var $252=$t122;
      var $add184=($252)+($mul183);
      $t122=$add184;
      var $253=$x1_addr;
      var $arrayidx185=(($253+640)|0);
      var $254=HEAPF32[(($arrayidx185)>>2)];
      var $255=$wp;
      var $arrayidx186=(($255+16)|0);
      var $256=HEAPF32[(($arrayidx186)>>2)];
      var $mul187=($254)*($256);
      var $257=$s121;
      var $sub188=($257)-($mul187);
      $s121=$sub188;
      var $258=$x1_addr;
      var $arrayidx189=((($258)-(960))|0);
      var $259=HEAPF32[(($arrayidx189)>>2)];
      var $260=$x1_addr;
      var $arrayidx190=(($260+832)|0);
      var $261=HEAPF32[(($arrayidx190)>>2)];
      var $sub191=($259)-($261);
      var $262=$wp;
      var $arrayidx192=((($262)-(12))|0);
      var $263=HEAPF32[(($arrayidx192)>>2)];
      var $mul193=($sub191)*($263);
      var $264=$t122;
      var $add194=($264)+($mul193);
      $t122=$add194;
      var $265=$x1_addr;
      var $arrayidx195=(($265+896)|0);
      var $266=HEAPF32[(($arrayidx195)>>2)];
      var $267=$s121;
      var $sub196=($267)-($266);
      $s121=$sub196;
      var $268=$s121;
      var $269=$t122;
      var $sub197=($268)-($269);
      $u=$sub197;
      var $270=$s121;
      var $271=$t122;
      var $add198=($270)+($271);
      $v=$add198;
      var $272=$a_addr;
      var $arrayidx199=(($272+56)|0);
      var $273=HEAPF32[(($arrayidx199)>>2)];
      $t122=$273;
      var $274=$a_addr;
      var $arrayidx200=(($274+60)|0);
      var $275=HEAPF32[(($arrayidx200)>>2)];
      var $276=$t122;
      var $sub201=($275)-($276);
      $s121=$sub201;
      var $277=$v;
      var $278=$t122;
      var $add202=($277)+($278);
      var $279=$a_addr;
      var $arrayidx203=(($279+124)|0);
      HEAPF32[(($arrayidx203)>>2)]=$add202;
      var $280=$u;
      var $281=$s121;
      var $add204=($280)+($281);
      var $282=$a_addr;
      var $arrayidx205=(($282+120)|0);
      HEAPF32[(($arrayidx205)>>2)]=$add204;
      var $283=$u;
      var $284=$s121;
      var $sub206=($283)-($284);
      var $285=$a_addr;
      var $arrayidx207=(($285+60)|0);
      HEAPF32[(($arrayidx207)>>2)]=$sub206;
      var $286=$v;
      var $287=$t122;
      var $sub208=($286)-($287);
      var $288=$a_addr;
      var $arrayidx209=(($288+56)|0);
      HEAPF32[(($arrayidx209)>>2)]=$sub208;
      var $289=$a_addr;
      var $arrayidx210=(($289+112)|0);
      var $290=HEAPF32[(($arrayidx210)>>2)];
      var $291=$a_addr;
      var $arrayidx211=(($291)|0);
      var $292=HEAPF32[(($arrayidx211)>>2)];
      var $sub212=($290)-($292);
      $xr=$sub212;
      var $293=$a_addr;
      var $arrayidx213=(($293+112)|0);
      var $294=HEAPF32[(($arrayidx213)>>2)];
      var $295=$a_addr;
      var $arrayidx214=(($295)|0);
      var $296=HEAPF32[(($arrayidx214)>>2)];
      var $add215=($296)+($294);
      HEAPF32[(($arrayidx214)>>2)]=$add215;
      var $297=$xr;
      var $298=$wp;
      var $arrayidx216=((($298)-(116))|0);
      var $299=HEAPF32[(($arrayidx216)>>2)];
      var $mul217=($297)*($299);
      var $300=$a_addr;
      var $arrayidx218=(($300+112)|0);
      HEAPF32[(($arrayidx218)>>2)]=$mul217;
      var $301=$a_addr;
      var $arrayidx219=(($301+116)|0);
      var $302=HEAPF32[(($arrayidx219)>>2)];
      var $303=$a_addr;
      var $arrayidx220=(($303+4)|0);
      var $304=HEAPF32[(($arrayidx220)>>2)];
      var $sub221=($302)-($304);
      $xr=$sub221;
      var $305=$a_addr;
      var $arrayidx222=(($305+116)|0);
      var $306=HEAPF32[(($arrayidx222)>>2)];
      var $307=$a_addr;
      var $arrayidx223=(($307+4)|0);
      var $308=HEAPF32[(($arrayidx223)>>2)];
      var $add224=($308)+($306);
      HEAPF32[(($arrayidx223)>>2)]=$add224;
      var $309=$xr;
      var $310=$wp;
      var $arrayidx225=((($310)-(116))|0);
      var $311=HEAPF32[(($arrayidx225)>>2)];
      var $mul226=($309)*($311);
      var $312=$a_addr;
      var $arrayidx227=(($312+116)|0);
      HEAPF32[(($arrayidx227)>>2)]=$mul226;
      var $313=$a_addr;
      var $arrayidx228=(($313+104)|0);
      var $314=HEAPF32[(($arrayidx228)>>2)];
      var $315=$a_addr;
      var $arrayidx229=(($315+8)|0);
      var $316=HEAPF32[(($arrayidx229)>>2)];
      var $sub230=($314)-($316);
      $xr=$sub230;
      var $317=$a_addr;
      var $arrayidx231=(($317+104)|0);
      var $318=HEAPF32[(($arrayidx231)>>2)];
      var $319=$a_addr;
      var $arrayidx232=(($319+8)|0);
      var $320=HEAPF32[(($arrayidx232)>>2)];
      var $add233=($320)+($318);
      HEAPF32[(($arrayidx232)>>2)]=$add233;
      var $321=$xr;
      var $322=$wp;
      var $arrayidx234=((($322)-(260))|0);
      var $323=HEAPF32[(($arrayidx234)>>2)];
      var $mul235=($321)*($323);
      var $324=$a_addr;
      var $arrayidx236=(($324+104)|0);
      HEAPF32[(($arrayidx236)>>2)]=$mul235;
      var $325=$a_addr;
      var $arrayidx237=(($325+108)|0);
      var $326=HEAPF32[(($arrayidx237)>>2)];
      var $327=$a_addr;
      var $arrayidx238=(($327+12)|0);
      var $328=HEAPF32[(($arrayidx238)>>2)];
      var $sub239=($326)-($328);
      $xr=$sub239;
      var $329=$a_addr;
      var $arrayidx240=(($329+108)|0);
      var $330=HEAPF32[(($arrayidx240)>>2)];
      var $331=$a_addr;
      var $arrayidx241=(($331+12)|0);
      var $332=HEAPF32[(($arrayidx241)>>2)];
      var $add242=($332)+($330);
      HEAPF32[(($arrayidx241)>>2)]=$add242;
      var $333=$xr;
      var $334=$wp;
      var $arrayidx243=((($334)-(260))|0);
      var $335=HEAPF32[(($arrayidx243)>>2)];
      var $mul244=($333)*($335);
      var $336=$a_addr;
      var $arrayidx245=(($336+108)|0);
      HEAPF32[(($arrayidx245)>>2)]=$mul244;
      var $337=$a_addr;
      var $arrayidx246=(($337+96)|0);
      var $338=HEAPF32[(($arrayidx246)>>2)];
      var $339=$a_addr;
      var $arrayidx247=(($339+16)|0);
      var $340=HEAPF32[(($arrayidx247)>>2)];
      var $sub248=($338)-($340);
      $xr=$sub248;
      var $341=$a_addr;
      var $arrayidx249=(($341+96)|0);
      var $342=HEAPF32[(($arrayidx249)>>2)];
      var $343=$a_addr;
      var $arrayidx250=(($343+16)|0);
      var $344=HEAPF32[(($arrayidx250)>>2)];
      var $add251=($344)+($342);
      HEAPF32[(($arrayidx250)>>2)]=$add251;
      var $345=$xr;
      var $346=$wp;
      var $arrayidx252=((($346)-(404))|0);
      var $347=HEAPF32[(($arrayidx252)>>2)];
      var $mul253=($345)*($347);
      var $348=$a_addr;
      var $arrayidx254=(($348+96)|0);
      HEAPF32[(($arrayidx254)>>2)]=$mul253;
      var $349=$a_addr;
      var $arrayidx255=(($349+100)|0);
      var $350=HEAPF32[(($arrayidx255)>>2)];
      var $351=$a_addr;
      var $arrayidx256=(($351+20)|0);
      var $352=HEAPF32[(($arrayidx256)>>2)];
      var $sub257=($350)-($352);
      $xr=$sub257;
      var $353=$a_addr;
      var $arrayidx258=(($353+100)|0);
      var $354=HEAPF32[(($arrayidx258)>>2)];
      var $355=$a_addr;
      var $arrayidx259=(($355+20)|0);
      var $356=HEAPF32[(($arrayidx259)>>2)];
      var $add260=($356)+($354);
      HEAPF32[(($arrayidx259)>>2)]=$add260;
      var $357=$xr;
      var $358=$wp;
      var $arrayidx261=((($358)-(404))|0);
      var $359=HEAPF32[(($arrayidx261)>>2)];
      var $mul262=($357)*($359);
      var $360=$a_addr;
      var $arrayidx263=(($360+100)|0);
      HEAPF32[(($arrayidx263)>>2)]=$mul262;
      var $361=$a_addr;
      var $arrayidx264=(($361+88)|0);
      var $362=HEAPF32[(($arrayidx264)>>2)];
      var $363=$a_addr;
      var $arrayidx265=(($363+24)|0);
      var $364=HEAPF32[(($arrayidx265)>>2)];
      var $sub266=($362)-($364);
      $xr=$sub266;
      var $365=$a_addr;
      var $arrayidx267=(($365+88)|0);
      var $366=HEAPF32[(($arrayidx267)>>2)];
      var $367=$a_addr;
      var $arrayidx268=(($367+24)|0);
      var $368=HEAPF32[(($arrayidx268)>>2)];
      var $add269=($368)+($366);
      HEAPF32[(($arrayidx268)>>2)]=$add269;
      var $369=$xr;
      var $conv=$369;
      var $mul270=($conv)*(1.4142135623730951);
      var $conv271=$mul270;
      var $370=$a_addr;
      var $arrayidx272=(($370+88)|0);
      HEAPF32[(($arrayidx272)>>2)]=$conv271;
      var $371=$a_addr;
      var $arrayidx273=(($371+92)|0);
      var $372=HEAPF32[(($arrayidx273)>>2)];
      var $373=$a_addr;
      var $arrayidx274=(($373+28)|0);
      var $374=HEAPF32[(($arrayidx274)>>2)];
      var $sub275=($372)-($374);
      $xr=$sub275;
      var $375=$a_addr;
      var $arrayidx276=(($375+92)|0);
      var $376=HEAPF32[(($arrayidx276)>>2)];
      var $377=$a_addr;
      var $arrayidx277=(($377+28)|0);
      var $378=HEAPF32[(($arrayidx277)>>2)];
      var $add278=($378)+($376);
      HEAPF32[(($arrayidx277)>>2)]=$add278;
      var $379=$xr;
      var $conv279=$379;
      var $mul280=($conv279)*(1.4142135623730951);
      var $380=$a_addr;
      var $arrayidx281=(($380+28)|0);
      var $381=HEAPF32[(($arrayidx281)>>2)];
      var $conv282=$381;
      var $sub283=($mul280)-($conv282);
      var $conv284=$sub283;
      var $382=$a_addr;
      var $arrayidx285=(($382+92)|0);
      HEAPF32[(($arrayidx285)>>2)]=$conv284;
      var $383=$a_addr;
      var $arrayidx286=(($383+24)|0);
      var $384=HEAPF32[(($arrayidx286)>>2)];
      var $385=$a_addr;
      var $arrayidx287=(($385+28)|0);
      var $386=HEAPF32[(($arrayidx287)>>2)];
      var $sub288=($386)-($384);
      HEAPF32[(($arrayidx287)>>2)]=$sub288;
      var $387=$a_addr;
      var $arrayidx289=(($387+28)|0);
      var $388=HEAPF32[(($arrayidx289)>>2)];
      var $389=$a_addr;
      var $arrayidx290=(($389+88)|0);
      var $390=HEAPF32[(($arrayidx290)>>2)];
      var $sub291=($390)-($388);
      HEAPF32[(($arrayidx290)>>2)]=$sub291;
      var $391=$a_addr;
      var $arrayidx292=(($391+88)|0);
      var $392=HEAPF32[(($arrayidx292)>>2)];
      var $393=$a_addr;
      var $arrayidx293=(($393+92)|0);
      var $394=HEAPF32[(($arrayidx293)>>2)];
      var $sub294=($394)-($392);
      HEAPF32[(($arrayidx293)>>2)]=$sub294;
      var $395=$a_addr;
      var $arrayidx295=(($395+24)|0);
      var $396=HEAPF32[(($arrayidx295)>>2)];
      $xr=$396;
      var $397=$a_addr;
      var $arrayidx296=(($397+124)|0);
      var $398=HEAPF32[(($arrayidx296)>>2)];
      var $399=$xr;
      var $sub297=($398)-($399);
      var $400=$a_addr;
      var $arrayidx298=(($400+24)|0);
      HEAPF32[(($arrayidx298)>>2)]=$sub297;
      var $401=$a_addr;
      var $arrayidx299=(($401+124)|0);
      var $402=HEAPF32[(($arrayidx299)>>2)];
      var $403=$xr;
      var $add300=($402)+($403);
      var $404=$a_addr;
      var $arrayidx301=(($404+124)|0);
      HEAPF32[(($arrayidx301)>>2)]=$add300;
      var $405=$a_addr;
      var $arrayidx302=(($405+28)|0);
      var $406=HEAPF32[(($arrayidx302)>>2)];
      $xr=$406;
      var $407=$a_addr;
      var $arrayidx303=(($407+120)|0);
      var $408=HEAPF32[(($arrayidx303)>>2)];
      var $409=$xr;
      var $sub304=($408)-($409);
      var $410=$a_addr;
      var $arrayidx305=(($410+28)|0);
      HEAPF32[(($arrayidx305)>>2)]=$sub304;
      var $411=$a_addr;
      var $arrayidx306=(($411+120)|0);
      var $412=HEAPF32[(($arrayidx306)>>2)];
      var $413=$xr;
      var $add307=($412)+($413);
      var $414=$a_addr;
      var $arrayidx308=(($414+120)|0);
      HEAPF32[(($arrayidx308)>>2)]=$add307;
      var $415=$a_addr;
      var $arrayidx309=(($415+88)|0);
      var $416=HEAPF32[(($arrayidx309)>>2)];
      $xr=$416;
      var $417=$a_addr;
      var $arrayidx310=(($417+60)|0);
      var $418=HEAPF32[(($arrayidx310)>>2)];
      var $419=$xr;
      var $sub311=($418)-($419);
      var $420=$a_addr;
      var $arrayidx312=(($420+88)|0);
      HEAPF32[(($arrayidx312)>>2)]=$sub311;
      var $421=$a_addr;
      var $arrayidx313=(($421+60)|0);
      var $422=HEAPF32[(($arrayidx313)>>2)];
      var $423=$xr;
      var $add314=($422)+($423);
      var $424=$a_addr;
      var $arrayidx315=(($424+60)|0);
      HEAPF32[(($arrayidx315)>>2)]=$add314;
      var $425=$a_addr;
      var $arrayidx316=(($425+92)|0);
      var $426=HEAPF32[(($arrayidx316)>>2)];
      $xr=$426;
      var $427=$a_addr;
      var $arrayidx317=(($427+56)|0);
      var $428=HEAPF32[(($arrayidx317)>>2)];
      var $429=$xr;
      var $sub318=($428)-($429);
      var $430=$a_addr;
      var $arrayidx319=(($430+92)|0);
      HEAPF32[(($arrayidx319)>>2)]=$sub318;
      var $431=$a_addr;
      var $arrayidx320=(($431+56)|0);
      var $432=HEAPF32[(($arrayidx320)>>2)];
      var $433=$xr;
      var $add321=($432)+($433);
      var $434=$a_addr;
      var $arrayidx322=(($434+56)|0);
      HEAPF32[(($arrayidx322)>>2)]=$add321;
      var $435=$a_addr;
      var $arrayidx323=(($435+80)|0);
      var $436=HEAPF32[(($arrayidx323)>>2)];
      var $437=$a_addr;
      var $arrayidx324=(($437+32)|0);
      var $438=HEAPF32[(($arrayidx324)>>2)];
      var $sub325=($436)-($438);
      $xr=$sub325;
      var $439=$a_addr;
      var $arrayidx326=(($439+80)|0);
      var $440=HEAPF32[(($arrayidx326)>>2)];
      var $441=$a_addr;
      var $arrayidx327=(($441+32)|0);
      var $442=HEAPF32[(($arrayidx327)>>2)];
      var $add328=($442)+($440);
      HEAPF32[(($arrayidx327)>>2)]=$add328;
      var $443=$xr;
      var $444=$wp;
      var $arrayidx329=((($444)-(692))|0);
      var $445=HEAPF32[(($arrayidx329)>>2)];
      var $mul330=($443)*($445);
      var $446=$a_addr;
      var $arrayidx331=(($446+80)|0);
      HEAPF32[(($arrayidx331)>>2)]=$mul330;
      var $447=$a_addr;
      var $arrayidx332=(($447+84)|0);
      var $448=HEAPF32[(($arrayidx332)>>2)];
      var $449=$a_addr;
      var $arrayidx333=(($449+36)|0);
      var $450=HEAPF32[(($arrayidx333)>>2)];
      var $sub334=($448)-($450);
      $xr=$sub334;
      var $451=$a_addr;
      var $arrayidx335=(($451+84)|0);
      var $452=HEAPF32[(($arrayidx335)>>2)];
      var $453=$a_addr;
      var $arrayidx336=(($453+36)|0);
      var $454=HEAPF32[(($arrayidx336)>>2)];
      var $add337=($454)+($452);
      HEAPF32[(($arrayidx336)>>2)]=$add337;
      var $455=$xr;
      var $456=$wp;
      var $arrayidx338=((($456)-(692))|0);
      var $457=HEAPF32[(($arrayidx338)>>2)];
      var $mul339=($455)*($457);
      var $458=$a_addr;
      var $arrayidx340=(($458+84)|0);
      HEAPF32[(($arrayidx340)>>2)]=$mul339;
      var $459=$a_addr;
      var $arrayidx341=(($459+72)|0);
      var $460=HEAPF32[(($arrayidx341)>>2)];
      var $461=$a_addr;
      var $arrayidx342=(($461+40)|0);
      var $462=HEAPF32[(($arrayidx342)>>2)];
      var $sub343=($460)-($462);
      $xr=$sub343;
      var $463=$a_addr;
      var $arrayidx344=(($463+72)|0);
      var $464=HEAPF32[(($arrayidx344)>>2)];
      var $465=$a_addr;
      var $arrayidx345=(($465+40)|0);
      var $466=HEAPF32[(($arrayidx345)>>2)];
      var $add346=($466)+($464);
      HEAPF32[(($arrayidx345)>>2)]=$add346;
      var $467=$xr;
      var $468=$wp;
      var $arrayidx347=((($468)-(836))|0);
      var $469=HEAPF32[(($arrayidx347)>>2)];
      var $mul348=($467)*($469);
      var $470=$a_addr;
      var $arrayidx349=(($470+72)|0);
      HEAPF32[(($arrayidx349)>>2)]=$mul348;
      var $471=$a_addr;
      var $arrayidx350=(($471+76)|0);
      var $472=HEAPF32[(($arrayidx350)>>2)];
      var $473=$a_addr;
      var $arrayidx351=(($473+44)|0);
      var $474=HEAPF32[(($arrayidx351)>>2)];
      var $sub352=($472)-($474);
      $xr=$sub352;
      var $475=$a_addr;
      var $arrayidx353=(($475+76)|0);
      var $476=HEAPF32[(($arrayidx353)>>2)];
      var $477=$a_addr;
      var $arrayidx354=(($477+44)|0);
      var $478=HEAPF32[(($arrayidx354)>>2)];
      var $add355=($478)+($476);
      HEAPF32[(($arrayidx354)>>2)]=$add355;
      var $479=$xr;
      var $480=$wp;
      var $arrayidx356=((($480)-(836))|0);
      var $481=HEAPF32[(($arrayidx356)>>2)];
      var $mul357=($479)*($481);
      var $482=$a_addr;
      var $arrayidx358=(($482+76)|0);
      HEAPF32[(($arrayidx358)>>2)]=$mul357;
      var $483=$a_addr;
      var $arrayidx359=(($483+64)|0);
      var $484=HEAPF32[(($arrayidx359)>>2)];
      var $485=$a_addr;
      var $arrayidx360=(($485+48)|0);
      var $486=HEAPF32[(($arrayidx360)>>2)];
      var $sub361=($484)-($486);
      $xr=$sub361;
      var $487=$a_addr;
      var $arrayidx362=(($487+64)|0);
      var $488=HEAPF32[(($arrayidx362)>>2)];
      var $489=$a_addr;
      var $arrayidx363=(($489+48)|0);
      var $490=HEAPF32[(($arrayidx363)>>2)];
      var $add364=($490)+($488);
      HEAPF32[(($arrayidx363)>>2)]=$add364;
      var $491=$xr;
      var $492=$wp;
      var $arrayidx365=((($492)-(980))|0);
      var $493=HEAPF32[(($arrayidx365)>>2)];
      var $mul366=($491)*($493);
      var $494=$a_addr;
      var $arrayidx367=(($494+64)|0);
      HEAPF32[(($arrayidx367)>>2)]=$mul366;
      var $495=$a_addr;
      var $arrayidx368=(($495+68)|0);
      var $496=HEAPF32[(($arrayidx368)>>2)];
      var $497=$a_addr;
      var $arrayidx369=(($497+52)|0);
      var $498=HEAPF32[(($arrayidx369)>>2)];
      var $sub370=($496)-($498);
      $xr=$sub370;
      var $499=$a_addr;
      var $arrayidx371=(($499+68)|0);
      var $500=HEAPF32[(($arrayidx371)>>2)];
      var $501=$a_addr;
      var $arrayidx372=(($501+52)|0);
      var $502=HEAPF32[(($arrayidx372)>>2)];
      var $add373=($502)+($500);
      HEAPF32[(($arrayidx372)>>2)]=$add373;
      var $503=$xr;
      var $504=$wp;
      var $arrayidx374=((($504)-(980))|0);
      var $505=HEAPF32[(($arrayidx374)>>2)];
      var $mul375=($503)*($505);
      var $506=$a_addr;
      var $arrayidx376=(($506+68)|0);
      HEAPF32[(($arrayidx376)>>2)]=$mul375;
      var $507=$a_addr;
      var $arrayidx377=(($507+80)|0);
      var $508=HEAPF32[(($arrayidx377)>>2)];
      var $sub378=(-$508);
      var $509=$a_addr;
      var $arrayidx379=(($509+96)|0);
      var $510=HEAPF32[(($arrayidx379)>>2)];
      var $add380=($sub378)+($510);
      $xr=$add380;
      var $511=$a_addr;
      var $arrayidx381=(($511+96)|0);
      var $512=HEAPF32[(($arrayidx381)>>2)];
      var $513=$a_addr;
      var $arrayidx382=(($513+80)|0);
      var $514=HEAPF32[(($arrayidx382)>>2)];
      var $add383=($514)+($512);
      HEAPF32[(($arrayidx382)>>2)]=$add383;
      var $515=$xr;
      var $516=$wp;
      var $arrayidx384=((($516)-(836))|0);
      var $517=HEAPF32[(($arrayidx384)>>2)];
      var $mul385=($515)*($517);
      var $518=$a_addr;
      var $arrayidx386=(($518+96)|0);
      HEAPF32[(($arrayidx386)>>2)]=$mul385;
      var $519=$a_addr;
      var $arrayidx387=(($519+84)|0);
      var $520=HEAPF32[(($arrayidx387)>>2)];
      var $sub388=(-$520);
      var $521=$a_addr;
      var $arrayidx389=(($521+100)|0);
      var $522=HEAPF32[(($arrayidx389)>>2)];
      var $add390=($sub388)+($522);
      $xr=$add390;
      var $523=$a_addr;
      var $arrayidx391=(($523+100)|0);
      var $524=HEAPF32[(($arrayidx391)>>2)];
      var $525=$a_addr;
      var $arrayidx392=(($525+84)|0);
      var $526=HEAPF32[(($arrayidx392)>>2)];
      var $add393=($526)+($524);
      HEAPF32[(($arrayidx392)>>2)]=$add393;
      var $527=$xr;
      var $528=$wp;
      var $arrayidx394=((($528)-(836))|0);
      var $529=HEAPF32[(($arrayidx394)>>2)];
      var $mul395=($527)*($529);
      var $530=$a_addr;
      var $arrayidx396=(($530+100)|0);
      HEAPF32[(($arrayidx396)>>2)]=$mul395;
      var $531=$a_addr;
      var $arrayidx397=(($531+16)|0);
      var $532=HEAPF32[(($arrayidx397)>>2)];
      var $533=$a_addr;
      var $arrayidx398=(($533+32)|0);
      var $534=HEAPF32[(($arrayidx398)>>2)];
      var $sub399=($532)-($534);
      $xr=$sub399;
      var $535=$a_addr;
      var $arrayidx400=(($535+32)|0);
      var $536=HEAPF32[(($arrayidx400)>>2)];
      var $537=$a_addr;
      var $arrayidx401=(($537+16)|0);
      var $538=HEAPF32[(($arrayidx401)>>2)];
      var $add402=($538)+($536);
      HEAPF32[(($arrayidx401)>>2)]=$add402;
      var $539=$xr;
      var $540=$wp;
      var $arrayidx403=((($540)-(836))|0);
      var $541=HEAPF32[(($arrayidx403)>>2)];
      var $mul404=($539)*($541);
      var $542=$a_addr;
      var $arrayidx405=(($542+32)|0);
      HEAPF32[(($arrayidx405)>>2)]=$mul404;
      var $543=$a_addr;
      var $arrayidx406=(($543+20)|0);
      var $544=HEAPF32[(($arrayidx406)>>2)];
      var $545=$a_addr;
      var $arrayidx407=(($545+36)|0);
      var $546=HEAPF32[(($arrayidx407)>>2)];
      var $sub408=($544)-($546);
      $xr=$sub408;
      var $547=$a_addr;
      var $arrayidx409=(($547+36)|0);
      var $548=HEAPF32[(($arrayidx409)>>2)];
      var $549=$a_addr;
      var $arrayidx410=(($549+20)|0);
      var $550=HEAPF32[(($arrayidx410)>>2)];
      var $add411=($550)+($548);
      HEAPF32[(($arrayidx410)>>2)]=$add411;
      var $551=$xr;
      var $552=$wp;
      var $arrayidx412=((($552)-(836))|0);
      var $553=HEAPF32[(($arrayidx412)>>2)];
      var $mul413=($551)*($553);
      var $554=$a_addr;
      var $arrayidx414=(($554+36)|0);
      HEAPF32[(($arrayidx414)>>2)]=$mul413;
      var $555=$a_addr;
      var $arrayidx415=(($555)|0);
      var $556=HEAPF32[(($arrayidx415)>>2)];
      var $557=$a_addr;
      var $arrayidx416=(($557+48)|0);
      var $558=HEAPF32[(($arrayidx416)>>2)];
      var $sub417=($556)-($558);
      $xr=$sub417;
      var $559=$a_addr;
      var $arrayidx418=(($559+48)|0);
      var $560=HEAPF32[(($arrayidx418)>>2)];
      var $561=$a_addr;
      var $arrayidx419=(($561)|0);
      var $562=HEAPF32[(($arrayidx419)>>2)];
      var $add420=($562)+($560);
      HEAPF32[(($arrayidx419)>>2)]=$add420;
      var $563=$xr;
      var $564=$wp;
      var $arrayidx421=((($564)-(260))|0);
      var $565=HEAPF32[(($arrayidx421)>>2)];
      var $mul422=($563)*($565);
      var $566=$a_addr;
      var $arrayidx423=(($566+48)|0);
      HEAPF32[(($arrayidx423)>>2)]=$mul422;
      var $567=$a_addr;
      var $arrayidx424=(($567+4)|0);
      var $568=HEAPF32[(($arrayidx424)>>2)];
      var $569=$a_addr;
      var $arrayidx425=(($569+52)|0);
      var $570=HEAPF32[(($arrayidx425)>>2)];
      var $sub426=($568)-($570);
      $xr=$sub426;
      var $571=$a_addr;
      var $arrayidx427=(($571+52)|0);
      var $572=HEAPF32[(($arrayidx427)>>2)];
      var $573=$a_addr;
      var $arrayidx428=(($573+4)|0);
      var $574=HEAPF32[(($arrayidx428)>>2)];
      var $add429=($574)+($572);
      HEAPF32[(($arrayidx428)>>2)]=$add429;
      var $575=$xr;
      var $576=$wp;
      var $arrayidx430=((($576)-(260))|0);
      var $577=HEAPF32[(($arrayidx430)>>2)];
      var $mul431=($575)*($577);
      var $578=$a_addr;
      var $arrayidx432=(($578+52)|0);
      HEAPF32[(($arrayidx432)>>2)]=$mul431;
      var $579=$a_addr;
      var $arrayidx433=(($579+64)|0);
      var $580=HEAPF32[(($arrayidx433)>>2)];
      var $581=$a_addr;
      var $arrayidx434=(($581+112)|0);
      var $582=HEAPF32[(($arrayidx434)>>2)];
      var $sub435=($580)-($582);
      $xr=$sub435;
      var $583=$a_addr;
      var $arrayidx436=(($583+112)|0);
      var $584=HEAPF32[(($arrayidx436)>>2)];
      var $585=$a_addr;
      var $arrayidx437=(($585+64)|0);
      var $586=HEAPF32[(($arrayidx437)>>2)];
      var $add438=($586)+($584);
      HEAPF32[(($arrayidx437)>>2)]=$add438;
      var $587=$xr;
      var $588=$wp;
      var $arrayidx439=((($588)-(260))|0);
      var $589=HEAPF32[(($arrayidx439)>>2)];
      var $mul440=($587)*($589);
      var $590=$a_addr;
      var $arrayidx441=(($590+112)|0);
      HEAPF32[(($arrayidx441)>>2)]=$mul440;
      var $591=$a_addr;
      var $arrayidx442=(($591+68)|0);
      var $592=HEAPF32[(($arrayidx442)>>2)];
      var $sub443=(-$592);
      var $593=$a_addr;
      var $arrayidx444=(($593+116)|0);
      var $594=HEAPF32[(($arrayidx444)>>2)];
      var $add445=($sub443)+($594);
      $xr=$add445;
      var $595=$a_addr;
      var $arrayidx446=(($595+116)|0);
      var $596=HEAPF32[(($arrayidx446)>>2)];
      var $597=$a_addr;
      var $arrayidx447=(($597+68)|0);
      var $598=HEAPF32[(($arrayidx447)>>2)];
      var $add448=($598)+($596);
      HEAPF32[(($arrayidx447)>>2)]=$add448;
      var $599=$xr;
      var $600=$wp;
      var $arrayidx449=((($600)-(260))|0);
      var $601=HEAPF32[(($arrayidx449)>>2)];
      var $mul450=($599)*($601);
      var $602=$a_addr;
      var $arrayidx451=(($602+116)|0);
      HEAPF32[(($arrayidx451)>>2)]=$mul450;
      var $603=$a_addr;
      var $arrayidx452=(($603+8)|0);
      var $604=HEAPF32[(($arrayidx452)>>2)];
      var $605=$a_addr;
      var $arrayidx453=(($605+40)|0);
      var $606=HEAPF32[(($arrayidx453)>>2)];
      var $sub454=($604)-($606);
      var $conv455=$sub454;
      var $mul456=($conv455)*(1.4142135623730951);
      var $conv457=$mul456;
      $xr=$conv457;
      var $607=$a_addr;
      var $arrayidx458=(($607+40)|0);
      var $608=HEAPF32[(($arrayidx458)>>2)];
      var $609=$a_addr;
      var $arrayidx459=(($609+8)|0);
      var $610=HEAPF32[(($arrayidx459)>>2)];
      var $add460=($610)+($608);
      HEAPF32[(($arrayidx459)>>2)]=$add460;
      var $611=$xr;
      var $612=$a_addr;
      var $arrayidx461=(($612+40)|0);
      HEAPF32[(($arrayidx461)>>2)]=$611;
      var $613=$a_addr;
      var $arrayidx462=(($613+12)|0);
      var $614=HEAPF32[(($arrayidx462)>>2)];
      var $615=$a_addr;
      var $arrayidx463=(($615+44)|0);
      var $616=HEAPF32[(($arrayidx463)>>2)];
      var $sub464=($614)-($616);
      var $conv465=$sub464;
      var $mul466=($conv465)*(1.4142135623730951);
      var $conv467=$mul466;
      $xr=$conv467;
      var $617=$a_addr;
      var $arrayidx468=(($617+44)|0);
      var $618=HEAPF32[(($arrayidx468)>>2)];
      var $619=$a_addr;
      var $arrayidx469=(($619+12)|0);
      var $620=HEAPF32[(($arrayidx469)>>2)];
      var $add470=($620)+($618);
      HEAPF32[(($arrayidx469)>>2)]=$add470;
      var $621=$xr;
      var $622=$a_addr;
      var $arrayidx471=(($622+44)|0);
      HEAPF32[(($arrayidx471)>>2)]=$621;
      var $623=$a_addr;
      var $arrayidx472=(($623+72)|0);
      var $624=HEAPF32[(($arrayidx472)>>2)];
      var $sub473=(-$624);
      var $625=$a_addr;
      var $arrayidx474=(($625+104)|0);
      var $626=HEAPF32[(($arrayidx474)>>2)];
      var $add475=($sub473)+($626);
      var $conv476=$add475;
      var $mul477=($conv476)*(1.4142135623730951);
      var $conv478=$mul477;
      $xr=$conv478;
      var $627=$a_addr;
      var $arrayidx479=(($627+104)|0);
      var $628=HEAPF32[(($arrayidx479)>>2)];
      var $629=$a_addr;
      var $arrayidx480=(($629+72)|0);
      var $630=HEAPF32[(($arrayidx480)>>2)];
      var $add481=($630)+($628);
      HEAPF32[(($arrayidx480)>>2)]=$add481;
      var $631=$xr;
      var $632=$a_addr;
      var $arrayidx482=(($632+72)|0);
      var $633=HEAPF32[(($arrayidx482)>>2)];
      var $sub483=($631)-($633);
      var $634=$a_addr;
      var $arrayidx484=(($634+104)|0);
      HEAPF32[(($arrayidx484)>>2)]=$sub483;
      var $635=$a_addr;
      var $arrayidx485=(($635+76)|0);
      var $636=HEAPF32[(($arrayidx485)>>2)];
      var $sub486=(-$636);
      var $637=$a_addr;
      var $arrayidx487=(($637+108)|0);
      var $638=HEAPF32[(($arrayidx487)>>2)];
      var $add488=($sub486)+($638);
      var $conv489=$add488;
      var $mul490=($conv489)*(1.4142135623730951);
      var $conv491=$mul490;
      $xr=$conv491;
      var $639=$a_addr;
      var $arrayidx492=(($639+108)|0);
      var $640=HEAPF32[(($arrayidx492)>>2)];
      var $641=$a_addr;
      var $arrayidx493=(($641+76)|0);
      var $642=HEAPF32[(($arrayidx493)>>2)];
      var $add494=($642)+($640);
      HEAPF32[(($arrayidx493)>>2)]=$add494;
      var $643=$xr;
      var $644=$a_addr;
      var $arrayidx495=(($644+76)|0);
      var $645=HEAPF32[(($arrayidx495)>>2)];
      var $sub496=($643)-($645);
      var $646=$a_addr;
      var $arrayidx497=(($646+108)|0);
      HEAPF32[(($arrayidx497)>>2)]=$sub496;
      var $647=$a_addr;
      var $arrayidx498=(($647+8)|0);
      var $648=HEAPF32[(($arrayidx498)>>2)];
      $xr=$648;
      var $649=$a_addr;
      var $arrayidx499=(($649+12)|0);
      var $650=HEAPF32[(($arrayidx499)>>2)];
      var $651=$a_addr;
      var $arrayidx500=(($651+76)|0);
      var $652=HEAPF32[(($arrayidx500)>>2)];
      var $sub501=($652)-($650);
      HEAPF32[(($arrayidx500)>>2)]=$sub501;
      var $653=$xr;
      var $654=$a_addr;
      var $arrayidx502=(($654+12)|0);
      var $655=HEAPF32[(($arrayidx502)>>2)];
      var $sub503=($655)-($653);
      HEAPF32[(($arrayidx502)>>2)]=$sub503;
      var $656=$a_addr;
      var $arrayidx504=(($656+124)|0);
      var $657=HEAPF32[(($arrayidx504)>>2)];
      var $658=$xr;
      var $sub505=($657)-($658);
      var $659=$a_addr;
      var $arrayidx506=(($659+8)|0);
      HEAPF32[(($arrayidx506)>>2)]=$sub505;
      var $660=$xr;
      var $661=$a_addr;
      var $arrayidx507=(($661+124)|0);
      var $662=HEAPF32[(($arrayidx507)>>2)];
      var $add508=($662)+($660);
      HEAPF32[(($arrayidx507)>>2)]=$add508;
      var $663=$a_addr;
      var $arrayidx509=(($663+12)|0);
      var $664=HEAPF32[(($arrayidx509)>>2)];
      $xr=$664;
      var $665=$a_addr;
      var $arrayidx510=(($665+76)|0);
      var $666=HEAPF32[(($arrayidx510)>>2)];
      var $667=$a_addr;
      var $arrayidx511=(($667+44)|0);
      var $668=HEAPF32[(($arrayidx511)>>2)];
      var $sub512=($668)-($666);
      HEAPF32[(($arrayidx511)>>2)]=$sub512;
      var $669=$xr;
      var $670=$a_addr;
      var $arrayidx513=(($670+72)|0);
      var $671=HEAPF32[(($arrayidx513)>>2)];
      var $sub514=($671)-($669);
      HEAPF32[(($arrayidx513)>>2)]=$sub514;
      var $672=$a_addr;
      var $arrayidx515=(($672+120)|0);
      var $673=HEAPF32[(($arrayidx515)>>2)];
      var $674=$xr;
      var $sub516=($673)-($674);
      var $675=$a_addr;
      var $arrayidx517=(($675+12)|0);
      HEAPF32[(($arrayidx517)>>2)]=$sub516;
      var $676=$xr;
      var $677=$a_addr;
      var $arrayidx518=(($677+120)|0);
      var $678=HEAPF32[(($arrayidx518)>>2)];
      var $add519=($678)+($676);
      HEAPF32[(($arrayidx518)>>2)]=$add519;
      var $679=$a_addr;
      var $arrayidx520=(($679+72)|0);
      var $680=HEAPF32[(($arrayidx520)>>2)];
      $xr=$680;
      var $681=$a_addr;
      var $arrayidx521=(($681+44)|0);
      var $682=HEAPF32[(($arrayidx521)>>2)];
      var $683=$a_addr;
      var $arrayidx522=(($683+108)|0);
      var $684=HEAPF32[(($arrayidx522)>>2)];
      var $sub523=($684)-($682);
      HEAPF32[(($arrayidx522)>>2)]=$sub523;
      var $685=$xr;
      var $686=$a_addr;
      var $arrayidx524=(($686+76)|0);
      var $687=HEAPF32[(($arrayidx524)>>2)];
      var $sub525=($687)-($685);
      HEAPF32[(($arrayidx524)>>2)]=$sub525;
      var $688=$a_addr;
      var $arrayidx526=(($688+60)|0);
      var $689=HEAPF32[(($arrayidx526)>>2)];
      var $690=$xr;
      var $sub527=($689)-($690);
      var $691=$a_addr;
      var $arrayidx528=(($691+72)|0);
      HEAPF32[(($arrayidx528)>>2)]=$sub527;
      var $692=$xr;
      var $693=$a_addr;
      var $arrayidx529=(($693+60)|0);
      var $694=HEAPF32[(($arrayidx529)>>2)];
      var $add530=($694)+($692);
      HEAPF32[(($arrayidx529)>>2)]=$add530;
      var $695=$a_addr;
      var $arrayidx531=(($695+76)|0);
      var $696=HEAPF32[(($arrayidx531)>>2)];
      $xr=$696;
      var $697=$xr;
      var $698=$a_addr;
      var $arrayidx532=(($698+40)|0);
      var $699=HEAPF32[(($arrayidx532)>>2)];
      var $sub533=($699)-($697);
      HEAPF32[(($arrayidx532)>>2)]=$sub533;
      var $700=$a_addr;
      var $arrayidx534=(($700+56)|0);
      var $701=HEAPF32[(($arrayidx534)>>2)];
      var $702=$xr;
      var $sub535=($701)-($702);
      var $703=$a_addr;
      var $arrayidx536=(($703+76)|0);
      HEAPF32[(($arrayidx536)>>2)]=$sub535;
      var $704=$xr;
      var $705=$a_addr;
      var $arrayidx537=(($705+56)|0);
      var $706=HEAPF32[(($arrayidx537)>>2)];
      var $add538=($706)+($704);
      HEAPF32[(($arrayidx537)>>2)]=$add538;
      var $707=$a_addr;
      var $arrayidx539=(($707+40)|0);
      var $708=HEAPF32[(($arrayidx539)>>2)];
      $xr=$708;
      var $709=$xr;
      var $710=$a_addr;
      var $arrayidx540=(($710+44)|0);
      var $711=HEAPF32[(($arrayidx540)>>2)];
      var $sub541=($711)-($709);
      HEAPF32[(($arrayidx540)>>2)]=$sub541;
      var $712=$a_addr;
      var $arrayidx542=(($712+92)|0);
      var $713=HEAPF32[(($arrayidx542)>>2)];
      var $714=$xr;
      var $sub543=($713)-($714);
      var $715=$a_addr;
      var $arrayidx544=(($715+40)|0);
      HEAPF32[(($arrayidx544)>>2)]=$sub543;
      var $716=$xr;
      var $717=$a_addr;
      var $arrayidx545=(($717+92)|0);
      var $718=HEAPF32[(($arrayidx545)>>2)];
      var $add546=($718)+($716);
      HEAPF32[(($arrayidx545)>>2)]=$add546;
      var $719=$a_addr;
      var $arrayidx547=(($719+44)|0);
      var $720=HEAPF32[(($arrayidx547)>>2)];
      $xr=$720;
      var $721=$xr;
      var $722=$a_addr;
      var $arrayidx548=(($722+104)|0);
      var $723=HEAPF32[(($arrayidx548)>>2)];
      var $sub549=($723)-($721);
      HEAPF32[(($arrayidx548)>>2)]=$sub549;
      var $724=$a_addr;
      var $arrayidx550=(($724+88)|0);
      var $725=HEAPF32[(($arrayidx550)>>2)];
      var $726=$xr;
      var $sub551=($725)-($726);
      var $727=$a_addr;
      var $arrayidx552=(($727+44)|0);
      HEAPF32[(($arrayidx552)>>2)]=$sub551;
      var $728=$xr;
      var $729=$a_addr;
      var $arrayidx553=(($729+88)|0);
      var $730=HEAPF32[(($arrayidx553)>>2)];
      var $add554=($730)+($728);
      HEAPF32[(($arrayidx553)>>2)]=$add554;
      var $731=$a_addr;
      var $arrayidx555=(($731+104)|0);
      var $732=HEAPF32[(($arrayidx555)>>2)];
      $xr=$732;
      var $733=$xr;
      var $734=$a_addr;
      var $arrayidx556=(($734+108)|0);
      var $735=HEAPF32[(($arrayidx556)>>2)];
      var $sub557=($735)-($733);
      HEAPF32[(($arrayidx556)>>2)]=$sub557;
      var $736=$a_addr;
      var $arrayidx558=(($736+28)|0);
      var $737=HEAPF32[(($arrayidx558)>>2)];
      var $738=$xr;
      var $sub559=($737)-($738);
      var $739=$a_addr;
      var $arrayidx560=(($739+104)|0);
      HEAPF32[(($arrayidx560)>>2)]=$sub559;
      var $740=$xr;
      var $741=$a_addr;
      var $arrayidx561=(($741+28)|0);
      var $742=HEAPF32[(($arrayidx561)>>2)];
      var $add562=($742)+($740);
      HEAPF32[(($arrayidx561)>>2)]=$add562;
      var $743=$a_addr;
      var $arrayidx563=(($743+108)|0);
      var $744=HEAPF32[(($arrayidx563)>>2)];
      $xr=$744;
      var $745=$a_addr;
      var $arrayidx564=(($745+24)|0);
      var $746=HEAPF32[(($arrayidx564)>>2)];
      var $747=$xr;
      var $sub565=($746)-($747);
      var $748=$a_addr;
      var $arrayidx566=(($748+108)|0);
      HEAPF32[(($arrayidx566)>>2)]=$sub565;
      var $749=$xr;
      var $750=$a_addr;
      var $arrayidx567=(($750+24)|0);
      var $751=HEAPF32[(($arrayidx567)>>2)];
      var $add568=($751)+($749);
      HEAPF32[(($arrayidx567)>>2)]=$add568;
      var $752=$a_addr;
      var $arrayidx569=(($752)|0);
      var $753=HEAPF32[(($arrayidx569)>>2)];
      var $754=$a_addr;
      var $arrayidx570=(($754+16)|0);
      var $755=HEAPF32[(($arrayidx570)>>2)];
      var $sub571=($753)-($755);
      var $conv572=$sub571;
      var $mul573=($conv572)*(1.4142135623730951);
      var $conv574=$mul573;
      $xr=$conv574;
      var $756=$a_addr;
      var $arrayidx575=(($756+16)|0);
      var $757=HEAPF32[(($arrayidx575)>>2)];
      var $758=$a_addr;
      var $arrayidx576=(($758)|0);
      var $759=HEAPF32[(($arrayidx576)>>2)];
      var $add577=($759)+($757);
      HEAPF32[(($arrayidx576)>>2)]=$add577;
      var $760=$xr;
      var $761=$a_addr;
      var $arrayidx578=(($761+16)|0);
      HEAPF32[(($arrayidx578)>>2)]=$760;
      var $762=$a_addr;
      var $arrayidx579=(($762+4)|0);
      var $763=HEAPF32[(($arrayidx579)>>2)];
      var $764=$a_addr;
      var $arrayidx580=(($764+20)|0);
      var $765=HEAPF32[(($arrayidx580)>>2)];
      var $sub581=($763)-($765);
      var $conv582=$sub581;
      var $mul583=($conv582)*(1.4142135623730951);
      var $conv584=$mul583;
      $xr=$conv584;
      var $766=$a_addr;
      var $arrayidx585=(($766+20)|0);
      var $767=HEAPF32[(($arrayidx585)>>2)];
      var $768=$a_addr;
      var $arrayidx586=(($768+4)|0);
      var $769=HEAPF32[(($arrayidx586)>>2)];
      var $add587=($769)+($767);
      HEAPF32[(($arrayidx586)>>2)]=$add587;
      var $770=$xr;
      var $771=$a_addr;
      var $arrayidx588=(($771+20)|0);
      HEAPF32[(($arrayidx588)>>2)]=$770;
      var $772=$a_addr;
      var $arrayidx589=(($772+64)|0);
      var $773=HEAPF32[(($arrayidx589)>>2)];
      var $774=$a_addr;
      var $arrayidx590=(($774+80)|0);
      var $775=HEAPF32[(($arrayidx590)>>2)];
      var $sub591=($773)-($775);
      var $conv592=$sub591;
      var $mul593=($conv592)*(1.4142135623730951);
      var $conv594=$mul593;
      $xr=$conv594;
      var $776=$a_addr;
      var $arrayidx595=(($776+80)|0);
      var $777=HEAPF32[(($arrayidx595)>>2)];
      var $778=$a_addr;
      var $arrayidx596=(($778+64)|0);
      var $779=HEAPF32[(($arrayidx596)>>2)];
      var $add597=($779)+($777);
      HEAPF32[(($arrayidx596)>>2)]=$add597;
      var $780=$xr;
      var $781=$a_addr;
      var $arrayidx598=(($781+80)|0);
      HEAPF32[(($arrayidx598)>>2)]=$780;
      var $782=$a_addr;
      var $arrayidx599=(($782+68)|0);
      var $783=HEAPF32[(($arrayidx599)>>2)];
      var $784=$a_addr;
      var $arrayidx600=(($784+84)|0);
      var $785=HEAPF32[(($arrayidx600)>>2)];
      var $sub601=($783)-($785);
      var $conv602=$sub601;
      var $mul603=($conv602)*(1.4142135623730951);
      var $conv604=$mul603;
      $xr=$conv604;
      var $786=$a_addr;
      var $arrayidx605=(($786+84)|0);
      var $787=HEAPF32[(($arrayidx605)>>2)];
      var $788=$a_addr;
      var $arrayidx606=(($788+68)|0);
      var $789=HEAPF32[(($arrayidx606)>>2)];
      var $add607=($789)+($787);
      HEAPF32[(($arrayidx606)>>2)]=$add607;
      var $790=$xr;
      var $791=$a_addr;
      var $arrayidx608=(($791+84)|0);
      HEAPF32[(($arrayidx608)>>2)]=$790;
      var $792=$a_addr;
      var $arrayidx609=(($792+32)|0);
      var $793=HEAPF32[(($arrayidx609)>>2)];
      var $794=$a_addr;
      var $arrayidx610=(($794+48)|0);
      var $795=HEAPF32[(($arrayidx610)>>2)];
      var $sub611=($793)-($795);
      var $conv612=$sub611;
      var $mul613=($conv612)*(-1.4142135623730951);
      var $conv614=$mul613;
      $xr=$conv614;
      var $796=$a_addr;
      var $arrayidx615=(($796+48)|0);
      var $797=HEAPF32[(($arrayidx615)>>2)];
      var $798=$a_addr;
      var $arrayidx616=(($798+32)|0);
      var $799=HEAPF32[(($arrayidx616)>>2)];
      var $add617=($799)+($797);
      HEAPF32[(($arrayidx616)>>2)]=$add617;
      var $800=$xr;
      var $801=$a_addr;
      var $arrayidx618=(($801+32)|0);
      var $802=HEAPF32[(($arrayidx618)>>2)];
      var $sub619=($800)-($802);
      var $803=$a_addr;
      var $arrayidx620=(($803+48)|0);
      HEAPF32[(($arrayidx620)>>2)]=$sub619;
      var $804=$a_addr;
      var $arrayidx621=(($804+36)|0);
      var $805=HEAPF32[(($arrayidx621)>>2)];
      var $806=$a_addr;
      var $arrayidx622=(($806+52)|0);
      var $807=HEAPF32[(($arrayidx622)>>2)];
      var $sub623=($805)-($807);
      var $conv624=$sub623;
      var $mul625=($conv624)*(-1.4142135623730951);
      var $conv626=$mul625;
      $xr=$conv626;
      var $808=$a_addr;
      var $arrayidx627=(($808+52)|0);
      var $809=HEAPF32[(($arrayidx627)>>2)];
      var $810=$a_addr;
      var $arrayidx628=(($810+36)|0);
      var $811=HEAPF32[(($arrayidx628)>>2)];
      var $add629=($811)+($809);
      HEAPF32[(($arrayidx628)>>2)]=$add629;
      var $812=$xr;
      var $813=$a_addr;
      var $arrayidx630=(($813+36)|0);
      var $814=HEAPF32[(($arrayidx630)>>2)];
      var $sub631=($812)-($814);
      var $815=$a_addr;
      var $arrayidx632=(($815+52)|0);
      HEAPF32[(($arrayidx632)>>2)]=$sub631;
      var $816=$a_addr;
      var $arrayidx633=(($816+100)|0);
      var $817=HEAPF32[(($arrayidx633)>>2)];
      var $818=$a_addr;
      var $arrayidx634=(($818+116)|0);
      var $819=HEAPF32[(($arrayidx634)>>2)];
      var $sub635=($817)-($819);
      var $conv636=$sub635;
      var $mul637=($conv636)*(-1.4142135623730951);
      var $conv638=$mul637;
      $xr=$conv638;
      var $820=$a_addr;
      var $arrayidx639=(($820+116)|0);
      var $821=HEAPF32[(($arrayidx639)>>2)];
      var $822=$a_addr;
      var $arrayidx640=(($822+100)|0);
      var $823=HEAPF32[(($arrayidx640)>>2)];
      var $add641=($823)+($821);
      HEAPF32[(($arrayidx640)>>2)]=$add641;
      var $824=$xr;
      var $825=$a_addr;
      var $arrayidx642=(($825+100)|0);
      var $826=HEAPF32[(($arrayidx642)>>2)];
      var $sub643=($824)-($826);
      var $827=$a_addr;
      var $arrayidx644=(($827+116)|0);
      HEAPF32[(($arrayidx644)>>2)]=$sub643;
      var $828=$a_addr;
      var $arrayidx645=(($828+96)|0);
      var $829=HEAPF32[(($arrayidx645)>>2)];
      var $830=$a_addr;
      var $arrayidx646=(($830+112)|0);
      var $831=HEAPF32[(($arrayidx646)>>2)];
      var $add647=($829)+($831);
      var $conv648=$add647;
      var $mul649=($conv648)*(-1.4142135623730951);
      var $conv650=$mul649;
      $xr=$conv650;
      var $832=$a_addr;
      var $arrayidx651=(($832+112)|0);
      var $833=HEAPF32[(($arrayidx651)>>2)];
      var $834=$a_addr;
      var $arrayidx652=(($834+96)|0);
      var $835=HEAPF32[(($arrayidx652)>>2)];
      var $sub653=($835)-($833);
      HEAPF32[(($arrayidx652)>>2)]=$sub653;
      var $836=$xr;
      var $837=$a_addr;
      var $arrayidx654=(($837+96)|0);
      var $838=HEAPF32[(($arrayidx654)>>2)];
      var $sub655=($836)-($838);
      var $839=$a_addr;
      var $arrayidx656=(($839+112)|0);
      HEAPF32[(($arrayidx656)>>2)]=$sub655;
      var $840=$a_addr;
      var $arrayidx657=(($840+96)|0);
      var $841=HEAPF32[(($arrayidx657)>>2)];
      var $842=$a_addr;
      var $arrayidx658=(($842+64)|0);
      var $843=HEAPF32[(($arrayidx658)>>2)];
      var $sub659=($841)-($843);
      $xr=$sub659;
      var $844=$xr;
      var $845=$a_addr;
      var $arrayidx660=(($845+96)|0);
      HEAPF32[(($arrayidx660)>>2)]=$844;
      var $846=$a_addr;
      var $arrayidx661=(($846+80)|0);
      var $847=HEAPF32[(($arrayidx661)>>2)];
      var $848=$xr;
      var $sub662=($847)-($848);
      $xr=$sub662;
      var $849=$xr;
      var $850=$a_addr;
      var $arrayidx663=(($850+80)|0);
      HEAPF32[(($arrayidx663)>>2)]=$849;
      var $851=$a_addr;
      var $arrayidx664=(($851+112)|0);
      var $852=HEAPF32[(($arrayidx664)>>2)];
      var $853=$xr;
      var $sub665=($852)-($853);
      $xr=$sub665;
      var $854=$xr;
      var $855=$a_addr;
      var $arrayidx666=(($855+112)|0);
      HEAPF32[(($arrayidx666)>>2)]=$854;
      var $856=$a_addr;
      var $arrayidx667=(($856+100)|0);
      var $857=HEAPF32[(($arrayidx667)>>2)];
      var $858=$a_addr;
      var $arrayidx668=(($858+68)|0);
      var $859=HEAPF32[(($arrayidx668)>>2)];
      var $sub669=($857)-($859);
      $xr=$sub669;
      var $860=$xr;
      var $861=$a_addr;
      var $arrayidx670=(($861+100)|0);
      HEAPF32[(($arrayidx670)>>2)]=$860;
      var $862=$a_addr;
      var $arrayidx671=(($862+84)|0);
      var $863=HEAPF32[(($arrayidx671)>>2)];
      var $864=$xr;
      var $sub672=($863)-($864);
      $xr=$sub672;
      var $865=$xr;
      var $866=$a_addr;
      var $arrayidx673=(($866+84)|0);
      HEAPF32[(($arrayidx673)>>2)]=$865;
      var $867=$a_addr;
      var $arrayidx674=(($867+116)|0);
      var $868=HEAPF32[(($arrayidx674)>>2)];
      var $869=$xr;
      var $sub675=($868)-($869);
      $xr=$sub675;
      var $870=$xr;
      var $871=$a_addr;
      var $arrayidx676=(($871+116)|0);
      HEAPF32[(($arrayidx676)>>2)]=$870;
      var $872=$a_addr;
      var $arrayidx677=(($872+68)|0);
      var $873=HEAPF32[(($arrayidx677)>>2)];
      var $874=$a_addr;
      var $arrayidx678=(($874+4)|0);
      var $875=HEAPF32[(($arrayidx678)>>2)];
      var $sub679=($873)-($875);
      $xr=$sub679;
      var $876=$xr;
      var $877=$a_addr;
      var $arrayidx680=(($877+68)|0);
      HEAPF32[(($arrayidx680)>>2)]=$876;
      var $878=$a_addr;
      var $arrayidx681=(($878+36)|0);
      var $879=HEAPF32[(($arrayidx681)>>2)];
      var $880=$xr;
      var $sub682=($879)-($880);
      $xr=$sub682;
      var $881=$xr;
      var $882=$a_addr;
      var $arrayidx683=(($882+36)|0);
      HEAPF32[(($arrayidx683)>>2)]=$881;
      var $883=$a_addr;
      var $arrayidx684=(($883+100)|0);
      var $884=HEAPF32[(($arrayidx684)>>2)];
      var $885=$xr;
      var $sub685=($884)-($885);
      $xr=$sub685;
      var $886=$xr;
      var $887=$a_addr;
      var $arrayidx686=(($887+100)|0);
      HEAPF32[(($arrayidx686)>>2)]=$886;
      var $888=$a_addr;
      var $arrayidx687=(($888+20)|0);
      var $889=HEAPF32[(($arrayidx687)>>2)];
      var $890=$xr;
      var $sub688=($889)-($890);
      $xr=$sub688;
      var $891=$xr;
      var $892=$a_addr;
      var $arrayidx689=(($892+20)|0);
      HEAPF32[(($arrayidx689)>>2)]=$891;
      var $893=$a_addr;
      var $arrayidx690=(($893+84)|0);
      var $894=HEAPF32[(($arrayidx690)>>2)];
      var $895=$xr;
      var $sub691=($894)-($895);
      $xr=$sub691;
      var $896=$xr;
      var $897=$a_addr;
      var $arrayidx692=(($897+84)|0);
      HEAPF32[(($arrayidx692)>>2)]=$896;
      var $898=$a_addr;
      var $arrayidx693=(($898+52)|0);
      var $899=HEAPF32[(($arrayidx693)>>2)];
      var $900=$xr;
      var $sub694=($899)-($900);
      $xr=$sub694;
      var $901=$xr;
      var $902=$a_addr;
      var $arrayidx695=(($902+52)|0);
      HEAPF32[(($arrayidx695)>>2)]=$901;
      var $903=$a_addr;
      var $arrayidx696=(($903+116)|0);
      var $904=HEAPF32[(($arrayidx696)>>2)];
      var $905=$xr;
      var $sub697=($904)-($905);
      $xr=$sub697;
      var $906=$xr;
      var $907=$a_addr;
      var $arrayidx698=(($907+116)|0);
      HEAPF32[(($arrayidx698)>>2)]=$906;
      var $908=$a_addr;
      var $arrayidx699=(($908+4)|0);
      var $909=HEAPF32[(($arrayidx699)>>2)];
      var $910=$a_addr;
      var $arrayidx700=(($910)|0);
      var $911=HEAPF32[(($arrayidx700)>>2)];
      var $sub701=($909)-($911);
      $xr=$sub701;
      var $912=$xr;
      var $913=$a_addr;
      var $arrayidx702=(($913+4)|0);
      HEAPF32[(($arrayidx702)>>2)]=$912;
      var $914=$a_addr;
      var $arrayidx703=(($914+64)|0);
      var $915=HEAPF32[(($arrayidx703)>>2)];
      var $916=$xr;
      var $sub704=($915)-($916);
      $xr=$sub704;
      var $917=$xr;
      var $918=$a_addr;
      var $arrayidx705=(($918+64)|0);
      HEAPF32[(($arrayidx705)>>2)]=$917;
      var $919=$a_addr;
      var $arrayidx706=(($919+68)|0);
      var $920=HEAPF32[(($arrayidx706)>>2)];
      var $921=$xr;
      var $sub707=($920)-($921);
      $xr=$sub707;
      var $922=$xr;
      var $923=$a_addr;
      var $arrayidx708=(($923+68)|0);
      HEAPF32[(($arrayidx708)>>2)]=$922;
      var $924=$a_addr;
      var $arrayidx709=(($924+32)|0);
      var $925=HEAPF32[(($arrayidx709)>>2)];
      var $926=$xr;
      var $sub710=($925)-($926);
      $xr=$sub710;
      var $927=$xr;
      var $928=$a_addr;
      var $arrayidx711=(($928+32)|0);
      HEAPF32[(($arrayidx711)>>2)]=$927;
      var $929=$a_addr;
      var $arrayidx712=(($929+36)|0);
      var $930=HEAPF32[(($arrayidx712)>>2)];
      var $931=$xr;
      var $sub713=($930)-($931);
      $xr=$sub713;
      var $932=$xr;
      var $933=$a_addr;
      var $arrayidx714=(($933+36)|0);
      HEAPF32[(($arrayidx714)>>2)]=$932;
      var $934=$a_addr;
      var $arrayidx715=(($934+96)|0);
      var $935=HEAPF32[(($arrayidx715)>>2)];
      var $936=$xr;
      var $sub716=($935)-($936);
      $xr=$sub716;
      var $937=$xr;
      var $938=$a_addr;
      var $arrayidx717=(($938+96)|0);
      HEAPF32[(($arrayidx717)>>2)]=$937;
      var $939=$a_addr;
      var $arrayidx718=(($939+100)|0);
      var $940=HEAPF32[(($arrayidx718)>>2)];
      var $941=$xr;
      var $sub719=($940)-($941);
      $xr=$sub719;
      var $942=$xr;
      var $943=$a_addr;
      var $arrayidx720=(($943+100)|0);
      HEAPF32[(($arrayidx720)>>2)]=$942;
      var $944=$a_addr;
      var $arrayidx721=(($944+16)|0);
      var $945=HEAPF32[(($arrayidx721)>>2)];
      var $946=$xr;
      var $sub722=($945)-($946);
      $xr=$sub722;
      var $947=$xr;
      var $948=$a_addr;
      var $arrayidx723=(($948+16)|0);
      HEAPF32[(($arrayidx723)>>2)]=$947;
      var $949=$a_addr;
      var $arrayidx724=(($949+20)|0);
      var $950=HEAPF32[(($arrayidx724)>>2)];
      var $951=$xr;
      var $sub725=($950)-($951);
      $xr=$sub725;
      var $952=$xr;
      var $953=$a_addr;
      var $arrayidx726=(($953+20)|0);
      HEAPF32[(($arrayidx726)>>2)]=$952;
      var $954=$a_addr;
      var $arrayidx727=(($954+80)|0);
      var $955=HEAPF32[(($arrayidx727)>>2)];
      var $956=$xr;
      var $sub728=($955)-($956);
      $xr=$sub728;
      var $957=$xr;
      var $958=$a_addr;
      var $arrayidx729=(($958+80)|0);
      HEAPF32[(($arrayidx729)>>2)]=$957;
      var $959=$a_addr;
      var $arrayidx730=(($959+84)|0);
      var $960=HEAPF32[(($arrayidx730)>>2)];
      var $961=$xr;
      var $sub731=($960)-($961);
      $xr=$sub731;
      var $962=$xr;
      var $963=$a_addr;
      var $arrayidx732=(($963+84)|0);
      HEAPF32[(($arrayidx732)>>2)]=$962;
      var $964=$a_addr;
      var $arrayidx733=(($964+48)|0);
      var $965=HEAPF32[(($arrayidx733)>>2)];
      var $966=$xr;
      var $sub734=($965)-($966);
      $xr=$sub734;
      var $967=$xr;
      var $968=$a_addr;
      var $arrayidx735=(($968+48)|0);
      HEAPF32[(($arrayidx735)>>2)]=$967;
      var $969=$a_addr;
      var $arrayidx736=(($969+52)|0);
      var $970=HEAPF32[(($arrayidx736)>>2)];
      var $971=$xr;
      var $sub737=($970)-($971);
      $xr=$sub737;
      var $972=$xr;
      var $973=$a_addr;
      var $arrayidx738=(($973+52)|0);
      HEAPF32[(($arrayidx738)>>2)]=$972;
      var $974=$a_addr;
      var $arrayidx739=(($974+112)|0);
      var $975=HEAPF32[(($arrayidx739)>>2)];
      var $976=$xr;
      var $sub740=($975)-($976);
      $xr=$sub740;
      var $977=$xr;
      var $978=$a_addr;
      var $arrayidx741=(($978+112)|0);
      HEAPF32[(($arrayidx741)>>2)]=$977;
      var $979=$a_addr;
      var $arrayidx742=(($979+116)|0);
      var $980=HEAPF32[(($arrayidx742)>>2)];
      var $981=$xr;
      var $sub743=($980)-($981);
      $xr=$sub743;
      var $982=$xr;
      var $983=$a_addr;
      var $arrayidx744=(($983+116)|0);
      HEAPF32[(($arrayidx744)>>2)]=$982;
      var $984=$a_addr;
      var $arrayidx745=(($984)|0);
      var $985=HEAPF32[(($arrayidx745)>>2)];
      $xr=$985;
      var $986=$a_addr;
      var $arrayidx746=(($986+124)|0);
      var $987=HEAPF32[(($arrayidx746)>>2)];
      var $988=$a_addr;
      var $arrayidx747=(($988)|0);
      var $989=HEAPF32[(($arrayidx747)>>2)];
      var $add748=($989)+($987);
      HEAPF32[(($arrayidx747)>>2)]=$add748;
      var $990=$xr;
      var $991=$a_addr;
      var $arrayidx749=(($991+124)|0);
      var $992=HEAPF32[(($arrayidx749)>>2)];
      var $sub750=($992)-($990);
      HEAPF32[(($arrayidx749)>>2)]=$sub750;
      var $993=$a_addr;
      var $arrayidx751=(($993+4)|0);
      var $994=HEAPF32[(($arrayidx751)>>2)];
      $xr=$994;
      var $995=$a_addr;
      var $arrayidx752=(($995+120)|0);
      var $996=HEAPF32[(($arrayidx752)>>2)];
      var $997=$a_addr;
      var $arrayidx753=(($997+4)|0);
      var $998=HEAPF32[(($arrayidx753)>>2)];
      var $add754=($998)+($996);
      HEAPF32[(($arrayidx753)>>2)]=$add754;
      var $999=$xr;
      var $1000=$a_addr;
      var $arrayidx755=(($1000+120)|0);
      var $1001=HEAPF32[(($arrayidx755)>>2)];
      var $sub756=($1001)-($999);
      HEAPF32[(($arrayidx755)>>2)]=$sub756;
      var $1002=$a_addr;
      var $arrayidx757=(($1002+64)|0);
      var $1003=HEAPF32[(($arrayidx757)>>2)];
      $xr=$1003;
      var $1004=$a_addr;
      var $arrayidx758=(($1004+60)|0);
      var $1005=HEAPF32[(($arrayidx758)>>2)];
      var $1006=$a_addr;
      var $arrayidx759=(($1006+64)|0);
      var $1007=HEAPF32[(($arrayidx759)>>2)];
      var $add760=($1007)+($1005);
      HEAPF32[(($arrayidx759)>>2)]=$add760;
      var $1008=$xr;
      var $1009=$a_addr;
      var $arrayidx761=(($1009+60)|0);
      var $1010=HEAPF32[(($arrayidx761)>>2)];
      var $sub762=($1010)-($1008);
      HEAPF32[(($arrayidx761)>>2)]=$sub762;
      var $1011=$a_addr;
      var $arrayidx763=(($1011+68)|0);
      var $1012=HEAPF32[(($arrayidx763)>>2)];
      $xr=$1012;
      var $1013=$a_addr;
      var $arrayidx764=(($1013+56)|0);
      var $1014=HEAPF32[(($arrayidx764)>>2)];
      var $1015=$a_addr;
      var $arrayidx765=(($1015+68)|0);
      var $1016=HEAPF32[(($arrayidx765)>>2)];
      var $add766=($1016)+($1014);
      HEAPF32[(($arrayidx765)>>2)]=$add766;
      var $1017=$xr;
      var $1018=$a_addr;
      var $arrayidx767=(($1018+56)|0);
      var $1019=HEAPF32[(($arrayidx767)>>2)];
      var $sub768=($1019)-($1017);
      HEAPF32[(($arrayidx767)>>2)]=$sub768;
      var $1020=$a_addr;
      var $arrayidx769=(($1020+32)|0);
      var $1021=HEAPF32[(($arrayidx769)>>2)];
      $xr=$1021;
      var $1022=$a_addr;
      var $arrayidx770=(($1022+92)|0);
      var $1023=HEAPF32[(($arrayidx770)>>2)];
      var $1024=$a_addr;
      var $arrayidx771=(($1024+32)|0);
      var $1025=HEAPF32[(($arrayidx771)>>2)];
      var $add772=($1025)+($1023);
      HEAPF32[(($arrayidx771)>>2)]=$add772;
      var $1026=$xr;
      var $1027=$a_addr;
      var $arrayidx773=(($1027+92)|0);
      var $1028=HEAPF32[(($arrayidx773)>>2)];
      var $sub774=($1028)-($1026);
      HEAPF32[(($arrayidx773)>>2)]=$sub774;
      var $1029=$a_addr;
      var $arrayidx775=(($1029+36)|0);
      var $1030=HEAPF32[(($arrayidx775)>>2)];
      $xr=$1030;
      var $1031=$a_addr;
      var $arrayidx776=(($1031+88)|0);
      var $1032=HEAPF32[(($arrayidx776)>>2)];
      var $1033=$a_addr;
      var $arrayidx777=(($1033+36)|0);
      var $1034=HEAPF32[(($arrayidx777)>>2)];
      var $add778=($1034)+($1032);
      HEAPF32[(($arrayidx777)>>2)]=$add778;
      var $1035=$xr;
      var $1036=$a_addr;
      var $arrayidx779=(($1036+88)|0);
      var $1037=HEAPF32[(($arrayidx779)>>2)];
      var $sub780=($1037)-($1035);
      HEAPF32[(($arrayidx779)>>2)]=$sub780;
      var $1038=$a_addr;
      var $arrayidx781=(($1038+96)|0);
      var $1039=HEAPF32[(($arrayidx781)>>2)];
      $xr=$1039;
      var $1040=$a_addr;
      var $arrayidx782=(($1040+28)|0);
      var $1041=HEAPF32[(($arrayidx782)>>2)];
      var $1042=$a_addr;
      var $arrayidx783=(($1042+96)|0);
      var $1043=HEAPF32[(($arrayidx783)>>2)];
      var $add784=($1043)+($1041);
      HEAPF32[(($arrayidx783)>>2)]=$add784;
      var $1044=$xr;
      var $1045=$a_addr;
      var $arrayidx785=(($1045+28)|0);
      var $1046=HEAPF32[(($arrayidx785)>>2)];
      var $sub786=($1046)-($1044);
      HEAPF32[(($arrayidx785)>>2)]=$sub786;
      var $1047=$a_addr;
      var $arrayidx787=(($1047+100)|0);
      var $1048=HEAPF32[(($arrayidx787)>>2)];
      $xr=$1048;
      var $1049=$a_addr;
      var $arrayidx788=(($1049+24)|0);
      var $1050=HEAPF32[(($arrayidx788)>>2)];
      var $1051=$a_addr;
      var $arrayidx789=(($1051+100)|0);
      var $1052=HEAPF32[(($arrayidx789)>>2)];
      var $add790=($1052)+($1050);
      HEAPF32[(($arrayidx789)>>2)]=$add790;
      var $1053=$xr;
      var $1054=$a_addr;
      var $arrayidx791=(($1054+24)|0);
      var $1055=HEAPF32[(($arrayidx791)>>2)];
      var $sub792=($1055)-($1053);
      HEAPF32[(($arrayidx791)>>2)]=$sub792;
      var $1056=$a_addr;
      var $arrayidx793=(($1056+16)|0);
      var $1057=HEAPF32[(($arrayidx793)>>2)];
      $xr=$1057;
      var $1058=$a_addr;
      var $arrayidx794=(($1058+108)|0);
      var $1059=HEAPF32[(($arrayidx794)>>2)];
      var $1060=$a_addr;
      var $arrayidx795=(($1060+16)|0);
      var $1061=HEAPF32[(($arrayidx795)>>2)];
      var $add796=($1061)+($1059);
      HEAPF32[(($arrayidx795)>>2)]=$add796;
      var $1062=$xr;
      var $1063=$a_addr;
      var $arrayidx797=(($1063+108)|0);
      var $1064=HEAPF32[(($arrayidx797)>>2)];
      var $sub798=($1064)-($1062);
      HEAPF32[(($arrayidx797)>>2)]=$sub798;
      var $1065=$a_addr;
      var $arrayidx799=(($1065+20)|0);
      var $1066=HEAPF32[(($arrayidx799)>>2)];
      $xr=$1066;
      var $1067=$a_addr;
      var $arrayidx800=(($1067+104)|0);
      var $1068=HEAPF32[(($arrayidx800)>>2)];
      var $1069=$a_addr;
      var $arrayidx801=(($1069+20)|0);
      var $1070=HEAPF32[(($arrayidx801)>>2)];
      var $add802=($1070)+($1068);
      HEAPF32[(($arrayidx801)>>2)]=$add802;
      var $1071=$xr;
      var $1072=$a_addr;
      var $arrayidx803=(($1072+104)|0);
      var $1073=HEAPF32[(($arrayidx803)>>2)];
      var $sub804=($1073)-($1071);
      HEAPF32[(($arrayidx803)>>2)]=$sub804;
      var $1074=$a_addr;
      var $arrayidx805=(($1074+80)|0);
      var $1075=HEAPF32[(($arrayidx805)>>2)];
      $xr=$1075;
      var $1076=$a_addr;
      var $arrayidx806=(($1076+44)|0);
      var $1077=HEAPF32[(($arrayidx806)>>2)];
      var $1078=$a_addr;
      var $arrayidx807=(($1078+80)|0);
      var $1079=HEAPF32[(($arrayidx807)>>2)];
      var $add808=($1079)+($1077);
      HEAPF32[(($arrayidx807)>>2)]=$add808;
      var $1080=$xr;
      var $1081=$a_addr;
      var $arrayidx809=(($1081+44)|0);
      var $1082=HEAPF32[(($arrayidx809)>>2)];
      var $sub810=($1082)-($1080);
      HEAPF32[(($arrayidx809)>>2)]=$sub810;
      var $1083=$a_addr;
      var $arrayidx811=(($1083+84)|0);
      var $1084=HEAPF32[(($arrayidx811)>>2)];
      $xr=$1084;
      var $1085=$a_addr;
      var $arrayidx812=(($1085+40)|0);
      var $1086=HEAPF32[(($arrayidx812)>>2)];
      var $1087=$a_addr;
      var $arrayidx813=(($1087+84)|0);
      var $1088=HEAPF32[(($arrayidx813)>>2)];
      var $add814=($1088)+($1086);
      HEAPF32[(($arrayidx813)>>2)]=$add814;
      var $1089=$xr;
      var $1090=$a_addr;
      var $arrayidx815=(($1090+40)|0);
      var $1091=HEAPF32[(($arrayidx815)>>2)];
      var $sub816=($1091)-($1089);
      HEAPF32[(($arrayidx815)>>2)]=$sub816;
      var $1092=$a_addr;
      var $arrayidx817=(($1092+48)|0);
      var $1093=HEAPF32[(($arrayidx817)>>2)];
      $xr=$1093;
      var $1094=$a_addr;
      var $arrayidx818=(($1094+76)|0);
      var $1095=HEAPF32[(($arrayidx818)>>2)];
      var $1096=$a_addr;
      var $arrayidx819=(($1096+48)|0);
      var $1097=HEAPF32[(($arrayidx819)>>2)];
      var $add820=($1097)+($1095);
      HEAPF32[(($arrayidx819)>>2)]=$add820;
      var $1098=$xr;
      var $1099=$a_addr;
      var $arrayidx821=(($1099+76)|0);
      var $1100=HEAPF32[(($arrayidx821)>>2)];
      var $sub822=($1100)-($1098);
      HEAPF32[(($arrayidx821)>>2)]=$sub822;
      var $1101=$a_addr;
      var $arrayidx823=(($1101+52)|0);
      var $1102=HEAPF32[(($arrayidx823)>>2)];
      $xr=$1102;
      var $1103=$a_addr;
      var $arrayidx824=(($1103+72)|0);
      var $1104=HEAPF32[(($arrayidx824)>>2)];
      var $1105=$a_addr;
      var $arrayidx825=(($1105+52)|0);
      var $1106=HEAPF32[(($arrayidx825)>>2)];
      var $add826=($1106)+($1104);
      HEAPF32[(($arrayidx825)>>2)]=$add826;
      var $1107=$xr;
      var $1108=$a_addr;
      var $arrayidx827=(($1108+72)|0);
      var $1109=HEAPF32[(($arrayidx827)>>2)];
      var $sub828=($1109)-($1107);
      HEAPF32[(($arrayidx827)>>2)]=$sub828;
      var $1110=$a_addr;
      var $arrayidx829=(($1110+112)|0);
      var $1111=HEAPF32[(($arrayidx829)>>2)];
      $xr=$1111;
      var $1112=$a_addr;
      var $arrayidx830=(($1112+12)|0);
      var $1113=HEAPF32[(($arrayidx830)>>2)];
      var $1114=$a_addr;
      var $arrayidx831=(($1114+112)|0);
      var $1115=HEAPF32[(($arrayidx831)>>2)];
      var $add832=($1115)+($1113);
      HEAPF32[(($arrayidx831)>>2)]=$add832;
      var $1116=$xr;
      var $1117=$a_addr;
      var $arrayidx833=(($1117+12)|0);
      var $1118=HEAPF32[(($arrayidx833)>>2)];
      var $sub834=($1118)-($1116);
      HEAPF32[(($arrayidx833)>>2)]=$sub834;
      var $1119=$a_addr;
      var $arrayidx835=(($1119+116)|0);
      var $1120=HEAPF32[(($arrayidx835)>>2)];
      $xr=$1120;
      var $1121=$a_addr;
      var $arrayidx836=(($1121+8)|0);
      var $1122=HEAPF32[(($arrayidx836)>>2)];
      var $1123=$a_addr;
      var $arrayidx837=(($1123+116)|0);
      var $1124=HEAPF32[(($arrayidx837)>>2)];
      var $add838=($1124)+($1122);
      HEAPF32[(($arrayidx837)>>2)]=$add838;
      var $1125=$xr;
      var $1126=$a_addr;
      var $arrayidx839=(($1126+8)|0);
      var $1127=HEAPF32[(($arrayidx839)>>2)];
      var $sub840=($1127)-($1125);
      HEAPF32[(($arrayidx839)>>2)]=$sub840;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_window_subband["X"]=1;

function _mdct_short($inout) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $inout_addr;
      var $l;
      var $tc0;
      var $tc1;
      var $tc2;
      var $ts0;
      var $ts1;
      var $ts2;
      $inout_addr=$inout;
      $l=0;
      label = 3; break;
    case 3: 
      var $0=$l;
      var $cmp=(($0)|0) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$inout_addr;
      var $arrayidx=(($1+24)|0);
      var $2=HEAPF32[(($arrayidx)>>2)];
      var $3=HEAPF32[((((5247776)|0))>>2)];
      var $mul=($2)*($3);
      var $4=$inout_addr;
      var $arrayidx1=(($4+60)|0);
      var $5=HEAPF32[(($arrayidx1)>>2)];
      var $sub=($mul)-($5);
      $ts0=$sub;
      var $6=$inout_addr;
      var $arrayidx2=(($6)|0);
      var $7=HEAPF32[(($arrayidx2)>>2)];
      var $8=HEAPF32[((((5247784)|0))>>2)];
      var $mul3=($7)*($8);
      var $9=$inout_addr;
      var $arrayidx4=(($9+36)|0);
      var $10=HEAPF32[(($arrayidx4)>>2)];
      var $sub5=($mul3)-($10);
      $tc0=$sub5;
      var $11=$ts0;
      var $12=$tc0;
      var $add=($11)+($12);
      $tc1=$add;
      var $13=$ts0;
      var $14=$tc0;
      var $sub6=($13)-($14);
      $tc2=$sub6;
      var $15=$inout_addr;
      var $arrayidx7=(($15+60)|0);
      var $16=HEAPF32[(($arrayidx7)>>2)];
      var $17=HEAPF32[((((5247776)|0))>>2)];
      var $mul8=($16)*($17);
      var $18=$inout_addr;
      var $arrayidx9=(($18+24)|0);
      var $19=HEAPF32[(($arrayidx9)>>2)];
      var $add10=($mul8)+($19);
      $ts0=$add10;
      var $20=$inout_addr;
      var $arrayidx11=(($20+36)|0);
      var $21=HEAPF32[(($arrayidx11)>>2)];
      var $22=HEAPF32[((((5247784)|0))>>2)];
      var $mul12=($21)*($22);
      var $23=$inout_addr;
      var $arrayidx13=(($23)|0);
      var $24=HEAPF32[(($arrayidx13)>>2)];
      var $add14=($mul12)+($24);
      $tc0=$add14;
      var $25=$ts0;
      var $26=$tc0;
      var $add15=($25)+($26);
      $ts1=$add15;
      var $27=$ts0;
      var $sub16=(-$27);
      var $28=$tc0;
      var $add17=($sub16)+($28);
      $ts2=$add17;
      var $29=$inout_addr;
      var $arrayidx18=(($29+12)|0);
      var $30=HEAPF32[(($arrayidx18)>>2)];
      var $31=HEAPF32[((((5247780)|0))>>2)];
      var $mul19=($30)*($31);
      var $32=$inout_addr;
      var $arrayidx20=(($32+48)|0);
      var $33=HEAPF32[(($arrayidx20)>>2)];
      var $sub21=($mul19)-($33);
      var $conv=$sub21;
      var $mul22=($conv)*(2.069978111953089e-11);
      var $conv23=$mul22;
      $tc0=$conv23;
      var $34=$inout_addr;
      var $arrayidx24=(($34+48)|0);
      var $35=HEAPF32[(($arrayidx24)>>2)];
      var $36=HEAPF32[((((5247780)|0))>>2)];
      var $mul25=($35)*($36);
      var $37=$inout_addr;
      var $arrayidx26=(($37+12)|0);
      var $38=HEAPF32[(($arrayidx26)>>2)];
      var $add27=($mul25)+($38);
      var $conv28=$add27;
      var $mul29=($conv28)*(2.069978111953089e-11);
      var $conv30=$mul29;
      $ts0=$conv30;
      var $39=$tc1;
      var $conv31=$39;
      var $mul32=($conv31)*(1.90752519173728e-11);
      var $40=$tc0;
      var $conv33=$40;
      var $add34=($mul32)+($conv33);
      var $conv35=$add34;
      var $41=$inout_addr;
      var $arrayidx36=(($41)|0);
      HEAPF32[(($arrayidx36)>>2)]=$conv35;
      var $42=$ts1;
      var $sub37=(-$42);
      var $conv38=$sub37;
      var $mul39=($conv38)*(1.90752519173728e-11);
      var $43=$ts0;
      var $conv40=$43;
      var $add41=($mul39)+($conv40);
      var $conv42=$add41;
      var $44=$inout_addr;
      var $arrayidx43=(($44+60)|0);
      HEAPF32[(($arrayidx43)>>2)]=$conv42;
      var $45=$tc2;
      var $conv44=$45;
      var $mul45=($conv44)*(0.8660254037844387);
      var $mul46=($mul45)*(1.907525191737281e-11);
      var $conv47=$mul46;
      $tc2=$conv47;
      var $46=$ts1;
      var $conv48=$46;
      var $mul49=($conv48)*(0.5);
      var $mul50=($mul49)*(1.907525191737281e-11);
      var $47=$ts0;
      var $conv51=$47;
      var $add52=($mul50)+($conv51);
      var $conv53=$add52;
      $ts1=$conv53;
      var $48=$tc2;
      var $49=$ts1;
      var $sub54=($48)-($49);
      var $50=$inout_addr;
      var $arrayidx55=(($50+12)|0);
      HEAPF32[(($arrayidx55)>>2)]=$sub54;
      var $51=$tc2;
      var $52=$ts1;
      var $add56=($51)+($52);
      var $53=$inout_addr;
      var $arrayidx57=(($53+24)|0);
      HEAPF32[(($arrayidx57)>>2)]=$add56;
      var $54=$tc1;
      var $conv58=$54;
      var $mul59=($conv58)*(0.5);
      var $mul60=($mul59)*(1.907525191737281e-11);
      var $55=$tc0;
      var $conv61=$55;
      var $sub62=($mul60)-($conv61);
      var $conv63=$sub62;
      $tc1=$conv63;
      var $56=$ts2;
      var $conv64=$56;
      var $mul65=($conv64)*(0.8660254037844387);
      var $mul66=($mul65)*(1.907525191737281e-11);
      var $conv67=$mul66;
      $ts2=$conv67;
      var $57=$tc1;
      var $58=$ts2;
      var $add68=($57)+($58);
      var $59=$inout_addr;
      var $arrayidx69=(($59+36)|0);
      HEAPF32[(($arrayidx69)>>2)]=$add68;
      var $60=$tc1;
      var $61=$ts2;
      var $sub70=($60)-($61);
      var $62=$inout_addr;
      var $arrayidx71=(($62+48)|0);
      HEAPF32[(($arrayidx71)>>2)]=$sub70;
      var $63=$inout_addr;
      var $incdec_ptr=(($63+4)|0);
      $inout_addr=$incdec_ptr;
      label = 5; break;
    case 5: 
      var $64=$l;
      var $inc=((($64)+(1))|0);
      $l=$inc;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mdct_short["X"]=1;

function _mdct_long($out, $in) {
  var label = 0;


  var $out_addr;
  var $in_addr;
  var $ct;
  var $st;
  var $tc1;
  var $tc2;
  var $tc3;
  var $tc4;
  var $ts5;
  var $ts6;
  var $ts7;
  var $ts8;
  var $ts1;
  var $ts2;
  var $ts3;
  var $ts4;
  var $tc5;
  var $tc6;
  var $tc7;
  var $tc8;
  $out_addr=$out;
  $in_addr=$in;
  var $0=$in_addr;
  var $arrayidx=(($0+68)|0);
  var $1=HEAPF32[(($arrayidx)>>2)];
  var $2=$in_addr;
  var $arrayidx1=(($2+36)|0);
  var $3=HEAPF32[(($arrayidx1)>>2)];
  var $sub=($1)-($3);
  $tc1=$sub;
  var $4=$in_addr;
  var $arrayidx2=(($4+60)|0);
  var $5=HEAPF32[(($arrayidx2)>>2)];
  var $6=$in_addr;
  var $arrayidx3=(($6+44)|0);
  var $7=HEAPF32[(($arrayidx3)>>2)];
  var $sub4=($5)-($7);
  $tc3=$sub4;
  var $8=$in_addr;
  var $arrayidx5=(($8+56)|0);
  var $9=HEAPF32[(($arrayidx5)>>2)];
  var $10=$in_addr;
  var $arrayidx6=(($10+48)|0);
  var $11=HEAPF32[(($arrayidx6)>>2)];
  var $sub7=($9)-($11);
  $tc4=$sub7;
  var $12=$in_addr;
  var $arrayidx8=(($12)|0);
  var $13=HEAPF32[(($arrayidx8)>>2)];
  var $14=$in_addr;
  var $arrayidx9=(($14+32)|0);
  var $15=HEAPF32[(($arrayidx9)>>2)];
  var $add=($13)+($15);
  $ts5=$add;
  var $16=$in_addr;
  var $arrayidx10=(($16+4)|0);
  var $17=HEAPF32[(($arrayidx10)>>2)];
  var $18=$in_addr;
  var $arrayidx11=(($18+28)|0);
  var $19=HEAPF32[(($arrayidx11)>>2)];
  var $add12=($17)+($19);
  $ts6=$add12;
  var $20=$in_addr;
  var $arrayidx13=(($20+8)|0);
  var $21=HEAPF32[(($arrayidx13)>>2)];
  var $22=$in_addr;
  var $arrayidx14=(($22+24)|0);
  var $23=HEAPF32[(($arrayidx14)>>2)];
  var $add15=($21)+($23);
  $ts7=$add15;
  var $24=$in_addr;
  var $arrayidx16=(($24+12)|0);
  var $25=HEAPF32[(($arrayidx16)>>2)];
  var $26=$in_addr;
  var $arrayidx17=(($26+20)|0);
  var $27=HEAPF32[(($arrayidx17)>>2)];
  var $add18=($25)+($27);
  $ts8=$add18;
  var $28=$ts5;
  var $29=$ts7;
  var $add19=($28)+($29);
  var $30=$ts8;
  var $sub20=($add19)-($30);
  var $31=$ts6;
  var $32=$in_addr;
  var $arrayidx21=(($32+16)|0);
  var $33=HEAPF32[(($arrayidx21)>>2)];
  var $sub22=($31)-($33);
  var $sub23=($sub20)-($sub22);
  var $34=$out_addr;
  var $arrayidx24=(($34+68)|0);
  HEAPF32[(($arrayidx24)>>2)]=$sub23;
  var $35=$ts5;
  var $36=$ts7;
  var $add25=($35)+($36);
  var $37=$ts8;
  var $sub26=($add25)-($37);
  var $38=HEAPF32[((((5247852)|0))>>2)];
  var $mul=($sub26)*($38);
  var $39=$ts6;
  var $40=$in_addr;
  var $arrayidx27=(($40+16)|0);
  var $41=HEAPF32[(($arrayidx27)>>2)];
  var $sub28=($39)-($41);
  var $add29=($mul)+($sub28);
  $st=$add29;
  var $42=$tc1;
  var $43=$tc3;
  var $sub30=($42)-($43);
  var $44=$tc4;
  var $sub31=($sub30)-($44);
  var $45=HEAPF32[((((5247848)|0))>>2)];
  var $mul32=($sub31)*($45);
  $ct=$mul32;
  var $46=$ct;
  var $47=$st;
  var $add33=($46)+($47);
  var $48=$out_addr;
  var $arrayidx34=(($48+20)|0);
  HEAPF32[(($arrayidx34)>>2)]=$add33;
  var $49=$ct;
  var $50=$st;
  var $sub35=($49)-($50);
  var $51=$out_addr;
  var $arrayidx36=(($51+24)|0);
  HEAPF32[(($arrayidx36)>>2)]=$sub35;
  var $52=$in_addr;
  var $arrayidx37=(($52+64)|0);
  var $53=HEAPF32[(($arrayidx37)>>2)];
  var $54=$in_addr;
  var $arrayidx38=(($54+40)|0);
  var $55=HEAPF32[(($arrayidx38)>>2)];
  var $sub39=($53)-($55);
  var $56=HEAPF32[((((5247848)|0))>>2)];
  var $mul40=($sub39)*($56);
  $tc2=$mul40;
  var $57=$ts6;
  var $58=HEAPF32[((((5247852)|0))>>2)];
  var $mul41=($57)*($58);
  var $59=$in_addr;
  var $arrayidx42=(($59+16)|0);
  var $60=HEAPF32[(($arrayidx42)>>2)];
  var $add43=($mul41)+($60);
  $ts6=$add43;
  var $61=$tc1;
  var $62=HEAPF32[((((5247824)|0))>>2)];
  var $mul44=($61)*($62);
  var $63=$tc2;
  var $add45=($mul44)+($63);
  var $64=$tc3;
  var $65=HEAPF32[((((5247828)|0))>>2)];
  var $mul46=($64)*($65);
  var $add47=($add45)+($mul46);
  var $66=$tc4;
  var $67=HEAPF32[((((5247832)|0))>>2)];
  var $mul48=($66)*($67);
  var $add49=($add47)+($mul48);
  $ct=$add49;
  var $68=$ts5;
  var $sub50=(-$68);
  var $69=HEAPF32[((((5247840)|0))>>2)];
  var $mul51=($sub50)*($69);
  var $70=$ts6;
  var $add52=($mul51)+($70);
  var $71=$ts7;
  var $72=HEAPF32[((((5247844)|0))>>2)];
  var $mul53=($71)*($72);
  var $sub54=($add52)-($mul53);
  var $73=$ts8;
  var $74=HEAPF32[((((5247836)|0))>>2)];
  var $mul55=($73)*($74);
  var $add56=($sub54)+($mul55);
  $st=$add56;
  var $75=$ct;
  var $76=$st;
  var $add57=($75)+($76);
  var $77=$out_addr;
  var $arrayidx58=(($77+4)|0);
  HEAPF32[(($arrayidx58)>>2)]=$add57;
  var $78=$ct;
  var $79=$st;
  var $sub59=($78)-($79);
  var $80=$out_addr;
  var $arrayidx60=(($80+8)|0);
  HEAPF32[(($arrayidx60)>>2)]=$sub59;
  var $81=$tc1;
  var $82=HEAPF32[((((5247828)|0))>>2)];
  var $mul61=($81)*($82);
  var $83=$tc2;
  var $sub62=($mul61)-($83);
  var $84=$tc3;
  var $85=HEAPF32[((((5247832)|0))>>2)];
  var $mul63=($84)*($85);
  var $sub64=($sub62)-($mul63);
  var $86=$tc4;
  var $87=HEAPF32[((((5247824)|0))>>2)];
  var $mul65=($86)*($87);
  var $add66=($sub64)+($mul65);
  $ct=$add66;
  var $88=$ts5;
  var $sub67=(-$88);
  var $89=HEAPF32[((((5247844)|0))>>2)];
  var $mul68=($sub67)*($89);
  var $90=$ts6;
  var $add69=($mul68)+($90);
  var $91=$ts7;
  var $92=HEAPF32[((((5247836)|0))>>2)];
  var $mul70=($91)*($92);
  var $sub71=($add69)-($mul70);
  var $93=$ts8;
  var $94=HEAPF32[((((5247840)|0))>>2)];
  var $mul72=($93)*($94);
  var $add73=($sub71)+($mul72);
  $st=$add73;
  var $95=$ct;
  var $96=$st;
  var $add74=($95)+($96);
  var $97=$out_addr;
  var $arrayidx75=(($97+36)|0);
  HEAPF32[(($arrayidx75)>>2)]=$add74;
  var $98=$ct;
  var $99=$st;
  var $sub76=($98)-($99);
  var $100=$out_addr;
  var $arrayidx77=(($100+40)|0);
  HEAPF32[(($arrayidx77)>>2)]=$sub76;
  var $101=$tc1;
  var $102=HEAPF32[((((5247832)|0))>>2)];
  var $mul78=($101)*($102);
  var $103=$tc2;
  var $sub79=($mul78)-($103);
  var $104=$tc3;
  var $105=HEAPF32[((((5247824)|0))>>2)];
  var $mul80=($104)*($105);
  var $add81=($sub79)+($mul80);
  var $106=$tc4;
  var $107=HEAPF32[((((5247828)|0))>>2)];
  var $mul82=($106)*($107);
  var $sub83=($add81)-($mul82);
  $ct=$sub83;
  var $108=$ts5;
  var $109=HEAPF32[((((5247836)|0))>>2)];
  var $mul84=($108)*($109);
  var $110=$ts6;
  var $sub85=($mul84)-($110);
  var $111=$ts7;
  var $112=HEAPF32[((((5247840)|0))>>2)];
  var $mul86=($111)*($112);
  var $add87=($sub85)+($mul86);
  var $113=$ts8;
  var $114=HEAPF32[((((5247844)|0))>>2)];
  var $mul88=($113)*($114);
  var $sub89=($add87)-($mul88);
  $st=$sub89;
  var $115=$ct;
  var $116=$st;
  var $add90=($115)+($116);
  var $117=$out_addr;
  var $arrayidx91=(($117+52)|0);
  HEAPF32[(($arrayidx91)>>2)]=$add90;
  var $118=$ct;
  var $119=$st;
  var $sub92=($118)-($119);
  var $120=$out_addr;
  var $arrayidx93=(($120+56)|0);
  HEAPF32[(($arrayidx93)>>2)]=$sub92;
  var $121=$in_addr;
  var $arrayidx94=(($121+32)|0);
  var $122=HEAPF32[(($arrayidx94)>>2)];
  var $123=$in_addr;
  var $arrayidx95=(($123)|0);
  var $124=HEAPF32[(($arrayidx95)>>2)];
  var $sub96=($122)-($124);
  $ts1=$sub96;
  var $125=$in_addr;
  var $arrayidx97=(($125+24)|0);
  var $126=HEAPF32[(($arrayidx97)>>2)];
  var $127=$in_addr;
  var $arrayidx98=(($127+8)|0);
  var $128=HEAPF32[(($arrayidx98)>>2)];
  var $sub99=($126)-($128);
  $ts3=$sub99;
  var $129=$in_addr;
  var $arrayidx100=(($129+20)|0);
  var $130=HEAPF32[(($arrayidx100)>>2)];
  var $131=$in_addr;
  var $arrayidx101=(($131+12)|0);
  var $132=HEAPF32[(($arrayidx101)>>2)];
  var $sub102=($130)-($132);
  $ts4=$sub102;
  var $133=$in_addr;
  var $arrayidx103=(($133+68)|0);
  var $134=HEAPF32[(($arrayidx103)>>2)];
  var $135=$in_addr;
  var $arrayidx104=(($135+36)|0);
  var $136=HEAPF32[(($arrayidx104)>>2)];
  var $add105=($134)+($136);
  $tc5=$add105;
  var $137=$in_addr;
  var $arrayidx106=(($137+64)|0);
  var $138=HEAPF32[(($arrayidx106)>>2)];
  var $139=$in_addr;
  var $arrayidx107=(($139+40)|0);
  var $140=HEAPF32[(($arrayidx107)>>2)];
  var $add108=($138)+($140);
  $tc6=$add108;
  var $141=$in_addr;
  var $arrayidx109=(($141+60)|0);
  var $142=HEAPF32[(($arrayidx109)>>2)];
  var $143=$in_addr;
  var $arrayidx110=(($143+44)|0);
  var $144=HEAPF32[(($arrayidx110)>>2)];
  var $add111=($142)+($144);
  $tc7=$add111;
  var $145=$in_addr;
  var $arrayidx112=(($145+56)|0);
  var $146=HEAPF32[(($arrayidx112)>>2)];
  var $147=$in_addr;
  var $arrayidx113=(($147+48)|0);
  var $148=HEAPF32[(($arrayidx113)>>2)];
  var $add114=($146)+($148);
  $tc8=$add114;
  var $149=$tc5;
  var $150=$tc7;
  var $add115=($149)+($150);
  var $151=$tc8;
  var $add116=($add115)+($151);
  var $152=$tc6;
  var $153=$in_addr;
  var $arrayidx117=(($153+52)|0);
  var $154=HEAPF32[(($arrayidx117)>>2)];
  var $add118=($152)+($154);
  var $add119=($add116)+($add118);
  var $155=$out_addr;
  var $arrayidx120=(($155)|0);
  HEAPF32[(($arrayidx120)>>2)]=$add119;
  var $156=$tc5;
  var $157=$tc7;
  var $add121=($156)+($157);
  var $158=$tc8;
  var $add122=($add121)+($158);
  var $159=HEAPF32[((((5247852)|0))>>2)];
  var $mul123=($add122)*($159);
  var $160=$tc6;
  var $161=$in_addr;
  var $arrayidx124=(($161+52)|0);
  var $162=HEAPF32[(($arrayidx124)>>2)];
  var $add125=($160)+($162);
  var $sub126=($mul123)-($add125);
  $ct=$sub126;
  var $163=$ts1;
  var $164=$ts3;
  var $sub127=($163)-($164);
  var $165=$ts4;
  var $add128=($sub127)+($165);
  var $166=HEAPF32[((((5247848)|0))>>2)];
  var $mul129=($add128)*($166);
  $st=$mul129;
  var $167=$ct;
  var $168=$st;
  var $add130=($167)+($168);
  var $169=$out_addr;
  var $arrayidx131=(($169+44)|0);
  HEAPF32[(($arrayidx131)>>2)]=$add130;
  var $170=$ct;
  var $171=$st;
  var $sub132=($170)-($171);
  var $172=$out_addr;
  var $arrayidx133=(($172+48)|0);
  HEAPF32[(($arrayidx133)>>2)]=$sub132;
  var $173=$in_addr;
  var $arrayidx134=(($173+28)|0);
  var $174=HEAPF32[(($arrayidx134)>>2)];
  var $175=$in_addr;
  var $arrayidx135=(($175+4)|0);
  var $176=HEAPF32[(($arrayidx135)>>2)];
  var $sub136=($174)-($176);
  var $177=HEAPF32[((((5247848)|0))>>2)];
  var $mul137=($sub136)*($177);
  $ts2=$mul137;
  var $178=$in_addr;
  var $arrayidx138=(($178+52)|0);
  var $179=HEAPF32[(($arrayidx138)>>2)];
  var $180=$tc6;
  var $181=HEAPF32[((((5247852)|0))>>2)];
  var $mul139=($180)*($181);
  var $sub140=($179)-($mul139);
  $tc6=$sub140;
  var $182=$tc5;
  var $183=HEAPF32[((((5247836)|0))>>2)];
  var $mul141=($182)*($183);
  var $184=$tc6;
  var $sub142=($mul141)-($184);
  var $185=$tc7;
  var $186=HEAPF32[((((5247840)|0))>>2)];
  var $mul143=($185)*($186);
  var $add144=($sub142)+($mul143);
  var $187=$tc8;
  var $188=HEAPF32[((((5247844)|0))>>2)];
  var $mul145=($187)*($188);
  var $add146=($add144)+($mul145);
  $ct=$add146;
  var $189=$ts1;
  var $190=HEAPF32[((((5247832)|0))>>2)];
  var $mul147=($189)*($190);
  var $191=$ts2;
  var $add148=($mul147)+($191);
  var $192=$ts3;
  var $193=HEAPF32[((((5247824)|0))>>2)];
  var $mul149=($192)*($193);
  var $add150=($add148)+($mul149);
  var $194=$ts4;
  var $195=HEAPF32[((((5247828)|0))>>2)];
  var $mul151=($194)*($195);
  var $add152=($add150)+($mul151);
  $st=$add152;
  var $196=$ct;
  var $197=$st;
  var $add153=($196)+($197);
  var $198=$out_addr;
  var $arrayidx154=(($198+12)|0);
  HEAPF32[(($arrayidx154)>>2)]=$add153;
  var $199=$ct;
  var $200=$st;
  var $sub155=($199)-($200);
  var $201=$out_addr;
  var $arrayidx156=(($201+16)|0);
  HEAPF32[(($arrayidx156)>>2)]=$sub155;
  var $202=$tc5;
  var $sub157=(-$202);
  var $203=HEAPF32[((((5247844)|0))>>2)];
  var $mul158=($sub157)*($203);
  var $204=$tc6;
  var $add159=($mul158)+($204);
  var $205=$tc7;
  var $206=HEAPF32[((((5247836)|0))>>2)];
  var $mul160=($205)*($206);
  var $sub161=($add159)-($mul160);
  var $207=$tc8;
  var $208=HEAPF32[((((5247840)|0))>>2)];
  var $mul162=($207)*($208);
  var $sub163=($sub161)-($mul162);
  $ct=$sub163;
  var $209=$ts1;
  var $210=HEAPF32[((((5247828)|0))>>2)];
  var $mul164=($209)*($210);
  var $211=$ts2;
  var $add165=($mul164)+($211);
  var $212=$ts3;
  var $213=HEAPF32[((((5247832)|0))>>2)];
  var $mul166=($212)*($213);
  var $sub167=($add165)-($mul166);
  var $214=$ts4;
  var $215=HEAPF32[((((5247824)|0))>>2)];
  var $mul168=($214)*($215);
  var $sub169=($sub167)-($mul168);
  $st=$sub169;
  var $216=$ct;
  var $217=$st;
  var $add170=($216)+($217);
  var $218=$out_addr;
  var $arrayidx171=(($218+28)|0);
  HEAPF32[(($arrayidx171)>>2)]=$add170;
  var $219=$ct;
  var $220=$st;
  var $sub172=($219)-($220);
  var $221=$out_addr;
  var $arrayidx173=(($221+32)|0);
  HEAPF32[(($arrayidx173)>>2)]=$sub172;
  var $222=$tc5;
  var $sub174=(-$222);
  var $223=HEAPF32[((((5247840)|0))>>2)];
  var $mul175=($sub174)*($223);
  var $224=$tc6;
  var $add176=($mul175)+($224);
  var $225=$tc7;
  var $226=HEAPF32[((((5247844)|0))>>2)];
  var $mul177=($225)*($226);
  var $sub178=($add176)-($mul177);
  var $227=$tc8;
  var $228=HEAPF32[((((5247836)|0))>>2)];
  var $mul179=($227)*($228);
  var $sub180=($sub178)-($mul179);
  $ct=$sub180;
  var $229=$ts1;
  var $230=HEAPF32[((((5247824)|0))>>2)];
  var $mul181=($229)*($230);
  var $231=$ts2;
  var $sub182=($mul181)-($231);
  var $232=$ts3;
  var $233=HEAPF32[((((5247828)|0))>>2)];
  var $mul183=($232)*($233);
  var $add184=($sub182)+($mul183);
  var $234=$ts4;
  var $235=HEAPF32[((((5247832)|0))>>2)];
  var $mul185=($234)*($235);
  var $sub186=($add184)-($mul185);
  $st=$sub186;
  var $236=$ct;
  var $237=$st;
  var $add187=($236)+($237);
  var $238=$out_addr;
  var $arrayidx188=(($238+60)|0);
  HEAPF32[(($arrayidx188)>>2)]=$add187;
  var $239=$ct;
  var $240=$st;
  var $sub189=($239)-($240);
  var $241=$out_addr;
  var $arrayidx190=(($241+64)|0);
  HEAPF32[(($arrayidx190)>>2)]=$sub189;

  return;
}
_mdct_long["X"]=1;

function _apply_preset($gfp, $preset, $enforce) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $preset_addr;
      var $enforce_addr;
      $gfp_addr=$gfp;
      $preset_addr=$preset;
      $enforce_addr=$enforce;
      var $0=$preset_addr;
      if ((($0)|0)==1000) {
        label = 3; break;
      }
      else if ((($0)|0)==1006 | (($0)|0)==1007) {
        label = 4; break;
      }
      else if ((($0)|0)==1001 | (($0)|0)==1004) {
        label = 5; break;
      }
      else if ((($0)|0)==1002 | (($0)|0)==1005) {
        label = 6; break;
      }
      else if ((($0)|0)==1003) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      $preset_addr=470;
      var $1=$gfp_addr;
      var $call=_lame_set_VBR($1, 4);
      label = 8; break;
    case 4: 
      $preset_addr=460;
      var $2=$gfp_addr;
      var $call2=_lame_set_VBR($2, 4);
      label = 8; break;
    case 5: 
      $preset_addr=480;
      var $3=$gfp_addr;
      var $call4=_lame_set_VBR($3, 4);
      label = 8; break;
    case 6: 
      $preset_addr=500;
      var $4=$gfp_addr;
      var $call6=_lame_set_VBR($4, 4);
      label = 8; break;
    case 7: 
      $preset_addr=320;
      var $5=$preset_addr;
      var $6=$gfp_addr;
      var $preset8=(($6+152)|0);
      HEAP32[(($preset8)>>2)]=$5;
      var $7=$gfp_addr;
      var $8=$preset_addr;
      var $9=$enforce_addr;
      var $call9=_apply_abr_preset($7, $8, $9);
      var $10=$gfp_addr;
      var $call10=_lame_set_VBR($10, 0);
      var $11=$preset_addr;
      $retval=$11;
      label = 24; break;
    case 8: 
      var $12=$preset_addr;
      var $13=$gfp_addr;
      var $preset11=(($13+152)|0);
      HEAP32[(($preset11)>>2)]=$12;
      var $14=$preset_addr;
      if ((($14)|0)==410) {
        label = 9; break;
      }
      else if ((($14)|0)==420) {
        label = 10; break;
      }
      else if ((($14)|0)==430) {
        label = 11; break;
      }
      else if ((($14)|0)==440) {
        label = 12; break;
      }
      else if ((($14)|0)==450) {
        label = 13; break;
      }
      else if ((($14)|0)==460) {
        label = 14; break;
      }
      else if ((($14)|0)==470) {
        label = 15; break;
      }
      else if ((($14)|0)==480) {
        label = 16; break;
      }
      else if ((($14)|0)==490) {
        label = 17; break;
      }
      else if ((($14)|0)==500) {
        label = 18; break;
      }
      else {
      label = 19; break;
      }
      
    case 9: 
      var $15=$gfp_addr;
      var $16=$enforce_addr;
      _apply_vbr_preset($15, 9, $16);
      var $17=$preset_addr;
      $retval=$17;
      label = 24; break;
    case 10: 
      var $18=$gfp_addr;
      var $19=$enforce_addr;
      _apply_vbr_preset($18, 8, $19);
      var $20=$preset_addr;
      $retval=$20;
      label = 24; break;
    case 11: 
      var $21=$gfp_addr;
      var $22=$enforce_addr;
      _apply_vbr_preset($21, 7, $22);
      var $23=$preset_addr;
      $retval=$23;
      label = 24; break;
    case 12: 
      var $24=$gfp_addr;
      var $25=$enforce_addr;
      _apply_vbr_preset($24, 6, $25);
      var $26=$preset_addr;
      $retval=$26;
      label = 24; break;
    case 13: 
      var $27=$gfp_addr;
      var $28=$enforce_addr;
      _apply_vbr_preset($27, 5, $28);
      var $29=$preset_addr;
      $retval=$29;
      label = 24; break;
    case 14: 
      var $30=$gfp_addr;
      var $31=$enforce_addr;
      _apply_vbr_preset($30, 4, $31);
      var $32=$preset_addr;
      $retval=$32;
      label = 24; break;
    case 15: 
      var $33=$gfp_addr;
      var $34=$enforce_addr;
      _apply_vbr_preset($33, 3, $34);
      var $35=$preset_addr;
      $retval=$35;
      label = 24; break;
    case 16: 
      var $36=$gfp_addr;
      var $37=$enforce_addr;
      _apply_vbr_preset($36, 2, $37);
      var $38=$preset_addr;
      $retval=$38;
      label = 24; break;
    case 17: 
      var $39=$gfp_addr;
      var $40=$enforce_addr;
      _apply_vbr_preset($39, 1, $40);
      var $41=$preset_addr;
      $retval=$41;
      label = 24; break;
    case 18: 
      var $42=$gfp_addr;
      var $43=$enforce_addr;
      _apply_vbr_preset($42, 0, $43);
      var $44=$preset_addr;
      $retval=$44;
      label = 24; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $45=$preset_addr;
      var $cmp=8 <= (($45)|0);
      if ($cmp) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $46=$preset_addr;
      var $cmp23=(($46)|0) <= 320;
      if ($cmp23) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $47=$gfp_addr;
      var $48=$preset_addr;
      var $49=$enforce_addr;
      var $call24=_apply_abr_preset($47, $48, $49);
      $retval=$call24;
      label = 24; break;
    case 23: 
      var $50=$gfp_addr;
      var $preset25=(($50+152)|0);
      HEAP32[(($preset25)>>2)]=0;
      var $51=$preset_addr;
      $retval=$51;
      label = 24; break;
    case 24: 
      var $52=$retval;

      return $52;
    default: assert(0, "bad label: " + label);
  }

}
_apply_preset["X"]=1;

function _apply_abr_preset($gfp, $preset, $enforce) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $preset_addr;
      var $enforce_addr;
      var $r;
      var $actual_bitrate;
      $gfp_addr=$gfp;
      $preset_addr=$preset;
      $enforce_addr=$enforce;
      var $0=$preset_addr;
      $actual_bitrate=$0;
      var $1=$preset_addr;
      var $conv=(($1) & 65535);
      var $call=_nearestBitrateFullIndex($conv);
      $r=$call;
      var $2=$gfp_addr;
      var $call1=_lame_set_VBR($2, 3);
      var $3=$gfp_addr;
      var $4=$actual_bitrate;
      var $call2=_lame_set_VBR_mean_bitrate_kbps($3, $4);
      var $5=$gfp_addr;
      var $6=$gfp_addr;
      var $call3=_lame_get_VBR_mean_bitrate_kbps($6);
      var $call4=_min_int($call3, 320);
      var $call5=_lame_set_VBR_mean_bitrate_kbps($5, $call4);
      var $7=$gfp_addr;
      var $8=$gfp_addr;
      var $call6=_lame_get_VBR_mean_bitrate_kbps($8);
      var $call7=_max_int($call6, 8);
      var $call8=_lame_set_VBR_mean_bitrate_kbps($7, $call7);
      var $9=$gfp_addr;
      var $10=$gfp_addr;
      var $call9=_lame_get_VBR_mean_bitrate_kbps($10);
      var $call10=_lame_set_brate($9, $call9);
      var $11=$r;
      var $arrayidx=((5349012+($11)*(52))|0);
      var $safejoint=(($arrayidx+12)|0);
      var $12=HEAP32[(($safejoint)>>2)];
      var $cmp=(($12)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$gfp_addr;
      var $14=$gfp_addr;
      var $call12=_lame_get_exp_nspsytune($14);
      var $or=$call12 | 2;
      var $call13=_lame_set_exp_nspsytune($13, $or);
      label = 4; break;
    case 4: 
      var $15=$r;
      var $arrayidx14=((5349012+($15)*(52))|0);
      var $sfscale=(($arrayidx14+48)|0);
      var $16=HEAP32[(($sfscale)>>2)];
      var $cmp15=(($16)|0) > 0;
      if ($cmp15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$gfp_addr;
      var $call18=_lame_set_sfscale($17, 1);
      label = 6; break;
    case 6: 
      var $18=$enforce_addr;
      var $tobool=(($18)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$gfp_addr;
      var $20=$r;
      var $arrayidx21=((5349012+($20)*(52))|0);
      var $quant_comp=(($arrayidx21+4)|0);
      var $21=HEAP32[(($quant_comp)>>2)];
      var $call22=_lame_set_quant_comp($19, $21);
      label = 11; break;
    case 8: 
      var $22=$gfp_addr;
      var $call23=_lame_get_quant_comp($22);
      var $sub=((($call23)+(1))|0);
      var $conv24=(($sub)|0);
      var $call25=Math.abs($conv24);
      var $cmp26=$call25 > 0;
      if ($cmp26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $23=$gfp_addr;
      var $24=$r;
      var $arrayidx29=((5349012+($24)*(52))|0);
      var $quant_comp30=(($arrayidx29+4)|0);
      var $25=HEAP32[(($quant_comp30)>>2)];
      var $call31=_lame_set_quant_comp($23, $25);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $26=$enforce_addr;
      var $tobool34=(($26)|0)!=0;
      if ($tobool34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$gfp_addr;
      var $28=$r;
      var $arrayidx36=((5349012+($28)*(52))|0);
      var $quant_comp_s=(($arrayidx36+8)|0);
      var $29=HEAP32[(($quant_comp_s)>>2)];
      var $call37=_lame_set_quant_comp_short($27, $29);
      label = 16; break;
    case 13: 
      var $30=$gfp_addr;
      var $call39=_lame_get_quant_comp_short($30);
      var $sub40=((($call39)+(1))|0);
      var $conv41=(($sub40)|0);
      var $call42=Math.abs($conv41);
      var $cmp43=$call42 > 0;
      if ($cmp43) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $31=$gfp_addr;
      var $32=$r;
      var $arrayidx46=((5349012+($32)*(52))|0);
      var $quant_comp_s47=(($arrayidx46+8)|0);
      var $33=HEAP32[(($quant_comp_s47)>>2)];
      var $call48=_lame_set_quant_comp_short($31, $33);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $34=$enforce_addr;
      var $tobool51=(($34)|0)!=0;
      if ($tobool51) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $35=$gfp_addr;
      var $36=$r;
      var $arrayidx53=((5349012+($36)*(52))|0);
      var $nsmsfix=(($arrayidx53+16)|0);
      var $37=HEAPF32[(($nsmsfix)>>2)];
      var $conv54=$37;
      _lame_set_msfix($35, $conv54);
      label = 21; break;
    case 18: 
      var $38=$gfp_addr;
      var $call56=_lame_get_msfix($38);
      var $sub57=($call56)+(1);
      var $conv58=$sub57;
      var $call59=Math.abs($conv58);
      var $cmp60=$call59 > 0;
      if ($cmp60) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $39=$gfp_addr;
      var $40=$r;
      var $arrayidx63=((5349012+($40)*(52))|0);
      var $nsmsfix64=(($arrayidx63+16)|0);
      var $41=HEAPF32[(($nsmsfix64)>>2)];
      var $conv65=$41;
      _lame_set_msfix($39, $conv65);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $42=$enforce_addr;
      var $tobool68=(($42)|0)!=0;
      if ($tobool68) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $43=$gfp_addr;
      var $44=$r;
      var $arrayidx70=((5349012+($44)*(52))|0);
      var $st_lrm=(($arrayidx70+20)|0);
      var $45=HEAPF32[(($st_lrm)>>2)];
      var $call71=_lame_set_short_threshold_lrm($43, $45);
      label = 26; break;
    case 23: 
      var $46=$gfp_addr;
      var $call73=_lame_get_short_threshold_lrm($46);
      var $sub74=($call73)+(1);
      var $conv75=$sub74;
      var $call76=Math.abs($conv75);
      var $cmp77=$call76 > 0;
      if ($cmp77) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $47=$gfp_addr;
      var $48=$r;
      var $arrayidx80=((5349012+($48)*(52))|0);
      var $st_lrm81=(($arrayidx80+20)|0);
      var $49=HEAPF32[(($st_lrm81)>>2)];
      var $call82=_lame_set_short_threshold_lrm($47, $49);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $50=$enforce_addr;
      var $tobool85=(($50)|0)!=0;
      if ($tobool85) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=$gfp_addr;
      var $52=$r;
      var $arrayidx87=((5349012+($52)*(52))|0);
      var $st_s=(($arrayidx87+24)|0);
      var $53=HEAPF32[(($st_s)>>2)];
      var $call88=_lame_set_short_threshold_s($51, $53);
      label = 31; break;
    case 28: 
      var $54=$gfp_addr;
      var $call90=_lame_get_short_threshold_s($54);
      var $sub91=($call90)+(1);
      var $conv92=$sub91;
      var $call93=Math.abs($conv92);
      var $cmp94=$call93 > 0;
      if ($cmp94) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $55=$gfp_addr;
      var $56=$r;
      var $arrayidx97=((5349012+($56)*(52))|0);
      var $st_s98=(($arrayidx97+24)|0);
      var $57=HEAPF32[(($st_s98)>>2)];
      var $call99=_lame_set_short_threshold_s($55, $57);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $58=$gfp_addr;
      var $59=$gfp_addr;
      var $call102=_lame_get_scale($59);
      var $60=$r;
      var $arrayidx103=((5349012+($60)*(52))|0);
      var $scale=(($arrayidx103+28)|0);
      var $61=HEAPF32[(($scale)>>2)];
      var $mul=($call102)*($61);
      var $call104=_lame_set_scale($58, $mul);
      var $62=$enforce_addr;
      var $tobool105=(($62)|0)!=0;
      if ($tobool105) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $63=$gfp_addr;
      var $64=$r;
      var $arrayidx107=((5349012+($64)*(52))|0);
      var $masking_adj=(($arrayidx107+32)|0);
      var $65=HEAPF32[(($masking_adj)>>2)];
      var $call108=_lame_set_maskingadjust($63, $65);
      label = 36; break;
    case 33: 
      var $66=$gfp_addr;
      var $call110=_lame_get_maskingadjust($66);
      var $sub111=$call110;
      var $conv112=$sub111;
      var $call113=Math.abs($conv112);
      var $cmp114=$call113 > 0;
      if ($cmp114) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $67=$gfp_addr;
      var $68=$r;
      var $arrayidx117=((5349012+($68)*(52))|0);
      var $masking_adj118=(($arrayidx117+32)|0);
      var $69=HEAPF32[(($masking_adj118)>>2)];
      var $call119=_lame_set_maskingadjust($67, $69);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $70=$r;
      var $arrayidx122=((5349012+($70)*(52))|0);
      var $masking_adj123=(($arrayidx122+32)|0);
      var $71=HEAPF32[(($masking_adj123)>>2)];
      var $cmp124=$71 > 0;
      if ($cmp124) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $72=$enforce_addr;
      var $tobool127=(($72)|0)!=0;
      if ($tobool127) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $73=$gfp_addr;
      var $74=$r;
      var $arrayidx129=((5349012+($74)*(52))|0);
      var $masking_adj130=(($arrayidx129+32)|0);
      var $75=HEAPF32[(($masking_adj130)>>2)];
      var $conv131=$75;
      var $mul132=($conv131)*(0.9);
      var $conv133=$mul132;
      var $call134=_lame_set_maskingadjust_short($73, $conv133);
      label = 42; break;
    case 39: 
      var $76=$gfp_addr;
      var $call136=_lame_get_maskingadjust_short($76);
      var $sub137=$call136;
      var $conv138=$sub137;
      var $call139=Math.abs($conv138);
      var $cmp140=$call139 > 0;
      if ($cmp140) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $77=$gfp_addr;
      var $78=$r;
      var $arrayidx143=((5349012+($78)*(52))|0);
      var $masking_adj144=(($arrayidx143+32)|0);
      var $79=HEAPF32[(($masking_adj144)>>2)];
      var $conv145=$79;
      var $mul146=($conv145)*(0.9);
      var $conv147=$mul146;
      var $call148=_lame_set_maskingadjust_short($77, $conv147);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 49; break;
    case 43: 
      var $80=$enforce_addr;
      var $tobool152=(($80)|0)!=0;
      if ($tobool152) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $81=$gfp_addr;
      var $82=$r;
      var $arrayidx154=((5349012+($82)*(52))|0);
      var $masking_adj155=(($arrayidx154+32)|0);
      var $83=HEAPF32[(($masking_adj155)>>2)];
      var $conv156=$83;
      var $mul157=($conv156)*(1.1);
      var $conv158=$mul157;
      var $call159=_lame_set_maskingadjust_short($81, $conv158);
      label = 48; break;
    case 45: 
      var $84=$gfp_addr;
      var $call161=_lame_get_maskingadjust_short($84);
      var $sub162=$call161;
      var $conv163=$sub162;
      var $call164=Math.abs($conv163);
      var $cmp165=$call164 > 0;
      if ($cmp165) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $85=$gfp_addr;
      var $86=$r;
      var $arrayidx168=((5349012+($86)*(52))|0);
      var $masking_adj169=(($arrayidx168+32)|0);
      var $87=HEAPF32[(($masking_adj169)>>2)];
      var $conv170=$87;
      var $mul171=($conv170)*(1.1);
      var $conv172=$mul171;
      var $call173=_lame_set_maskingadjust_short($85, $conv172);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $88=$enforce_addr;
      var $tobool177=(($88)|0)!=0;
      if ($tobool177) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $89=$gfp_addr;
      var $90=$r;
      var $arrayidx179=((5349012+($90)*(52))|0);
      var $ath_lower=(($arrayidx179+36)|0);
      var $91=HEAPF32[(($ath_lower)>>2)];
      var $call180=_lame_set_ATHlower($89, $91);
      label = 54; break;
    case 51: 
      var $92=$gfp_addr;
      var $call182=_lame_get_ATHlower($92);
      var $sub183=$call182;
      var $conv184=$sub183;
      var $call185=Math.abs($conv184);
      var $cmp186=$call185 > 0;
      if ($cmp186) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $93=$gfp_addr;
      var $94=$r;
      var $arrayidx189=((5349012+($94)*(52))|0);
      var $ath_lower190=(($arrayidx189+36)|0);
      var $95=HEAPF32[(($ath_lower190)>>2)];
      var $call191=_lame_set_ATHlower($93, $95);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $96=$enforce_addr;
      var $tobool194=(($96)|0)!=0;
      if ($tobool194) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $97=$gfp_addr;
      var $98=$r;
      var $arrayidx196=((5349012+($98)*(52))|0);
      var $ath_curve=(($arrayidx196+40)|0);
      var $99=HEAPF32[(($ath_curve)>>2)];
      var $call197=_lame_set_ATHcurve($97, $99);
      label = 59; break;
    case 56: 
      var $100=$gfp_addr;
      var $call199=_lame_get_ATHcurve($100);
      var $sub200=($call199)+(1);
      var $conv201=$sub200;
      var $call202=Math.abs($conv201);
      var $cmp203=$call202 > 0;
      if ($cmp203) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $101=$gfp_addr;
      var $102=$r;
      var $arrayidx206=((5349012+($102)*(52))|0);
      var $ath_curve207=(($arrayidx206+40)|0);
      var $103=HEAPF32[(($ath_curve207)>>2)];
      var $call208=_lame_set_ATHcurve($101, $103);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $104=$enforce_addr;
      var $tobool211=(($104)|0)!=0;
      if ($tobool211) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $105=$gfp_addr;
      var $106=$r;
      var $arrayidx213=((5349012+($106)*(52))|0);
      var $interch=(($arrayidx213+44)|0);
      var $107=HEAPF32[(($interch)>>2)];
      var $call214=_lame_set_interChRatio($105, $107);
      label = 64; break;
    case 61: 
      var $108=$gfp_addr;
      var $call216=_lame_get_interChRatio($108);
      var $sub217=($call216)+(1);
      var $conv218=$sub217;
      var $call219=Math.abs($conv218);
      var $cmp220=$call219 > 0;
      if ($cmp220) { label = 63; break; } else { label = 62; break; }
    case 62: 
      var $109=$gfp_addr;
      var $110=$r;
      var $arrayidx223=((5349012+($110)*(52))|0);
      var $interch224=(($arrayidx223+44)|0);
      var $111=HEAPF32[(($interch224)>>2)];
      var $call225=_lame_set_interChRatio($109, $111);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $112=$r;
      var $arrayidx228=((5349012+($112)*(52))|0);
      var $abr_kbps=(($arrayidx228)|0);
      var $113=HEAP32[(($abr_kbps)>>2)];
      var $114=$r;
      var $arrayidx229=((5349012+($114)*(52))|0);
      var $abr_kbps230=(($arrayidx229)|0);
      var $115=HEAP32[(($abr_kbps230)>>2)];
      var $conv231=(($115)|0);
      var $div=($conv231)/(320);
      var $mul232=($div)*(5);
      var $conv233=$mul232;
      var $116=$gfp_addr;
      var $internal_flags=(($116+288)|0);
      var $117=HEAP32[(($internal_flags)>>2)];
      var $cfg=(($117+16)|0);
      var $minval=(($cfg+264)|0);
      HEAPF32[(($minval)>>2)]=$conv233;
      var $118=$preset_addr;

      return $118;
    default: assert(0, "bad label: " + label);
  }

}
_apply_abr_preset["X"]=1;

function _get_vbr_preset($v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $v_addr;
      $v_addr=$v;
      var $0=$v_addr;
      if ((($0)|0)==4 | (($0)|0)==1) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
      
    case 3: 
      $retval=((5248892)|0);
      label = 5; break;
    case 4: 
      $retval=((5248144)|0);
      label = 5; break;
    case 5: 
      var $1=$retval;

      return $1;
    default: assert(0, "bad label: " + label);
  }

}


function _min_int($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $1=$b_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$a_addr;
      $retval=$2;
      label = 5; break;
    case 4: 
      var $3=$b_addr;
      $retval=$3;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _max_int($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $1=$b_addr;
      var $cmp=(($0)|0) > (($1)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$a_addr;
      $retval=$2;
      label = 5; break;
    case 4: 
      var $3=$b_addr;
      $retval=$3;
      label = 5; break;
    case 5: 
      var $4=$retval;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _apply_vbr_preset($gfp, $a, $enforce) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 136)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $a_addr;
      var $enforce_addr;
      var $vbr_preset;
      var $x;
      var $p=__stackBase__;
      var $q=(__stackBase__)+(68);
      var $set;
      var $nsp;
      var $val;
      var $sf21mod;
      $gfp_addr=$gfp;
      $a_addr=$a;
      $enforce_addr=$enforce;
      var $0=$gfp_addr;
      var $call=_lame_get_VBR($0);
      var $call1=_get_vbr_preset($call);
      $vbr_preset=$call1;
      var $1=$gfp_addr;
      var $VBR_q_frac=(($1+160)|0);
      var $2=HEAPF32[(($VBR_q_frac)>>2)];
      $x=$2;
      var $3=$a_addr;
      var $4=$vbr_preset;
      var $arrayidx=(($4+($3)*(68))|0);
      var $5=$p;
      var $6=$arrayidx;
      assert(68 % 1 === 0);for (var $$src = $6>>2, $$dest = $5>>2, $$stop = $$src + 17; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $7=$a_addr;
      var $add=((($7)+(1))|0);
      var $8=$vbr_preset;
      var $arrayidx2=(($8+($add)*(68))|0);
      var $9=$q;
      var $10=$arrayidx2;
      assert(68 % 1 === 0);for (var $$src = $10>>2, $$dest = $9>>2, $$stop = $$src + 17; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      $set=$p;
      var $vbr_q=(($p)|0);
      var $11=HEAP32[(($vbr_q)>>2)];
      var $quant_comp=(($p+4)|0);
      var $12=HEAP32[(($quant_comp)>>2)];
      var $quant_comp_s=(($p+8)|0);
      var $13=HEAP32[(($quant_comp_s)>>2)];
      var $expY=(($p+12)|0);
      var $14=HEAP32[(($expY)>>2)];
      var $st_lrm=(($p+16)|0);
      var $15=HEAPF32[(($st_lrm)>>2)];
      var $16=$x;
      var $st_lrm3=(($q+16)|0);
      var $17=HEAPF32[(($st_lrm3)>>2)];
      var $st_lrm4=(($p+16)|0);
      var $18=HEAPF32[(($st_lrm4)>>2)];
      var $sub=($17)-($18);
      var $mul=($16)*($sub);
      var $add5=($15)+($mul);
      var $st_lrm6=(($p+16)|0);
      HEAPF32[(($st_lrm6)>>2)]=$add5;
      var $st_s=(($p+20)|0);
      var $19=HEAPF32[(($st_s)>>2)];
      var $20=$x;
      var $st_s7=(($q+20)|0);
      var $21=HEAPF32[(($st_s7)>>2)];
      var $st_s8=(($p+20)|0);
      var $22=HEAPF32[(($st_s8)>>2)];
      var $sub9=($21)-($22);
      var $mul10=($20)*($sub9);
      var $add11=($19)+($mul10);
      var $st_s12=(($p+20)|0);
      HEAPF32[(($st_s12)>>2)]=$add11;
      var $masking_adj=(($p+24)|0);
      var $23=HEAPF32[(($masking_adj)>>2)];
      var $24=$x;
      var $masking_adj13=(($q+24)|0);
      var $25=HEAPF32[(($masking_adj13)>>2)];
      var $masking_adj14=(($p+24)|0);
      var $26=HEAPF32[(($masking_adj14)>>2)];
      var $sub15=($25)-($26);
      var $mul16=($24)*($sub15);
      var $add17=($23)+($mul16);
      var $masking_adj18=(($p+24)|0);
      HEAPF32[(($masking_adj18)>>2)]=$add17;
      var $masking_adj_short=(($p+28)|0);
      var $27=HEAPF32[(($masking_adj_short)>>2)];
      var $28=$x;
      var $masking_adj_short19=(($q+28)|0);
      var $29=HEAPF32[(($masking_adj_short19)>>2)];
      var $masking_adj_short20=(($p+28)|0);
      var $30=HEAPF32[(($masking_adj_short20)>>2)];
      var $sub21=($29)-($30);
      var $mul22=($28)*($sub21);
      var $add23=($27)+($mul22);
      var $masking_adj_short24=(($p+28)|0);
      HEAPF32[(($masking_adj_short24)>>2)]=$add23;
      var $ath_lower=(($p+32)|0);
      var $31=HEAPF32[(($ath_lower)>>2)];
      var $32=$x;
      var $ath_lower25=(($q+32)|0);
      var $33=HEAPF32[(($ath_lower25)>>2)];
      var $ath_lower26=(($p+32)|0);
      var $34=HEAPF32[(($ath_lower26)>>2)];
      var $sub27=($33)-($34);
      var $mul28=($32)*($sub27);
      var $add29=($31)+($mul28);
      var $ath_lower30=(($p+32)|0);
      HEAPF32[(($ath_lower30)>>2)]=$add29;
      var $ath_curve=(($p+36)|0);
      var $35=HEAPF32[(($ath_curve)>>2)];
      var $36=$x;
      var $ath_curve31=(($q+36)|0);
      var $37=HEAPF32[(($ath_curve31)>>2)];
      var $ath_curve32=(($p+36)|0);
      var $38=HEAPF32[(($ath_curve32)>>2)];
      var $sub33=($37)-($38);
      var $mul34=($36)*($sub33);
      var $add35=($35)+($mul34);
      var $ath_curve36=(($p+36)|0);
      HEAPF32[(($ath_curve36)>>2)]=$add35;
      var $ath_sensitivity=(($p+40)|0);
      var $39=HEAPF32[(($ath_sensitivity)>>2)];
      var $40=$x;
      var $ath_sensitivity37=(($q+40)|0);
      var $41=HEAPF32[(($ath_sensitivity37)>>2)];
      var $ath_sensitivity38=(($p+40)|0);
      var $42=HEAPF32[(($ath_sensitivity38)>>2)];
      var $sub39=($41)-($42);
      var $mul40=($40)*($sub39);
      var $add41=($39)+($mul40);
      var $ath_sensitivity42=(($p+40)|0);
      HEAPF32[(($ath_sensitivity42)>>2)]=$add41;
      var $interch=(($p+44)|0);
      var $43=HEAPF32[(($interch)>>2)];
      var $44=$x;
      var $interch43=(($q+44)|0);
      var $45=HEAPF32[(($interch43)>>2)];
      var $interch44=(($p+44)|0);
      var $46=HEAPF32[(($interch44)>>2)];
      var $sub45=($45)-($46);
      var $mul46=($44)*($sub45);
      var $add47=($43)+($mul46);
      var $interch48=(($p+44)|0);
      HEAPF32[(($interch48)>>2)]=$add47;
      var $safejoint=(($p+48)|0);
      var $47=HEAP32[(($safejoint)>>2)];
      var $sfb21mod=(($p+52)|0);
      var $48=HEAP32[(($sfb21mod)>>2)];
      var $conv=(($48)|0);
      var $49=$x;
      var $sfb21mod49=(($q+52)|0);
      var $50=HEAP32[(($sfb21mod49)>>2)];
      var $sfb21mod50=(($p+52)|0);
      var $51=HEAP32[(($sfb21mod50)>>2)];
      var $sub51=((($50)-($51))|0);
      var $conv52=(($sub51)|0);
      var $mul53=($49)*($conv52);
      var $add54=($conv)+($mul53);
      var $conv55=(($add54)&-1);
      var $sfb21mod56=(($p+52)|0);
      HEAP32[(($sfb21mod56)>>2)]=$conv55;
      var $msfix=(($p+56)|0);
      var $52=HEAPF32[(($msfix)>>2)];
      var $53=$x;
      var $msfix57=(($q+56)|0);
      var $54=HEAPF32[(($msfix57)>>2)];
      var $msfix58=(($p+56)|0);
      var $55=HEAPF32[(($msfix58)>>2)];
      var $sub59=($54)-($55);
      var $mul60=($53)*($sub59);
      var $add61=($52)+($mul60);
      var $msfix62=(($p+56)|0);
      HEAPF32[(($msfix62)>>2)]=$add61;
      var $minval=(($p+60)|0);
      var $56=HEAPF32[(($minval)>>2)];
      var $57=$x;
      var $minval63=(($q+60)|0);
      var $58=HEAPF32[(($minval63)>>2)];
      var $minval64=(($p+60)|0);
      var $59=HEAPF32[(($minval64)>>2)];
      var $sub65=($58)-($59);
      var $mul66=($57)*($sub65);
      var $add67=($56)+($mul66);
      var $minval68=(($p+60)|0);
      HEAPF32[(($minval68)>>2)]=$add67;
      var $ath_fixpoint=(($p+64)|0);
      var $60=HEAPF32[(($ath_fixpoint)>>2)];
      var $61=$x;
      var $ath_fixpoint69=(($q+64)|0);
      var $62=HEAPF32[(($ath_fixpoint69)>>2)];
      var $ath_fixpoint70=(($p+64)|0);
      var $63=HEAPF32[(($ath_fixpoint70)>>2)];
      var $sub71=($62)-($63);
      var $mul72=($61)*($sub71);
      var $add73=($60)+($mul72);
      var $ath_fixpoint74=(($p+64)|0);
      HEAPF32[(($ath_fixpoint74)>>2)]=$add73;
      var $64=$gfp_addr;
      var $65=$set;
      var $vbr_q75=(($65)|0);
      var $66=HEAP32[(($vbr_q75)>>2)];
      var $call76=_lame_set_VBR_q($64, $66);
      var $67=$enforce_addr;
      var $tobool=(($67)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $68=$gfp_addr;
      var $69=$set;
      var $quant_comp77=(($69+4)|0);
      var $70=HEAP32[(($quant_comp77)>>2)];
      var $call78=_lame_set_quant_comp($68, $70);
      label = 7; break;
    case 4: 
      var $71=$gfp_addr;
      var $call79=_lame_get_quant_comp($71);
      var $sub80=((($call79)+(1))|0);
      var $conv81=(($sub80)|0);
      var $call82=Math.abs($conv81);
      var $cmp=$call82 > 0;
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $72=$gfp_addr;
      var $73=$set;
      var $quant_comp85=(($73+4)|0);
      var $74=HEAP32[(($quant_comp85)>>2)];
      var $call86=_lame_set_quant_comp($72, $74);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $75=$enforce_addr;
      var $tobool88=(($75)|0)!=0;
      if ($tobool88) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $76=$gfp_addr;
      var $77=$set;
      var $quant_comp_s90=(($77+8)|0);
      var $78=HEAP32[(($quant_comp_s90)>>2)];
      var $call91=_lame_set_quant_comp_short($76, $78);
      label = 12; break;
    case 9: 
      var $79=$gfp_addr;
      var $call93=_lame_get_quant_comp_short($79);
      var $sub94=((($call93)+(1))|0);
      var $conv95=(($sub94)|0);
      var $call96=Math.abs($conv95);
      var $cmp97=$call96 > 0;
      if ($cmp97) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $80=$gfp_addr;
      var $81=$set;
      var $quant_comp_s100=(($81+8)|0);
      var $82=HEAP32[(($quant_comp_s100)>>2)];
      var $call101=_lame_set_quant_comp_short($80, $82);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $83=$set;
      var $expY104=(($83+12)|0);
      var $84=HEAP32[(($expY104)>>2)];
      var $tobool105=(($84)|0)!=0;
      if ($tobool105) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $85=$gfp_addr;
      var $86=$set;
      var $expY107=(($86+12)|0);
      var $87=HEAP32[(($expY107)>>2)];
      var $call108=_lame_set_experimentalY($85, $87);
      label = 14; break;
    case 14: 
      var $88=$enforce_addr;
      var $tobool110=(($88)|0)!=0;
      if ($tobool110) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $89=$gfp_addr;
      var $90=$set;
      var $st_lrm112=(($90+16)|0);
      var $91=HEAPF32[(($st_lrm112)>>2)];
      var $call113=_lame_set_short_threshold_lrm($89, $91);
      label = 19; break;
    case 16: 
      var $92=$gfp_addr;
      var $call115=_lame_get_short_threshold_lrm($92);
      var $sub116=($call115)+(1);
      var $conv117=$sub116;
      var $call118=Math.abs($conv117);
      var $cmp119=$call118 > 0;
      if ($cmp119) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $93=$gfp_addr;
      var $94=$set;
      var $st_lrm122=(($94+16)|0);
      var $95=HEAPF32[(($st_lrm122)>>2)];
      var $call123=_lame_set_short_threshold_lrm($93, $95);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $96=$enforce_addr;
      var $tobool126=(($96)|0)!=0;
      if ($tobool126) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $97=$gfp_addr;
      var $98=$set;
      var $st_s128=(($98+20)|0);
      var $99=HEAPF32[(($st_s128)>>2)];
      var $call129=_lame_set_short_threshold_s($97, $99);
      label = 24; break;
    case 21: 
      var $100=$gfp_addr;
      var $call131=_lame_get_short_threshold_s($100);
      var $sub132=($call131)+(1);
      var $conv133=$sub132;
      var $call134=Math.abs($conv133);
      var $cmp135=$call134 > 0;
      if ($cmp135) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $101=$gfp_addr;
      var $102=$set;
      var $st_s138=(($102+20)|0);
      var $103=HEAPF32[(($st_s138)>>2)];
      var $call139=_lame_set_short_threshold_s($101, $103);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $104=$enforce_addr;
      var $tobool142=(($104)|0)!=0;
      if ($tobool142) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $105=$gfp_addr;
      var $106=$set;
      var $masking_adj144=(($106+24)|0);
      var $107=HEAPF32[(($masking_adj144)>>2)];
      var $call145=_lame_set_maskingadjust($105, $107);
      label = 29; break;
    case 26: 
      var $108=$gfp_addr;
      var $call147=_lame_get_maskingadjust($108);
      var $sub148=$call147;
      var $conv149=$sub148;
      var $call150=Math.abs($conv149);
      var $cmp151=$call150 > 0;
      if ($cmp151) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $109=$gfp_addr;
      var $110=$set;
      var $masking_adj154=(($110+24)|0);
      var $111=HEAPF32[(($masking_adj154)>>2)];
      var $call155=_lame_set_maskingadjust($109, $111);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $112=$enforce_addr;
      var $tobool158=(($112)|0)!=0;
      if ($tobool158) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $113=$gfp_addr;
      var $114=$set;
      var $masking_adj_short160=(($114+28)|0);
      var $115=HEAPF32[(($masking_adj_short160)>>2)];
      var $call161=_lame_set_maskingadjust_short($113, $115);
      label = 34; break;
    case 31: 
      var $116=$gfp_addr;
      var $call163=_lame_get_maskingadjust_short($116);
      var $sub164=$call163;
      var $conv165=$sub164;
      var $call166=Math.abs($conv165);
      var $cmp167=$call166 > 0;
      if ($cmp167) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $117=$gfp_addr;
      var $118=$set;
      var $masking_adj_short170=(($118+28)|0);
      var $119=HEAPF32[(($masking_adj_short170)>>2)];
      var $call171=_lame_set_maskingadjust_short($117, $119);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $120=$gfp_addr;
      var $call174=_lame_get_VBR($120);
      var $cmp175=(($call174)|0)==1;
      if ($cmp175) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $121=$gfp_addr;
      var $call177=_lame_get_VBR($121);
      var $cmp178=(($call177)|0)==4;
      if ($cmp178) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $122=$gfp_addr;
      var $call181=_lame_set_ATHtype($122, 5);
      label = 37; break;
    case 37: 
      var $123=$enforce_addr;
      var $tobool183=(($123)|0)!=0;
      if ($tobool183) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $124=$gfp_addr;
      var $125=$set;
      var $ath_lower185=(($125+32)|0);
      var $126=HEAPF32[(($ath_lower185)>>2)];
      var $call186=_lame_set_ATHlower($124, $126);
      label = 42; break;
    case 39: 
      var $127=$gfp_addr;
      var $call188=_lame_get_ATHlower($127);
      var $sub189=$call188;
      var $conv190=$sub189;
      var $call191=Math.abs($conv190);
      var $cmp192=$call191 > 0;
      if ($cmp192) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $128=$gfp_addr;
      var $129=$set;
      var $ath_lower195=(($129+32)|0);
      var $130=HEAPF32[(($ath_lower195)>>2)];
      var $call196=_lame_set_ATHlower($128, $130);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $131=$enforce_addr;
      var $tobool199=(($131)|0)!=0;
      if ($tobool199) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $132=$gfp_addr;
      var $133=$set;
      var $ath_curve201=(($133+36)|0);
      var $134=HEAPF32[(($ath_curve201)>>2)];
      var $call202=_lame_set_ATHcurve($132, $134);
      label = 47; break;
    case 44: 
      var $135=$gfp_addr;
      var $call204=_lame_get_ATHcurve($135);
      var $sub205=($call204)+(1);
      var $conv206=$sub205;
      var $call207=Math.abs($conv206);
      var $cmp208=$call207 > 0;
      if ($cmp208) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $136=$gfp_addr;
      var $137=$set;
      var $ath_curve211=(($137+36)|0);
      var $138=HEAPF32[(($ath_curve211)>>2)];
      var $call212=_lame_set_ATHcurve($136, $138);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $139=$enforce_addr;
      var $tobool215=(($139)|0)!=0;
      if ($tobool215) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $140=$gfp_addr;
      var $141=$set;
      var $ath_sensitivity217=(($141+40)|0);
      var $142=HEAPF32[(($ath_sensitivity217)>>2)];
      var $call218=_lame_set_athaa_sensitivity($140, $142);
      label = 52; break;
    case 49: 
      var $143=$gfp_addr;
      var $call220=_lame_get_athaa_sensitivity($143);
      var $sub221=$call220;
      var $conv222=$sub221;
      var $call223=Math.abs($conv222);
      var $cmp224=$call223 > 0;
      if ($cmp224) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $144=$gfp_addr;
      var $145=$set;
      var $ath_sensitivity227=(($145+40)|0);
      var $146=HEAPF32[(($ath_sensitivity227)>>2)];
      var $call228=_lame_set_athaa_sensitivity($144, $146);
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $147=$set;
      var $interch231=(($147+44)|0);
      var $148=HEAPF32[(($interch231)>>2)];
      var $cmp232=$148 > 0;
      if ($cmp232) { label = 53; break; } else { label = 59; break; }
    case 53: 
      var $149=$enforce_addr;
      var $tobool235=(($149)|0)!=0;
      if ($tobool235) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $150=$gfp_addr;
      var $151=$set;
      var $interch237=(($151+44)|0);
      var $152=HEAPF32[(($interch237)>>2)];
      var $call238=_lame_set_interChRatio($150, $152);
      label = 58; break;
    case 55: 
      var $153=$gfp_addr;
      var $call240=_lame_get_interChRatio($153);
      var $sub241=($call240)+(1);
      var $conv242=$sub241;
      var $call243=Math.abs($conv242);
      var $cmp244=$call243 > 0;
      if ($cmp244) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $154=$gfp_addr;
      var $155=$set;
      var $interch247=(($155+44)|0);
      var $156=HEAPF32[(($interch247)>>2)];
      var $call248=_lame_set_interChRatio($154, $156);
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $157=$set;
      var $safejoint252=(($157+48)|0);
      var $158=HEAP32[(($safejoint252)>>2)];
      var $cmp253=(($158)|0) > 0;
      if ($cmp253) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $159=$gfp_addr;
      var $160=$gfp_addr;
      var $call256=_lame_get_exp_nspsytune($160);
      var $or=$call256 | 2;
      var $call257=_lame_set_exp_nspsytune($159, $or);
      label = 61; break;
    case 61: 
      var $161=$set;
      var $sfb21mod259=(($161+52)|0);
      var $162=HEAP32[(($sfb21mod259)>>2)];
      var $cmp260=(($162)|0) > 0;
      if ($cmp260) { label = 62; break; } else { label = 65; break; }
    case 62: 
      var $163=$gfp_addr;
      var $call263=_lame_get_exp_nspsytune($163);
      $nsp=$call263;
      var $164=$nsp;
      var $shr=$164 >> 20;
      var $and=$shr & 63;
      $val=$and;
      var $165=$val;
      var $cmp264=(($165)|0)==0;
      if ($cmp264) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $166=$set;
      var $sfb21mod267=(($166+52)|0);
      var $167=HEAP32[(($sfb21mod267)>>2)];
      var $shl=$167 << 20;
      var $168=$nsp;
      var $or268=$shl | $168;
      $sf21mod=$or268;
      var $169=$gfp_addr;
      var $170=$sf21mod;
      var $call269=_lame_set_exp_nspsytune($169, $170);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $171=$enforce_addr;
      var $tobool272=(($171)|0)!=0;
      if ($tobool272) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $172=$gfp_addr;
      var $173=$set;
      var $msfix274=(($173+56)|0);
      var $174=HEAPF32[(($msfix274)>>2)];
      var $conv275=$174;
      _lame_set_msfix($172, $conv275);
      label = 70; break;
    case 67: 
      var $175=$gfp_addr;
      var $call277=_lame_get_msfix($175);
      var $sub278=($call277)+(1);
      var $conv279=$sub278;
      var $call280=Math.abs($conv279);
      var $cmp281=$call280 > 0;
      if ($cmp281) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $176=$gfp_addr;
      var $177=$set;
      var $msfix284=(($177+56)|0);
      var $178=HEAPF32[(($msfix284)>>2)];
      var $conv285=$178;
      _lame_set_msfix($176, $conv285);
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $179=$enforce_addr;
      var $cmp288=(($179)|0)==0;
      if ($cmp288) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $180=$a_addr;
      var $181=$gfp_addr;
      var $VBR_q=(($181+164)|0);
      HEAP32[(($VBR_q)>>2)]=$180;
      var $182=$x;
      var $183=$gfp_addr;
      var $VBR_q_frac291=(($183+160)|0);
      HEAPF32[(($VBR_q_frac291)>>2)]=$182;
      label = 72; break;
    case 72: 
      var $184=$set;
      var $minval293=(($184+60)|0);
      var $185=HEAPF32[(($minval293)>>2)];
      var $186=$gfp_addr;
      var $internal_flags=(($186+288)|0);
      var $187=HEAP32[(($internal_flags)>>2)];
      var $cfg=(($187+16)|0);
      var $minval294=(($cfg+264)|0);
      HEAPF32[(($minval294)>>2)]=$185;
      var $188=$set;
      var $ath_fixpoint295=(($188+64)|0);
      var $189=HEAPF32[(($ath_fixpoint295)>>2)];
      var $190=$gfp_addr;
      var $internal_flags296=(($190+288)|0);
      var $191=HEAP32[(($internal_flags296)>>2)];
      var $cfg297=(($191+16)|0);
      var $ATHfixpoint=(($cfg297+208)|0);
      HEAPF32[(($ATHfixpoint)>>2)]=$189;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_apply_vbr_preset["X"]=1;

function _L3psycho_anal_vbr($gfc, $buffer, $gr_out, $masking_ratio, $masking_MS_ratio, $percep_entropy, $percep_MS_entropy, $energy, $blocktype_d) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 21092)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $buffer_addr;
      var $gr_out_addr;
      var $masking_ratio_addr;
      var $masking_MS_ratio_addr;
      var $percep_entropy_addr;
      var $percep_MS_entropy_addr;
      var $energy_addr;
      var $blocktype_d_addr;
      var $cfg;
      var $psv;
      var $gdl;
      var $gds;
      var $plt;
      var $last_thm=__stackBase__;
      var $wsamp_l;
      var $wsamp_s;
      var $fftenergy=(__stackBase__)+(976);
      var $fftenergy_s=(__stackBase__)+(3028);
      var $wsamp_L=(__stackBase__)+(4576);
      var $wsamp_S=(__stackBase__)+(12768);
      var $eb=(__stackBase__)+(18912);
      var $thr=(__stackBase__)+(19936);
      var $sub_short_factor=(__stackBase__)+(20960);
      var $thmm;
      var $pcfact;
      var $ath_factor;
      var $const_eb;
      var $const_fftenergy_s;
      var $ns_attacks=(__stackBase__)+(21008);
      var $uselongblock=(__stackBase__)+(21072);
      var $chn;
      var $sb;
      var $sblock;
      var $n_chn_psy;
      var $ch01;
      var $force_short_block_calc;
      var $ch0161;
      var $ch0198;
      var $new_thmm=(__stackBase__)+(21080);
      var $prev_thm;
      var $t1;
      var $t2;
      var $ppe;
      var $type;
      var $mr;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $gr_out_addr=$gr_out;
      $masking_ratio_addr=$masking_ratio;
      $masking_MS_ratio_addr=$masking_MS_ratio;
      $percep_entropy_addr=$percep_entropy;
      $percep_MS_entropy_addr=$percep_MS_entropy;
      $energy_addr=$energy;
      $blocktype_d_addr=$blocktype_d;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_psy=(($1+21564)|0);
      $psv=$sv_psy;
      var $2=$gfc_addr;
      var $cd_psy=(($2+85796)|0);
      var $3=HEAP32[(($cd_psy)>>2)];
      var $l=(($3)|0);
      $gdl=$l;
      var $4=$gfc_addr;
      var $cd_psy2=(($4+85796)|0);
      var $5=HEAP32[(($cd_psy2)>>2)];
      var $s=(($5+2160)|0);
      $gds=$s;
      var $6=$cfg;
      var $analysis=(($6+124)|0);
      var $7=HEAP32[(($analysis)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$gfc_addr;
      var $pinfo=(($8+85800)|0);
      var $9=HEAP32[(($pinfo)>>2)];
      var $cond = $9;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $plt=$cond;
      $pcfact=0.6000000238418579;
      var $10=$cfg;
      var $msfix=(($10+176)|0);
      var $11=HEAPF32[(($msfix)>>2)];
      var $cmp=$11 > 0;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$cfg;
      var $ATH_offset_factor=(($12+184)|0);
      var $13=HEAPF32[(($ATH_offset_factor)>>2)];
      var $14=$gfc_addr;
      var $ATH=(($14+85792)|0);
      var $15=HEAP32[(($ATH)>>2)];
      var $adjust_factor=(($15+8)|0);
      var $16=HEAPF32[(($adjust_factor)>>2)];
      var $mul=($13)*($16);
      var $cond6 = $mul;label = 8; break;
    case 7: 
      var $cond6 = 1;label = 8; break;
    case 8: 
      var $cond6;
      $ath_factor=$cond6;
      var $arraydecay=(($eb)|0);
      $const_eb=$arraydecay;
      var $arraydecay7=(($fftenergy_s)|0);
      $const_fftenergy_s=$arraydecay7;
      var $17=$ns_attacks;
      for (var $$dest = $17>>2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $18=$cfg;
      var $mode=(($18+164)|0);
      var $19=HEAP32[(($mode)>>2)];
      var $cmp8=(($19)|0)==1;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $cond12 = 4;label = 11; break;
    case 10: 
      var $20=$cfg;
      var $channels_out=(($20+56)|0);
      var $21=HEAP32[(($channels_out)>>2)];
      var $cond12 = $21;label = 11; break;
    case 11: 
      var $cond12;
      $n_chn_psy=$cond12;
      var $arrayidx=(($last_thm)|0);
      var $22=$arrayidx;
      var $23=$psv;
      var $thm=(($23+4096)|0);
      var $arrayidx13=(($thm)|0);
      var $24=$arrayidx13;
      assert(976 % 1 === 0);for (var $$src = $24>>2, $$dest = $22>>2, $$stop = $$src + 244; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $25=$gfc_addr;
      var $26=$buffer_addr;
      var $27=$gr_out_addr;
      var $28=$masking_ratio_addr;
      var $29=$masking_MS_ratio_addr;
      var $30=$energy_addr;
      var $arraydecay14=(($sub_short_factor)|0);
      var $arraydecay15=(($ns_attacks)|0);
      var $arraydecay16=(($uselongblock)|0);
      _vbrpsy_attack_detection($25, $26, $27, $28, $29, $30, $arraydecay14, $arraydecay15, $arraydecay16);
      var $31=$cfg;
      var $arraydecay17=(($uselongblock)|0);
      _vbrpsy_compute_block_type($31, $arraydecay17);
      $chn=0;
      label = 12; break;
    case 12: 
      var $32=$chn;
      var $33=$n_chn_psy;
      var $cmp18=(($32)|0) < (($33)|0);
      if ($cmp18) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $34=$chn;
      var $and=$34 & 1;
      $ch01=$and;
      var $arraydecay19=(($wsamp_L)|0);
      var $35=$ch01;
      var $add_ptr=(($arraydecay19+($35<<12))|0);
      $wsamp_l=$add_ptr;
      var $36=$gfc_addr;
      var $37=$buffer_addr;
      var $38=$chn;
      var $39=$gr_out_addr;
      var $arraydecay20=(($fftenergy)|0);
      var $40=$wsamp_l;
      _vbrpsy_compute_fft_l($36, $37, $38, $39, $arraydecay20, $40);
      var $41=$gfc_addr;
      var $42=$gr_out_addr;
      var $43=$chn;
      var $arraydecay21=(($fftenergy)|0);
      _vbrpsy_compute_loudness_approximation_l($41, $42, $43, $arraydecay21);
      var $44=$gfc_addr;
      var $arraydecay22=(($fftenergy)|0);
      var $45=$chn;
      var $arrayidx23=(($eb+($45<<8))|0);
      var $arraydecay24=(($arrayidx23)|0);
      var $46=$chn;
      var $arrayidx25=(($thr+($46<<8))|0);
      var $arraydecay26=(($arrayidx25)|0);
      var $47=$chn;
      _vbrpsy_compute_masking_l($44, $arraydecay22, $arraydecay24, $arraydecay26, $47);
      label = 14; break;
    case 14: 
      var $48=$chn;
      var $inc=((($48)+(1))|0);
      $chn=$inc;
      label = 12; break;
    case 15: 
      var $49=$cfg;
      var $mode27=(($49+164)|0);
      var $50=HEAP32[(($mode27)>>2)];
      var $cmp28=(($50)|0)==1;
      if ($cmp28) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $arrayidx29=(($uselongblock)|0);
      var $51=HEAP32[(($arrayidx29)>>2)];
      var $arrayidx30=(($uselongblock+4)|0);
      var $52=HEAP32[(($arrayidx30)>>2)];
      var $add=((($51)+($52))|0);
      var $cmp31=(($add)|0)==2;
      if ($cmp31) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $53=$const_eb;
      var $arraydecay33=(($thr)|0);
      var $54=$gdl;
      var $mld_cb=(($54+768)|0);
      var $arraydecay34=(($mld_cb)|0);
      var $55=$gfc_addr;
      var $ATH35=(($55+85792)|0);
      var $56=HEAP32[(($ATH35)>>2)];
      var $cb_l=(($56+212)|0);
      var $arraydecay36=(($cb_l)|0);
      var $57=$ath_factor;
      var $58=$cfg;
      var $msfix37=(($58+176)|0);
      var $59=HEAPF32[(($msfix37)>>2)];
      var $60=$gdl;
      var $npart=(($60+2148)|0);
      var $61=HEAP32[(($npart)>>2)];
      _vbrpsy_compute_MS_thresholds($53, $arraydecay33, $arraydecay34, $arraydecay36, $57, $59, $61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      $chn=0;
      label = 20; break;
    case 20: 
      var $62=$chn;
      var $63=$n_chn_psy;
      var $cmp40=(($62)|0) < (($63)|0);
      if ($cmp40) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $64=$gfc_addr;
      var $65=$chn;
      var $arrayidx42=(($eb+($65<<8))|0);
      var $arraydecay43=(($arrayidx42)|0);
      var $66=$chn;
      var $arrayidx44=(($thr+($66<<8))|0);
      var $arraydecay45=(($arrayidx44)|0);
      var $67=$chn;
      _convert_partition2scalefac_l($64, $arraydecay43, $arraydecay45, $67);
      var $68=$gfc_addr;
      var $69=$chn;
      var $arrayidx46=(($eb+($69<<8))|0);
      var $arraydecay47=(($arrayidx46)|0);
      var $70=$chn;
      var $arrayidx48=(($thr+($70<<8))|0);
      var $arraydecay49=(($arrayidx48)|0);
      var $71=$chn;
      _convert_partition2scalefac_l_to_s($68, $arraydecay47, $arraydecay49, $71);
      label = 22; break;
    case 22: 
      var $72=$chn;
      var $inc51=((($72)+(1))|0);
      $chn=$inc51;
      label = 20; break;
    case 23: 
      var $73=$gfc_addr;
      var $cd_psy53=(($73+85796)|0);
      var $74=HEAP32[(($cd_psy53)>>2)];
      var $force_short_block_calc54=(($74+6500)|0);
      var $75=HEAP32[(($force_short_block_calc54)>>2)];
      $force_short_block_calc=$75;
      $sblock=0;
      label = 24; break;
    case 24: 
      var $76=$sblock;
      var $cmp56=(($76)|0) < 3;
      if ($cmp56) { label = 25; break; } else { label = 46; break; }
    case 25: 
      $chn=0;
      label = 26; break;
    case 26: 
      var $77=$chn;
      var $78=$n_chn_psy;
      var $cmp59=(($77)|0) < (($78)|0);
      if ($cmp59) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $79=$chn;
      var $and62=$79 & 1;
      $ch0161=$and62;
      var $80=$ch0161;
      var $arrayidx63=(($uselongblock+($80<<2))|0);
      var $81=HEAP32[(($arrayidx63)>>2)];
      var $tobool64=(($81)|0)!=0;
      if ($tobool64) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $82=$force_short_block_calc;
      var $tobool65=(($82)|0)!=0;
      if ($tobool65) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $83=$gfc_addr;
      var $84=$chn;
      var $85=$sblock;
      _vbrpsy_skip_masking_s($83, $84, $85);
      label = 31; break;
    case 30: 
      var $arraydecay67=(($wsamp_S)|0);
      var $86=$ch0161;
      var $add_ptr68=(($arraydecay67+($86)*(3072))|0);
      $wsamp_s=$add_ptr68;
      var $87=$gfc_addr;
      var $88=$buffer_addr;
      var $89=$chn;
      var $90=$sblock;
      var $arraydecay69=(($fftenergy_s)|0);
      var $91=$wsamp_s;
      _vbrpsy_compute_fft_s($87, $88, $89, $90, $arraydecay69, $91);
      var $92=$gfc_addr;
      var $93=$const_fftenergy_s;
      var $94=$chn;
      var $arrayidx70=(($eb+($94<<8))|0);
      var $arraydecay71=(($arrayidx70)|0);
      var $95=$chn;
      var $arrayidx72=(($thr+($95<<8))|0);
      var $arraydecay73=(($arrayidx72)|0);
      var $96=$chn;
      var $97=$sblock;
      _vbrpsy_compute_masking_s($92, $93, $arraydecay71, $arraydecay73, $96, $97);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $98=$chn;
      var $inc76=((($98)+(1))|0);
      $chn=$inc76;
      label = 26; break;
    case 33: 
      var $99=$cfg;
      var $mode78=(($99+164)|0);
      var $100=HEAP32[(($mode78)>>2)];
      var $cmp79=(($100)|0)==1;
      if ($cmp79) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $arrayidx81=(($uselongblock)|0);
      var $101=HEAP32[(($arrayidx81)>>2)];
      var $arrayidx82=(($uselongblock+4)|0);
      var $102=HEAP32[(($arrayidx82)>>2)];
      var $add83=((($101)+($102))|0);
      var $cmp84=(($add83)|0)==0;
      if ($cmp84) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $103=$const_eb;
      var $arraydecay86=(($thr)|0);
      var $104=$gds;
      var $mld_cb87=(($104+768)|0);
      var $arraydecay88=(($mld_cb87)|0);
      var $105=$gfc_addr;
      var $ATH89=(($105+85792)|0);
      var $106=HEAP32[(($ATH89)>>2)];
      var $cb_s=(($106+468)|0);
      var $arraydecay90=(($cb_s)|0);
      var $107=$ath_factor;
      var $108=$cfg;
      var $msfix91=(($108+176)|0);
      var $109=HEAPF32[(($msfix91)>>2)];
      var $110=$gds;
      var $npart92=(($110+2148)|0);
      var $111=HEAP32[(($npart92)>>2)];
      _vbrpsy_compute_MS_thresholds($103, $arraydecay86, $arraydecay88, $arraydecay90, $107, $109, $111);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      $chn=0;
      label = 38; break;
    case 38: 
      var $112=$chn;
      var $113=$n_chn_psy;
      var $cmp96=(($112)|0) < (($113)|0);
      if ($cmp96) { label = 39; break; } else { label = 44; break; }
    case 39: 
      var $114=$chn;
      var $and99=$114 & 1;
      $ch0198=$and99;
      var $115=$ch0198;
      var $arrayidx100=(($uselongblock+($115<<2))|0);
      var $116=HEAP32[(($arrayidx100)>>2)];
      var $tobool101=(($116)|0)!=0;
      if ($tobool101) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $117=$force_short_block_calc;
      var $tobool102=(($117)|0)!=0;
      if ($tobool102) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $118=$gfc_addr;
      var $119=$chn;
      var $arrayidx104=(($eb+($119<<8))|0);
      var $arraydecay105=(($arrayidx104)|0);
      var $120=$chn;
      var $arrayidx106=(($thr+($120<<8))|0);
      var $arraydecay107=(($arrayidx106)|0);
      var $121=$chn;
      var $122=$sblock;
      _convert_partition2scalefac_s($118, $arraydecay105, $arraydecay107, $121, $122);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $123=$chn;
      var $inc110=((($123)+(1))|0);
      $chn=$inc110;
      label = 38; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $124=$sblock;
      var $inc113=((($124)+(1))|0);
      $sblock=$inc113;
      label = 24; break;
    case 46: 
      $chn=0;
      label = 47; break;
    case 47: 
      var $125=$chn;
      var $126=$n_chn_psy;
      var $cmp116=(($125)|0) < (($126)|0);
      if ($cmp116) { label = 48; break; } else { label = 89; break; }
    case 48: 
      $sb=0;
      label = 49; break;
    case 49: 
      var $127=$sb;
      var $cmp119=(($127)|0) < 13;
      if ($cmp119) { label = 50; break; } else { label = 87; break; }
    case 50: 
      $sblock=0;
      label = 51; break;
    case 51: 
      var $128=$sblock;
      var $cmp122=(($128)|0) < 3;
      if ($cmp122) { label = 52; break; } else { label = 81; break; }
    case 52: 
      var $129=$sblock;
      var $130=$sb;
      var $131=$chn;
      var $132=$psv;
      var $thm124=(($132+4096)|0);
      var $arrayidx125=(($thm124+($131)*(244))|0);
      var $s126=(($arrayidx125+88)|0);
      var $arrayidx127=(($s126+($130)*(12))|0);
      var $arrayidx128=(($arrayidx127+($129<<2))|0);
      var $133=HEAPF32[(($arrayidx128)>>2)];
      $thmm=$133;
      var $134=$thmm;
      var $conv=$134;
      var $mul129=($conv)*(0.8);
      var $conv130=$mul129;
      $thmm=$conv130;
      var $135=$thmm;
      $t2=$135;
      $t1=$135;
      var $136=$sblock;
      var $cmp131=(($136)|0) > 0;
      if ($cmp131) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $137=$sblock;
      var $sub=((($137)-(1))|0);
      var $arrayidx134=(($new_thmm+($sub<<2))|0);
      var $138=HEAPF32[(($arrayidx134)>>2)];
      $prev_thm=$138;
      label = 55; break;
    case 54: 
      var $139=$sb;
      var $140=$chn;
      var $arrayidx136=(($last_thm+($140)*(244))|0);
      var $s137=(($arrayidx136+88)|0);
      var $arrayidx138=(($s137+($139)*(12))|0);
      var $arrayidx139=(($arrayidx138+8)|0);
      var $141=HEAPF32[(($arrayidx139)>>2)];
      $prev_thm=$141;
      label = 55; break;
    case 55: 
      var $142=$sblock;
      var $143=$chn;
      var $arrayidx141=(($ns_attacks+($143<<4))|0);
      var $arrayidx142=(($arrayidx141+($142<<2))|0);
      var $144=HEAP32[(($arrayidx142)>>2)];
      var $cmp143=(($144)|0) >= 2;
      if ($cmp143) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $145=$sblock;
      var $add146=((($145)+(1))|0);
      var $146=$chn;
      var $arrayidx147=(($ns_attacks+($146<<4))|0);
      var $arrayidx148=(($arrayidx147+($add146<<2))|0);
      var $147=HEAP32[(($arrayidx148)>>2)];
      var $cmp149=(($147)|0)==1;
      if ($cmp149) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $148=$prev_thm;
      var $149=$thmm;
      var $call=_NS_INTERP($148, $149, 0.36000001430511475);
      $t1=$call;
      label = 58; break;
    case 58: 
      var $150=$t1;
      var $151=$thmm;
      var $cmp153=$150 < $151;
      if ($cmp153) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $152=$t1;
      var $cond158 = $152;label = 61; break;
    case 60: 
      var $153=$thmm;
      var $cond158 = $153;label = 61; break;
    case 61: 
      var $cond158;
      $thmm=$cond158;
      var $154=$sblock;
      var $155=$chn;
      var $arrayidx159=(($ns_attacks+($155<<4))|0);
      var $arrayidx160=(($arrayidx159+($154<<2))|0);
      var $156=HEAP32[(($arrayidx160)>>2)];
      var $cmp161=(($156)|0)==1;
      if ($cmp161) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $157=$prev_thm;
      var $158=$thmm;
      var $call164=_NS_INTERP($157, $158, 0.18000000715255737);
      $t2=$call164;
      label = 73; break;
    case 63: 
      var $159=$sblock;
      var $cmp166=(($159)|0)==0;
      if ($cmp166) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $160=$chn;
      var $161=$psv;
      var $last_attacks=(($161+6216)|0);
      var $arrayidx169=(($last_attacks+($160<<2))|0);
      var $162=HEAP32[(($arrayidx169)>>2)];
      var $cmp170=(($162)|0)==3;
      if ($cmp170) { label = 67; break; } else { label = 65; break; }
    case 65: 
      var $163=$sblock;
      var $cmp173=(($163)|0) > 0;
      if ($cmp173) { label = 66; break; } else { label = 72; break; }
    case 66: 
      var $164=$sblock;
      var $sub176=((($164)-(1))|0);
      var $165=$chn;
      var $arrayidx177=(($ns_attacks+($165<<4))|0);
      var $arrayidx178=(($arrayidx177+($sub176<<2))|0);
      var $166=HEAP32[(($arrayidx178)>>2)];
      var $cmp179=(($166)|0)==3;
      if ($cmp179) { label = 67; break; } else { label = 72; break; }
    case 67: 
      var $167=$sblock;
      if ((($167)|0)==0) {
        label = 68; break;
      }
      else if ((($167)|0)==1) {
        label = 69; break;
      }
      else if ((($167)|0)==2) {
        label = 70; break;
      }
      else {
      label = 71; break;
      }
      
    case 68: 
      var $168=$sb;
      var $169=$chn;
      var $arrayidx182=(($last_thm+($169)*(244))|0);
      var $s183=(($arrayidx182+88)|0);
      var $arrayidx184=(($s183+($168)*(12))|0);
      var $arrayidx185=(($arrayidx184+4)|0);
      var $170=HEAPF32[(($arrayidx185)>>2)];
      $prev_thm=$170;
      label = 71; break;
    case 69: 
      var $171=$sb;
      var $172=$chn;
      var $arrayidx187=(($last_thm+($172)*(244))|0);
      var $s188=(($arrayidx187+88)|0);
      var $arrayidx189=(($s188+($171)*(12))|0);
      var $arrayidx190=(($arrayidx189+8)|0);
      var $173=HEAPF32[(($arrayidx190)>>2)];
      $prev_thm=$173;
      label = 71; break;
    case 70: 
      var $arrayidx192=(($new_thmm)|0);
      var $174=HEAPF32[(($arrayidx192)>>2)];
      $prev_thm=$174;
      label = 71; break;
    case 71: 
      var $175=$prev_thm;
      var $176=$thmm;
      var $call193=_NS_INTERP($175, $176, 0.18000000715255737);
      $t2=$call193;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $177=$t1;
      var $178=$thmm;
      var $cmp196=$177 < $178;
      if ($cmp196) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $179=$t1;
      var $cond201 = $179;label = 76; break;
    case 75: 
      var $180=$thmm;
      var $cond201 = $180;label = 76; break;
    case 76: 
      var $cond201;
      $thmm=$cond201;
      var $181=$t2;
      var $182=$thmm;
      var $cmp202=$181 < $182;
      if ($cmp202) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $183=$t2;
      var $cond207 = $183;label = 79; break;
    case 78: 
      var $184=$thmm;
      var $cond207 = $184;label = 79; break;
    case 79: 
      var $cond207;
      $thmm=$cond207;
      var $185=$sblock;
      var $186=$chn;
      var $arrayidx208=(($sub_short_factor+($186)*(12))|0);
      var $arrayidx209=(($arrayidx208+($185<<2))|0);
      var $187=HEAPF32[(($arrayidx209)>>2)];
      var $188=$thmm;
      var $mul210=($188)*($187);
      $thmm=$mul210;
      var $189=$thmm;
      var $190=$sblock;
      var $arrayidx211=(($new_thmm+($190<<2))|0);
      HEAPF32[(($arrayidx211)>>2)]=$189;
      label = 80; break;
    case 80: 
      var $191=$sblock;
      var $inc213=((($191)+(1))|0);
      $sblock=$inc213;
      label = 51; break;
    case 81: 
      $sblock=0;
      label = 82; break;
    case 82: 
      var $192=$sblock;
      var $cmp216=(($192)|0) < 3;
      if ($cmp216) { label = 83; break; } else { label = 85; break; }
    case 83: 
      var $193=$sblock;
      var $arrayidx219=(($new_thmm+($193<<2))|0);
      var $194=HEAPF32[(($arrayidx219)>>2)];
      var $195=$sblock;
      var $196=$sb;
      var $197=$chn;
      var $198=$psv;
      var $thm220=(($198+4096)|0);
      var $arrayidx221=(($thm220+($197)*(244))|0);
      var $s222=(($arrayidx221+88)|0);
      var $arrayidx223=(($s222+($196)*(12))|0);
      var $arrayidx224=(($arrayidx223+($195<<2))|0);
      HEAPF32[(($arrayidx224)>>2)]=$194;
      label = 84; break;
    case 84: 
      var $199=$sblock;
      var $inc226=((($199)+(1))|0);
      $sblock=$inc226;
      label = 82; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $200=$sb;
      var $inc229=((($200)+(1))|0);
      $sb=$inc229;
      label = 49; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $201=$chn;
      var $inc232=((($201)+(1))|0);
      $chn=$inc232;
      label = 47; break;
    case 89: 
      $chn=0;
      label = 90; break;
    case 90: 
      var $202=$chn;
      var $203=$n_chn_psy;
      var $cmp235=(($202)|0) < (($203)|0);
      if ($cmp235) { label = 91; break; } else { label = 93; break; }
    case 91: 
      var $204=$chn;
      var $arrayidx238=(($ns_attacks+($204<<4))|0);
      var $arrayidx239=(($arrayidx238+8)|0);
      var $205=HEAP32[(($arrayidx239)>>2)];
      var $206=$chn;
      var $207=$psv;
      var $last_attacks240=(($207+6216)|0);
      var $arrayidx241=(($last_attacks240+($206<<2))|0);
      HEAP32[(($arrayidx241)>>2)]=$205;
      label = 92; break;
    case 92: 
      var $208=$chn;
      var $inc243=((($208)+(1))|0);
      $chn=$inc243;
      label = 90; break;
    case 93: 
      var $209=$psv;
      var $210=$cfg;
      var $channels_out245=(($210+56)|0);
      var $211=HEAP32[(($channels_out245)>>2)];
      var $arraydecay246=(($uselongblock)|0);
      var $212=$blocktype_d_addr;
      _vbrpsy_apply_block_type($209, $211, $arraydecay246, $212);
      $chn=0;
      label = 94; break;
    case 94: 
      var $213=$chn;
      var $214=$n_chn_psy;
      var $cmp248=(($213)|0) < (($214)|0);
      if ($cmp248) { label = 95; break; } else { label = 108; break; }
    case 95: 
      var $215=$chn;
      var $cmp251=(($215)|0) > 1;
      if ($cmp251) { label = 96; break; } else { label = 100; break; }
    case 96: 
      var $216=$percep_MS_entropy_addr;
      var $add_ptr254=((($216)-(8))|0);
      $ppe=$add_ptr254;
      $type=0;
      var $217=$blocktype_d_addr;
      var $arrayidx255=(($217)|0);
      var $218=HEAP32[(($arrayidx255)>>2)];
      var $cmp256=(($218)|0)==2;
      if ($cmp256) { label = 98; break; } else { label = 97; break; }
    case 97: 
      var $219=$blocktype_d_addr;
      var $arrayidx259=(($219+4)|0);
      var $220=HEAP32[(($arrayidx259)>>2)];
      var $cmp260=(($220)|0)==2;
      if ($cmp260) { label = 98; break; } else { label = 99; break; }
    case 98: 
      $type=2;
      label = 99; break;
    case 99: 
      var $221=$chn;
      var $sub264=((($221)-(2))|0);
      var $222=$gr_out_addr;
      var $223=$masking_MS_ratio_addr;
      var $arrayidx265=(($223+($222)*(976))|0);
      var $arrayidx266=(($arrayidx265+($sub264)*(488))|0);
      $mr=$arrayidx266;
      label = 101; break;
    case 100: 
      var $224=$percep_entropy_addr;
      $ppe=$224;
      var $225=$chn;
      var $226=$blocktype_d_addr;
      var $arrayidx268=(($226+($225<<2))|0);
      var $227=HEAP32[(($arrayidx268)>>2)];
      $type=$227;
      var $228=$chn;
      var $229=$gr_out_addr;
      var $230=$masking_ratio_addr;
      var $arrayidx269=(($230+($229)*(976))|0);
      var $arrayidx270=(($arrayidx269+($228)*(488))|0);
      $mr=$arrayidx270;
      label = 101; break;
    case 101: 
      var $231=$type;
      var $cmp272=(($231)|0)==2;
      if ($cmp272) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $232=$mr;
      var $233=$gfc_addr;
      var $sv_qnt=(($233+84764)|0);
      var $masking_lower=(($sv_qnt+140)|0);
      var $234=HEAPF32[(($masking_lower)>>2)];
      var $call275=_pecalc_s($232, $234);
      var $235=$chn;
      var $236=$ppe;
      var $arrayidx276=(($236+($235<<2))|0);
      HEAPF32[(($arrayidx276)>>2)]=$call275;
      label = 104; break;
    case 103: 
      var $237=$mr;
      var $238=$gfc_addr;
      var $sv_qnt278=(($238+84764)|0);
      var $masking_lower279=(($sv_qnt278+140)|0);
      var $239=HEAPF32[(($masking_lower279)>>2)];
      var $call280=_pecalc_l($237, $239);
      var $240=$chn;
      var $241=$ppe;
      var $arrayidx281=(($241+($240<<2))|0);
      HEAPF32[(($arrayidx281)>>2)]=$call280;
      label = 104; break;
    case 104: 
      var $242=$plt;
      var $tobool283=(($242)|0)!=0;
      if ($tobool283) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $243=$chn;
      var $244=$ppe;
      var $arrayidx285=(($244+($243<<2))|0);
      var $245=HEAPF32[(($arrayidx285)>>2)];
      var $conv286=$245;
      var $246=$chn;
      var $247=$gr_out_addr;
      var $248=$plt;
      var $pe=(($248+189236)|0);
      var $arrayidx287=(($pe+($247<<5))|0);
      var $arrayidx288=(($arrayidx287+($246<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv286,HEAP32[(($arrayidx288)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx288)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $249=$chn;
      var $inc291=((($249)+(1))|0);
      $chn=$inc291;
      label = 94; break;
    case 108: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }

}
_L3psycho_anal_vbr["X"]=1;

function _vbrpsy_attack_detection($gfc, $buffer, $gr_out, $masking_ratio, $masking_MS_ratio, $energy, $sub_short_factor, $ns_attacks, $uselongblock) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4720)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $buffer_addr;
      var $gr_out_addr;
      var $masking_ratio_addr;
      var $masking_MS_ratio_addr;
      var $energy_addr;
      var $sub_short_factor_addr;
      var $ns_attacks_addr;
      var $uselongblock_addr;
      var $ns_hpfsmpl=__stackBase__;
      var $cfg;
      var $psv;
      var $plt;
      var $n_chn_out;
      var $n_chn_psy;
      var $chn;
      var $i;
      var $j;
      var $firbuf;
      var $sum1;
      var $sum2;
      var $attack_intensity=(__stackBase__)+(4608);
      var $en_subshort=(__stackBase__)+(4656);
      var $en_short=(__stackBase__)+(4704);
      var $pf;
      var $ns_uselongblock;
      var $l;
      var $r;
      var $pfe;
      var $p;
      var $enn;
      var $factor;
      var $x;
      var $x224;
      var $u;
      var $v;
      var $m;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $gr_out_addr=$gr_out;
      $masking_ratio_addr=$masking_ratio;
      $masking_MS_ratio_addr=$masking_MS_ratio;
      $energy_addr=$energy;
      $sub_short_factor_addr=$sub_short_factor;
      $ns_attacks_addr=$ns_attacks;
      $uselongblock_addr=$uselongblock;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_psy=(($1+21564)|0);
      $psv=$sv_psy;
      var $2=$cfg;
      var $analysis=(($2+124)|0);
      var $3=HEAP32[(($analysis)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$gfc_addr;
      var $pinfo=(($4+85800)|0);
      var $5=HEAP32[(($pinfo)>>2)];
      var $cond = $5;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $plt=$cond;
      var $6=$cfg;
      var $channels_out=(($6+56)|0);
      var $7=HEAP32[(($channels_out)>>2)];
      $n_chn_out=$7;
      var $8=$cfg;
      var $mode=(($8+164)|0);
      var $9=HEAP32[(($mode)>>2)];
      var $cmp=(($9)|0)==1;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond5 = 4;label = 8; break;
    case 7: 
      var $10=$n_chn_out;
      var $cond5 = $10;label = 8; break;
    case 8: 
      var $cond5;
      $n_chn_psy=$cond5;
      var $arrayidx=(($ns_hpfsmpl)|0);
      var $arrayidx6=(($arrayidx)|0);
      var $11=$arrayidx6;
      for (var $$dest = $11>>2, $$stop = $$dest + 1152; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $chn=0;
      label = 9; break;
    case 9: 
      var $12=$chn;
      var $13=$n_chn_out;
      var $cmp7=(($12)|0) < (($13)|0);
      if ($cmp7) { label = 10; break; } else { label = 22; break; }
    case 10: 
      var $14=$chn;
      var $15=$buffer_addr;
      var $arrayidx8=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx8)>>2)];
      var $arrayidx9=(($16+1588)|0);
      $firbuf=$arrayidx9;
      $i=0;
      label = 11; break;
    case 11: 
      var $17=$i;
      var $cmp11=(($17)|0) < 576;
      if ($cmp11) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $18=$i;
      var $add=((($18)+(10))|0);
      var $19=$firbuf;
      var $arrayidx13=(($19+($add<<2))|0);
      var $20=HEAPF32[(($arrayidx13)>>2)];
      $sum1=$20;
      $sum2=0;
      $j=0;
      label = 13; break;
    case 13: 
      var $21=$j;
      var $cmp15=(($21)|0) < 9;
      if ($cmp15) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $22=$j;
      var $arrayidx17=((5248104+($22<<2))|0);
      var $23=HEAPF32[(($arrayidx17)>>2)];
      var $24=$i;
      var $25=$j;
      var $add18=((($24)+($25))|0);
      var $26=$firbuf;
      var $arrayidx19=(($26+($add18<<2))|0);
      var $27=HEAPF32[(($arrayidx19)>>2)];
      var $28=$i;
      var $add20=((($28)+(21))|0);
      var $29=$j;
      var $sub=((($add20)-($29))|0);
      var $30=$firbuf;
      var $arrayidx21=(($30+($sub<<2))|0);
      var $31=HEAPF32[(($arrayidx21)>>2)];
      var $add22=($27)+($31);
      var $mul=($23)*($add22);
      var $32=$sum1;
      var $add23=($32)+($mul);
      $sum1=$add23;
      var $33=$j;
      var $add24=((($33)+(1))|0);
      var $arrayidx25=((5248104+($add24<<2))|0);
      var $34=HEAPF32[(($arrayidx25)>>2)];
      var $35=$i;
      var $36=$j;
      var $add26=((($35)+($36))|0);
      var $add27=((($add26)+(1))|0);
      var $37=$firbuf;
      var $arrayidx28=(($37+($add27<<2))|0);
      var $38=HEAPF32[(($arrayidx28)>>2)];
      var $39=$i;
      var $add29=((($39)+(21))|0);
      var $40=$j;
      var $sub30=((($add29)-($40))|0);
      var $sub31=((($sub30)-(1))|0);
      var $41=$firbuf;
      var $arrayidx32=(($41+($sub31<<2))|0);
      var $42=HEAPF32[(($arrayidx32)>>2)];
      var $add33=($38)+($42);
      var $mul34=($34)*($add33);
      var $43=$sum2;
      var $add35=($43)+($mul34);
      $sum2=$add35;
      label = 15; break;
    case 15: 
      var $44=$j;
      var $add36=((($44)+(2))|0);
      $j=$add36;
      label = 13; break;
    case 16: 
      var $45=$sum1;
      var $46=$sum2;
      var $add37=($45)+($46);
      var $47=$i;
      var $48=$chn;
      var $arrayidx38=(($ns_hpfsmpl+($48)*(2304))|0);
      var $arrayidx39=(($arrayidx38+($47<<2))|0);
      HEAPF32[(($arrayidx39)>>2)]=$add37;
      label = 17; break;
    case 17: 
      var $49=$i;
      var $inc=((($49)+(1))|0);
      $i=$inc;
      label = 11; break;
    case 18: 
      var $50=$chn;
      var $51=$gr_out_addr;
      var $52=$masking_ratio_addr;
      var $arrayidx42=(($52+($51)*(976))|0);
      var $arrayidx43=(($arrayidx42+($50)*(488))|0);
      var $en=(($arrayidx43+244)|0);
      var $53=$chn;
      var $54=$psv;
      var $en44=(($54+5072)|0);
      var $arrayidx45=(($en44+($53)*(244))|0);
      var $55=$en;
      var $56=$arrayidx45;
      assert(244 % 1 === 0);for (var $$src = $56>>2, $$dest = $55>>2, $$stop = $$src + 61; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $57=$chn;
      var $58=$gr_out_addr;
      var $59=$masking_ratio_addr;
      var $arrayidx46=(($59+($58)*(976))|0);
      var $arrayidx47=(($arrayidx46+($57)*(488))|0);
      var $thm=(($arrayidx47)|0);
      var $60=$chn;
      var $61=$psv;
      var $thm48=(($61+4096)|0);
      var $arrayidx49=(($thm48+($60)*(244))|0);
      var $62=$thm;
      var $63=$arrayidx49;
      assert(244 % 1 === 0);for (var $$src = $63>>2, $$dest = $62>>2, $$stop = $$src + 61; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $64=$n_chn_psy;
      var $cmp50=(($64)|0) > 2;
      if ($cmp50) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $65=$chn;
      var $66=$gr_out_addr;
      var $67=$masking_MS_ratio_addr;
      var $arrayidx51=(($67+($66)*(976))|0);
      var $arrayidx52=(($arrayidx51+($65)*(488))|0);
      var $en53=(($arrayidx52+244)|0);
      var $68=$chn;
      var $add54=((($68)+(2))|0);
      var $69=$psv;
      var $en55=(($69+5072)|0);
      var $arrayidx56=(($en55+($add54)*(244))|0);
      var $70=$en53;
      var $71=$arrayidx56;
      assert(244 % 1 === 0);for (var $$src = $71>>2, $$dest = $70>>2, $$stop = $$src + 61; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $72=$chn;
      var $73=$gr_out_addr;
      var $74=$masking_MS_ratio_addr;
      var $arrayidx57=(($74+($73)*(976))|0);
      var $arrayidx58=(($arrayidx57+($72)*(488))|0);
      var $thm59=(($arrayidx58)|0);
      var $75=$chn;
      var $add60=((($75)+(2))|0);
      var $76=$psv;
      var $thm61=(($76+4096)|0);
      var $arrayidx62=(($thm61+($add60)*(244))|0);
      var $77=$thm59;
      var $78=$arrayidx62;
      assert(244 % 1 === 0);for (var $$src = $78>>2, $$dest = $77>>2, $$stop = $$src + 61; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $79=$chn;
      var $inc64=((($79)+(1))|0);
      $chn=$inc64;
      label = 9; break;
    case 22: 
      $chn=0;
      label = 23; break;
    case 23: 
      var $80=$chn;
      var $81=$n_chn_psy;
      var $cmp67=(($80)|0) < (($81)|0);
      if ($cmp67) { label = 24; break; } else { label = 110; break; }
    case 24: 
      var $82=$en_short;
      HEAP32[(($82)>>2)]=0; HEAP32[((($82)+(4))>>2)]=0; HEAP32[((($82)+(8))>>2)]=0; HEAP32[((($82)+(12))>>2)]=0;
      var $83=$chn;
      var $and=$83 & 1;
      var $arrayidx69=(($ns_hpfsmpl+($and)*(2304))|0);
      var $arraydecay=(($arrayidx69)|0);
      $pf=$arraydecay;
      $ns_uselongblock=1;
      var $84=$chn;
      var $cmp70=(($84)|0)==2;
      if ($cmp70) { label = 25; break; } else { label = 30; break; }
    case 25: 
      $i=0;
      $j=576;
      label = 26; break;
    case 26: 
      var $85=$j;
      var $cmp73=(($85)|0) > 0;
      if ($cmp73) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $86=$i;
      var $arrayidx75=(($ns_hpfsmpl)|0);
      var $arrayidx76=(($arrayidx75+($86<<2))|0);
      var $87=HEAPF32[(($arrayidx76)>>2)];
      $l=$87;
      var $88=$i;
      var $arrayidx77=(($ns_hpfsmpl+2304)|0);
      var $arrayidx78=(($arrayidx77+($88<<2))|0);
      var $89=HEAPF32[(($arrayidx78)>>2)];
      $r=$89;
      var $90=$l;
      var $91=$r;
      var $add79=($90)+($91);
      var $92=$i;
      var $arrayidx80=(($ns_hpfsmpl)|0);
      var $arrayidx81=(($arrayidx80+($92<<2))|0);
      HEAPF32[(($arrayidx81)>>2)]=$add79;
      var $93=$l;
      var $94=$r;
      var $sub82=($93)-($94);
      var $95=$i;
      var $arrayidx83=(($ns_hpfsmpl+2304)|0);
      var $arrayidx84=(($arrayidx83+($95<<2))|0);
      HEAPF32[(($arrayidx84)>>2)]=$sub82;
      label = 28; break;
    case 28: 
      var $96=$i;
      var $inc86=((($96)+(1))|0);
      $i=$inc86;
      var $97=$j;
      var $dec=((($97)-(1))|0);
      $j=$dec;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 
      $i=0;
      label = 31; break;
    case 31: 
      var $98=$i;
      var $cmp90=(($98)|0) < 3;
      if ($cmp90) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $99=$i;
      var $add92=((($99)+(6))|0);
      var $100=$chn;
      var $101=$psv;
      var $last_en_subshort=(($101+6072)|0);
      var $arrayidx93=(($last_en_subshort+($100)*(36))|0);
      var $arrayidx94=(($arrayidx93+($add92<<2))|0);
      var $102=HEAPF32[(($arrayidx94)>>2)];
      var $103=$i;
      var $arrayidx95=(($en_subshort+($103<<2))|0);
      HEAPF32[(($arrayidx95)>>2)]=$102;
      var $104=$i;
      var $arrayidx96=(($en_subshort+($104<<2))|0);
      var $105=HEAPF32[(($arrayidx96)>>2)];
      var $106=$i;
      var $add97=((($106)+(4))|0);
      var $107=$chn;
      var $108=$psv;
      var $last_en_subshort98=(($108+6072)|0);
      var $arrayidx99=(($last_en_subshort98+($107)*(36))|0);
      var $arrayidx100=(($arrayidx99+($add97<<2))|0);
      var $109=HEAPF32[(($arrayidx100)>>2)];
      var $div=($105)/($109);
      var $110=$i;
      var $arrayidx101=(($attack_intensity+($110<<2))|0);
      HEAPF32[(($arrayidx101)>>2)]=$div;
      var $111=$i;
      var $arrayidx102=(($en_subshort+($111<<2))|0);
      var $112=HEAPF32[(($arrayidx102)>>2)];
      var $arrayidx103=(($en_short)|0);
      var $113=HEAPF32[(($arrayidx103)>>2)];
      var $add104=($113)+($112);
      HEAPF32[(($arrayidx103)>>2)]=$add104;
      label = 33; break;
    case 33: 
      var $114=$i;
      var $inc106=((($114)+(1))|0);
      $i=$inc106;
      label = 31; break;
    case 34: 
      $i=0;
      label = 35; break;
    case 35: 
      var $115=$i;
      var $cmp109=(($115)|0) < 9;
      if ($cmp109) { label = 36; break; } else { label = 50; break; }
    case 36: 
      var $116=$pf;
      var $add_ptr=(($116+256)|0);
      $pfe=$add_ptr;
      $p=1;
      label = 37; break;
    case 37: 
      var $117=$pf;
      var $118=$pfe;
      var $cmp112=(($117)>>>0) < (($118)>>>0);
      if ($cmp112) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $119=$p;
      var $conv=$119;
      var $120=$pf;
      var $121=HEAPF32[(($120)>>2)];
      var $conv114=$121;
      var $call=Math.abs($conv114);
      var $cmp115=$conv < $call;
      if ($cmp115) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $122=$pf;
      var $123=HEAPF32[(($122)>>2)];
      var $conv118=$123;
      var $call119=Math.abs($conv118);
      var $conv120=$call119;
      $p=$conv120;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $124=$pf;
      var $incdec_ptr=(($124+4)|0);
      $pf=$incdec_ptr;
      label = 37; break;
    case 42: 
      var $125=$p;
      var $126=$i;
      var $add124=((($126)+(3))|0);
      var $arrayidx125=(($en_subshort+($add124<<2))|0);
      HEAPF32[(($arrayidx125)>>2)]=$125;
      var $127=$i;
      var $128=$chn;
      var $129=$psv;
      var $last_en_subshort126=(($129+6072)|0);
      var $arrayidx127=(($last_en_subshort126+($128)*(36))|0);
      var $arrayidx128=(($arrayidx127+($127<<2))|0);
      HEAPF32[(($arrayidx128)>>2)]=$125;
      var $130=$p;
      var $131=$i;
      var $div129=((((($131)|0))/(3))&-1);
      var $add130=((($div129)+(1))|0);
      var $arrayidx131=(($en_short+($add130<<2))|0);
      var $132=HEAPF32[(($arrayidx131)>>2)];
      var $add132=($132)+($130);
      HEAPF32[(($arrayidx131)>>2)]=$add132;
      var $133=$p;
      var $134=$i;
      var $add133=((($134)+(3))|0);
      var $sub134=((($add133)-(2))|0);
      var $arrayidx135=(($en_subshort+($sub134<<2))|0);
      var $135=HEAPF32[(($arrayidx135)>>2)];
      var $cmp136=$133 > $135;
      if ($cmp136) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $136=$p;
      var $137=$i;
      var $add139=((($137)+(3))|0);
      var $sub140=((($add139)-(2))|0);
      var $arrayidx141=(($en_subshort+($sub140<<2))|0);
      var $138=HEAPF32[(($arrayidx141)>>2)];
      var $div142=($136)/($138);
      $p=$div142;
      label = 48; break;
    case 44: 
      var $139=$i;
      var $add143=((($139)+(3))|0);
      var $sub144=((($add143)-(2))|0);
      var $arrayidx145=(($en_subshort+($sub144<<2))|0);
      var $140=HEAPF32[(($arrayidx145)>>2)];
      var $141=$p;
      var $mul146=($141)*(10);
      var $cmp147=$140 > $mul146;
      if ($cmp147) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $142=$i;
      var $add150=((($142)+(3))|0);
      var $sub151=((($add150)-(2))|0);
      var $arrayidx152=(($en_subshort+($sub151<<2))|0);
      var $143=HEAPF32[(($arrayidx152)>>2)];
      var $144=$p;
      var $mul153=($144)*(10);
      var $div154=($143)/($mul153);
      $p=$div154;
      label = 47; break;
    case 46: 
      $p=0;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $145=$p;
      var $146=$i;
      var $add158=((($146)+(3))|0);
      var $arrayidx159=(($attack_intensity+($add158<<2))|0);
      HEAPF32[(($arrayidx159)>>2)]=$145;
      label = 49; break;
    case 49: 
      var $147=$i;
      var $inc161=((($147)+(1))|0);
      $i=$inc161;
      label = 35; break;
    case 50: 
      $i=0;
      label = 51; break;
    case 51: 
      var $148=$i;
      var $cmp164=(($148)|0) < 3;
      if ($cmp164) { label = 52; break; } else { label = 58; break; }
    case 52: 
      var $149=$i;
      var $mul167=((($149)*(3))&-1);
      var $add168=((($mul167)+(3))|0);
      var $arrayidx169=(($en_subshort+($add168<<2))|0);
      var $150=HEAPF32[(($arrayidx169)>>2)];
      var $151=$i;
      var $mul170=((($151)*(3))&-1);
      var $add171=((($mul170)+(4))|0);
      var $arrayidx172=(($en_subshort+($add171<<2))|0);
      var $152=HEAPF32[(($arrayidx172)>>2)];
      var $add173=($150)+($152);
      var $153=$i;
      var $mul174=((($153)*(3))&-1);
      var $add175=((($mul174)+(5))|0);
      var $arrayidx176=(($en_subshort+($add175<<2))|0);
      var $154=HEAPF32[(($arrayidx176)>>2)];
      var $add177=($add173)+($154);
      $enn=$add177;
      $factor=1;
      var $155=$i;
      var $mul178=((($155)*(3))&-1);
      var $add179=((($mul178)+(5))|0);
      var $arrayidx180=(($en_subshort+($add179<<2))|0);
      var $156=HEAPF32[(($arrayidx180)>>2)];
      var $mul181=($156)*(6);
      var $157=$enn;
      var $cmp182=$mul181 < $157;
      if ($cmp182) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $158=$factor;
      var $mul185=($158)*(0.5);
      $factor=$mul185;
      var $159=$i;
      var $mul186=((($159)*(3))&-1);
      var $add187=((($mul186)+(4))|0);
      var $arrayidx188=(($en_subshort+($add187<<2))|0);
      var $160=HEAPF32[(($arrayidx188)>>2)];
      var $mul189=($160)*(6);
      var $161=$enn;
      var $cmp190=$mul189 < $161;
      if ($cmp190) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $162=$factor;
      var $mul193=($162)*(0.5);
      $factor=$mul193;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $163=$factor;
      var $164=$i;
      var $165=$chn;
      var $166=$sub_short_factor_addr;
      var $arrayidx196=(($166+($165)*(12))|0);
      var $arrayidx197=(($arrayidx196+($164<<2))|0);
      HEAPF32[(($arrayidx197)>>2)]=$163;
      label = 57; break;
    case 57: 
      var $167=$i;
      var $inc199=((($167)+(1))|0);
      $i=$inc199;
      label = 51; break;
    case 58: 
      var $168=$plt;
      var $tobool201=(($168)|0)!=0;
      if ($tobool201) { label = 59; break; } else { label = 66; break; }
    case 59: 
      var $arrayidx203=(($attack_intensity)|0);
      var $169=HEAPF32[(($arrayidx203)>>2)];
      $x=$169;
      $i=1;
      label = 60; break;
    case 60: 
      var $170=$i;
      var $cmp205=(($170)|0) < 12;
      if ($cmp205) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $171=$x;
      var $172=$i;
      var $arrayidx208=(($attack_intensity+($172<<2))|0);
      var $173=HEAPF32[(($arrayidx208)>>2)];
      var $cmp209=$171 < $173;
      if ($cmp209) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $174=$i;
      var $arrayidx212=(($attack_intensity+($174<<2))|0);
      var $175=HEAPF32[(($arrayidx212)>>2)];
      $x=$175;
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $176=$i;
      var $inc215=((($176)+(1))|0);
      $i=$inc215;
      label = 60; break;
    case 65: 
      var $177=$chn;
      var $178=$plt;
      var $ers_save=(($178+197108)|0);
      var $arrayidx217=(($ers_save+($177<<3))|0);
      var $179=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx217)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx217)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $180=$chn;
      var $181=$gr_out_addr;
      var $182=$plt;
      var $ers=(($182+197140)|0);
      var $arrayidx218=(($ers+($181<<5))|0);
      var $arrayidx219=(($arrayidx218+($180<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$179,HEAP32[(($arrayidx219)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx219)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $183=$x;
      var $conv220=$183;
      var $184=$chn;
      var $185=$plt;
      var $ers_save221=(($185+197108)|0);
      var $arrayidx222=(($ers_save221+($184<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv220,HEAP32[(($arrayidx222)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx222)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 66; break;
    case 66: 
      var $186=$chn;
      var $187=$gfc_addr;
      var $cd_psy=(($187+85796)|0);
      var $188=HEAP32[(($cd_psy)>>2)];
      var $attack_threshold=(($188+6480)|0);
      var $arrayidx225=(($attack_threshold+($186<<2))|0);
      var $189=HEAPF32[(($arrayidx225)>>2)];
      $x224=$189;
      $i=0;
      label = 67; break;
    case 67: 
      var $190=$i;
      var $cmp227=(($190)|0) < 12;
      if ($cmp227) { label = 68; break; } else { label = 74; break; }
    case 68: 
      var $191=$i;
      var $div230=((((($191)|0))/(3))&-1);
      var $192=$chn;
      var $193=$ns_attacks_addr;
      var $arrayidx231=(($193+($192<<4))|0);
      var $arrayidx232=(($arrayidx231+($div230<<2))|0);
      var $194=HEAP32[(($arrayidx232)>>2)];
      var $cmp233=(($194)|0)==0;
      if ($cmp233) { label = 69; break; } else { label = 72; break; }
    case 69: 
      var $195=$i;
      var $arrayidx236=(($attack_intensity+($195<<2))|0);
      var $196=HEAPF32[(($arrayidx236)>>2)];
      var $197=$x224;
      var $cmp237=$196 > $197;
      if ($cmp237) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $198=$i;
      var $rem=((($198)|0))%(3);
      var $add240=((($rem)+(1))|0);
      var $199=$i;
      var $div241=((((($199)|0))/(3))&-1);
      var $200=$chn;
      var $201=$ns_attacks_addr;
      var $arrayidx242=(($201+($200<<4))|0);
      var $arrayidx243=(($arrayidx242+($div241<<2))|0);
      HEAP32[(($arrayidx243)>>2)]=$add240;
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $202=$i;
      var $inc247=((($202)+(1))|0);
      $i=$inc247;
      label = 67; break;
    case 74: 
      $i=1;
      label = 75; break;
    case 75: 
      var $203=$i;
      var $cmp250=(($203)|0) < 4;
      if ($cmp250) { label = 76; break; } else { label = 89; break; }
    case 76: 
      var $204=$i;
      var $sub253=((($204)-(1))|0);
      var $arrayidx254=(($en_short+($sub253<<2))|0);
      var $205=HEAPF32[(($arrayidx254)>>2)];
      $u=$205;
      var $206=$i;
      var $arrayidx255=(($en_short+($206<<2))|0);
      var $207=HEAPF32[(($arrayidx255)>>2)];
      $v=$207;
      var $208=$u;
      var $209=$v;
      var $cmp256=$208 > $209;
      if ($cmp256) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $210=$u;
      var $cond261 = $210;label = 79; break;
    case 78: 
      var $211=$v;
      var $cond261 = $211;label = 79; break;
    case 79: 
      var $cond261;
      $m=$cond261;
      var $212=$m;
      var $cmp262=$212 < 40000;
      if ($cmp262) { label = 80; break; } else { label = 87; break; }
    case 80: 
      var $213=$u;
      var $214=$v;
      var $mul265=($214)*(1.7000000476837158);
      var $cmp266=$213 < $mul265;
      if ($cmp266) { label = 81; break; } else { label = 86; break; }
    case 81: 
      var $215=$v;
      var $216=$u;
      var $mul268=($216)*(1.7000000476837158);
      var $cmp269=$215 < $mul268;
      if ($cmp269) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $217=$i;
      var $cmp272=(($217)|0)==1;
      if ($cmp272) { label = 83; break; } else { label = 85; break; }
    case 83: 
      var $218=$chn;
      var $219=$ns_attacks_addr;
      var $arrayidx275=(($219+($218<<4))|0);
      var $arrayidx276=(($arrayidx275)|0);
      var $220=HEAP32[(($arrayidx276)>>2)];
      var $221=$i;
      var $222=$chn;
      var $223=$ns_attacks_addr;
      var $arrayidx277=(($223+($222<<4))|0);
      var $arrayidx278=(($arrayidx277+($221<<2))|0);
      var $224=HEAP32[(($arrayidx278)>>2)];
      var $cmp279=(($220)|0) <= (($224)|0);
      if ($cmp279) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $225=$chn;
      var $226=$ns_attacks_addr;
      var $arrayidx282=(($226+($225<<4))|0);
      var $arrayidx283=(($arrayidx282)|0);
      HEAP32[(($arrayidx283)>>2)]=0;
      label = 85; break;
    case 85: 
      var $227=$i;
      var $228=$chn;
      var $229=$ns_attacks_addr;
      var $arrayidx285=(($229+($228<<4))|0);
      var $arrayidx286=(($arrayidx285+($227<<2))|0);
      HEAP32[(($arrayidx286)>>2)]=0;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $230=$i;
      var $inc290=((($230)+(1))|0);
      $i=$inc290;
      label = 75; break;
    case 89: 
      var $231=$chn;
      var $232=$ns_attacks_addr;
      var $arrayidx292=(($232+($231<<4))|0);
      var $arrayidx293=(($arrayidx292)|0);
      var $233=HEAP32[(($arrayidx293)>>2)];
      var $234=$chn;
      var $235=$psv;
      var $last_attacks=(($235+6216)|0);
      var $arrayidx294=(($last_attacks+($234<<2))|0);
      var $236=HEAP32[(($arrayidx294)>>2)];
      var $cmp295=(($233)|0) <= (($236)|0);
      if ($cmp295) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $237=$chn;
      var $238=$ns_attacks_addr;
      var $arrayidx298=(($238+($237<<4))|0);
      var $arrayidx299=(($arrayidx298)|0);
      HEAP32[(($arrayidx299)>>2)]=0;
      label = 91; break;
    case 91: 
      var $239=$chn;
      var $240=$psv;
      var $last_attacks301=(($240+6216)|0);
      var $arrayidx302=(($last_attacks301+($239<<2))|0);
      var $241=HEAP32[(($arrayidx302)>>2)];
      var $cmp303=(($241)|0)==3;
      if ($cmp303) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $242=$chn;
      var $243=$ns_attacks_addr;
      var $arrayidx305=(($243+($242<<4))|0);
      var $arrayidx306=(($arrayidx305)|0);
      var $244=HEAP32[(($arrayidx306)>>2)];
      var $245=$chn;
      var $246=$ns_attacks_addr;
      var $arrayidx307=(($246+($245<<4))|0);
      var $arrayidx308=(($arrayidx307+4)|0);
      var $247=HEAP32[(($arrayidx308)>>2)];
      var $add309=((($244)+($247))|0);
      var $248=$chn;
      var $249=$ns_attacks_addr;
      var $arrayidx310=(($249+($248<<4))|0);
      var $arrayidx311=(($arrayidx310+8)|0);
      var $250=HEAP32[(($arrayidx311)>>2)];
      var $add312=((($add309)+($250))|0);
      var $251=$chn;
      var $252=$ns_attacks_addr;
      var $arrayidx313=(($252+($251<<4))|0);
      var $arrayidx314=(($arrayidx313+12)|0);
      var $253=HEAP32[(($arrayidx314)>>2)];
      var $add315=((($add312)+($253))|0);
      var $tobool316=(($add315)|0)!=0;
      if ($tobool316) { label = 93; break; } else { label = 103; break; }
    case 93: 
      $ns_uselongblock=0;
      var $254=$chn;
      var $255=$ns_attacks_addr;
      var $arrayidx318=(($255+($254<<4))|0);
      var $arrayidx319=(($arrayidx318+4)|0);
      var $256=HEAP32[(($arrayidx319)>>2)];
      var $tobool320=(($256)|0)!=0;
      if ($tobool320) { label = 94; break; } else { label = 96; break; }
    case 94: 
      var $257=$chn;
      var $258=$ns_attacks_addr;
      var $arrayidx322=(($258+($257<<4))|0);
      var $arrayidx323=(($arrayidx322)|0);
      var $259=HEAP32[(($arrayidx323)>>2)];
      var $tobool324=(($259)|0)!=0;
      if ($tobool324) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $260=$chn;
      var $261=$ns_attacks_addr;
      var $arrayidx326=(($261+($260<<4))|0);
      var $arrayidx327=(($arrayidx326+4)|0);
      HEAP32[(($arrayidx327)>>2)]=0;
      label = 96; break;
    case 96: 
      var $262=$chn;
      var $263=$ns_attacks_addr;
      var $arrayidx329=(($263+($262<<4))|0);
      var $arrayidx330=(($arrayidx329+8)|0);
      var $264=HEAP32[(($arrayidx330)>>2)];
      var $tobool331=(($264)|0)!=0;
      if ($tobool331) { label = 97; break; } else { label = 99; break; }
    case 97: 
      var $265=$chn;
      var $266=$ns_attacks_addr;
      var $arrayidx333=(($266+($265<<4))|0);
      var $arrayidx334=(($arrayidx333+4)|0);
      var $267=HEAP32[(($arrayidx334)>>2)];
      var $tobool335=(($267)|0)!=0;
      if ($tobool335) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $268=$chn;
      var $269=$ns_attacks_addr;
      var $arrayidx337=(($269+($268<<4))|0);
      var $arrayidx338=(($arrayidx337+8)|0);
      HEAP32[(($arrayidx338)>>2)]=0;
      label = 99; break;
    case 99: 
      var $270=$chn;
      var $271=$ns_attacks_addr;
      var $arrayidx340=(($271+($270<<4))|0);
      var $arrayidx341=(($arrayidx340+12)|0);
      var $272=HEAP32[(($arrayidx341)>>2)];
      var $tobool342=(($272)|0)!=0;
      if ($tobool342) { label = 100; break; } else { label = 102; break; }
    case 100: 
      var $273=$chn;
      var $274=$ns_attacks_addr;
      var $arrayidx344=(($274+($273<<4))|0);
      var $arrayidx345=(($arrayidx344+8)|0);
      var $275=HEAP32[(($arrayidx345)>>2)];
      var $tobool346=(($275)|0)!=0;
      if ($tobool346) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $276=$chn;
      var $277=$ns_attacks_addr;
      var $arrayidx348=(($277+($276<<4))|0);
      var $arrayidx349=(($arrayidx348+12)|0);
      HEAP32[(($arrayidx349)>>2)]=0;
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $278=$chn;
      var $cmp352=(($278)|0) < 2;
      if ($cmp352) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $279=$ns_uselongblock;
      var $280=$chn;
      var $281=$uselongblock_addr;
      var $arrayidx355=(($281+($280<<2))|0);
      HEAP32[(($arrayidx355)>>2)]=$279;
      label = 108; break;
    case 105: 
      var $282=$ns_uselongblock;
      var $cmp357=(($282)|0)==0;
      if ($cmp357) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $283=$uselongblock_addr;
      var $arrayidx360=(($283+4)|0);
      HEAP32[(($arrayidx360)>>2)]=0;
      var $284=$uselongblock_addr;
      var $arrayidx361=(($284)|0);
      HEAP32[(($arrayidx361)>>2)]=0;
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $285=$chn;
      var $286=$psv;
      var $tot_ener=(($286+6056)|0);
      var $arrayidx364=(($tot_ener+($285<<2))|0);
      var $287=HEAPF32[(($arrayidx364)>>2)];
      var $288=$chn;
      var $289=$energy_addr;
      var $arrayidx365=(($289+($288<<2))|0);
      HEAPF32[(($arrayidx365)>>2)]=$287;
      label = 109; break;
    case 109: 
      var $290=$chn;
      var $inc367=((($290)+(1))|0);
      $chn=$inc367;
      label = 23; break;
    case 110: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_attack_detection["X"]=1;

function _vbrpsy_compute_block_type($cfg, $uselongblock) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cfg_addr;
      var $uselongblock_addr;
      var $chn;
      $cfg_addr=$cfg;
      $uselongblock_addr=$uselongblock;
      var $0=$cfg_addr;
      var $short_blocks=(($0+168)|0);
      var $1=HEAP32[(($short_blocks)>>2)];
      var $cmp=(($1)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$uselongblock_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$uselongblock_addr;
      var $arrayidx2=(($4+4)|0);
      var $5=HEAP32[(($arrayidx2)>>2)];
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$uselongblock_addr;
      var $arrayidx4=(($6+4)|0);
      HEAP32[(($arrayidx4)>>2)]=0;
      var $7=$uselongblock_addr;
      var $arrayidx5=(($7)|0);
      HEAP32[(($arrayidx5)>>2)]=0;
      label = 6; break;
    case 6: 
      $chn=0;
      label = 7; break;
    case 7: 
      var $8=$chn;
      var $9=$cfg_addr;
      var $channels_out=(($9+56)|0);
      var $10=HEAP32[(($channels_out)>>2)];
      var $cmp6=(($8)|0) < (($10)|0);
      if ($cmp6) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $11=$cfg_addr;
      var $short_blocks7=(($11+168)|0);
      var $12=HEAP32[(($short_blocks7)>>2)];
      var $cmp8=(($12)|0)==2;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=$chn;
      var $14=$uselongblock_addr;
      var $arrayidx10=(($14+($13<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=1;
      label = 10; break;
    case 10: 
      var $15=$cfg_addr;
      var $short_blocks12=(($15+168)|0);
      var $16=HEAP32[(($short_blocks12)>>2)];
      var $cmp13=(($16)|0)==3;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $17=$chn;
      var $18=$uselongblock_addr;
      var $arrayidx15=(($18+($17<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=0;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $19=$chn;
      var $inc=((($19)+(1))|0);
      $chn=$inc;
      label = 7; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_compute_block_type["X"]=1;

function _vbrpsy_compute_fft_l($gfc, $buffer, $chn, $gr_out, $fftenergy, $wsamp_l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $buffer_addr;
      var $chn_addr;
      var $gr_out_addr;
      var $fftenergy_addr;
      var $wsamp_l_addr;
      var $cfg;
      var $psv;
      var $plt;
      var $j;
      var $sqrt2_half;
      var $l;
      var $r;
      var $re;
      var $im;
      var $totalenergy;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $chn_addr=$chn;
      $gr_out_addr=$gr_out;
      $fftenergy_addr=$fftenergy;
      $wsamp_l_addr=$wsamp_l;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_psy=(($1+21564)|0);
      $psv=$sv_psy;
      var $2=$cfg;
      var $analysis=(($2+124)|0);
      var $3=HEAP32[(($analysis)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$gfc_addr;
      var $pinfo=(($4+85800)|0);
      var $5=HEAP32[(($pinfo)>>2)];
      var $cond = $5;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $plt=$cond;
      var $6=$chn_addr;
      var $cmp=(($6)|0) < 2;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$gfc_addr;
      var $8=$wsamp_l_addr;
      var $arraydecay=(($8)|0);
      var $9=$chn_addr;
      var $10=$buffer_addr;
      _fft_long($7, $arraydecay, $9, $10);
      label = 14; break;
    case 7: 
      var $11=$chn_addr;
      var $cmp2=(($11)|0)==2;
      if ($cmp2) { label = 8; break; } else { label = 13; break; }
    case 8: 
      $sqrt2_half=0.7071067690849304;
      $j=1023;
      label = 9; break;
    case 9: 
      var $12=$j;
      var $cmp4=(($12)|0) >= 0;
      if ($cmp4) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $13=$j;
      var $14=$wsamp_l_addr;
      var $arrayidx=(($14)|0);
      var $arrayidx5=(($arrayidx+($13<<2))|0);
      var $15=HEAPF32[(($arrayidx5)>>2)];
      $l=$15;
      var $16=$j;
      var $17=$wsamp_l_addr;
      var $arrayidx6=(($17+4096)|0);
      var $arrayidx7=(($arrayidx6+($16<<2))|0);
      var $18=HEAPF32[(($arrayidx7)>>2)];
      $r=$18;
      var $19=$l;
      var $20=$r;
      var $add=($19)+($20);
      var $mul=($add)*(0.7071067690849304);
      var $21=$j;
      var $22=$wsamp_l_addr;
      var $arrayidx8=(($22)|0);
      var $arrayidx9=(($arrayidx8+($21<<2))|0);
      HEAPF32[(($arrayidx9)>>2)]=$mul;
      var $23=$l;
      var $24=$r;
      var $sub=($23)-($24);
      var $mul10=($sub)*(0.7071067690849304);
      var $25=$j;
      var $26=$wsamp_l_addr;
      var $arrayidx11=(($26+4096)|0);
      var $arrayidx12=(($arrayidx11+($25<<2))|0);
      HEAPF32[(($arrayidx12)>>2)]=$mul10;
      label = 11; break;
    case 11: 
      var $27=$j;
      var $dec=((($27)-(1))|0);
      $j=$dec;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $28=$wsamp_l_addr;
      var $arrayidx14=(($28)|0);
      var $arrayidx15=(($arrayidx14)|0);
      var $29=HEAPF32[(($arrayidx15)>>2)];
      var $30=$fftenergy_addr;
      var $arrayidx16=(($30)|0);
      HEAPF32[(($arrayidx16)>>2)]=$29;
      var $31=$fftenergy_addr;
      var $arrayidx17=(($31)|0);
      var $32=HEAPF32[(($arrayidx17)>>2)];
      var $33=$fftenergy_addr;
      var $arrayidx18=(($33)|0);
      var $34=HEAPF32[(($arrayidx18)>>2)];
      var $mul19=($34)*($32);
      HEAPF32[(($arrayidx18)>>2)]=$mul19;
      $j=511;
      label = 15; break;
    case 15: 
      var $35=$j;
      var $cmp21=(($35)|0) >= 0;
      if ($cmp21) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $36=$j;
      var $sub23=(((512)-($36))|0);
      var $37=$wsamp_l_addr;
      var $arrayidx24=(($37+($sub23<<2))|0);
      var $38=HEAPF32[(($arrayidx24)>>2)];
      $re=$38;
      var $39=$j;
      var $add25=((($39)+(512))|0);
      var $40=$wsamp_l_addr;
      var $arrayidx26=(($40+($add25<<2))|0);
      var $41=HEAPF32[(($arrayidx26)>>2)];
      $im=$41;
      var $42=$re;
      var $43=$re;
      var $mul27=($42)*($43);
      var $44=$im;
      var $45=$im;
      var $mul28=($44)*($45);
      var $add29=($mul27)+($mul28);
      var $mul30=($add29)*(0.5);
      var $46=$j;
      var $sub31=(((512)-($46))|0);
      var $47=$fftenergy_addr;
      var $arrayidx32=(($47+($sub31<<2))|0);
      HEAPF32[(($arrayidx32)>>2)]=$mul30;
      label = 17; break;
    case 17: 
      var $48=$j;
      var $dec34=((($48)-(1))|0);
      $j=$dec34;
      label = 15; break;
    case 18: 
      $totalenergy=0;
      $j=11;
      label = 19; break;
    case 19: 
      var $49=$j;
      var $cmp37=(($49)|0) < 513;
      if ($cmp37) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $50=$j;
      var $51=$fftenergy_addr;
      var $arrayidx39=(($51+($50<<2))|0);
      var $52=HEAPF32[(($arrayidx39)>>2)];
      var $53=$totalenergy;
      var $add40=($53)+($52);
      $totalenergy=$add40;
      label = 21; break;
    case 21: 
      var $54=$j;
      var $inc=((($54)+(1))|0);
      $j=$inc;
      label = 19; break;
    case 22: 
      var $55=$totalenergy;
      var $56=$chn_addr;
      var $57=$psv;
      var $tot_ener=(($57+6056)|0);
      var $arrayidx43=(($tot_ener+($56<<2))|0);
      HEAPF32[(($arrayidx43)>>2)]=$55;
      var $58=$plt;
      var $tobool44=(($58)|0)!=0;
      if ($tobool44) { label = 23; break; } else { label = 28; break; }
    case 23: 
      $j=0;
      label = 24; break;
    case 24: 
      var $59=$j;
      var $cmp47=(($59)|0) < 513;
      if ($cmp47) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $60=$j;
      var $61=$chn_addr;
      var $62=$plt;
      var $energy_save=(($62+90932)|0);
      var $arrayidx49=(($energy_save+($61<<13))|0);
      var $arrayidx50=(($arrayidx49+($60<<3))|0);
      var $63=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx50)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx50)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $64=$j;
      var $65=$chn_addr;
      var $66=$gr_out_addr;
      var $67=$plt;
      var $energy=(($67+123700)|0);
      var $arrayidx51=(($energy+($66<<15))|0);
      var $arrayidx52=(($arrayidx51+($65<<13))|0);
      var $arrayidx53=(($arrayidx52+($64<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$63,HEAP32[(($arrayidx53)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx53)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $68=$j;
      var $69=$fftenergy_addr;
      var $arrayidx54=(($69+($68<<2))|0);
      var $70=HEAPF32[(($arrayidx54)>>2)];
      var $conv=$70;
      var $71=$j;
      var $72=$chn_addr;
      var $73=$plt;
      var $energy_save55=(($73+90932)|0);
      var $arrayidx56=(($energy_save55+($72<<13))|0);
      var $arrayidx57=(($arrayidx56+($71<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[(($arrayidx57)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx57)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 26; break;
    case 26: 
      var $74=$j;
      var $inc59=((($74)+(1))|0);
      $j=$inc59;
      label = 24; break;
    case 27: 
      label = 28; break;
    case 28: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_compute_fft_l["X"]=1;

function _vbrpsy_compute_loudness_approximation_l($gfc, $gr_out, $chn, $fftenergy) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gr_out_addr;
      var $chn_addr;
      var $fftenergy_addr;
      var $psv;
      $gfc_addr=$gfc;
      $gr_out_addr=$gr_out;
      $chn_addr=$chn;
      $fftenergy_addr=$fftenergy;
      var $0=$gfc_addr;
      var $sv_psy=(($0+21564)|0);
      $psv=$sv_psy;
      var $1=$chn_addr;
      var $cmp=(($1)|0) < 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$chn_addr;
      var $3=$psv;
      var $loudness_sq_save=(($3+6048)|0);
      var $arrayidx=(($loudness_sq_save+($2<<2))|0);
      var $4=HEAPF32[(($arrayidx)>>2)];
      var $5=$chn_addr;
      var $6=$gr_out_addr;
      var $7=$gfc_addr;
      var $ov_psy=(($7+27804)|0);
      var $loudness_sq=(($ov_psy)|0);
      var $arrayidx1=(($loudness_sq+($6<<3))|0);
      var $arrayidx2=(($arrayidx1+($5<<2))|0);
      HEAPF32[(($arrayidx2)>>2)]=$4;
      var $8=$fftenergy_addr;
      var $9=$gfc_addr;
      var $ATH=(($9+85792)|0);
      var $10=HEAP32[(($ATH)>>2)];
      var $eql_w=(($10+724)|0);
      var $arraydecay=(($eql_w)|0);
      var $call=_psycho_loudness_approx($8, $arraydecay);
      var $11=$chn_addr;
      var $12=$psv;
      var $loudness_sq_save3=(($12+6048)|0);
      var $arrayidx4=(($loudness_sq_save3+($11<<2))|0);
      HEAPF32[(($arrayidx4)>>2)]=$call;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _vbrpsy_compute_masking_l($gfc, $fftenergy, $eb_l, $thr, $chn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 580)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $fftenergy_addr;
      var $eb_l_addr;
      var $thr_addr;
      var $chn_addr;
      var $psv;
      var $gdl;
      var $max=__stackBase__;
      var $avg=(__stackBase__)+(256);
      var $mask_idx_l=(__stackBase__)+(512);
      var $k;
      var $b;
      var $x;
      var $ecb;
      var $avg_mask;
      var $t;
      var $masking_lower;
      var $kk;
      var $last;
      var $delta;
      var $dd;
      var $dd_n;
      var $ecb_limit;
      var $ecb_limit_2;
      var $ecb_limit_1;
      var $ecb_limit81;
      $gfc_addr=$gfc;
      $fftenergy_addr=$fftenergy;
      $eb_l_addr=$eb_l;
      $thr_addr=$thr;
      $chn_addr=$chn;
      var $0=$gfc_addr;
      var $sv_psy=(($0+21564)|0);
      $psv=$sv_psy;
      var $1=$gfc_addr;
      var $cd_psy=(($1+85796)|0);
      var $2=HEAP32[(($cd_psy)>>2)];
      var $l=(($2)|0);
      $gdl=$l;
      var $3=$gdl;
      var $4=$fftenergy_addr;
      var $5=$eb_l_addr;
      var $arraydecay=(($max)|0);
      var $arraydecay1=(($avg)|0);
      _calc_energy($3, $4, $5, $arraydecay, $arraydecay1);
      var $6=$gfc_addr;
      var $arraydecay2=(($max)|0);
      var $arraydecay3=(($avg)|0);
      var $arraydecay4=(($mask_idx_l)|0);
      _calc_mask_index_l($6, $arraydecay2, $arraydecay3, $arraydecay4);
      $k=0;
      $b=0;
      label = 3; break;
    case 3: 
      var $7=$b;
      var $8=$gdl;
      var $npart=(($8+2148)|0);
      var $9=HEAP32[(($npart)>>2)];
      var $cmp=(($7)|0) < (($9)|0);
      if ($cmp) { label = 4; break; } else { label = 42; break; }
    case 4: 
      var $10=$b;
      var $11=$gdl;
      var $masking_lower5=(($11)|0);
      var $arrayidx=(($masking_lower5+($10<<2))|0);
      var $12=HEAPF32[(($arrayidx)>>2)];
      var $13=$gfc_addr;
      var $sv_qnt=(($13+84764)|0);
      var $masking_lower6=(($sv_qnt+140)|0);
      var $14=HEAPF32[(($masking_lower6)>>2)];
      var $mul=($12)*($14);
      $masking_lower=$mul;
      var $15=$b;
      var $16=$gdl;
      var $s3ind=(($16+1204)|0);
      var $arrayidx7=(($s3ind+($15<<3))|0);
      var $arrayidx8=(($arrayidx7)|0);
      var $17=HEAP32[(($arrayidx8)>>2)];
      $kk=$17;
      var $18=$b;
      var $19=$gdl;
      var $s3ind9=(($19+1204)|0);
      var $arrayidx10=(($s3ind9+($18<<3))|0);
      var $arrayidx11=(($arrayidx10+4)|0);
      var $20=HEAP32[(($arrayidx11)>>2)];
      $last=$20;
      var $21=$b;
      var $arrayidx12=(($mask_idx_l+$21)|0);
      var $22=HEAP8[($arrayidx12)];
      var $conv=(($22)&255);
      var $call=_mask_add_delta($conv);
      $delta=$call;
      $dd=0;
      $dd_n=0;
      var $23=$kk;
      var $arrayidx13=(($mask_idx_l+$23)|0);
      var $24=HEAP8[($arrayidx13)];
      var $conv14=(($24)&255);
      $dd=$conv14;
      var $25=$dd_n;
      var $add=((($25)+(1))|0);
      $dd_n=$add;
      var $26=$k;
      var $27=$gdl;
      var $s3=(($27+2156)|0);
      var $28=HEAP32[(($s3)>>2)];
      var $arrayidx15=(($28+($26<<2))|0);
      var $29=HEAPF32[(($arrayidx15)>>2)];
      var $30=$kk;
      var $31=$eb_l_addr;
      var $arrayidx16=(($31+($30<<2))|0);
      var $32=HEAPF32[(($arrayidx16)>>2)];
      var $mul17=($29)*($32);
      var $33=$kk;
      var $arrayidx18=(($mask_idx_l+$33)|0);
      var $34=HEAP8[($arrayidx18)];
      var $idxprom=(($34)&255);
      var $arrayidx19=((5249776+($idxprom<<2))|0);
      var $35=HEAPF32[(($arrayidx19)>>2)];
      var $mul20=($mul17)*($35);
      $ecb=$mul20;
      var $36=$k;
      var $inc=((($36)+(1))|0);
      $k=$inc;
      var $37=$kk;
      var $inc21=((($37)+(1))|0);
      $kk=$inc21;
      label = 5; break;
    case 5: 
      var $38=$kk;
      var $39=$last;
      var $cmp22=(($38)|0) <= (($39)|0);
      if ($cmp22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $40=$kk;
      var $arrayidx24=(($mask_idx_l+$40)|0);
      var $41=HEAP8[($arrayidx24)];
      var $conv25=(($41)&255);
      var $42=$dd;
      var $add26=((($42)+($conv25))|0);
      $dd=$add26;
      var $43=$dd_n;
      var $add27=((($43)+(1))|0);
      $dd_n=$add27;
      var $44=$k;
      var $45=$gdl;
      var $s328=(($45+2156)|0);
      var $46=HEAP32[(($s328)>>2)];
      var $arrayidx29=(($46+($44<<2))|0);
      var $47=HEAPF32[(($arrayidx29)>>2)];
      var $48=$kk;
      var $49=$eb_l_addr;
      var $arrayidx30=(($49+($48<<2))|0);
      var $50=HEAPF32[(($arrayidx30)>>2)];
      var $mul31=($47)*($50);
      var $51=$kk;
      var $arrayidx32=(($mask_idx_l+$51)|0);
      var $52=HEAP8[($arrayidx32)];
      var $idxprom33=(($52)&255);
      var $arrayidx34=((5249776+($idxprom33<<2))|0);
      var $53=HEAPF32[(($arrayidx34)>>2)];
      var $mul35=($mul31)*($53);
      $x=$mul35;
      var $54=$ecb;
      var $55=$x;
      var $56=$kk;
      var $57=$b;
      var $sub=((($56)-($57))|0);
      var $58=$delta;
      var $call36=_vbrpsy_mask_add($54, $55, $sub, $58);
      $t=$call36;
      var $59=$t;
      $ecb=$59;
      var $60=$k;
      var $inc37=((($60)+(1))|0);
      $k=$inc37;
      var $61=$kk;
      var $inc38=((($61)+(1))|0);
      $kk=$inc38;
      label = 5; break;
    case 7: 
      var $62=$dd;
      var $mul39=((($62<<1))&-1);
      var $add40=((($mul39)+(1))|0);
      var $63=$dd_n;
      var $mul41=((($63<<1))&-1);
      var $div=((((($add40)|0))/((($mul41)|0)))&-1);
      $dd=$div;
      var $64=$dd;
      var $arrayidx42=((5249776+($64<<2))|0);
      var $65=HEAPF32[(($arrayidx42)>>2)];
      var $mul43=($65)*(0.5);
      $avg_mask=$mul43;
      var $66=$avg_mask;
      var $67=$ecb;
      var $mul44=($67)*($66);
      $ecb=$mul44;
      var $68=$chn_addr;
      var $and=$68 & 1;
      var $69=$psv;
      var $blocktype_old=(($69+6232)|0);
      var $arrayidx45=(($blocktype_old+($and<<2))|0);
      var $70=HEAP32[(($arrayidx45)>>2)];
      var $cmp46=(($70)|0)==2;
      if ($cmp46) { label = 8; break; } else { label = 18; break; }
    case 8: 
      var $71=$b;
      var $72=$chn_addr;
      var $73=$psv;
      var $nb_l1=(($73)|0);
      var $arrayidx48=(($nb_l1+($72<<8))|0);
      var $arrayidx49=(($arrayidx48+($71<<2))|0);
      var $74=HEAPF32[(($arrayidx49)>>2)];
      var $mul50=($74)*(2);
      $ecb_limit=$mul50;
      var $75=$ecb_limit;
      var $cmp51=$75 > 0;
      if ($cmp51) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $76=$ecb;
      var $77=$ecb_limit;
      var $cmp54=$76 < $77;
      if ($cmp54) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $78=$ecb;
      var $cond = $78;label = 12; break;
    case 11: 
      var $79=$ecb_limit;
      var $cond = $79;label = 12; break;
    case 12: 
      var $cond;
      var $80=$b;
      var $81=$thr_addr;
      var $arrayidx56=(($81+($80<<2))|0);
      HEAPF32[(($arrayidx56)>>2)]=$cond;
      label = 17; break;
    case 13: 
      var $82=$ecb;
      var $conv57=$82;
      var $83=$b;
      var $84=$eb_l_addr;
      var $arrayidx58=(($84+($83<<2))|0);
      var $85=HEAPF32[(($arrayidx58)>>2)];
      var $conv59=$85;
      var $mul60=($conv59)*(0.3);
      var $cmp61=$conv57 < $mul60;
      if ($cmp61) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $86=$ecb;
      var $conv64=$86;
      var $cond70 = $conv64;label = 16; break;
    case 15: 
      var $87=$b;
      var $88=$eb_l_addr;
      var $arrayidx66=(($88+($87<<2))|0);
      var $89=HEAPF32[(($arrayidx66)>>2)];
      var $conv67=$89;
      var $mul68=($conv67)*(0.3);
      var $cond70 = $mul68;label = 16; break;
    case 16: 
      var $cond70;
      var $conv71=$cond70;
      var $90=$b;
      var $91=$thr_addr;
      var $arrayidx72=(($91+($90<<2))|0);
      HEAPF32[(($arrayidx72)>>2)]=$conv71;
      label = 17; break;
    case 17: 
      label = 32; break;
    case 18: 
      var $92=$b;
      var $93=$chn_addr;
      var $94=$psv;
      var $nb_l2=(($94+1024)|0);
      var $arrayidx74=(($nb_l2+($93<<8))|0);
      var $arrayidx75=(($arrayidx74+($92<<2))|0);
      var $95=HEAPF32[(($arrayidx75)>>2)];
      var $mul76=($95)*(16);
      $ecb_limit_2=$mul76;
      var $96=$b;
      var $97=$chn_addr;
      var $98=$psv;
      var $nb_l177=(($98)|0);
      var $arrayidx78=(($nb_l177+($97<<8))|0);
      var $arrayidx79=(($arrayidx78+($96<<2))|0);
      var $99=HEAPF32[(($arrayidx79)>>2)];
      var $mul80=($99)*(2);
      $ecb_limit_1=$mul80;
      var $100=$ecb_limit_2;
      var $cmp82=$100 <= 0;
      if ($cmp82) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $101=$ecb;
      $ecb_limit_2=$101;
      label = 20; break;
    case 20: 
      var $102=$ecb_limit_1;
      var $cmp86=$102 <= 0;
      if ($cmp86) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $103=$ecb;
      $ecb_limit_1=$103;
      label = 22; break;
    case 22: 
      var $104=$chn_addr;
      var $and90=$104 & 1;
      var $105=$psv;
      var $blocktype_old91=(($105+6232)|0);
      var $arrayidx92=(($blocktype_old91+($and90<<2))|0);
      var $106=HEAP32[(($arrayidx92)>>2)];
      var $cmp93=(($106)|0)==0;
      if ($cmp93) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $107=$ecb_limit_1;
      var $108=$ecb_limit_2;
      var $cmp96=$107 < $108;
      if ($cmp96) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $109=$ecb_limit_1;
      var $cond101 = $109;label = 26; break;
    case 25: 
      var $110=$ecb_limit_2;
      var $cond101 = $110;label = 26; break;
    case 26: 
      var $cond101;
      $ecb_limit81=$cond101;
      label = 28; break;
    case 27: 
      var $111=$ecb_limit_1;
      $ecb_limit81=$111;
      label = 28; break;
    case 28: 
      var $112=$ecb;
      var $113=$ecb_limit81;
      var $cmp104=$112 < $113;
      if ($cmp104) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $114=$ecb;
      var $cond109 = $114;label = 31; break;
    case 30: 
      var $115=$ecb_limit81;
      var $cond109 = $115;label = 31; break;
    case 31: 
      var $cond109;
      var $116=$b;
      var $117=$thr_addr;
      var $arrayidx110=(($117+($116<<2))|0);
      HEAPF32[(($arrayidx110)>>2)]=$cond109;
      label = 32; break;
    case 32: 
      var $118=$b;
      var $119=$chn_addr;
      var $120=$psv;
      var $nb_l1112=(($120)|0);
      var $arrayidx113=(($nb_l1112+($119<<8))|0);
      var $arrayidx114=(($arrayidx113+($118<<2))|0);
      var $121=HEAPF32[(($arrayidx114)>>2)];
      var $122=$b;
      var $123=$chn_addr;
      var $124=$psv;
      var $nb_l2115=(($124+1024)|0);
      var $arrayidx116=(($nb_l2115+($123<<8))|0);
      var $arrayidx117=(($arrayidx116+($122<<2))|0);
      HEAPF32[(($arrayidx117)>>2)]=$121;
      var $125=$ecb;
      var $126=$b;
      var $127=$chn_addr;
      var $128=$psv;
      var $nb_l1118=(($128)|0);
      var $arrayidx119=(($nb_l1118+($127<<8))|0);
      var $arrayidx120=(($arrayidx119+($126<<2))|0);
      HEAPF32[(($arrayidx120)>>2)]=$125;
      var $129=$b;
      var $arrayidx121=(($max+($129<<2))|0);
      var $130=HEAPF32[(($arrayidx121)>>2)];
      $x=$130;
      var $131=$b;
      var $132=$gdl;
      var $minval=(($132+256)|0);
      var $arrayidx122=(($minval+($131<<2))|0);
      var $133=HEAPF32[(($arrayidx122)>>2)];
      var $134=$x;
      var $mul123=($134)*($133);
      $x=$mul123;
      var $135=$avg_mask;
      var $136=$x;
      var $mul124=($136)*($135);
      $x=$mul124;
      var $137=$b;
      var $138=$thr_addr;
      var $arrayidx125=(($138+($137<<2))|0);
      var $139=HEAPF32[(($arrayidx125)>>2)];
      var $140=$x;
      var $cmp126=$139 > $140;
      if ($cmp126) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $141=$x;
      var $142=$b;
      var $143=$thr_addr;
      var $arrayidx129=(($143+($142<<2))|0);
      HEAPF32[(($arrayidx129)>>2)]=$141;
      label = 34; break;
    case 34: 
      var $144=$masking_lower;
      var $cmp131=$144 > 1;
      if ($cmp131) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $145=$masking_lower;
      var $146=$b;
      var $147=$thr_addr;
      var $arrayidx134=(($147+($146<<2))|0);
      var $148=HEAPF32[(($arrayidx134)>>2)];
      var $mul135=($148)*($145);
      HEAPF32[(($arrayidx134)>>2)]=$mul135;
      label = 36; break;
    case 36: 
      var $149=$b;
      var $150=$thr_addr;
      var $arrayidx137=(($150+($149<<2))|0);
      var $151=HEAPF32[(($arrayidx137)>>2)];
      var $152=$b;
      var $153=$eb_l_addr;
      var $arrayidx138=(($153+($152<<2))|0);
      var $154=HEAPF32[(($arrayidx138)>>2)];
      var $cmp139=$151 > $154;
      if ($cmp139) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $155=$b;
      var $156=$eb_l_addr;
      var $arrayidx142=(($156+($155<<2))|0);
      var $157=HEAPF32[(($arrayidx142)>>2)];
      var $158=$b;
      var $159=$thr_addr;
      var $arrayidx143=(($159+($158<<2))|0);
      HEAPF32[(($arrayidx143)>>2)]=$157;
      label = 38; break;
    case 38: 
      var $160=$masking_lower;
      var $cmp145=$160 < 1;
      if ($cmp145) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $161=$masking_lower;
      var $162=$b;
      var $163=$thr_addr;
      var $arrayidx148=(($163+($162<<2))|0);
      var $164=HEAPF32[(($arrayidx148)>>2)];
      var $mul149=($164)*($161);
      HEAPF32[(($arrayidx148)>>2)]=$mul149;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $165=$b;
      var $inc151=((($165)+(1))|0);
      $b=$inc151;
      label = 3; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $166=$b;
      var $cmp153=(($166)|0) < 64;
      if ($cmp153) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $167=$b;
      var $168=$eb_l_addr;
      var $arrayidx156=(($168+($167<<2))|0);
      HEAPF32[(($arrayidx156)>>2)]=0;
      var $169=$b;
      var $170=$thr_addr;
      var $arrayidx157=(($170+($169<<2))|0);
      HEAPF32[(($arrayidx157)>>2)]=0;
      label = 45; break;
    case 45: 
      var $171=$b;
      var $inc159=((($171)+(1))|0);
      $b=$inc159;
      label = 43; break;
    case 46: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_compute_masking_l["X"]=1;

function _vbrpsy_compute_MS_thresholds($eb, $thr, $cb_mld, $ath_cb, $athlower, $msfix, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $eb_addr;
      var $thr_addr;
      var $cb_mld_addr;
      var $ath_cb_addr;
      var $athlower_addr;
      var $msfix_addr;
      var $n_addr;
      var $msfix2;
      var $rside;
      var $rmid;
      var $b;
      var $ebM;
      var $ebS;
      var $thmL;
      var $thmR;
      var $thmM;
      var $thmS;
      var $mld_m;
      var $mld_s;
      var $tmp_m;
      var $tmp_s;
      var $thmLR;
      var $thmMS;
      var $ath;
      var $tmp_l;
      var $tmp_r;
      var $f;
      $eb_addr=$eb;
      $thr_addr=$thr;
      $cb_mld_addr=$cb_mld;
      $ath_cb_addr=$ath_cb;
      $athlower_addr=$athlower;
      $msfix_addr=$msfix;
      $n_addr=$n;
      var $0=$msfix_addr;
      var $mul=($0)*(2);
      $msfix2=$mul;
      $b=0;
      label = 3; break;
    case 3: 
      var $1=$b;
      var $2=$n_addr;
      var $cmp=(($1)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 52; break; }
    case 4: 
      var $3=$b;
      var $4=$eb_addr;
      var $arrayidx=(($4+512)|0);
      var $arrayidx1=(($arrayidx+($3<<2))|0);
      var $5=HEAPF32[(($arrayidx1)>>2)];
      $ebM=$5;
      var $6=$b;
      var $7=$eb_addr;
      var $arrayidx2=(($7+768)|0);
      var $arrayidx3=(($arrayidx2+($6<<2))|0);
      var $8=HEAPF32[(($arrayidx3)>>2)];
      $ebS=$8;
      var $9=$b;
      var $10=$thr_addr;
      var $arrayidx4=(($10)|0);
      var $arrayidx5=(($arrayidx4+($9<<2))|0);
      var $11=HEAPF32[(($arrayidx5)>>2)];
      $thmL=$11;
      var $12=$b;
      var $13=$thr_addr;
      var $arrayidx6=(($13+256)|0);
      var $arrayidx7=(($arrayidx6+($12<<2))|0);
      var $14=HEAPF32[(($arrayidx7)>>2)];
      $thmR=$14;
      var $15=$b;
      var $16=$thr_addr;
      var $arrayidx8=(($16+512)|0);
      var $arrayidx9=(($arrayidx8+($15<<2))|0);
      var $17=HEAPF32[(($arrayidx9)>>2)];
      $thmM=$17;
      var $18=$b;
      var $19=$thr_addr;
      var $arrayidx10=(($19+768)|0);
      var $arrayidx11=(($arrayidx10+($18<<2))|0);
      var $20=HEAPF32[(($arrayidx11)>>2)];
      $thmS=$20;
      var $21=$thmL;
      var $22=$thmR;
      var $mul12=($22)*(1.5800000429153442);
      var $cmp13=$21 <= $mul12;
      if ($cmp13) { label = 5; break; } else { label = 19; break; }
    case 5: 
      var $23=$thmR;
      var $24=$thmL;
      var $mul14=($24)*(1.5800000429153442);
      var $cmp15=$23 <= $mul14;
      if ($cmp15) { label = 6; break; } else { label = 19; break; }
    case 6: 
      var $25=$b;
      var $26=$cb_mld_addr;
      var $arrayidx16=(($26+($25<<2))|0);
      var $27=HEAPF32[(($arrayidx16)>>2)];
      var $28=$ebS;
      var $mul17=($27)*($28);
      $mld_m=$mul17;
      var $29=$b;
      var $30=$cb_mld_addr;
      var $arrayidx18=(($30+($29<<2))|0);
      var $31=HEAPF32[(($arrayidx18)>>2)];
      var $32=$ebM;
      var $mul19=($31)*($32);
      $mld_s=$mul19;
      var $33=$thmS;
      var $34=$mld_m;
      var $cmp20=$33 < $34;
      if ($cmp20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $35=$thmS;
      var $cond = $35;label = 9; break;
    case 8: 
      var $36=$mld_m;
      var $cond = $36;label = 9; break;
    case 9: 
      var $cond;
      $tmp_m=$cond;
      var $37=$thmM;
      var $38=$mld_s;
      var $cmp21=$37 < $38;
      if ($cmp21) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$thmM;
      var $cond25 = $39;label = 12; break;
    case 11: 
      var $40=$mld_s;
      var $cond25 = $40;label = 12; break;
    case 12: 
      var $cond25;
      $tmp_s=$cond25;
      var $41=$thmM;
      var $42=$tmp_m;
      var $cmp26=$41 > $42;
      if ($cmp26) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$thmM;
      var $cond30 = $43;label = 15; break;
    case 14: 
      var $44=$tmp_m;
      var $cond30 = $44;label = 15; break;
    case 15: 
      var $cond30;
      $rmid=$cond30;
      var $45=$thmS;
      var $46=$tmp_s;
      var $cmp31=$45 > $46;
      if ($cmp31) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $47=$thmS;
      var $cond35 = $47;label = 18; break;
    case 17: 
      var $48=$tmp_s;
      var $cond35 = $48;label = 18; break;
    case 18: 
      var $cond35;
      $rside=$cond35;
      label = 20; break;
    case 19: 
      var $49=$thmM;
      $rmid=$49;
      var $50=$thmS;
      $rside=$50;
      label = 20; break;
    case 20: 
      var $51=$msfix_addr;
      var $cmp36=$51 > 0;
      if ($cmp36) { label = 21; break; } else { label = 46; break; }
    case 21: 
      var $52=$b;
      var $53=$ath_cb_addr;
      var $arrayidx38=(($53+($52<<2))|0);
      var $54=HEAPF32[(($arrayidx38)>>2)];
      var $55=$athlower_addr;
      var $mul39=($54)*($55);
      $ath=$mul39;
      var $56=$thmL;
      var $57=$ath;
      var $cmp40=$56 > $57;
      if ($cmp40) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $58=$thmL;
      var $cond44 = $58;label = 24; break;
    case 23: 
      var $59=$ath;
      var $cond44 = $59;label = 24; break;
    case 24: 
      var $cond44;
      $tmp_l=$cond44;
      var $60=$thmR;
      var $61=$ath;
      var $cmp45=$60 > $61;
      if ($cmp45) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $62=$thmR;
      var $cond49 = $62;label = 27; break;
    case 26: 
      var $63=$ath;
      var $cond49 = $63;label = 27; break;
    case 27: 
      var $cond49;
      $tmp_r=$cond49;
      var $64=$tmp_l;
      var $65=$tmp_r;
      var $cmp50=$64 < $65;
      if ($cmp50) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $66=$tmp_l;
      var $cond54 = $66;label = 30; break;
    case 29: 
      var $67=$tmp_r;
      var $cond54 = $67;label = 30; break;
    case 30: 
      var $cond54;
      $thmLR=$cond54;
      var $68=$rmid;
      var $69=$ath;
      var $cmp55=$68 > $69;
      if ($cmp55) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $70=$rmid;
      var $cond59 = $70;label = 33; break;
    case 32: 
      var $71=$ath;
      var $cond59 = $71;label = 33; break;
    case 33: 
      var $cond59;
      $thmM=$cond59;
      var $72=$rside;
      var $73=$ath;
      var $cmp60=$72 > $73;
      if ($cmp60) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $74=$rside;
      var $cond64 = $74;label = 36; break;
    case 35: 
      var $75=$ath;
      var $cond64 = $75;label = 36; break;
    case 36: 
      var $cond64;
      $thmS=$cond64;
      var $76=$thmM;
      var $77=$thmS;
      var $add=($76)+($77);
      $thmMS=$add;
      var $78=$thmMS;
      var $cmp65=$78 > 0;
      if ($cmp65) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $79=$thmLR;
      var $80=$msfix2;
      var $mul67=($79)*($80);
      var $81=$thmMS;
      var $cmp68=$mul67 < $81;
      if ($cmp68) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $82=$thmLR;
      var $83=$msfix2;
      var $mul70=($82)*($83);
      var $84=$thmMS;
      var $div=($mul70)/($84);
      $f=$div;
      var $85=$f;
      var $86=$thmM;
      var $mul71=($86)*($85);
      $thmM=$mul71;
      var $87=$f;
      var $88=$thmS;
      var $mul72=($88)*($87);
      $thmS=$mul72;
      label = 39; break;
    case 39: 
      var $89=$thmM;
      var $90=$rmid;
      var $cmp74=$89 < $90;
      if ($cmp74) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $91=$thmM;
      var $cond78 = $91;label = 42; break;
    case 41: 
      var $92=$rmid;
      var $cond78 = $92;label = 42; break;
    case 42: 
      var $cond78;
      $rmid=$cond78;
      var $93=$thmS;
      var $94=$rside;
      var $cmp79=$93 < $94;
      if ($cmp79) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $95=$thmS;
      var $cond83 = $95;label = 45; break;
    case 44: 
      var $96=$rside;
      var $cond83 = $96;label = 45; break;
    case 45: 
      var $cond83;
      $rside=$cond83;
      label = 46; break;
    case 46: 
      var $97=$rmid;
      var $98=$ebM;
      var $cmp85=$97 > $98;
      if ($cmp85) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $99=$ebM;
      $rmid=$99;
      label = 48; break;
    case 48: 
      var $100=$rside;
      var $101=$ebS;
      var $cmp88=$100 > $101;
      if ($cmp88) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $102=$ebS;
      $rside=$102;
      label = 50; break;
    case 50: 
      var $103=$rmid;
      var $104=$b;
      var $105=$thr_addr;
      var $arrayidx91=(($105+512)|0);
      var $arrayidx92=(($arrayidx91+($104<<2))|0);
      HEAPF32[(($arrayidx92)>>2)]=$103;
      var $106=$rside;
      var $107=$b;
      var $108=$thr_addr;
      var $arrayidx93=(($108+768)|0);
      var $arrayidx94=(($arrayidx93+($107<<2))|0);
      HEAPF32[(($arrayidx94)>>2)]=$106;
      label = 51; break;
    case 51: 
      var $109=$b;
      var $inc=((($109)+(1))|0);
      $b=$inc;
      label = 3; break;
    case 52: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_compute_MS_thresholds["X"]=1;

function _vbrpsy_skip_masking_s($gfc, $chn, $sblock) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $chn_addr;
      var $sblock_addr;
      var $nbs2;
      var $nbs1;
      var $n;
      var $b;
      $gfc_addr=$gfc;
      $chn_addr=$chn;
      $sblock_addr=$sblock;
      var $0=$sblock_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$chn_addr;
      var $2=$gfc_addr;
      var $sv_psy=(($2+21564)|0);
      var $nb_s2=(($sv_psy+3072)|0);
      var $arrayidx=(($nb_s2+($1<<8))|0);
      var $arrayidx1=(($arrayidx)|0);
      $nbs2=$arrayidx1;
      var $3=$chn_addr;
      var $4=$gfc_addr;
      var $sv_psy2=(($4+21564)|0);
      var $nb_s1=(($sv_psy2+2048)|0);
      var $arrayidx3=(($nb_s1+($3<<8))|0);
      var $arrayidx4=(($arrayidx3)|0);
      $nbs1=$arrayidx4;
      var $5=$gfc_addr;
      var $cd_psy=(($5+85796)|0);
      var $6=HEAP32[(($cd_psy)>>2)];
      var $s=(($6+2160)|0);
      var $npart=(($s+2148)|0);
      var $7=HEAP32[(($npart)>>2)];
      $n=$7;
      $b=0;
      label = 4; break;
    case 4: 
      var $8=$b;
      var $9=$n;
      var $cmp5=(($8)|0) < (($9)|0);
      if ($cmp5) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $10=$b;
      var $11=$nbs1;
      var $arrayidx6=(($11+($10<<2))|0);
      var $12=HEAPF32[(($arrayidx6)>>2)];
      var $13=$b;
      var $14=$nbs2;
      var $arrayidx7=(($14+($13<<2))|0);
      HEAPF32[(($arrayidx7)>>2)]=$12;
      label = 6; break;
    case 6: 
      var $15=$b;
      var $inc=((($15)+(1))|0);
      $b=$inc;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_skip_masking_s["X"]=1;

function _convert_partition2scalefac_l($gfc, $eb, $thr, $chn) {
  var label = 0;


  var $gfc_addr;
  var $eb_addr;
  var $thr_addr;
  var $chn_addr;
  var $psv;
  var $gdl;
  var $enn;
  var $thm;
  $gfc_addr=$gfc;
  $eb_addr=$eb;
  $thr_addr=$thr;
  $chn_addr=$chn;
  var $0=$gfc_addr;
  var $sv_psy=(($0+21564)|0);
  $psv=$sv_psy;
  var $1=$gfc_addr;
  var $cd_psy=(($1+85796)|0);
  var $2=HEAP32[(($cd_psy)>>2)];
  var $l=(($2)|0);
  $gdl=$l;
  var $3=$chn_addr;
  var $4=$psv;
  var $en=(($4+5072)|0);
  var $arrayidx=(($en+($3)*(244))|0);
  var $l1=(($arrayidx)|0);
  var $arrayidx2=(($l1)|0);
  $enn=$arrayidx2;
  var $5=$chn_addr;
  var $6=$psv;
  var $thm3=(($6+4096)|0);
  var $arrayidx4=(($thm3+($5)*(244))|0);
  var $l5=(($arrayidx4)|0);
  var $arrayidx6=(($l5)|0);
  $thm=$arrayidx6;
  var $7=$gdl;
  var $8=$eb_addr;
  var $9=$thr_addr;
  var $10=$enn;
  var $11=$thm;
  _convert_partition2scalefac($7, $8, $9, $10, $11);

  return;
}


function _convert_partition2scalefac_l_to_s($gfc, $eb, $thr, $chn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $eb_addr;
      var $thr_addr;
      var $chn_addr;
      var $psv;
      var $gds;
      var $enn=__stackBase__;
      var $thm=(__stackBase__)+(52);
      var $sb;
      var $sblock;
      var $scale;
      var $tmp_enn;
      var $tmp_thm;
      $gfc_addr=$gfc;
      $eb_addr=$eb;
      $thr_addr=$thr;
      $chn_addr=$chn;
      var $0=$gfc_addr;
      var $sv_psy=(($0+21564)|0);
      $psv=$sv_psy;
      var $1=$gfc_addr;
      var $cd_psy=(($1+85796)|0);
      var $2=HEAP32[(($cd_psy)>>2)];
      var $l_to_s=(($2+4320)|0);
      $gds=$l_to_s;
      var $3=$gds;
      var $4=$eb_addr;
      var $5=$thr_addr;
      var $arraydecay=(($enn)|0);
      var $arraydecay1=(($thm)|0);
      _convert_partition2scalefac($3, $4, $5, $arraydecay, $arraydecay1);
      $sb=0;
      label = 3; break;
    case 3: 
      var $6=$sb;
      var $cmp=(($6)|0) < 13;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $scale=0.015625;
      var $7=$sb;
      var $arrayidx=(($enn+($7<<2))|0);
      var $8=HEAPF32[(($arrayidx)>>2)];
      $tmp_enn=$8;
      var $9=$sb;
      var $arrayidx2=(($thm+($9<<2))|0);
      var $10=HEAPF32[(($arrayidx2)>>2)];
      var $mul=($10)*(0.015625);
      $tmp_thm=$mul;
      $sblock=0;
      label = 5; break;
    case 5: 
      var $11=$sblock;
      var $cmp4=(($11)|0) < 3;
      if ($cmp4) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$tmp_enn;
      var $13=$sblock;
      var $14=$sb;
      var $15=$chn_addr;
      var $16=$psv;
      var $en=(($16+5072)|0);
      var $arrayidx6=(($en+($15)*(244))|0);
      var $s=(($arrayidx6+88)|0);
      var $arrayidx7=(($s+($14)*(12))|0);
      var $arrayidx8=(($arrayidx7+($13<<2))|0);
      HEAPF32[(($arrayidx8)>>2)]=$12;
      var $17=$tmp_thm;
      var $18=$sblock;
      var $19=$sb;
      var $20=$chn_addr;
      var $21=$psv;
      var $thm9=(($21+4096)|0);
      var $arrayidx10=(($thm9+($20)*(244))|0);
      var $s11=(($arrayidx10+88)|0);
      var $arrayidx12=(($s11+($19)*(12))|0);
      var $arrayidx13=(($arrayidx12+($18<<2))|0);
      HEAPF32[(($arrayidx13)>>2)]=$17;
      label = 7; break;
    case 7: 
      var $22=$sblock;
      var $inc=((($22)+(1))|0);
      $sblock=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$sb;
      var $inc15=((($23)+(1))|0);
      $sb=$inc15;
      label = 3; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_convert_partition2scalefac_l_to_s["X"]=1;

function _vbrpsy_compute_fft_s($gfc, $buffer, $chn, $sblock, $fftenergy_s, $wsamp_s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $buffer_addr;
      var $chn_addr;
      var $sblock_addr;
      var $fftenergy_s_addr;
      var $wsamp_s_addr;
      var $j;
      var $sqrt2_half;
      var $l;
      var $r;
      var $re;
      var $im;
      $gfc_addr=$gfc;
      $buffer_addr=$buffer;
      $chn_addr=$chn;
      $sblock_addr=$sblock;
      $fftenergy_s_addr=$fftenergy_s;
      $wsamp_s_addr=$wsamp_s;
      var $0=$sblock_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$chn_addr;
      var $cmp1=(($1)|0) < 2;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$gfc_addr;
      var $3=$wsamp_s_addr;
      var $arraydecay=(($3)|0);
      var $4=$chn_addr;
      var $5=$buffer_addr;
      _fft_short($2, $arraydecay, $4, $5);
      label = 5; break;
    case 5: 
      var $6=$chn_addr;
      var $cmp2=(($6)|0)==2;
      if ($cmp2) { label = 6; break; } else { label = 11; break; }
    case 6: 
      $sqrt2_half=0.7071067690849304;
      $j=255;
      label = 7; break;
    case 7: 
      var $7=$j;
      var $cmp4=(($7)|0) >= 0;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $8=$j;
      var $9=$sblock_addr;
      var $10=$wsamp_s_addr;
      var $arrayidx=(($10)|0);
      var $arrayidx5=(($arrayidx+($9<<10))|0);
      var $arrayidx6=(($arrayidx5+($8<<2))|0);
      var $11=HEAPF32[(($arrayidx6)>>2)];
      $l=$11;
      var $12=$j;
      var $13=$sblock_addr;
      var $14=$wsamp_s_addr;
      var $arrayidx7=(($14+3072)|0);
      var $arrayidx8=(($arrayidx7+($13<<10))|0);
      var $arrayidx9=(($arrayidx8+($12<<2))|0);
      var $15=HEAPF32[(($arrayidx9)>>2)];
      $r=$15;
      var $16=$l;
      var $17=$r;
      var $add=($16)+($17);
      var $mul=($add)*(0.7071067690849304);
      var $18=$j;
      var $19=$sblock_addr;
      var $20=$wsamp_s_addr;
      var $arrayidx10=(($20)|0);
      var $arrayidx11=(($arrayidx10+($19<<10))|0);
      var $arrayidx12=(($arrayidx11+($18<<2))|0);
      HEAPF32[(($arrayidx12)>>2)]=$mul;
      var $21=$l;
      var $22=$r;
      var $sub=($21)-($22);
      var $mul13=($sub)*(0.7071067690849304);
      var $23=$j;
      var $24=$sblock_addr;
      var $25=$wsamp_s_addr;
      var $arrayidx14=(($25+3072)|0);
      var $arrayidx15=(($arrayidx14+($24<<10))|0);
      var $arrayidx16=(($arrayidx15+($23<<2))|0);
      HEAPF32[(($arrayidx16)>>2)]=$mul13;
      label = 9; break;
    case 9: 
      var $26=$j;
      var $dec=((($26)-(1))|0);
      $j=$dec;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $27=$sblock_addr;
      var $28=$wsamp_s_addr;
      var $arrayidx18=(($28+($27<<10))|0);
      var $arrayidx19=(($arrayidx18)|0);
      var $29=HEAPF32[(($arrayidx19)>>2)];
      var $30=$sblock_addr;
      var $31=$fftenergy_s_addr;
      var $arrayidx20=(($31+($30)*(516))|0);
      var $arrayidx21=(($arrayidx20)|0);
      HEAPF32[(($arrayidx21)>>2)]=$29;
      var $32=$sblock_addr;
      var $33=$fftenergy_s_addr;
      var $arrayidx22=(($33+($32)*(516))|0);
      var $arrayidx23=(($arrayidx22)|0);
      var $34=HEAPF32[(($arrayidx23)>>2)];
      var $35=$sblock_addr;
      var $36=$fftenergy_s_addr;
      var $arrayidx24=(($36+($35)*(516))|0);
      var $arrayidx25=(($arrayidx24)|0);
      var $37=HEAPF32[(($arrayidx25)>>2)];
      var $mul26=($37)*($34);
      HEAPF32[(($arrayidx25)>>2)]=$mul26;
      $j=127;
      label = 12; break;
    case 12: 
      var $38=$j;
      var $cmp28=(($38)|0) >= 0;
      if ($cmp28) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $39=$j;
      var $sub30=(((128)-($39))|0);
      var $40=$sblock_addr;
      var $41=$wsamp_s_addr;
      var $arrayidx31=(($41+($40<<10))|0);
      var $arrayidx32=(($arrayidx31+($sub30<<2))|0);
      var $42=HEAPF32[(($arrayidx32)>>2)];
      $re=$42;
      var $43=$j;
      var $add33=((($43)+(128))|0);
      var $44=$sblock_addr;
      var $45=$wsamp_s_addr;
      var $arrayidx34=(($45+($44<<10))|0);
      var $arrayidx35=(($arrayidx34+($add33<<2))|0);
      var $46=HEAPF32[(($arrayidx35)>>2)];
      $im=$46;
      var $47=$re;
      var $48=$re;
      var $mul36=($47)*($48);
      var $49=$im;
      var $50=$im;
      var $mul37=($49)*($50);
      var $add38=($mul36)+($mul37);
      var $mul39=($add38)*(0.5);
      var $51=$j;
      var $sub40=(((128)-($51))|0);
      var $52=$sblock_addr;
      var $53=$fftenergy_s_addr;
      var $arrayidx41=(($53+($52)*(516))|0);
      var $arrayidx42=(($arrayidx41+($sub40<<2))|0);
      HEAPF32[(($arrayidx42)>>2)]=$mul39;
      label = 14; break;
    case 14: 
      var $54=$j;
      var $dec44=((($54)-(1))|0);
      $j=$dec44;
      label = 12; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_compute_fft_s["X"]=1;

function _vbrpsy_apply_block_type($psv, $nch, $uselongblock, $blocktype_d) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $psv_addr;
      var $nch_addr;
      var $uselongblock_addr;
      var $blocktype_d_addr;
      var $chn;
      var $blocktype;
      $psv_addr=$psv;
      $nch_addr=$nch;
      $uselongblock_addr=$uselongblock;
      $blocktype_d_addr=$blocktype_d;
      $chn=0;
      label = 3; break;
    case 3: 
      var $0=$chn;
      var $1=$nch_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 15; break; }
    case 4: 
      $blocktype=0;
      var $2=$chn;
      var $3=$uselongblock_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$chn;
      var $6=$psv_addr;
      var $blocktype_old=(($6+6232)|0);
      var $arrayidx1=(($blocktype_old+($5<<2))|0);
      var $7=HEAP32[(($arrayidx1)>>2)];
      var $cmp2=(($7)|0)==2;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $blocktype=3;
      label = 7; break;
    case 7: 
      label = 13; break;
    case 8: 
      $blocktype=2;
      var $8=$chn;
      var $9=$psv_addr;
      var $blocktype_old4=(($9+6232)|0);
      var $arrayidx5=(($blocktype_old4+($8<<2))|0);
      var $10=HEAP32[(($arrayidx5)>>2)];
      var $cmp6=(($10)|0)==0;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $11=$chn;
      var $12=$psv_addr;
      var $blocktype_old8=(($12+6232)|0);
      var $arrayidx9=(($blocktype_old8+($11<<2))|0);
      HEAP32[(($arrayidx9)>>2)]=1;
      label = 10; break;
    case 10: 
      var $13=$chn;
      var $14=$psv_addr;
      var $blocktype_old11=(($14+6232)|0);
      var $arrayidx12=(($blocktype_old11+($13<<2))|0);
      var $15=HEAP32[(($arrayidx12)>>2)];
      var $cmp13=(($15)|0)==3;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $16=$chn;
      var $17=$psv_addr;
      var $blocktype_old15=(($17+6232)|0);
      var $arrayidx16=(($blocktype_old15+($16<<2))|0);
      HEAP32[(($arrayidx16)>>2)]=2;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $18=$chn;
      var $19=$psv_addr;
      var $blocktype_old19=(($19+6232)|0);
      var $arrayidx20=(($blocktype_old19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx20)>>2)];
      var $21=$chn;
      var $22=$blocktype_d_addr;
      var $arrayidx21=(($22+($21<<2))|0);
      HEAP32[(($arrayidx21)>>2)]=$20;
      var $23=$blocktype;
      var $24=$chn;
      var $25=$psv_addr;
      var $blocktype_old22=(($25+6232)|0);
      var $arrayidx23=(($blocktype_old22+($24<<2))|0);
      HEAP32[(($arrayidx23)>>2)]=$23;
      label = 14; break;
    case 14: 
      var $26=$chn;
      var $inc=((($26)+(1))|0);
      $chn=$inc;
      label = 3; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_apply_block_type["X"]=1;

function _vbrpsy_compute_masking_s($gfc, $fftenergy_s, $eb, $thr, $chn, $sblock) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 576)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $fftenergy_s_addr;
      var $eb_addr;
      var $thr_addr;
      var $chn_addr;
      var $sblock_addr;
      var $psv;
      var $gds;
      var $max=__stackBase__;
      var $avg=(__stackBase__)+(256);
      var $i;
      var $j;
      var $b;
      var $mask_idx_s=(__stackBase__)+(512);
      var $ebb;
      var $m;
      var $n;
      var $el;
      var $kk;
      var $last;
      var $delta;
      var $dd;
      var $dd_n;
      var $x;
      var $ecb;
      var $avg_mask;
      var $masking_lower;
      $gfc_addr=$gfc;
      $fftenergy_s_addr=$fftenergy_s;
      $eb_addr=$eb;
      $thr_addr=$thr;
      $chn_addr=$chn;
      $sblock_addr=$sblock;
      var $0=$gfc_addr;
      var $sv_psy=(($0+21564)|0);
      $psv=$sv_psy;
      var $1=$gfc_addr;
      var $cd_psy=(($1+85796)|0);
      var $2=HEAP32[(($cd_psy)>>2)];
      var $s=(($2+2160)|0);
      $gds=$s;
      var $3=$max;
      for (var $$dest = $3>>2, $$stop = $$dest + 64; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $4=$avg;
      for (var $$dest = $4>>2, $$stop = $$dest + 64; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $j=0;
      $b=0;
      label = 3; break;
    case 3: 
      var $5=$b;
      var $6=$gds;
      var $npart=(($6+2148)|0);
      var $7=HEAP32[(($npart)>>2)];
      var $cmp=(($5)|0) < (($7)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $ebb=0;
      $m=0;
      var $8=$b;
      var $9=$gds;
      var $numlines=(($9+1716)|0);
      var $arrayidx=(($numlines+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $n=$10;
      $i=0;
      label = 5; break;
    case 5: 
      var $11=$i;
      var $12=$n;
      var $cmp2=(($11)|0) < (($12)|0);
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $13=$j;
      var $14=$sblock_addr;
      var $15=$fftenergy_s_addr;
      var $arrayidx4=(($15+($14)*(516))|0);
      var $arrayidx5=(($arrayidx4+($13<<2))|0);
      var $16=HEAPF32[(($arrayidx5)>>2)];
      $el=$16;
      var $17=$el;
      var $18=$ebb;
      var $add=($18)+($17);
      $ebb=$add;
      var $19=$m;
      var $20=$el;
      var $cmp6=$19 < $20;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $21=$el;
      $m=$21;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      var $23=$j;
      var $inc7=((($23)+(1))|0);
      $j=$inc7;
      label = 5; break;
    case 10: 
      var $24=$ebb;
      var $25=$b;
      var $26=$eb_addr;
      var $arrayidx8=(($26+($25<<2))|0);
      HEAPF32[(($arrayidx8)>>2)]=$24;
      var $27=$m;
      var $28=$b;
      var $arrayidx9=(($max+($28<<2))|0);
      HEAPF32[(($arrayidx9)>>2)]=$27;
      var $29=$ebb;
      var $30=$b;
      var $31=$gds;
      var $rnumlines=(($31+512)|0);
      var $arrayidx10=(($rnumlines+($30<<2))|0);
      var $32=HEAPF32[(($arrayidx10)>>2)];
      var $mul=($29)*($32);
      var $33=$b;
      var $arrayidx11=(($avg+($33<<2))|0);
      HEAPF32[(($arrayidx11)>>2)]=$mul;
      label = 11; break;
    case 11: 
      var $34=$b;
      var $inc13=((($34)+(1))|0);
      $b=$inc13;
      label = 3; break;
    case 12: 
      var $35=$gfc_addr;
      var $arraydecay=(($max)|0);
      var $arraydecay15=(($avg)|0);
      var $arraydecay16=(($mask_idx_s)|0);
      _vbrpsy_calc_mask_index_s($35, $arraydecay, $arraydecay15, $arraydecay16);
      $b=0;
      $j=0;
      label = 13; break;
    case 13: 
      var $36=$b;
      var $37=$gds;
      var $npart18=(($37+2148)|0);
      var $38=HEAP32[(($npart18)>>2)];
      var $cmp19=(($36)|0) < (($38)|0);
      if ($cmp19) { label = 14; break; } else { label = 27; break; }
    case 14: 
      var $39=$b;
      var $40=$gds;
      var $s3ind=(($40+1204)|0);
      var $arrayidx21=(($s3ind+($39<<3))|0);
      var $arrayidx22=(($arrayidx21)|0);
      var $41=HEAP32[(($arrayidx22)>>2)];
      $kk=$41;
      var $42=$b;
      var $43=$gds;
      var $s3ind23=(($43+1204)|0);
      var $arrayidx24=(($s3ind23+($42<<3))|0);
      var $arrayidx25=(($arrayidx24+4)|0);
      var $44=HEAP32[(($arrayidx25)>>2)];
      $last=$44;
      var $45=$b;
      var $arrayidx26=(($mask_idx_s+$45)|0);
      var $46=HEAP8[($arrayidx26)];
      var $conv=(($46)&255);
      var $call=_mask_add_delta($conv);
      $delta=$call;
      var $47=$b;
      var $48=$gds;
      var $masking_lower27=(($48)|0);
      var $arrayidx28=(($masking_lower27+($47<<2))|0);
      var $49=HEAPF32[(($arrayidx28)>>2)];
      var $50=$gfc_addr;
      var $sv_qnt=(($50+84764)|0);
      var $masking_lower29=(($sv_qnt+140)|0);
      var $51=HEAPF32[(($masking_lower29)>>2)];
      var $mul30=($49)*($51);
      $masking_lower=$mul30;
      var $52=$kk;
      var $arrayidx31=(($mask_idx_s+$52)|0);
      var $53=HEAP8[($arrayidx31)];
      var $conv32=(($53)&255);
      $dd=$conv32;
      $dd_n=1;
      var $54=$j;
      var $55=$gds;
      var $s3=(($55+2156)|0);
      var $56=HEAP32[(($s3)>>2)];
      var $arrayidx33=(($56+($54<<2))|0);
      var $57=HEAPF32[(($arrayidx33)>>2)];
      var $58=$kk;
      var $59=$eb_addr;
      var $arrayidx34=(($59+($58<<2))|0);
      var $60=HEAPF32[(($arrayidx34)>>2)];
      var $mul35=($57)*($60);
      var $61=$kk;
      var $arrayidx36=(($mask_idx_s+$61)|0);
      var $62=HEAP8[($arrayidx36)];
      var $idxprom=(($62)&255);
      var $arrayidx37=((5249776+($idxprom<<2))|0);
      var $63=HEAPF32[(($arrayidx37)>>2)];
      var $mul38=($mul35)*($63);
      $ecb=$mul38;
      var $64=$j;
      var $inc39=((($64)+(1))|0);
      $j=$inc39;
      var $65=$kk;
      var $inc40=((($65)+(1))|0);
      $kk=$inc40;
      label = 15; break;
    case 15: 
      var $66=$kk;
      var $67=$last;
      var $cmp41=(($66)|0) <= (($67)|0);
      if ($cmp41) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $68=$kk;
      var $arrayidx43=(($mask_idx_s+$68)|0);
      var $69=HEAP8[($arrayidx43)];
      var $conv44=(($69)&255);
      var $70=$dd;
      var $add45=((($70)+($conv44))|0);
      $dd=$add45;
      var $71=$dd_n;
      var $add46=((($71)+(1))|0);
      $dd_n=$add46;
      var $72=$j;
      var $73=$gds;
      var $s347=(($73+2156)|0);
      var $74=HEAP32[(($s347)>>2)];
      var $arrayidx48=(($74+($72<<2))|0);
      var $75=HEAPF32[(($arrayidx48)>>2)];
      var $76=$kk;
      var $77=$eb_addr;
      var $arrayidx49=(($77+($76<<2))|0);
      var $78=HEAPF32[(($arrayidx49)>>2)];
      var $mul50=($75)*($78);
      var $79=$kk;
      var $arrayidx51=(($mask_idx_s+$79)|0);
      var $80=HEAP8[($arrayidx51)];
      var $idxprom52=(($80)&255);
      var $arrayidx53=((5249776+($idxprom52<<2))|0);
      var $81=HEAPF32[(($arrayidx53)>>2)];
      var $mul54=($mul50)*($81);
      $x=$mul54;
      var $82=$ecb;
      var $83=$x;
      var $84=$kk;
      var $85=$b;
      var $sub=((($84)-($85))|0);
      var $86=$delta;
      var $call55=_vbrpsy_mask_add($82, $83, $sub, $86);
      $ecb=$call55;
      var $87=$j;
      var $inc56=((($87)+(1))|0);
      $j=$inc56;
      var $88=$kk;
      var $inc57=((($88)+(1))|0);
      $kk=$inc57;
      label = 15; break;
    case 17: 
      var $89=$dd;
      var $mul58=((($89<<1))&-1);
      var $add59=((($mul58)+(1))|0);
      var $90=$dd_n;
      var $mul60=((($90<<1))&-1);
      var $div=((((($add59)|0))/((($mul60)|0)))&-1);
      $dd=$div;
      var $91=$dd;
      var $arrayidx61=((5249776+($91<<2))|0);
      var $92=HEAPF32[(($arrayidx61)>>2)];
      var $mul62=($92)*(0.5);
      $avg_mask=$mul62;
      var $93=$avg_mask;
      var $94=$ecb;
      var $mul63=($94)*($93);
      $ecb=$mul63;
      var $95=$ecb;
      var $96=$b;
      var $97=$thr_addr;
      var $arrayidx64=(($97+($96<<2))|0);
      HEAPF32[(($arrayidx64)>>2)]=$95;
      var $98=$b;
      var $99=$chn_addr;
      var $100=$psv;
      var $nb_s1=(($100+2048)|0);
      var $arrayidx65=(($nb_s1+($99<<8))|0);
      var $arrayidx66=(($arrayidx65+($98<<2))|0);
      var $101=HEAPF32[(($arrayidx66)>>2)];
      var $102=$b;
      var $103=$chn_addr;
      var $104=$psv;
      var $nb_s2=(($104+3072)|0);
      var $arrayidx67=(($nb_s2+($103<<8))|0);
      var $arrayidx68=(($arrayidx67+($102<<2))|0);
      HEAPF32[(($arrayidx68)>>2)]=$101;
      var $105=$ecb;
      var $106=$b;
      var $107=$chn_addr;
      var $108=$psv;
      var $nb_s169=(($108+2048)|0);
      var $arrayidx70=(($nb_s169+($107<<8))|0);
      var $arrayidx71=(($arrayidx70+($106<<2))|0);
      HEAPF32[(($arrayidx71)>>2)]=$105;
      var $109=$b;
      var $arrayidx72=(($max+($109<<2))|0);
      var $110=HEAPF32[(($arrayidx72)>>2)];
      $x=$110;
      var $111=$b;
      var $112=$gds;
      var $minval=(($112+256)|0);
      var $arrayidx73=(($minval+($111<<2))|0);
      var $113=HEAPF32[(($arrayidx73)>>2)];
      var $114=$x;
      var $mul74=($114)*($113);
      $x=$mul74;
      var $115=$avg_mask;
      var $116=$x;
      var $mul75=($116)*($115);
      $x=$mul75;
      var $117=$b;
      var $118=$thr_addr;
      var $arrayidx76=(($118+($117<<2))|0);
      var $119=HEAPF32[(($arrayidx76)>>2)];
      var $120=$x;
      var $cmp77=$119 > $120;
      if ($cmp77) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $121=$x;
      var $122=$b;
      var $123=$thr_addr;
      var $arrayidx80=(($123+($122<<2))|0);
      HEAPF32[(($arrayidx80)>>2)]=$121;
      label = 19; break;
    case 19: 
      var $124=$masking_lower;
      var $cmp82=$124 > 1;
      if ($cmp82) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $125=$masking_lower;
      var $126=$b;
      var $127=$thr_addr;
      var $arrayidx85=(($127+($126<<2))|0);
      var $128=HEAPF32[(($arrayidx85)>>2)];
      var $mul86=($128)*($125);
      HEAPF32[(($arrayidx85)>>2)]=$mul86;
      label = 21; break;
    case 21: 
      var $129=$b;
      var $130=$thr_addr;
      var $arrayidx88=(($130+($129<<2))|0);
      var $131=HEAPF32[(($arrayidx88)>>2)];
      var $132=$b;
      var $133=$eb_addr;
      var $arrayidx89=(($133+($132<<2))|0);
      var $134=HEAPF32[(($arrayidx89)>>2)];
      var $cmp90=$131 > $134;
      if ($cmp90) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $135=$b;
      var $136=$eb_addr;
      var $arrayidx93=(($136+($135<<2))|0);
      var $137=HEAPF32[(($arrayidx93)>>2)];
      var $138=$b;
      var $139=$thr_addr;
      var $arrayidx94=(($139+($138<<2))|0);
      HEAPF32[(($arrayidx94)>>2)]=$137;
      label = 23; break;
    case 23: 
      var $140=$masking_lower;
      var $cmp96=$140 < 1;
      if ($cmp96) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $141=$masking_lower;
      var $142=$b;
      var $143=$thr_addr;
      var $arrayidx99=(($143+($142<<2))|0);
      var $144=HEAPF32[(($arrayidx99)>>2)];
      var $mul100=($144)*($141);
      HEAPF32[(($arrayidx99)>>2)]=$mul100;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $145=$b;
      var $inc103=((($145)+(1))|0);
      $b=$inc103;
      label = 13; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $146=$b;
      var $cmp106=(($146)|0) < 64;
      if ($cmp106) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $147=$b;
      var $148=$eb_addr;
      var $arrayidx109=(($148+($147<<2))|0);
      HEAPF32[(($arrayidx109)>>2)]=0;
      var $149=$b;
      var $150=$thr_addr;
      var $arrayidx110=(($150+($149<<2))|0);
      HEAPF32[(($arrayidx110)>>2)]=0;
      label = 30; break;
    case 30: 
      var $151=$b;
      var $inc112=((($151)+(1))|0);
      $b=$inc112;
      label = 28; break;
    case 31: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_compute_masking_s["X"]=1;

function _convert_partition2scalefac_s($gfc, $eb, $thr, $chn, $sblock) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $eb_addr;
      var $thr_addr;
      var $chn_addr;
      var $sblock_addr;
      var $psv;
      var $gds;
      var $enn=__stackBase__;
      var $thm=(__stackBase__)+(52);
      var $sb;
      $gfc_addr=$gfc;
      $eb_addr=$eb;
      $thr_addr=$thr;
      $chn_addr=$chn;
      $sblock_addr=$sblock;
      var $0=$gfc_addr;
      var $sv_psy=(($0+21564)|0);
      $psv=$sv_psy;
      var $1=$gfc_addr;
      var $cd_psy=(($1+85796)|0);
      var $2=HEAP32[(($cd_psy)>>2)];
      var $s=(($2+2160)|0);
      $gds=$s;
      var $3=$gds;
      var $4=$eb_addr;
      var $5=$thr_addr;
      var $arraydecay=(($enn)|0);
      var $arraydecay1=(($thm)|0);
      _convert_partition2scalefac($3, $4, $5, $arraydecay, $arraydecay1);
      $sb=0;
      label = 3; break;
    case 3: 
      var $6=$sb;
      var $cmp=(($6)|0) < 13;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$sb;
      var $arrayidx=(($enn+($7<<2))|0);
      var $8=HEAPF32[(($arrayidx)>>2)];
      var $9=$sblock_addr;
      var $10=$sb;
      var $11=$chn_addr;
      var $12=$psv;
      var $en=(($12+5072)|0);
      var $arrayidx2=(($en+($11)*(244))|0);
      var $s3=(($arrayidx2+88)|0);
      var $arrayidx4=(($s3+($10)*(12))|0);
      var $arrayidx5=(($arrayidx4+($9<<2))|0);
      HEAPF32[(($arrayidx5)>>2)]=$8;
      var $13=$sb;
      var $arrayidx6=(($thm+($13<<2))|0);
      var $14=HEAPF32[(($arrayidx6)>>2)];
      var $15=$sblock_addr;
      var $16=$sb;
      var $17=$chn_addr;
      var $18=$psv;
      var $thm7=(($18+4096)|0);
      var $arrayidx8=(($thm7+($17)*(244))|0);
      var $s9=(($arrayidx8+88)|0);
      var $arrayidx10=(($s9+($16)*(12))|0);
      var $arrayidx11=(($arrayidx10+($15<<2))|0);
      HEAPF32[(($arrayidx11)>>2)]=$14;
      label = 5; break;
    case 5: 
      var $19=$sb;
      var $inc=((($19)+(1))|0);
      $sb=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_convert_partition2scalefac_s["X"]=1;

function _NS_INTERP($x, $y, $r) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x_addr;
      var $y_addr;
      var $r_addr;
      $x_addr=$x;
      $y_addr=$y;
      $r_addr=$r;
      var $0=$r_addr;
      var $cmp=$0 >= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$x_addr;
      $retval=$1;
      label = 9; break;
    case 4: 
      var $2=$r_addr;
      var $cmp1=$2 <= 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$y_addr;
      $retval=$3;
      label = 9; break;
    case 6: 
      var $4=$y_addr;
      var $cmp4=$4 > 0;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $5=$x_addr;
      var $6=$y_addr;
      var $div=($5)/($6);
      var $7=$r_addr;
      var $8=Math.pow($div, $7);
      var $9=$y_addr;
      var $mul=($8)*($9);
      $retval=$mul;
      label = 9; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $10=$retval;

      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _pecalc_s($mr, $masking_lower) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mr_addr;
      var $masking_lower_addr;
      var $pe_s;
      var $sb;
      var $sblock;
      var $thm;
      var $x;
      var $en;
      $mr_addr=$mr;
      $masking_lower_addr=$masking_lower;
      $pe_s=309.07000732421875;
      $sb=0;
      label = 3; break;
    case 3: 
      var $0=$sb;
      var $cmp=(($0)>>>0) < 12;
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      $sblock=0;
      label = 5; break;
    case 5: 
      var $1=$sblock;
      var $cmp2=(($1)>>>0) < 3;
      if ($cmp2) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $2=$sblock;
      var $3=$sb;
      var $4=$mr_addr;
      var $thm4=(($4)|0);
      var $s=(($thm4+88)|0);
      var $arrayidx=(($s+($3)*(12))|0);
      var $arrayidx5=(($arrayidx+($2<<2))|0);
      var $5=HEAPF32[(($arrayidx5)>>2)];
      $thm=$5;
      var $6=$thm;
      var $cmp6=$6 > 0;
      if ($cmp6) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $7=$thm;
      var $8=$masking_lower_addr;
      var $mul=($7)*($8);
      $x=$mul;
      var $9=$sblock;
      var $10=$sb;
      var $11=$mr_addr;
      var $en7=(($11+244)|0);
      var $s8=(($en7+88)|0);
      var $arrayidx9=(($s8+($10)*(12))|0);
      var $arrayidx10=(($arrayidx9+($9<<2))|0);
      var $12=HEAPF32[(($arrayidx10)>>2)];
      $en=$12;
      var $13=$en;
      var $14=$x;
      var $cmp11=$13 > $14;
      if ($cmp11) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $15=$en;
      var $16=$x;
      var $mul13=($16)*(10000000000);
      var $cmp14=$15 > $mul13;
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$sb;
      var $arrayidx16=((5291432+($17<<2))|0);
      var $18=HEAPF32[(($arrayidx16)>>2)];
      var $conv=$18;
      var $mul17=($conv)*(23.02585092994046);
      var $19=$pe_s;
      var $conv18=$19;
      var $add=($conv18)+($mul17);
      var $conv19=$add;
      $pe_s=$conv19;
      label = 11; break;
    case 10: 
      var $20=$sb;
      var $arrayidx20=((5291432+($20<<2))|0);
      var $21=HEAPF32[(($arrayidx20)>>2)];
      var $conv21=$21;
      var $22=$en;
      var $23=$x;
      var $div=($22)/($23);
      var $call=_fast_log2($div);
      var $conv22=$call;
      var $mul23=($conv22)*(0.30102999566398114);
      var $mul24=($conv21)*($mul23);
      var $24=$pe_s;
      var $conv25=$24;
      var $add26=($conv25)+($mul24);
      var $conv27=$add26;
      $pe_s=$conv27;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $25=$sblock;
      var $inc=((($25)+(1))|0);
      $sblock=$inc;
      label = 5; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $26=$sb;
      var $inc31=((($26)+(1))|0);
      $sb=$inc31;
      label = 3; break;
    case 17: 
      var $27=$pe_s;

      return $27;
    default: assert(0, "bad label: " + label);
  }

}
_pecalc_s["X"]=1;

function _pecalc_l($mr, $masking_lower) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mr_addr;
      var $masking_lower_addr;
      var $pe_l;
      var $sb;
      var $thm;
      var $x;
      var $en;
      $mr_addr=$mr;
      $masking_lower_addr=$masking_lower;
      $pe_l=281.0574951171875;
      $sb=0;
      label = 3; break;
    case 3: 
      var $0=$sb;
      var $cmp=(($0)>>>0) < 21;
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $1=$sb;
      var $2=$mr_addr;
      var $thm1=(($2)|0);
      var $l=(($thm1)|0);
      var $arrayidx=(($l+($1<<2))|0);
      var $3=HEAPF32[(($arrayidx)>>2)];
      $thm=$3;
      var $4=$thm;
      var $cmp2=$4 > 0;
      if ($cmp2) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $5=$thm;
      var $6=$masking_lower_addr;
      var $mul=($5)*($6);
      $x=$mul;
      var $7=$sb;
      var $8=$mr_addr;
      var $en3=(($8+244)|0);
      var $l4=(($en3)|0);
      var $arrayidx5=(($l4+($7<<2))|0);
      var $9=HEAPF32[(($arrayidx5)>>2)];
      $en=$9;
      var $10=$en;
      var $11=$x;
      var $cmp6=$10 > $11;
      if ($cmp6) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $12=$en;
      var $13=$x;
      var $mul8=($13)*(10000000000);
      var $cmp9=$12 > $mul8;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$sb;
      var $arrayidx11=((5291480+($14<<2))|0);
      var $15=HEAPF32[(($arrayidx11)>>2)];
      var $conv=$15;
      var $mul12=($conv)*(23.02585092994046);
      var $16=$pe_l;
      var $conv13=$16;
      var $add=($conv13)+($mul12);
      var $conv14=$add;
      $pe_l=$conv14;
      label = 9; break;
    case 8: 
      var $17=$sb;
      var $arrayidx15=((5291480+($17<<2))|0);
      var $18=HEAPF32[(($arrayidx15)>>2)];
      var $conv16=$18;
      var $19=$en;
      var $20=$x;
      var $div=($19)/($20);
      var $call=_fast_log2($div);
      var $conv17=$call;
      var $mul18=($conv17)*(0.30102999566398114);
      var $mul19=($conv16)*($mul18);
      var $21=$pe_l;
      var $conv20=$21;
      var $add21=($conv20)+($mul19);
      var $conv22=$add21;
      $pe_l=$conv22;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $22=$sb;
      var $inc=((($22)+(1))|0);
      $sb=$inc;
      label = 3; break;
    case 13: 
      var $23=$pe_l;

      return $23;
    default: assert(0, "bad label: " + label);
  }

}
_pecalc_l["X"]=1;

function _psymodel_init($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 768)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $cfg;
      var $psv;
      var $gd;
      var $i;
      var $j;
      var $b;
      var $sb;
      var $k;
      var $bvl_a;
      var $bvl_b;
      var $snr_l_a;
      var $snr_l_b;
      var $snr_s_a;
      var $snr_s_b;
      var $bval=__stackBase__;
      var $bval_width=(__stackBase__)+(256);
      var $norm=(__stackBase__)+(512);
      var $sfreq;
      var $xav;
      var $xbv;
      var $minval_low;
      var $snr;
      var $x;
      var $freq;
      var $level;
      var $x200;
      var $snr201;
      var $freq230;
      var $level236;
      var $msfix;
      var $freq387;
      var $freq_inc;
      var $eql_balance;
      var $x463;
      var $y;
      var $sk_s;
      var $sk_l;
      var $m;
      var $m530;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $internal_flags=(($0+288)|0);
      var $1=HEAP32[(($internal_flags)>>2)];
      $gfc=$1;
      var $2=$gfc;
      var $cfg1=(($2+16)|0);
      $cfg=$cfg1;
      var $3=$gfc;
      var $sv_psy=(($3+21564)|0);
      $psv=$sv_psy;
      $bvl_a=13;
      $bvl_b=24;
      $snr_l_a=0;
      $snr_l_b=0;
      $snr_s_a=-8.25;
      $snr_s_b=-4.5;
      var $4=$cfg;
      var $samplerate_out=(($4+48)|0);
      var $5=HEAP32[(($samplerate_out)>>2)];
      var $conv=(($5)|0);
      $sfreq=$conv;
      $xav=10;
      $xbv=12;
      var $6=$cfg;
      var $minval=(($6+264)|0);
      var $7=HEAPF32[(($minval)>>2)];
      var $sub=(-$7);
      $minval_low=$sub;
      var $8=$gfc;
      var $cd_psy=(($8+85796)|0);
      var $9=HEAP32[(($cd_psy)>>2)];
      var $cmp=(($9)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 135; break;
    case 4: 
      var $10=$norm;
      for (var $$dest = $10>>2, $$stop = $$dest + 64; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $call=_calloc(1, 6504);
      var $11=$call;
      $gd=$11;
      var $12=$gd;
      var $13=$gfc;
      var $cd_psy3=(($13+85796)|0);
      HEAP32[(($cd_psy3)>>2)]=$12;
      var $14=$gfp_addr;
      var $experimentalZ=(($14+144)|0);
      var $15=HEAP32[(($experimentalZ)>>2)];
      var $16=$gd;
      var $force_short_block_calc=(($16+6500)|0);
      HEAP32[(($force_short_block_calc)>>2)]=$15;
      var $17=$psv;
      var $blocktype_old=(($17+6232)|0);
      var $arrayidx=(($blocktype_old+4)|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $18=$psv;
      var $blocktype_old4=(($18+6232)|0);
      var $arrayidx5=(($blocktype_old4)|0);
      HEAP32[(($arrayidx5)>>2)]=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $cmp6=(($19)|0) < 4;
      if ($cmp6) { label = 6; break; } else { label = 28; break; }
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $20=$j;
      var $cmp9=(($20)|0) < 64;
      if ($cmp9) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $21=$j;
      var $22=$i;
      var $23=$psv;
      var $nb_l1=(($23)|0);
      var $arrayidx12=(($nb_l1+($22<<8))|0);
      var $arrayidx13=(($arrayidx12+($21<<2))|0);
      HEAPF32[(($arrayidx13)>>2)]=100000002004087730000;
      var $24=$j;
      var $25=$i;
      var $26=$psv;
      var $nb_l2=(($26+1024)|0);
      var $arrayidx14=(($nb_l2+($25<<8))|0);
      var $arrayidx15=(($arrayidx14+($24<<2))|0);
      HEAPF32[(($arrayidx15)>>2)]=100000002004087730000;
      var $27=$j;
      var $28=$i;
      var $29=$psv;
      var $nb_s2=(($29+3072)|0);
      var $arrayidx16=(($nb_s2+($28<<8))|0);
      var $arrayidx17=(($arrayidx16+($27<<2))|0);
      HEAPF32[(($arrayidx17)>>2)]=1;
      var $30=$j;
      var $31=$i;
      var $32=$psv;
      var $nb_s1=(($32+2048)|0);
      var $arrayidx18=(($nb_s1+($31<<8))|0);
      var $arrayidx19=(($arrayidx18+($30<<2))|0);
      HEAPF32[(($arrayidx19)>>2)]=1;
      label = 9; break;
    case 9: 
      var $33=$j;
      var $inc=((($33)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 10: 
      $sb=0;
      label = 11; break;
    case 11: 
      var $34=$sb;
      var $cmp21=(($34)|0) < 22;
      if ($cmp21) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $35=$sb;
      var $36=$i;
      var $37=$psv;
      var $en=(($37+5072)|0);
      var $arrayidx24=(($en+($36)*(244))|0);
      var $l=(($arrayidx24)|0);
      var $arrayidx25=(($l+($35<<2))|0);
      HEAPF32[(($arrayidx25)>>2)]=100000002004087730000;
      var $38=$sb;
      var $39=$i;
      var $40=$psv;
      var $thm=(($40+4096)|0);
      var $arrayidx26=(($thm+($39)*(244))|0);
      var $l27=(($arrayidx26)|0);
      var $arrayidx28=(($l27+($38<<2))|0);
      HEAPF32[(($arrayidx28)>>2)]=100000002004087730000;
      label = 13; break;
    case 13: 
      var $41=$sb;
      var $inc30=((($41)+(1))|0);
      $sb=$inc30;
      label = 11; break;
    case 14: 
      $j=0;
      label = 15; break;
    case 15: 
      var $42=$j;
      var $cmp33=(($42)|0) < 3;
      if ($cmp33) { label = 16; break; } else { label = 22; break; }
    case 16: 
      $sb=0;
      label = 17; break;
    case 17: 
      var $43=$sb;
      var $cmp37=(($43)|0) < 13;
      if ($cmp37) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $44=$j;
      var $45=$sb;
      var $46=$i;
      var $47=$psv;
      var $en40=(($47+5072)|0);
      var $arrayidx41=(($en40+($46)*(244))|0);
      var $s=(($arrayidx41+88)|0);
      var $arrayidx42=(($s+($45)*(12))|0);
      var $arrayidx43=(($arrayidx42+($44<<2))|0);
      HEAPF32[(($arrayidx43)>>2)]=100000002004087730000;
      var $48=$j;
      var $49=$sb;
      var $50=$i;
      var $51=$psv;
      var $thm44=(($51+4096)|0);
      var $arrayidx45=(($thm44+($50)*(244))|0);
      var $s46=(($arrayidx45+88)|0);
      var $arrayidx47=(($s46+($49)*(12))|0);
      var $arrayidx48=(($arrayidx47+($48<<2))|0);
      HEAPF32[(($arrayidx48)>>2)]=100000002004087730000;
      label = 19; break;
    case 19: 
      var $52=$sb;
      var $inc50=((($52)+(1))|0);
      $sb=$inc50;
      label = 17; break;
    case 20: 
      var $53=$i;
      var $54=$psv;
      var $last_attacks=(($54+6216)|0);
      var $arrayidx52=(($last_attacks+($53<<2))|0);
      HEAP32[(($arrayidx52)>>2)]=0;
      label = 21; break;
    case 21: 
      var $55=$j;
      var $inc54=((($55)+(1))|0);
      $j=$inc54;
      label = 15; break;
    case 22: 
      $j=0;
      label = 23; break;
    case 23: 
      var $56=$j;
      var $cmp57=(($56)|0) < 9;
      if ($cmp57) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $57=$j;
      var $58=$i;
      var $59=$psv;
      var $last_en_subshort=(($59+6072)|0);
      var $arrayidx60=(($last_en_subshort+($58)*(36))|0);
      var $arrayidx61=(($arrayidx60+($57<<2))|0);
      HEAPF32[(($arrayidx61)>>2)]=10;
      label = 25; break;
    case 25: 
      var $60=$j;
      var $inc63=((($60)+(1))|0);
      $j=$inc63;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $61=$i;
      var $inc66=((($61)+(1))|0);
      $i=$inc66;
      label = 5; break;
    case 28: 
      var $62=$psv;
      var $loudness_sq_save=(($62+6048)|0);
      var $arrayidx68=(($loudness_sq_save+4)|0);
      HEAPF32[(($arrayidx68)>>2)]=0;
      var $63=$psv;
      var $loudness_sq_save69=(($63+6048)|0);
      var $arrayidx70=(($loudness_sq_save69)|0);
      HEAPF32[(($arrayidx70)>>2)]=0;
      var $64=$gd;
      var $l71=(($64)|0);
      var $65=$sfreq;
      var $66=$gfc;
      var $scalefac_band=(($66+21360)|0);
      var $l72=(($scalefac_band)|0);
      var $arraydecay=(($l72)|0);
      _init_numline($l71, $65, 1024, 576, 22, $arraydecay);
      var $67=$gd;
      var $l73=(($67)|0);
      var $68=$sfreq;
      var $arraydecay74=(($bval)|0);
      var $arraydecay75=(($bval_width)|0);
      _compute_bark_values($l73, $68, 1024, $arraydecay74, $arraydecay75);
      $i=0;
      label = 29; break;
    case 29: 
      var $69=$i;
      var $70=$gd;
      var $l77=(($70)|0);
      var $npart=(($l77+2148)|0);
      var $71=HEAP32[(($npart)>>2)];
      var $cmp78=(($69)|0) < (($71)|0);
      if ($cmp78) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $72=$snr_l_a;
      var $conv81=$72;
      $snr=$conv81;
      var $73=$i;
      var $arrayidx82=(($bval+($73<<2))|0);
      var $74=HEAPF32[(($arrayidx82)>>2)];
      var $75=$bvl_a;
      var $cmp83=$74 >= $75;
      if ($cmp83) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $76=$snr_l_b;
      var $77=$i;
      var $arrayidx86=(($bval+($77<<2))|0);
      var $78=HEAPF32[(($arrayidx86)>>2)];
      var $79=$bvl_a;
      var $sub87=($78)-($79);
      var $mul=($76)*($sub87);
      var $80=$bvl_b;
      var $81=$bvl_a;
      var $sub88=($80)-($81);
      var $div=($mul)/($sub88);
      var $82=$snr_l_a;
      var $83=$bvl_b;
      var $84=$i;
      var $arrayidx89=(($bval+($84<<2))|0);
      var $85=HEAPF32[(($arrayidx89)>>2)];
      var $sub90=($83)-($85);
      var $mul91=($82)*($sub90);
      var $86=$bvl_b;
      var $87=$bvl_a;
      var $sub92=($86)-($87);
      var $div93=($mul91)/($sub92);
      var $add=($div)+($div93);
      var $conv94=$add;
      $snr=$conv94;
      label = 32; break;
    case 32: 
      var $88=$snr;
      var $div96=($88)/(10);
      var $89=Math.pow(10, $div96);
      var $conv97=$89;
      var $90=$i;
      var $arrayidx98=(($norm+($90<<2))|0);
      HEAPF32[(($arrayidx98)>>2)]=$conv97;
      label = 33; break;
    case 33: 
      var $91=$i;
      var $inc100=((($91)+(1))|0);
      $i=$inc100;
      label = 29; break;
    case 34: 
      var $92=$gd;
      var $l102=(($92)|0);
      var $s3=(($l102+2156)|0);
      var $93=$gd;
      var $l103=(($93)|0);
      var $s3ind=(($l103+1204)|0);
      var $arraydecay104=(($s3ind)|0);
      var $94=$gd;
      var $l105=(($94)|0);
      var $npart106=(($l105+2148)|0);
      var $95=HEAP32[(($npart106)>>2)];
      var $arraydecay107=(($bval)|0);
      var $arraydecay108=(($bval_width)|0);
      var $arraydecay109=(($norm)|0);
      var $call110=_init_s3_values($s3, $arraydecay104, $95, $arraydecay107, $arraydecay108, $arraydecay109);
      $i=$call110;
      var $96=$i;
      var $tobool=(($96)|0)!=0;
      if ($tobool) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $97=$i;
      $retval=$97;
      label = 135; break;
    case 36: 
      $j=0;
      $i=0;
      label = 37; break;
    case 37: 
      var $98=$i;
      var $99=$gd;
      var $l114=(($99)|0);
      var $npart115=(($l114+2148)|0);
      var $100=HEAP32[(($npart115)>>2)];
      var $cmp116=(($98)|0) < (($100)|0);
      if ($cmp116) { label = 38; break; } else { label = 52; break; }
    case 38: 
      $x=1e+37;
      $k=0;
      label = 39; break;
    case 39: 
      var $101=$k;
      var $102=$i;
      var $103=$gd;
      var $l120=(($103)|0);
      var $numlines=(($l120+1716)|0);
      var $arrayidx121=(($numlines+($102<<2))|0);
      var $104=HEAP32[(($arrayidx121)>>2)];
      var $cmp122=(($101)|0) < (($104)|0);
      if ($cmp122) { label = 40; break; } else { label = 44; break; }
    case 40: 
      var $105=$sfreq;
      var $106=$j;
      var $conv125=(($106)|0);
      var $mul126=($105)*($conv125);
      var $conv127=$mul126;
      var $div128=($conv127)/(1024000);
      var $conv129=$div128;
      $freq=$conv129;
      var $107=$cfg;
      var $108=$freq;
      var $mul130=($108)*(1000);
      var $call131=_ATHformula($107, $mul130);
      var $sub132=($call131)-(20);
      $level=$sub132;
      var $109=$level;
      var $conv133=$109;
      var $mul134=($conv133)*(0.1);
      var $110=Math.pow(10, $mul134);
      var $conv135=$110;
      $level=$conv135;
      var $111=$i;
      var $112=$gd;
      var $l136=(($112)|0);
      var $numlines137=(($l136+1716)|0);
      var $arrayidx138=(($numlines137+($111<<2))|0);
      var $113=HEAP32[(($arrayidx138)>>2)];
      var $conv139=(($113)|0);
      var $114=$level;
      var $mul140=($114)*($conv139);
      $level=$mul140;
      var $115=$x;
      var $116=$level;
      var $conv141=$116;
      var $cmp142=$115 > $conv141;
      if ($cmp142) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $117=$level;
      var $conv145=$117;
      $x=$conv145;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $118=$k;
      var $inc148=((($118)+(1))|0);
      $k=$inc148;
      var $119=$j;
      var $inc149=((($119)+(1))|0);
      $j=$inc149;
      label = 39; break;
    case 44: 
      var $120=$x;
      var $conv151=$120;
      var $121=$i;
      var $122=$gfc;
      var $ATH=(($122+85792)|0);
      var $123=HEAP32[(($ATH)>>2)];
      var $cb_l=(($123+212)|0);
      var $arrayidx152=(($cb_l+($121<<2))|0);
      HEAPF32[(($arrayidx152)>>2)]=$conv151;
      var $124=$i;
      var $arrayidx153=(($bval+($124<<2))|0);
      var $125=HEAPF32[(($arrayidx153)>>2)];
      var $126=$xav;
      var $div154=($125)/($126);
      var $conv155=$div154;
      var $sub156=($conv155)-(1);
      var $mul157=($sub156)*(20);
      $x=$mul157;
      var $127=$x;
      var $cmp158=$127 > 6;
      if ($cmp158) { label = 45; break; } else { label = 46; break; }
    case 45: 
      $x=30;
      label = 46; break;
    case 46: 
      var $128=$x;
      var $129=$minval_low;
      var $conv162=$129;
      var $cmp163=$128 < $conv162;
      if ($cmp163) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $130=$minval_low;
      var $conv166=$130;
      $x=$conv166;
      label = 48; break;
    case 48: 
      var $131=$cfg;
      var $samplerate_out168=(($131+48)|0);
      var $132=HEAP32[(($samplerate_out168)>>2)];
      var $cmp169=(($132)|0) < 44000;
      if ($cmp169) { label = 49; break; } else { label = 50; break; }
    case 49: 
      $x=30;
      label = 50; break;
    case 50: 
      var $133=$x;
      var $sub173=($133)-(8);
      $x=$sub173;
      var $134=$x;
      var $div174=($134)/(10);
      var $135=Math.pow(10, $div174);
      var $136=$i;
      var $137=$gd;
      var $l175=(($137)|0);
      var $numlines176=(($l175+1716)|0);
      var $arrayidx177=(($numlines176+($136<<2))|0);
      var $138=HEAP32[(($arrayidx177)>>2)];
      var $conv178=(($138)|0);
      var $mul179=($135)*($conv178);
      var $conv180=$mul179;
      var $139=$i;
      var $140=$gd;
      var $l181=(($140)|0);
      var $minval182=(($l181+256)|0);
      var $arrayidx183=(($minval182+($139<<2))|0);
      HEAPF32[(($arrayidx183)>>2)]=$conv180;
      label = 51; break;
    case 51: 
      var $141=$i;
      var $inc185=((($141)+(1))|0);
      $i=$inc185;
      label = 37; break;
    case 52: 
      var $142=$gd;
      var $s187=(($142+2160)|0);
      var $143=$sfreq;
      var $144=$gfc;
      var $scalefac_band188=(($144+21360)|0);
      var $s189=(($scalefac_band188+92)|0);
      var $arraydecay190=(($s189)|0);
      _init_numline($s187, $143, 256, 192, 13, $arraydecay190);
      var $145=$gd;
      var $s191=(($145+2160)|0);
      var $146=$sfreq;
      var $arraydecay192=(($bval)|0);
      var $arraydecay193=(($bval_width)|0);
      _compute_bark_values($s191, $146, 256, $arraydecay192, $arraydecay193);
      $j=0;
      $i=0;
      label = 53; break;
    case 53: 
      var $147=$i;
      var $148=$gd;
      var $s195=(($148+2160)|0);
      var $npart196=(($s195+2148)|0);
      var $149=HEAP32[(($npart196)>>2)];
      var $cmp197=(($147)|0) < (($149)|0);
      if ($cmp197) { label = 54; break; } else { label = 74; break; }
    case 54: 
      var $150=$snr_s_a;
      var $conv202=$150;
      $snr201=$conv202;
      var $151=$i;
      var $arrayidx203=(($bval+($151<<2))|0);
      var $152=HEAPF32[(($arrayidx203)>>2)];
      var $153=$bvl_a;
      var $cmp204=$152 >= $153;
      if ($cmp204) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $154=$snr_s_b;
      var $155=$i;
      var $arrayidx207=(($bval+($155<<2))|0);
      var $156=HEAPF32[(($arrayidx207)>>2)];
      var $157=$bvl_a;
      var $sub208=($156)-($157);
      var $mul209=($154)*($sub208);
      var $158=$bvl_b;
      var $159=$bvl_a;
      var $sub210=($158)-($159);
      var $div211=($mul209)/($sub210);
      var $160=$snr_s_a;
      var $161=$bvl_b;
      var $162=$i;
      var $arrayidx212=(($bval+($162<<2))|0);
      var $163=HEAPF32[(($arrayidx212)>>2)];
      var $sub213=($161)-($163);
      var $mul214=($160)*($sub213);
      var $164=$bvl_b;
      var $165=$bvl_a;
      var $sub215=($164)-($165);
      var $div216=($mul214)/($sub215);
      var $add217=($div211)+($div216);
      var $conv218=$add217;
      $snr201=$conv218;
      label = 56; break;
    case 56: 
      var $166=$snr201;
      var $div220=($166)/(10);
      var $167=Math.pow(10, $div220);
      var $conv221=$167;
      var $168=$i;
      var $arrayidx222=(($norm+($168<<2))|0);
      HEAPF32[(($arrayidx222)>>2)]=$conv221;
      $x200=1e+37;
      $k=0;
      label = 57; break;
    case 57: 
      var $169=$k;
      var $170=$i;
      var $171=$gd;
      var $s224=(($171+2160)|0);
      var $numlines225=(($s224+1716)|0);
      var $arrayidx226=(($numlines225+($170<<2))|0);
      var $172=HEAP32[(($arrayidx226)>>2)];
      var $cmp227=(($169)|0) < (($172)|0);
      if ($cmp227) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $173=$sfreq;
      var $174=$j;
      var $conv231=(($174)|0);
      var $mul232=($173)*($conv231);
      var $conv233=$mul232;
      var $div234=($conv233)/(256000);
      var $conv235=$div234;
      $freq230=$conv235;
      var $175=$cfg;
      var $176=$freq230;
      var $mul237=($176)*(1000);
      var $call238=_ATHformula($175, $mul237);
      var $sub239=($call238)-(20);
      $level236=$sub239;
      var $177=$level236;
      var $conv240=$177;
      var $mul241=($conv240)*(0.1);
      var $178=Math.pow(10, $mul241);
      var $conv242=$178;
      $level236=$conv242;
      var $179=$i;
      var $180=$gd;
      var $s243=(($180+2160)|0);
      var $numlines244=(($s243+1716)|0);
      var $arrayidx245=(($numlines244+($179<<2))|0);
      var $181=HEAP32[(($arrayidx245)>>2)];
      var $conv246=(($181)|0);
      var $182=$level236;
      var $mul247=($182)*($conv246);
      $level236=$mul247;
      var $183=$x200;
      var $184=$level236;
      var $conv248=$184;
      var $cmp249=$183 > $conv248;
      if ($cmp249) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $185=$level236;
      var $conv252=$185;
      $x200=$conv252;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $186=$k;
      var $inc255=((($186)+(1))|0);
      $k=$inc255;
      var $187=$j;
      var $inc256=((($187)+(1))|0);
      $j=$inc256;
      label = 57; break;
    case 62: 
      var $188=$x200;
      var $conv258=$188;
      var $189=$i;
      var $190=$gfc;
      var $ATH259=(($190+85792)|0);
      var $191=HEAP32[(($ATH259)>>2)];
      var $cb_s=(($191+468)|0);
      var $arrayidx260=(($cb_s+($189<<2))|0);
      HEAPF32[(($arrayidx260)>>2)]=$conv258;
      var $192=$i;
      var $arrayidx261=(($bval+($192<<2))|0);
      var $193=HEAPF32[(($arrayidx261)>>2)];
      var $194=$xbv;
      var $div262=($193)/($194);
      var $conv263=$div262;
      var $sub264=($conv263)-(1);
      var $mul265=($sub264)*(7);
      $x200=$mul265;
      var $195=$i;
      var $arrayidx266=(($bval+($195<<2))|0);
      var $196=HEAPF32[(($arrayidx266)>>2)];
      var $197=$xbv;
      var $cmp267=$196 > $197;
      if ($cmp267) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $198=$x200;
      var $add270=($198)+(1);
      var $call271=Math.log($add270);
      var $mul272=($call271)*(3.1);
      var $add273=($mul272)+(1);
      var $199=$x200;
      var $mul274=($199)*($add273);
      $x200=$mul274;
      label = 64; break;
    case 64: 
      var $200=$i;
      var $arrayidx276=(($bval+($200<<2))|0);
      var $201=HEAPF32[(($arrayidx276)>>2)];
      var $202=$xbv;
      var $cmp277=$201 < $202;
      if ($cmp277) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $203=$x200;
      var $sub280=(1)-($203);
      var $call281=Math.log($sub280);
      var $mul282=($call281)*(2.3);
      var $add283=($mul282)+(1);
      var $204=$x200;
      var $mul284=($204)*($add283);
      $x200=$mul284;
      label = 66; break;
    case 66: 
      var $205=$x200;
      var $cmp286=$205 > 6;
      if ($cmp286) { label = 67; break; } else { label = 68; break; }
    case 67: 
      $x200=30;
      label = 68; break;
    case 68: 
      var $206=$x200;
      var $207=$minval_low;
      var $conv290=$207;
      var $cmp291=$206 < $conv290;
      if ($cmp291) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $208=$minval_low;
      var $conv294=$208;
      $x200=$conv294;
      label = 70; break;
    case 70: 
      var $209=$cfg;
      var $samplerate_out296=(($209+48)|0);
      var $210=HEAP32[(($samplerate_out296)>>2)];
      var $cmp297=(($210)|0) < 44000;
      if ($cmp297) { label = 71; break; } else { label = 72; break; }
    case 71: 
      $x200=30;
      label = 72; break;
    case 72: 
      var $211=$x200;
      var $sub301=($211)-(8);
      $x200=$sub301;
      var $212=$x200;
      var $div302=($212)/(10);
      var $213=Math.pow(10, $div302);
      var $214=$i;
      var $215=$gd;
      var $s303=(($215+2160)|0);
      var $numlines304=(($s303+1716)|0);
      var $arrayidx305=(($numlines304+($214<<2))|0);
      var $216=HEAP32[(($arrayidx305)>>2)];
      var $conv306=(($216)|0);
      var $mul307=($213)*($conv306);
      var $conv308=$mul307;
      var $217=$i;
      var $218=$gd;
      var $s309=(($218+2160)|0);
      var $minval310=(($s309+256)|0);
      var $arrayidx311=(($minval310+($217<<2))|0);
      HEAPF32[(($arrayidx311)>>2)]=$conv308;
      label = 73; break;
    case 73: 
      var $219=$i;
      var $inc313=((($219)+(1))|0);
      $i=$inc313;
      label = 53; break;
    case 74: 
      var $220=$gd;
      var $s315=(($220+2160)|0);
      var $s3316=(($s315+2156)|0);
      var $221=$gd;
      var $s317=(($221+2160)|0);
      var $s3ind318=(($s317+1204)|0);
      var $arraydecay319=(($s3ind318)|0);
      var $222=$gd;
      var $s320=(($222+2160)|0);
      var $npart321=(($s320+2148)|0);
      var $223=HEAP32[(($npart321)>>2)];
      var $arraydecay322=(($bval)|0);
      var $arraydecay323=(($bval_width)|0);
      var $arraydecay324=(($norm)|0);
      var $call325=_init_s3_values($s3316, $arraydecay319, $223, $arraydecay322, $arraydecay323, $arraydecay324);
      $i=$call325;
      var $224=$i;
      var $tobool326=(($224)|0)!=0;
      if ($tobool326) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $225=$i;
      $retval=$225;
      label = 135; break;
    case 76: 
      _init_mask_add_max_values();
      var $226=$gfc;
      _init_fft($226);
      var $227=$sfreq;
      var $conv329=$227;
      var $mul330=($conv329)*(0.01);
      var $div331=($mul330)/(192);
      var $div332=(-2.302585092994046)/($div331);
      var $call333=Math.exp($div332);
      var $conv334=$call333;
      var $228=$gd;
      var $decay=(($228+6496)|0);
      HEAPF32[(($decay)>>2)]=$conv334;
      $msfix=3.5;
      var $229=$cfg;
      var $use_safe_joint_stereo=(($229+80)|0);
      var $230=HEAP32[(($use_safe_joint_stereo)>>2)];
      var $tobool335=(($230)|0)!=0;
      if ($tobool335) { label = 77; break; } else { label = 78; break; }
    case 77: 
      $msfix=1;
      label = 78; break;
    case 78: 
      var $231=$cfg;
      var $msfix338=(($231+176)|0);
      var $232=HEAPF32[(($msfix338)>>2)];
      var $conv339=$232;
      var $call340=Math.abs($conv339);
      var $cmp341=$call340 > 0;
      if ($cmp341) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $233=$cfg;
      var $msfix344=(($233+176)|0);
      var $234=HEAPF32[(($msfix344)>>2)];
      $msfix=$234;
      label = 80; break;
    case 80: 
      var $235=$msfix;
      var $236=$cfg;
      var $msfix346=(($236+176)|0);
      HEAPF32[(($msfix346)>>2)]=$235;
      $b=0;
      label = 81; break;
    case 81: 
      var $237=$b;
      var $238=$gd;
      var $l348=(($238)|0);
      var $npart349=(($l348+2148)|0);
      var $239=HEAP32[(($npart349)>>2)];
      var $cmp350=(($237)|0) < (($239)|0);
      if ($cmp350) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $240=$b;
      var $241=$gd;
      var $l353=(($241)|0);
      var $s3ind354=(($l353+1204)|0);
      var $arrayidx355=(($s3ind354+($240<<3))|0);
      var $arrayidx356=(($arrayidx355+4)|0);
      var $242=HEAP32[(($arrayidx356)>>2)];
      var $243=$gd;
      var $l357=(($243)|0);
      var $npart358=(($l357+2148)|0);
      var $244=HEAP32[(($npart358)>>2)];
      var $sub359=((($244)-(1))|0);
      var $cmp360=(($242)|0) > (($sub359)|0);
      if ($cmp360) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $245=$gd;
      var $l363=(($245)|0);
      var $npart364=(($l363+2148)|0);
      var $246=HEAP32[(($npart364)>>2)];
      var $sub365=((($246)-(1))|0);
      var $247=$b;
      var $248=$gd;
      var $l366=(($248)|0);
      var $s3ind367=(($l366+1204)|0);
      var $arrayidx368=(($s3ind367+($247<<3))|0);
      var $arrayidx369=(($arrayidx368+4)|0);
      HEAP32[(($arrayidx369)>>2)]=$sub365;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $249=$b;
      var $inc372=((($249)+(1))|0);
      $b=$inc372;
      label = 81; break;
    case 86: 
      var $250=$cfg;
      var $mode_gr=(($250+60)|0);
      var $251=HEAP32[(($mode_gr)>>2)];
      var $conv374=(($251)|0);
      var $mul375=($conv374)*(576);
      var $252=$sfreq;
      var $conv376=$252;
      var $div377=($mul375)/($conv376);
      var $mul378=($div377)*(-1.2);
      var $253=Math.pow(10, $mul378);
      var $conv379=$253;
      var $254=$gfc;
      var $ATH380=(($254+85792)|0);
      var $255=HEAP32[(($ATH380)>>2)];
      var $decay381=(($255+16)|0);
      HEAPF32[(($decay381)>>2)]=$conv379;
      var $256=$gfc;
      var $ATH382=(($256+85792)|0);
      var $257=HEAP32[(($ATH382)>>2)];
      var $adjust_factor=(($257+8)|0);
      HEAPF32[(($adjust_factor)>>2)]=0.009999999776482582;
      var $258=$gfc;
      var $ATH383=(($258+85792)|0);
      var $259=HEAP32[(($ATH383)>>2)];
      var $adjust_limit=(($259+12)|0);
      HEAPF32[(($adjust_limit)>>2)]=1;
      var $260=$cfg;
      var $ATHtype=(($260+192)|0);
      var $261=HEAP32[(($ATHtype)>>2)];
      var $cmp384=(($261)|0)!=-1;
      if ($cmp384) { label = 87; break; } else { label = 95; break; }
    case 87: 
      var $262=$cfg;
      var $samplerate_out388=(($262+48)|0);
      var $263=HEAP32[(($samplerate_out388)>>2)];
      var $conv389=(($263)|0);
      var $div390=($conv389)/(1024);
      $freq_inc=$div390;
      $eql_balance=0;
      $freq387=0;
      $i=0;
      label = 88; break;
    case 88: 
      var $264=$i;
      var $cmp392=(($264)|0) < 512;
      if ($cmp392) { label = 89; break; } else { label = 91; break; }
    case 89: 
      var $265=$freq_inc;
      var $266=$freq387;
      var $add395=($266)+($265);
      $freq387=$add395;
      var $267=$cfg;
      var $268=$freq387;
      var $call396=_ATHformula($267, $268);
      var $div397=($call396)/(10);
      var $conv398=$div397;
      var $269=Math.pow(10, $conv398);
      var $div399=(1)/($269);
      var $conv400=$div399;
      var $270=$i;
      var $271=$gfc;
      var $ATH401=(($271+85792)|0);
      var $272=HEAP32[(($ATH401)>>2)];
      var $eql_w=(($272+724)|0);
      var $arrayidx402=(($eql_w+($270<<2))|0);
      HEAPF32[(($arrayidx402)>>2)]=$conv400;
      var $273=$i;
      var $274=$gfc;
      var $ATH403=(($274+85792)|0);
      var $275=HEAP32[(($ATH403)>>2)];
      var $eql_w404=(($275+724)|0);
      var $arrayidx405=(($eql_w404+($273<<2))|0);
      var $276=HEAPF32[(($arrayidx405)>>2)];
      var $277=$eql_balance;
      var $add406=($277)+($276);
      $eql_balance=$add406;
      label = 90; break;
    case 90: 
      var $278=$i;
      var $inc408=((($278)+(1))|0);
      $i=$inc408;
      label = 88; break;
    case 91: 
      var $279=$eql_balance;
      var $conv410=$279;
      var $div411=(1)/($conv410);
      var $conv412=$div411;
      $eql_balance=$conv412;
      $i=512;
      label = 92; break;
    case 92: 
      var $280=$i;
      var $dec=((($280)-(1))|0);
      $i=$dec;
      var $cmp414=(($dec)|0) >= 0;
      if ($cmp414) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $281=$eql_balance;
      var $282=$i;
      var $283=$gfc;
      var $ATH417=(($283+85792)|0);
      var $284=HEAP32[(($ATH417)>>2)];
      var $eql_w418=(($284+724)|0);
      var $arrayidx419=(($eql_w418+($282<<2))|0);
      var $285=HEAPF32[(($arrayidx419)>>2)];
      var $mul420=($285)*($281);
      HEAPF32[(($arrayidx419)>>2)]=$mul420;
      label = 92; break;
    case 94: 
      label = 95; break;
    case 95: 
      $j=0;
      $b=0;
      label = 96; break;
    case 96: 
      var $286=$b;
      var $287=$gd;
      var $s424=(($287+2160)|0);
      var $npart425=(($s424+2148)|0);
      var $288=HEAP32[(($npart425)>>2)];
      var $cmp426=(($286)|0) < (($288)|0);
      if ($cmp426) { label = 97; break; } else { label = 103; break; }
    case 97: 
      $i=0;
      label = 98; break;
    case 98: 
      var $289=$i;
      var $290=$b;
      var $291=$gd;
      var $s430=(($291+2160)|0);
      var $numlines431=(($s430+1716)|0);
      var $arrayidx432=(($numlines431+($290<<2))|0);
      var $292=HEAP32[(($arrayidx432)>>2)];
      var $cmp433=(($289)|0) < (($292)|0);
      if ($cmp433) { label = 99; break; } else { label = 101; break; }
    case 99: 
      var $293=$j;
      var $inc436=((($293)+(1))|0);
      $j=$inc436;
      label = 100; break;
    case 100: 
      var $294=$i;
      var $inc438=((($294)+(1))|0);
      $i=$inc438;
      label = 98; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $295=$b;
      var $inc441=((($295)+(1))|0);
      $b=$inc441;
      label = 96; break;
    case 103: 
      $j=0;
      $b=0;
      label = 104; break;
    case 104: 
      var $296=$b;
      var $297=$gd;
      var $l444=(($297)|0);
      var $npart445=(($l444+2148)|0);
      var $298=HEAP32[(($npart445)>>2)];
      var $cmp446=(($296)|0) < (($298)|0);
      if ($cmp446) { label = 105; break; } else { label = 111; break; }
    case 105: 
      $i=0;
      label = 106; break;
    case 106: 
      var $299=$i;
      var $300=$b;
      var $301=$gd;
      var $l450=(($301)|0);
      var $numlines451=(($l450+1716)|0);
      var $arrayidx452=(($numlines451+($300<<2))|0);
      var $302=HEAP32[(($arrayidx452)>>2)];
      var $cmp453=(($299)|0) < (($302)|0);
      if ($cmp453) { label = 107; break; } else { label = 109; break; }
    case 107: 
      var $303=$j;
      var $inc456=((($303)+(1))|0);
      $j=$inc456;
      label = 108; break;
    case 108: 
      var $304=$i;
      var $inc458=((($304)+(1))|0);
      $i=$inc458;
      label = 106; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $305=$b;
      var $inc461=((($305)+(1))|0);
      $b=$inc461;
      label = 104; break;
    case 111: 
      var $306=$gfp_addr;
      var $attackthre=(($306+264)|0);
      var $307=HEAPF32[(($attackthre)>>2)];
      $x463=$307;
      var $308=$gfp_addr;
      var $attackthre_s=(($308+268)|0);
      var $309=HEAPF32[(($attackthre_s)>>2)];
      $y=$309;
      var $310=$x463;
      var $cmp464=$310 < 0;
      if ($cmp464) { label = 112; break; } else { label = 113; break; }
    case 112: 
      $x463=4.400000095367432;
      label = 113; break;
    case 113: 
      var $311=$y;
      var $cmp468=$311 < 0;
      if ($cmp468) { label = 114; break; } else { label = 115; break; }
    case 114: 
      $y=25;
      label = 115; break;
    case 115: 
      var $312=$x463;
      var $313=$gd;
      var $attack_threshold=(($313+6480)|0);
      var $arrayidx472=(($attack_threshold+8)|0);
      HEAPF32[(($arrayidx472)>>2)]=$312;
      var $314=$gd;
      var $attack_threshold473=(($314+6480)|0);
      var $arrayidx474=(($attack_threshold473+4)|0);
      HEAPF32[(($arrayidx474)>>2)]=$312;
      var $315=$gd;
      var $attack_threshold475=(($315+6480)|0);
      var $arrayidx476=(($attack_threshold475)|0);
      HEAPF32[(($arrayidx476)>>2)]=$312;
      var $316=$y;
      var $317=$gd;
      var $attack_threshold477=(($317+6480)|0);
      var $arrayidx478=(($attack_threshold477+12)|0);
      HEAPF32[(($arrayidx478)>>2)]=$316;
      $sk_s=-10;
      $sk_l=-4.699999809265137;
      var $318=$gfp_addr;
      var $VBR_q=(($318+164)|0);
      var $319=HEAP32[(($VBR_q)>>2)];
      var $cmp479=(($319)|0) < 4;
      if ($cmp479) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $320=HEAPF32[((((5256972)|0))>>2)];
      $sk_s=$320;
      $sk_l=$320;
      label = 118; break;
    case 117: 
      var $321=$gfp_addr;
      var $VBR_q482=(($321+164)|0);
      var $322=HEAP32[(($VBR_q482)>>2)];
      var $arrayidx483=((5256972+($322<<2))|0);
      var $323=HEAPF32[(($arrayidx483)>>2)];
      var $324=$gfp_addr;
      var $VBR_q_frac=(($324+160)|0);
      var $325=HEAPF32[(($VBR_q_frac)>>2)];
      var $326=$gfp_addr;
      var $VBR_q484=(($326+164)|0);
      var $327=HEAP32[(($VBR_q484)>>2)];
      var $arrayidx485=((5256972+($327<<2))|0);
      var $328=HEAPF32[(($arrayidx485)>>2)];
      var $329=$gfp_addr;
      var $VBR_q486=(($329+164)|0);
      var $330=HEAP32[(($VBR_q486)>>2)];
      var $add487=((($330)+(1))|0);
      var $arrayidx488=((5256972+($add487<<2))|0);
      var $331=HEAPF32[(($arrayidx488)>>2)];
      var $sub489=($328)-($331);
      var $mul490=($325)*($sub489);
      var $add491=($323)+($mul490);
      $sk_s=$add491;
      $sk_l=$add491;
      label = 118; break;
    case 118: 
      $b=0;
      label = 119; break;
    case 119: 
      var $332=$b;
      var $333=$gd;
      var $s494=(($333+2160)|0);
      var $npart495=(($s494+2148)|0);
      var $334=HEAP32[(($npart495)>>2)];
      var $cmp496=(($332)|0) < (($334)|0);
      if ($cmp496) { label = 120; break; } else { label = 122; break; }
    case 120: 
      var $335=$gd;
      var $s499=(($335+2160)|0);
      var $npart500=(($s499+2148)|0);
      var $336=HEAP32[(($npart500)>>2)];
      var $337=$b;
      var $sub501=((($336)-($337))|0);
      var $conv502=(($sub501)|0);
      var $338=$gd;
      var $s503=(($338+2160)|0);
      var $npart504=(($s503+2148)|0);
      var $339=HEAP32[(($npart504)>>2)];
      var $conv505=(($339)|0);
      var $div506=($conv502)/($conv505);
      $m=$div506;
      var $340=$sk_s;
      var $341=$m;
      var $mul507=($340)*($341);
      var $mul508=($mul507)*(0.10000000149011612);
      var $342=Math.pow(10, $mul508);
      var $343=$b;
      var $344=$gd;
      var $s509=(($344+2160)|0);
      var $masking_lower=(($s509)|0);
      var $arrayidx510=(($masking_lower+($343<<2))|0);
      HEAPF32[(($arrayidx510)>>2)]=$342;
      label = 121; break;
    case 121: 
      var $345=$b;
      var $inc512=((($345)+(1))|0);
      $b=$inc512;
      label = 119; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $346=$b;
      var $cmp515=(($346)|0) < 64;
      if ($cmp515) { label = 124; break; } else { label = 126; break; }
    case 124: 
      var $347=$b;
      var $348=$gd;
      var $s518=(($348+2160)|0);
      var $masking_lower519=(($s518)|0);
      var $arrayidx520=(($masking_lower519+($347<<2))|0);
      HEAPF32[(($arrayidx520)>>2)]=1;
      label = 125; break;
    case 125: 
      var $349=$b;
      var $inc522=((($349)+(1))|0);
      $b=$inc522;
      label = 123; break;
    case 126: 
      $b=0;
      label = 127; break;
    case 127: 
      var $350=$b;
      var $351=$gd;
      var $l525=(($351)|0);
      var $npart526=(($l525+2148)|0);
      var $352=HEAP32[(($npart526)>>2)];
      var $cmp527=(($350)|0) < (($352)|0);
      if ($cmp527) { label = 128; break; } else { label = 130; break; }
    case 128: 
      var $353=$gd;
      var $l531=(($353)|0);
      var $npart532=(($l531+2148)|0);
      var $354=HEAP32[(($npart532)>>2)];
      var $355=$b;
      var $sub533=((($354)-($355))|0);
      var $conv534=(($sub533)|0);
      var $356=$gd;
      var $l535=(($356)|0);
      var $npart536=(($l535+2148)|0);
      var $357=HEAP32[(($npart536)>>2)];
      var $conv537=(($357)|0);
      var $div538=($conv534)/($conv537);
      $m530=$div538;
      var $358=$sk_l;
      var $359=$m530;
      var $mul539=($358)*($359);
      var $mul540=($mul539)*(0.10000000149011612);
      var $360=Math.pow(10, $mul540);
      var $361=$b;
      var $362=$gd;
      var $l541=(($362)|0);
      var $masking_lower542=(($l541)|0);
      var $arrayidx543=(($masking_lower542+($361<<2))|0);
      HEAPF32[(($arrayidx543)>>2)]=$360;
      label = 129; break;
    case 129: 
      var $363=$b;
      var $inc545=((($363)+(1))|0);
      $b=$inc545;
      label = 127; break;
    case 130: 
      label = 131; break;
    case 131: 
      var $364=$b;
      var $cmp548=(($364)|0) < 64;
      if ($cmp548) { label = 132; break; } else { label = 134; break; }
    case 132: 
      var $365=$b;
      var $366=$gd;
      var $l551=(($366)|0);
      var $masking_lower552=(($l551)|0);
      var $arrayidx553=(($masking_lower552+($365<<2))|0);
      HEAPF32[(($arrayidx553)>>2)]=1;
      label = 133; break;
    case 133: 
      var $367=$b;
      var $inc555=((($367)+(1))|0);
      $b=$inc555;
      label = 131; break;
    case 134: 
      var $368=$gd;
      var $l_to_s=(($368+4320)|0);
      var $369=$l_to_s;
      var $370=$gd;
      var $l557=(($370)|0);
      var $371=$l557;
      assert(2160 % 1 === 0);for (var $$src = $371>>2, $$dest = $369>>2, $$stop = $$src + 540; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $372=$gd;
      var $l_to_s558=(($372+4320)|0);
      var $373=$sfreq;
      var $374=$gfc;
      var $scalefac_band559=(($374+21360)|0);
      var $s560=(($scalefac_band559+92)|0);
      var $arraydecay561=(($s560)|0);
      _init_numline($l_to_s558, $373, 1024, 192, 13, $arraydecay561);
      $retval=0;
      label = 135; break;
    case 135: 
      var $375=$retval;
      STACKTOP = __stackBase__;
      return $375;
    default: assert(0, "bad label: " + label);
  }

}
_psymodel_init["X"]=1;

function _init_numline($gd, $sfreq, $fft_size, $mdct_size, $sbmax, $scalepos) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2312)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gd_addr;
      var $sfreq_addr;
      var $fft_size_addr;
      var $mdct_size_addr;
      var $sbmax_addr;
      var $scalepos_addr;
      var $b_frq=__stackBase__;
      var $mdct_freq_frac;
      var $deltafreq;
      var $partition=(__stackBase__)+(260);
      var $i;
      var $j;
      var $ni;
      var $sfb;
      var $bark1;
      var $j2;
      var $nl;
      var $nl50;
      var $freq;
      var $i1;
      var $i2;
      var $bo;
      var $start;
      var $end;
      var $f_tmp;
      var $bo_w;
      $gd_addr=$gd;
      $sfreq_addr=$sfreq;
      $fft_size_addr=$fft_size;
      $mdct_size_addr=$mdct_size;
      $sbmax_addr=$sbmax;
      $scalepos_addr=$scalepos;
      var $0=$sfreq_addr;
      var $1=$mdct_size_addr;
      var $conv=(($1)|0);
      var $mul=($conv)*(2);
      var $div=($0)/($mul);
      $mdct_freq_frac=$div;
      var $2=$fft_size_addr;
      var $conv1=(($2)|0);
      var $3=$mdct_size_addr;
      var $conv2=(($3)|0);
      var $mul3=($conv2)*(2);
      var $div4=($conv1)/($mul3);
      $deltafreq=$div4;
      var $4=$partition;
      for (var $$dest = $4>>2, $$stop = $$dest + 513; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $5=$fft_size_addr;
      var $conv5=(($5)|0);
      var $6=$sfreq_addr;
      var $div6=($6)/($conv5);
      $sfreq_addr=$div6;
      $j=0;
      $ni=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $cmp=(($7)|0) < 64;
      if ($cmp) { label = 4; break; } else { label = 20; break; }
    case 4: 
      var $8=$sfreq_addr;
      var $9=$j;
      var $conv8=(($9)|0);
      var $mul9=($8)*($conv8);
      var $call=_freq2bark($mul9);
      $bark1=$call;
      var $10=$sfreq_addr;
      var $11=$j;
      var $conv10=(($11)|0);
      var $mul11=($10)*($conv10);
      var $12=$i;
      var $arrayidx=(($b_frq+($12<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=$mul11;
      var $13=$j;
      $j2=$13;
      label = 5; break;
    case 5: 
      var $14=$sfreq_addr;
      var $15=$j2;
      var $conv13=(($15)|0);
      var $mul14=($14)*($conv13);
      var $call15=_freq2bark($mul14);
      var $16=$bark1;
      var $sub=($call15)-($16);
      var $conv16=$sub;
      var $cmp17=$conv16 < 0.34;
      if ($cmp17) { label = 6; break; } else { var $19 = 0;label = 7; break; }
    case 6: 
      var $17=$j2;
      var $18=$fft_size_addr;
      var $div19=((((($18)|0))/(2))&-1);
      var $cmp20=(($17)|0) <= (($div19)|0);
      var $19 = $cmp20;label = 7; break;
    case 7: 
      var $19;
      if ($19) { label = 8; break; } else { label = 10; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $20=$j2;
      var $inc=((($20)+(1))|0);
      $j2=$inc;
      label = 5; break;
    case 10: 
      var $21=$j2;
      var $22=$j;
      var $sub23=((($21)-($22))|0);
      $nl=$sub23;
      var $23=$nl;
      var $24=$i;
      var $25=$gd_addr;
      var $numlines=(($25+1716)|0);
      var $arrayidx24=(($numlines+($24<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$23;
      var $26=$nl;
      var $cmp25=(($26)|0) > 0;
      if ($cmp25) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $27=$nl;
      var $conv27=(($27)|0);
      var $div28=(1)/($conv27);
      var $cond = $div28;label = 13; break;
    case 12: 
      var $cond = 0;label = 13; break;
    case 13: 
      var $cond;
      var $28=$i;
      var $29=$gd_addr;
      var $rnumlines=(($29+512)|0);
      var $arrayidx29=(($rnumlines+($28<<2))|0);
      HEAPF32[(($arrayidx29)>>2)]=$cond;
      var $30=$i;
      var $add=((($30)+(1))|0);
      $ni=$add;
      label = 14; break;
    case 14: 
      var $31=$j;
      var $32=$j2;
      var $cmp30=(($31)|0) < (($32)|0);
      if ($cmp30) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $33=$i;
      var $34=$j;
      var $inc32=((($34)+(1))|0);
      $j=$inc32;
      var $arrayidx33=(($partition+($34<<2))|0);
      HEAP32[(($arrayidx33)>>2)]=$33;
      label = 14; break;
    case 16: 
      var $35=$j;
      var $36=$fft_size_addr;
      var $div34=((((($36)|0))/(2))&-1);
      var $cmp35=(($35)|0) > (($div34)|0);
      if ($cmp35) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $37=$fft_size_addr;
      var $div37=((((($37)|0))/(2))&-1);
      $j=$div37;
      var $38=$i;
      var $inc38=((($38)+(1))|0);
      $i=$inc38;
      label = 20; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $39=$i;
      var $inc40=((($39)+(1))|0);
      $i=$inc40;
      label = 3; break;
    case 20: 
      var $40=$sfreq_addr;
      var $41=$j;
      var $conv42=(($41)|0);
      var $mul43=($40)*($conv42);
      var $42=$i;
      var $arrayidx44=(($b_frq+($42<<2))|0);
      HEAPF32[(($arrayidx44)>>2)]=$mul43;
      var $43=$sbmax_addr;
      var $44=$gd_addr;
      var $n_sb=(($44+2152)|0);
      HEAP32[(($n_sb)>>2)]=$43;
      var $45=$ni;
      var $46=$gd_addr;
      var $npart=(($46+2148)|0);
      HEAP32[(($npart)>>2)]=$45;
      $j=0;
      $i=0;
      label = 21; break;
    case 21: 
      var $47=$i;
      var $48=$gd_addr;
      var $npart46=(($48+2148)|0);
      var $49=HEAP32[(($npart46)>>2)];
      var $cmp47=(($47)|0) < (($49)|0);
      if ($cmp47) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $50=$i;
      var $51=$gd_addr;
      var $numlines51=(($51+1716)|0);
      var $arrayidx52=(($numlines51+($50<<2))|0);
      var $52=HEAP32[(($arrayidx52)>>2)];
      $nl50=$52;
      var $53=$sfreq_addr;
      var $54=$j;
      var $55=$nl50;
      var $div53=((((($55)|0))/(2))&-1);
      var $add54=((($54)+($div53))|0);
      var $conv55=(($add54)|0);
      var $mul56=($53)*($conv55);
      $freq=$mul56;
      var $56=$freq;
      var $conv57=$56;
      var $call58=_stereo_demask($conv57);
      var $57=$i;
      var $58=$gd_addr;
      var $mld_cb=(($58+768)|0);
      var $arrayidx59=(($mld_cb+($57<<2))|0);
      HEAPF32[(($arrayidx59)>>2)]=$call58;
      var $59=$nl50;
      var $60=$j;
      var $add60=((($60)+($59))|0);
      $j=$add60;
      label = 23; break;
    case 23: 
      var $61=$i;
      var $inc62=((($61)+(1))|0);
      $i=$inc62;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $62=$i;
      var $cmp65=(($62)|0) < 64;
      if ($cmp65) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $63=$i;
      var $64=$gd_addr;
      var $mld_cb68=(($64+768)|0);
      var $arrayidx69=(($mld_cb68+($63<<2))|0);
      HEAPF32[(($arrayidx69)>>2)]=1;
      label = 27; break;
    case 27: 
      var $65=$i;
      var $inc71=((($65)+(1))|0);
      $i=$inc71;
      label = 25; break;
    case 28: 
      $sfb=0;
      label = 29; break;
    case 29: 
      var $66=$sfb;
      var $67=$sbmax_addr;
      var $cmp74=(($66)|0) < (($67)|0);
      if ($cmp74) { label = 30; break; } else { label = 41; break; }
    case 30: 
      var $68=$sfb;
      var $69=$scalepos_addr;
      var $arrayidx77=(($69+($68<<2))|0);
      var $70=HEAP32[(($arrayidx77)>>2)];
      $start=$70;
      var $71=$sfb;
      var $add78=((($71)+(1))|0);
      var $72=$scalepos_addr;
      var $arrayidx79=(($72+($add78<<2))|0);
      var $73=HEAP32[(($arrayidx79)>>2)];
      $end=$73;
      var $74=$deltafreq;
      var $conv80=$74;
      var $75=$start;
      var $conv81=(($75)|0);
      var $sub82=($conv81)-(0.5);
      var $mul83=($conv80)*($sub82);
      var $add84=($mul83)+(0.5);
      var $call85=Math.floor($add84);
      var $conv86=(($call85)&-1);
      $i1=$conv86;
      var $76=$i1;
      var $cmp87=(($76)|0) < 0;
      if ($cmp87) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $i1=0;
      label = 32; break;
    case 32: 
      var $77=$deltafreq;
      var $conv91=$77;
      var $78=$end;
      var $conv92=(($78)|0);
      var $sub93=($conv92)-(0.5);
      var $mul94=($conv91)*($sub93);
      var $add95=($mul94)+(0.5);
      var $call96=Math.floor($add95);
      var $conv97=(($call96)&-1);
      $i2=$conv97;
      var $79=$i2;
      var $80=$fft_size_addr;
      var $div98=((((($80)|0))/(2))&-1);
      var $cmp99=(($79)|0) > (($div98)|0);
      if ($cmp99) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $81=$fft_size_addr;
      var $div102=((((($81)|0))/(2))&-1);
      $i2=$div102;
      label = 34; break;
    case 34: 
      var $82=$i2;
      var $arrayidx104=(($partition+($82<<2))|0);
      var $83=HEAP32[(($arrayidx104)>>2)];
      $bo=$83;
      var $84=$i1;
      var $arrayidx105=(($partition+($84<<2))|0);
      var $85=HEAP32[(($arrayidx105)>>2)];
      var $86=$i2;
      var $arrayidx106=(($partition+($86<<2))|0);
      var $87=HEAP32[(($arrayidx106)>>2)];
      var $add107=((($85)+($87))|0);
      var $div108=((((($add107)|0))/(2))&-1);
      var $88=$sfb;
      var $89=$gd_addr;
      var $bm=(($89+1972)|0);
      var $arrayidx109=(($bm+($88<<2))|0);
      HEAP32[(($arrayidx109)>>2)]=$div108;
      var $90=$bo;
      var $91=$sfb;
      var $92=$gd_addr;
      var $bo110=(($92+2060)|0);
      var $arrayidx111=(($bo110+($91<<2))|0);
      HEAP32[(($arrayidx111)>>2)]=$90;
      var $93=$mdct_freq_frac;
      var $94=$end;
      var $conv112=(($94)|0);
      var $mul113=($93)*($conv112);
      $f_tmp=$mul113;
      var $95=$f_tmp;
      var $96=$bo;
      var $arrayidx114=(($b_frq+($96<<2))|0);
      var $97=HEAPF32[(($arrayidx114)>>2)];
      var $sub115=($95)-($97);
      var $98=$bo;
      var $add116=((($98)+(1))|0);
      var $arrayidx117=(($b_frq+($add116<<2))|0);
      var $99=HEAPF32[(($arrayidx117)>>2)];
      var $100=$bo;
      var $arrayidx118=(($b_frq+($100<<2))|0);
      var $101=HEAPF32[(($arrayidx118)>>2)];
      var $sub119=($99)-($101);
      var $div120=($sub115)/($sub119);
      $bo_w=$div120;
      var $102=$bo_w;
      var $cmp121=$102 < 0;
      if ($cmp121) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $bo_w=0;
      label = 39; break;
    case 36: 
      var $103=$bo_w;
      var $cmp124=$103 > 1;
      if ($cmp124) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $bo_w=1;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $104=$bo_w;
      var $105=$sfb;
      var $106=$gd_addr;
      var $bo_weight=(($106+1112)|0);
      var $arrayidx129=(($bo_weight+($105<<2))|0);
      HEAPF32[(($arrayidx129)>>2)]=$104;
      var $107=$mdct_freq_frac;
      var $108=$start;
      var $conv130=(($108)|0);
      var $mul131=($107)*($conv130);
      var $conv132=$mul131;
      var $call133=_stereo_demask($conv132);
      var $109=$sfb;
      var $110=$gd_addr;
      var $mld=(($110+1024)|0);
      var $arrayidx134=(($mld+($109<<2))|0);
      HEAPF32[(($arrayidx134)>>2)]=$call133;
      label = 40; break;
    case 40: 
      var $111=$sfb;
      var $inc136=((($111)+(1))|0);
      $sfb=$inc136;
      label = 29; break;
    case 41: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_numline["X"]=1;

function _compute_bark_values($gd, $sfreq, $fft_size, $bval, $bval_width) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gd_addr;
      var $sfreq_addr;
      var $fft_size_addr;
      var $bval_addr;
      var $bval_width_addr;
      var $k;
      var $j;
      var $ni;
      var $w;
      var $bark1;
      var $bark2;
      $gd_addr=$gd;
      $sfreq_addr=$sfreq;
      $fft_size_addr=$fft_size;
      $bval_addr=$bval;
      $bval_width_addr=$bval_width;
      $j=0;
      var $0=$gd_addr;
      var $npart=(($0+2148)|0);
      var $1=HEAP32[(($npart)>>2)];
      $ni=$1;
      var $2=$fft_size_addr;
      var $conv=(($2)|0);
      var $3=$sfreq_addr;
      var $div=($3)/($conv);
      $sfreq_addr=$div;
      $k=0;
      label = 3; break;
    case 3: 
      var $4=$k;
      var $5=$ni;
      var $cmp=(($4)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$k;
      var $7=$gd_addr;
      var $numlines=(($7+1716)|0);
      var $arrayidx=(($numlines+($6<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      $w=$8;
      var $9=$sfreq_addr;
      var $10=$j;
      var $conv2=(($10)|0);
      var $mul=($9)*($conv2);
      var $call=_freq2bark($mul);
      $bark1=$call;
      var $11=$sfreq_addr;
      var $12=$j;
      var $13=$w;
      var $add=((($12)+($13))|0);
      var $sub=((($add)-(1))|0);
      var $conv3=(($sub)|0);
      var $mul4=($11)*($conv3);
      var $call5=_freq2bark($mul4);
      $bark2=$call5;
      var $14=$bark1;
      var $15=$bark2;
      var $add6=($14)+($15);
      var $conv7=$add6;
      var $mul8=($conv7)*(0.5);
      var $conv9=$mul8;
      var $16=$k;
      var $17=$bval_addr;
      var $arrayidx10=(($17+($16<<2))|0);
      HEAPF32[(($arrayidx10)>>2)]=$conv9;
      var $18=$sfreq_addr;
      var $conv11=$18;
      var $19=$j;
      var $conv12=(($19)|0);
      var $sub13=($conv12)-(0.5);
      var $mul14=($conv11)*($sub13);
      var $conv15=$mul14;
      var $call16=_freq2bark($conv15);
      $bark1=$call16;
      var $20=$sfreq_addr;
      var $conv17=$20;
      var $21=$j;
      var $22=$w;
      var $add18=((($21)+($22))|0);
      var $conv19=(($add18)|0);
      var $sub20=($conv19)-(0.5);
      var $mul21=($conv17)*($sub20);
      var $conv22=$mul21;
      var $call23=_freq2bark($conv22);
      $bark2=$call23;
      var $23=$bark2;
      var $24=$bark1;
      var $sub24=($23)-($24);
      var $25=$k;
      var $26=$bval_width_addr;
      var $arrayidx25=(($26+($25<<2))|0);
      HEAPF32[(($arrayidx25)>>2)]=$sub24;
      var $27=$w;
      var $28=$j;
      var $add26=((($28)+($27))|0);
      $j=$add26;
      label = 5; break;
    case 5: 
      var $29=$k;
      var $inc=((($29)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_compute_bark_values["X"]=1;

function _init_s3_values($p, $s3ind, $npart, $bval, $bval_width, $norm) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16384)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $s3ind_addr;
      var $npart_addr;
      var $bval_addr;
      var $bval_width_addr;
      var $norm_addr;
      var $s3=__stackBase__;
      var $i;
      var $j;
      var $k;
      var $numberOfNoneZero;
      var $v;
      $p_addr=$p;
      $s3ind_addr=$s3ind;
      $npart_addr=$npart;
      $bval_addr=$bval;
      $bval_width_addr=$bval_width;
      $norm_addr=$norm;
      $numberOfNoneZero=0;
      var $arrayidx=(($s3)|0);
      var $arrayidx1=(($arrayidx)|0);
      var $0=$arrayidx1;
      for (var $$dest = $0>>2, $$stop = $$dest + 4096; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$npart_addr;
      var $cmp=(($1)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $3=$j;
      var $4=$npart_addr;
      var $cmp3=(($3)|0) < (($4)|0);
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$i;
      var $6=$bval_addr;
      var $arrayidx5=(($6+($5<<2))|0);
      var $7=HEAPF32[(($arrayidx5)>>2)];
      var $8=$j;
      var $9=$bval_addr;
      var $arrayidx6=(($9+($8<<2))|0);
      var $10=HEAPF32[(($arrayidx6)>>2)];
      var $sub=($7)-($10);
      var $call=_s3_func($sub);
      var $11=$j;
      var $12=$bval_width_addr;
      var $arrayidx7=(($12+($11<<2))|0);
      var $13=HEAPF32[(($arrayidx7)>>2)];
      var $mul=($call)*($13);
      $v=$mul;
      var $14=$v;
      var $15=$i;
      var $16=$norm_addr;
      var $arrayidx8=(($16+($15<<2))|0);
      var $17=HEAPF32[(($arrayidx8)>>2)];
      var $mul9=($14)*($17);
      var $18=$j;
      var $19=$i;
      var $arrayidx10=(($s3+($19<<8))|0);
      var $arrayidx11=(($arrayidx10+($18<<2))|0);
      HEAPF32[(($arrayidx11)>>2)]=$mul9;
      label = 7; break;
    case 7: 
      var $20=$j;
      var $inc=((($20)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $21=$i;
      var $inc13=((($21)+(1))|0);
      $i=$inc13;
      label = 3; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $22=$i;
      var $23=$npart_addr;
      var $cmp16=(($22)|0) < (($23)|0);
      if ($cmp16) { label = 12; break; } else { label = 26; break; }
    case 12: 
      $j=0;
      label = 13; break;
    case 13: 
      var $24=$j;
      var $25=$npart_addr;
      var $cmp19=(($24)|0) < (($25)|0);
      if ($cmp19) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $26=$j;
      var $27=$i;
      var $arrayidx21=(($s3+($27<<8))|0);
      var $arrayidx22=(($arrayidx21+($26<<2))|0);
      var $28=HEAPF32[(($arrayidx22)>>2)];
      var $cmp23=$28 > 0;
      if ($cmp23) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $29=$j;
      var $inc25=((($29)+(1))|0);
      $j=$inc25;
      label = 13; break;
    case 18: 
      var $30=$j;
      var $31=$i;
      var $32=$s3ind_addr;
      var $arrayidx27=(($32+($31<<3))|0);
      var $arrayidx28=(($arrayidx27)|0);
      HEAP32[(($arrayidx28)>>2)]=$30;
      var $33=$npart_addr;
      var $sub29=((($33)-(1))|0);
      $j=$sub29;
      label = 19; break;
    case 19: 
      var $34=$j;
      var $cmp31=(($34)|0) > 0;
      if ($cmp31) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $35=$j;
      var $36=$i;
      var $arrayidx33=(($s3+($36<<8))|0);
      var $arrayidx34=(($arrayidx33+($35<<2))|0);
      var $37=HEAPF32[(($arrayidx34)>>2)];
      var $cmp35=$37 > 0;
      if ($cmp35) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 24; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $38=$j;
      var $dec=((($38)-(1))|0);
      $j=$dec;
      label = 19; break;
    case 24: 
      var $39=$j;
      var $40=$i;
      var $41=$s3ind_addr;
      var $arrayidx40=(($41+($40<<3))|0);
      var $arrayidx41=(($arrayidx40+4)|0);
      HEAP32[(($arrayidx41)>>2)]=$39;
      var $42=$i;
      var $43=$s3ind_addr;
      var $arrayidx42=(($43+($42<<3))|0);
      var $arrayidx43=(($arrayidx42+4)|0);
      var $44=HEAP32[(($arrayidx43)>>2)];
      var $45=$i;
      var $46=$s3ind_addr;
      var $arrayidx44=(($46+($45<<3))|0);
      var $arrayidx45=(($arrayidx44)|0);
      var $47=HEAP32[(($arrayidx45)>>2)];
      var $sub46=((($44)-($47))|0);
      var $add=((($sub46)+(1))|0);
      var $48=$numberOfNoneZero;
      var $add47=((($48)+($add))|0);
      $numberOfNoneZero=$add47;
      label = 25; break;
    case 25: 
      var $49=$i;
      var $inc49=((($49)+(1))|0);
      $i=$inc49;
      label = 11; break;
    case 26: 
      var $50=$numberOfNoneZero;
      var $mul51=((($50<<2))&-1);
      var $call52=_malloc($mul51);
      var $51=$call52;
      var $52=$p_addr;
      HEAP32[(($52)>>2)]=$51;
      var $53=$p_addr;
      var $54=HEAP32[(($53)>>2)];
      var $tobool=(($54)|0)!=0;
      if ($tobool) { label = 28; break; } else { label = 27; break; }
    case 27: 
      $retval=-1;
      label = 37; break;
    case 28: 
      $k=0;
      $i=0;
      label = 29; break;
    case 29: 
      var $55=$i;
      var $56=$npart_addr;
      var $cmp56=(($55)|0) < (($56)|0);
      if ($cmp56) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $57=$i;
      var $58=$s3ind_addr;
      var $arrayidx58=(($58+($57<<3))|0);
      var $arrayidx59=(($arrayidx58)|0);
      var $59=HEAP32[(($arrayidx59)>>2)];
      $j=$59;
      label = 31; break;
    case 31: 
      var $60=$j;
      var $61=$i;
      var $62=$s3ind_addr;
      var $arrayidx61=(($62+($61<<3))|0);
      var $arrayidx62=(($arrayidx61+4)|0);
      var $63=HEAP32[(($arrayidx62)>>2)];
      var $cmp63=(($60)|0) <= (($63)|0);
      if ($cmp63) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $64=$j;
      var $65=$i;
      var $arrayidx65=(($s3+($65<<8))|0);
      var $arrayidx66=(($arrayidx65+($64<<2))|0);
      var $66=HEAPF32[(($arrayidx66)>>2)];
      var $67=$k;
      var $inc67=((($67)+(1))|0);
      $k=$inc67;
      var $68=$p_addr;
      var $69=HEAP32[(($68)>>2)];
      var $arrayidx68=(($69+($67<<2))|0);
      HEAPF32[(($arrayidx68)>>2)]=$66;
      label = 33; break;
    case 33: 
      var $70=$j;
      var $inc70=((($70)+(1))|0);
      $j=$inc70;
      label = 31; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $71=$i;
      var $inc73=((($71)+(1))|0);
      $i=$inc73;
      label = 29; break;
    case 36: 
      $retval=0;
      label = 37; break;
    case 37: 
      var $72=$retval;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }

}
_init_s3_values["X"]=1;

function _init_mask_add_max_values() {
  var label = 0;


  var $0=Math.pow(10, 0.5625);
  var $conv=$0;
  HEAPF32[((5314528)>>2)]=$conv;
  var $1=Math.pow(10, 1.5);
  var $conv1=$1;
  HEAPF32[((5314524)>>2)]=$conv1;
  var $2=Math.pow(10, 1.5);
  var $conv2=$2;
  HEAPF32[((5314520)>>2)]=$conv2;

  return;
}


function _s3_func($bark) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $bark_addr;
      var $tempx;
      var $x;
      var $tempy;
      var $temp;
      $bark_addr=$bark;
      var $0=$bark_addr;
      $tempx=$0;
      var $1=$tempx;
      var $cmp=$1 >= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$tempx;
      var $mul=($2)*(3);
      $tempx=$mul;
      label = 5; break;
    case 4: 
      var $3=$tempx;
      var $conv=$3;
      var $mul1=($conv)*(1.5);
      var $conv2=$mul1;
      $tempx=$conv2;
      label = 5; break;
    case 5: 
      var $4=$tempx;
      var $conv3=$4;
      var $cmp4=$conv3 >= 0.5;
      if ($cmp4) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$tempx;
      var $conv6=$5;
      var $cmp7=$conv6 <= 2.5;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $6=$tempx;
      var $conv10=$6;
      var $sub=($conv10)-(0.5);
      var $conv11=$sub;
      $temp=$conv11;
      var $7=$temp;
      var $8=$temp;
      var $mul12=($7)*($8);
      var $conv13=$mul12;
      var $9=$temp;
      var $conv14=$9;
      var $mul15=($conv14)*(2);
      var $sub16=($conv13)-($mul15);
      var $mul17=($sub16)*(8);
      var $conv18=$mul17;
      $x=$conv18;
      label = 9; break;
    case 8: 
      $x=0;
      label = 9; break;
    case 9: 
      var $10=$tempx;
      var $conv21=$10;
      var $add=($conv21)+(0.474);
      var $conv22=$add;
      $tempx=$conv22;
      var $11=$tempx;
      var $conv23=$11;
      var $mul24=($conv23)*(7.5);
      var $add25=($mul24)+(15.811389);
      var $12=$tempx;
      var $13=$tempx;
      var $mul26=($12)*($13);
      var $conv27=$mul26;
      var $add28=($conv27)+(1);
      var $call=Math.sqrt($add28);
      var $mul29=($call)*(17.5);
      var $sub30=($add25)-($mul29);
      var $conv31=$sub30;
      $tempy=$conv31;
      var $14=$tempy;
      var $conv32=$14;
      var $cmp33=$conv32 <= -60;
      if ($cmp33) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=0;
      label = 12; break;
    case 11: 
      var $15=$x;
      var $16=$tempy;
      var $add37=($15)+($16);
      var $conv38=$add37;
      var $mul39=($conv38)*(0.23025850929940458);
      var $call40=Math.exp($mul39);
      var $conv41=$call40;
      $tempx=$conv41;
      var $17=$tempx;
      var $conv42=$17;
      var $div=($conv42)/(0.6609193);
      var $conv43=$div;
      $tempx=$conv43;
      var $18=$tempx;
      $retval=$18;
      label = 12; break;
    case 12: 
      var $19=$retval;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_s3_func["X"]=1;

function _stereo_demask($f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $arg;
      $f_addr=$f;
      var $0=$f_addr;
      var $conv=$0;
      var $call=_freq2bark($conv);
      var $conv1=$call;
      $arg=$conv1;
      var $1=$arg;
      var $cmp=$1 < 15.5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$arg;
      var $cond = $2;label = 5; break;
    case 4: 
      var $cond = 15.5;label = 5; break;
    case 5: 
      var $cond;
      var $div=($cond)/(15.5);
      $arg=$div;
      var $3=$arg;
      var $mul=($3)*(3.141592653589793);
      var $call3=Math.cos($mul);
      var $sub=(1)-($call3);
      var $mul4=($sub)*(1.25);
      var $sub5=($mul4)-(2.5);
      var $4=Math.pow(10, $sub5);
      var $conv6=$4;

      return $conv6;
    default: assert(0, "bad label: " + label);
  }

}


function _convert_partition2scalefac($gd, $eb, $thr, $enn_out, $thm_out) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gd_addr;
      var $eb_addr;
      var $thr_addr;
      var $enn_out_addr;
      var $thm_out_addr;
      var $enn;
      var $thmm;
      var $sb;
      var $b;
      var $n;
      var $bo_sb;
      var $npart;
      var $b_lim;
      var $w_curr;
      var $w_next;
      $gd_addr=$gd;
      $eb_addr=$eb;
      $thr_addr=$thr;
      $enn_out_addr=$enn_out;
      $thm_out_addr=$thm_out;
      var $0=$gd_addr;
      var $n_sb=(($0+2152)|0);
      var $1=HEAP32[(($n_sb)>>2)];
      $n=$1;
      $thmm=0;
      $enn=0;
      $b=0;
      $sb=0;
      label = 3; break;
    case 3: 
      var $2=$sb;
      var $3=$n;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $4=$sb;
      var $5=$gd_addr;
      var $bo=(($5+2060)|0);
      var $arrayidx=(($bo+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $bo_sb=$6;
      var $7=$gd_addr;
      var $npart1=(($7+2148)|0);
      var $8=HEAP32[(($npart1)>>2)];
      $npart=$8;
      var $9=$bo_sb;
      var $10=$npart;
      var $cmp2=(($9)|0) < (($10)|0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$bo_sb;
      var $cond = $11;label = 7; break;
    case 6: 
      var $12=$npart;
      var $cond = $12;label = 7; break;
    case 7: 
      var $cond;
      $b_lim=$cond;
      label = 8; break;
    case 8: 
      var $13=$b;
      var $14=$b_lim;
      var $cmp3=(($13)|0) < (($14)|0);
      if ($cmp3) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $15=$b;
      var $16=$eb_addr;
      var $arrayidx4=(($16+($15<<2))|0);
      var $17=HEAPF32[(($arrayidx4)>>2)];
      var $18=$enn;
      var $add=($18)+($17);
      $enn=$add;
      var $19=$b;
      var $20=$thr_addr;
      var $arrayidx5=(($20+($19<<2))|0);
      var $21=HEAPF32[(($arrayidx5)>>2)];
      var $22=$thmm;
      var $add6=($22)+($21);
      $thmm=$add6;
      var $23=$b;
      var $inc=((($23)+(1))|0);
      $b=$inc;
      label = 8; break;
    case 10: 
      var $24=$b;
      var $25=$npart;
      var $cmp7=(($24)|0) >= (($25)|0);
      if ($cmp7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $26=$enn;
      var $27=$sb;
      var $28=$enn_out_addr;
      var $arrayidx8=(($28+($27<<2))|0);
      HEAPF32[(($arrayidx8)>>2)]=$26;
      var $29=$thmm;
      var $30=$sb;
      var $31=$thm_out_addr;
      var $arrayidx9=(($31+($30<<2))|0);
      HEAPF32[(($arrayidx9)>>2)]=$29;
      var $32=$sb;
      var $inc10=((($32)+(1))|0);
      $sb=$inc10;
      label = 14; break;
    case 12: 
      var $33=$sb;
      var $34=$gd_addr;
      var $bo_weight=(($34+1112)|0);
      var $arrayidx11=(($bo_weight+($33<<2))|0);
      var $35=HEAPF32[(($arrayidx11)>>2)];
      $w_curr=$35;
      var $36=$w_curr;
      var $sub=(1)-($36);
      $w_next=$sub;
      var $37=$w_curr;
      var $38=$b;
      var $39=$eb_addr;
      var $arrayidx12=(($39+($38<<2))|0);
      var $40=HEAPF32[(($arrayidx12)>>2)];
      var $mul=($37)*($40);
      var $41=$enn;
      var $add13=($41)+($mul);
      $enn=$add13;
      var $42=$w_curr;
      var $43=$b;
      var $44=$thr_addr;
      var $arrayidx14=(($44+($43<<2))|0);
      var $45=HEAPF32[(($arrayidx14)>>2)];
      var $mul15=($42)*($45);
      var $46=$thmm;
      var $add16=($46)+($mul15);
      $thmm=$add16;
      var $47=$enn;
      var $48=$sb;
      var $49=$enn_out_addr;
      var $arrayidx17=(($49+($48<<2))|0);
      HEAPF32[(($arrayidx17)>>2)]=$47;
      var $50=$thmm;
      var $51=$sb;
      var $52=$thm_out_addr;
      var $arrayidx18=(($52+($51<<2))|0);
      HEAPF32[(($arrayidx18)>>2)]=$50;
      var $53=$w_next;
      var $54=$b;
      var $55=$eb_addr;
      var $arrayidx19=(($55+($54<<2))|0);
      var $56=HEAPF32[(($arrayidx19)>>2)];
      var $mul20=($53)*($56);
      $enn=$mul20;
      var $57=$w_next;
      var $58=$b;
      var $59=$thr_addr;
      var $arrayidx21=(($59+($58<<2))|0);
      var $60=HEAPF32[(($arrayidx21)>>2)];
      var $mul22=($57)*($60);
      $thmm=$mul22;
      label = 13; break;
    case 13: 
      var $61=$b;
      var $inc23=((($61)+(1))|0);
      $b=$inc23;
      var $62=$sb;
      var $inc24=((($62)+(1))|0);
      $sb=$inc24;
      label = 3; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $63=$sb;
      var $64=$n;
      var $cmp26=(($63)|0) < (($64)|0);
      if ($cmp26) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $65=$sb;
      var $66=$enn_out_addr;
      var $arrayidx28=(($66+($65<<2))|0);
      HEAPF32[(($arrayidx28)>>2)]=0;
      var $67=$sb;
      var $68=$thm_out_addr;
      var $arrayidx29=(($68+($67<<2))|0);
      HEAPF32[(($arrayidx29)>>2)]=0;
      label = 17; break;
    case 17: 
      var $69=$sb;
      var $inc31=((($69)+(1))|0);
      $sb=$inc31;
      label = 15; break;
    case 18: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_convert_partition2scalefac["X"]=1;

function _vbrpsy_calc_mask_index_s($gfc, $max, $avg, $mask_idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $max_addr;
      var $avg_addr;
      var $mask_idx_addr;
      var $gds;
      var $m;
      var $a;
      var $b;
      var $k;
      var $last_tab_entry;
      $gfc_addr=$gfc;
      $max_addr=$max;
      $avg_addr=$avg;
      $mask_idx_addr=$mask_idx;
      var $0=$gfc_addr;
      var $cd_psy=(($0+85796)|0);
      var $1=HEAP32[(($cd_psy)>>2)];
      var $s=(($1+2160)|0);
      $gds=$s;
      $last_tab_entry=8;
      $b=0;
      var $2=$b;
      var $3=$avg_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAPF32[(($arrayidx)>>2)];
      var $5=$b;
      var $add=((($5)+(1))|0);
      var $6=$avg_addr;
      var $arrayidx1=(($6+($add<<2))|0);
      var $7=HEAPF32[(($arrayidx1)>>2)];
      var $add2=($4)+($7);
      $a=$add2;
      var $8=$a;
      var $cmp=$8 > 0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $9=$b;
      var $10=$max_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      var $11=HEAPF32[(($arrayidx3)>>2)];
      $m=$11;
      var $12=$m;
      var $13=$b;
      var $add4=((($13)+(1))|0);
      var $14=$max_addr;
      var $arrayidx5=(($14+($add4<<2))|0);
      var $15=HEAPF32[(($arrayidx5)>>2)];
      var $cmp6=$12 < $15;
      if ($cmp6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$b;
      var $add8=((($16)+(1))|0);
      var $17=$max_addr;
      var $arrayidx9=(($17+($add8<<2))|0);
      var $18=HEAPF32[(($arrayidx9)>>2)];
      $m=$18;
      label = 5; break;
    case 5: 
      var $19=$m;
      var $mul=($19)*(2);
      var $20=$a;
      var $sub=($mul)-($20);
      var $mul10=($sub)*(20);
      var $21=$a;
      var $22=$b;
      var $23=$gds;
      var $numlines=(($23+1716)|0);
      var $arrayidx11=(($numlines+($22<<2))|0);
      var $24=HEAP32[(($arrayidx11)>>2)];
      var $25=$b;
      var $add12=((($25)+(1))|0);
      var $26=$gds;
      var $numlines13=(($26+1716)|0);
      var $arrayidx14=(($numlines13+($add12<<2))|0);
      var $27=HEAP32[(($arrayidx14)>>2)];
      var $add15=((($24)+($27))|0);
      var $sub16=((($add15)-(1))|0);
      var $conv=(($sub16)|0);
      var $mul17=($21)*($conv);
      var $div=($mul10)/($mul17);
      $a=$div;
      var $28=$a;
      var $conv18=(($28)&-1);
      $k=$conv18;
      var $29=$k;
      var $cmp19=(($29)|0) > 8;
      if ($cmp19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $k=8;
      label = 7; break;
    case 7: 
      var $30=$k;
      var $conv23=(($30) & 255);
      var $31=$b;
      var $32=$mask_idx_addr;
      var $arrayidx24=(($32+$31)|0);
      HEAP8[($arrayidx24)]=$conv23;
      label = 9; break;
    case 8: 
      var $33=$b;
      var $34=$mask_idx_addr;
      var $arrayidx25=(($34+$33)|0);
      HEAP8[($arrayidx25)]=0;
      label = 9; break;
    case 9: 
      $b=1;
      label = 10; break;
    case 10: 
      var $35=$b;
      var $36=$gds;
      var $npart=(($36+2148)|0);
      var $37=HEAP32[(($npart)>>2)];
      var $sub27=((($37)-(1))|0);
      var $cmp28=(($35)|0) < (($sub27)|0);
      if ($cmp28) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $38=$b;
      var $sub30=((($38)-(1))|0);
      var $39=$avg_addr;
      var $arrayidx31=(($39+($sub30<<2))|0);
      var $40=HEAPF32[(($arrayidx31)>>2)];
      var $41=$b;
      var $42=$avg_addr;
      var $arrayidx32=(($42+($41<<2))|0);
      var $43=HEAPF32[(($arrayidx32)>>2)];
      var $add33=($40)+($43);
      var $44=$b;
      var $add34=((($44)+(1))|0);
      var $45=$avg_addr;
      var $arrayidx35=(($45+($add34<<2))|0);
      var $46=HEAPF32[(($arrayidx35)>>2)];
      var $add36=($add33)+($46);
      $a=$add36;
      var $47=$a;
      var $conv37=$47;
      var $cmp38=$conv37 > 0;
      if ($cmp38) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $48=$b;
      var $sub41=((($48)-(1))|0);
      var $49=$max_addr;
      var $arrayidx42=(($49+($sub41<<2))|0);
      var $50=HEAPF32[(($arrayidx42)>>2)];
      $m=$50;
      var $51=$m;
      var $52=$b;
      var $53=$max_addr;
      var $arrayidx43=(($53+($52<<2))|0);
      var $54=HEAPF32[(($arrayidx43)>>2)];
      var $cmp44=$51 < $54;
      if ($cmp44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $55=$b;
      var $56=$max_addr;
      var $arrayidx47=(($56+($55<<2))|0);
      var $57=HEAPF32[(($arrayidx47)>>2)];
      $m=$57;
      label = 14; break;
    case 14: 
      var $58=$m;
      var $59=$b;
      var $add49=((($59)+(1))|0);
      var $60=$max_addr;
      var $arrayidx50=(($60+($add49<<2))|0);
      var $61=HEAPF32[(($arrayidx50)>>2)];
      var $cmp51=$58 < $61;
      if ($cmp51) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $62=$b;
      var $add54=((($62)+(1))|0);
      var $63=$max_addr;
      var $arrayidx55=(($63+($add54<<2))|0);
      var $64=HEAPF32[(($arrayidx55)>>2)];
      $m=$64;
      label = 16; break;
    case 16: 
      var $65=$m;
      var $mul57=($65)*(3);
      var $66=$a;
      var $sub58=($mul57)-($66);
      var $mul59=($sub58)*(20);
      var $67=$a;
      var $68=$b;
      var $sub60=((($68)-(1))|0);
      var $69=$gds;
      var $numlines61=(($69+1716)|0);
      var $arrayidx62=(($numlines61+($sub60<<2))|0);
      var $70=HEAP32[(($arrayidx62)>>2)];
      var $71=$b;
      var $72=$gds;
      var $numlines63=(($72+1716)|0);
      var $arrayidx64=(($numlines63+($71<<2))|0);
      var $73=HEAP32[(($arrayidx64)>>2)];
      var $add65=((($70)+($73))|0);
      var $74=$b;
      var $add66=((($74)+(1))|0);
      var $75=$gds;
      var $numlines67=(($75+1716)|0);
      var $arrayidx68=(($numlines67+($add66<<2))|0);
      var $76=HEAP32[(($arrayidx68)>>2)];
      var $add69=((($add65)+($76))|0);
      var $sub70=((($add69)-(1))|0);
      var $conv71=(($sub70)|0);
      var $mul72=($67)*($conv71);
      var $div73=($mul59)/($mul72);
      $a=$div73;
      var $77=$a;
      var $conv74=(($77)&-1);
      $k=$conv74;
      var $78=$k;
      var $cmp75=(($78)|0) > 8;
      if ($cmp75) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $k=8;
      label = 18; break;
    case 18: 
      var $79=$k;
      var $conv79=(($79) & 255);
      var $80=$b;
      var $81=$mask_idx_addr;
      var $arrayidx80=(($81+$80)|0);
      HEAP8[($arrayidx80)]=$conv79;
      label = 20; break;
    case 19: 
      var $82=$b;
      var $83=$mask_idx_addr;
      var $arrayidx82=(($83+$82)|0);
      HEAP8[($arrayidx82)]=0;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $84=$b;
      var $inc=((($84)+(1))|0);
      $b=$inc;
      label = 10; break;
    case 22: 
      var $85=$b;
      var $sub84=((($85)-(1))|0);
      var $86=$avg_addr;
      var $arrayidx85=(($86+($sub84<<2))|0);
      var $87=HEAPF32[(($arrayidx85)>>2)];
      var $88=$b;
      var $89=$avg_addr;
      var $arrayidx86=(($89+($88<<2))|0);
      var $90=HEAPF32[(($arrayidx86)>>2)];
      var $add87=($87)+($90);
      $a=$add87;
      var $91=$a;
      var $cmp88=$91 > 0;
      if ($cmp88) { label = 23; break; } else { label = 28; break; }
    case 23: 
      var $92=$b;
      var $sub91=((($92)-(1))|0);
      var $93=$max_addr;
      var $arrayidx92=(($93+($sub91<<2))|0);
      var $94=HEAPF32[(($arrayidx92)>>2)];
      $m=$94;
      var $95=$m;
      var $96=$b;
      var $97=$max_addr;
      var $arrayidx93=(($97+($96<<2))|0);
      var $98=HEAPF32[(($arrayidx93)>>2)];
      var $cmp94=$95 < $98;
      if ($cmp94) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $99=$b;
      var $100=$max_addr;
      var $arrayidx97=(($100+($99<<2))|0);
      var $101=HEAPF32[(($arrayidx97)>>2)];
      $m=$101;
      label = 25; break;
    case 25: 
      var $102=$m;
      var $mul99=($102)*(2);
      var $103=$a;
      var $sub100=($mul99)-($103);
      var $mul101=($sub100)*(20);
      var $104=$a;
      var $105=$b;
      var $sub102=((($105)-(1))|0);
      var $106=$gds;
      var $numlines103=(($106+1716)|0);
      var $arrayidx104=(($numlines103+($sub102<<2))|0);
      var $107=HEAP32[(($arrayidx104)>>2)];
      var $108=$b;
      var $109=$gds;
      var $numlines105=(($109+1716)|0);
      var $arrayidx106=(($numlines105+($108<<2))|0);
      var $110=HEAP32[(($arrayidx106)>>2)];
      var $add107=((($107)+($110))|0);
      var $sub108=((($add107)-(1))|0);
      var $conv109=(($sub108)|0);
      var $mul110=($104)*($conv109);
      var $div111=($mul101)/($mul110);
      $a=$div111;
      var $111=$a;
      var $conv112=(($111)&-1);
      $k=$conv112;
      var $112=$k;
      var $cmp113=(($112)|0) > 8;
      if ($cmp113) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $k=8;
      label = 27; break;
    case 27: 
      var $113=$k;
      var $conv117=(($113) & 255);
      var $114=$b;
      var $115=$mask_idx_addr;
      var $arrayidx118=(($115+$114)|0);
      HEAP8[($arrayidx118)]=$conv117;
      label = 29; break;
    case 28: 
      var $116=$b;
      var $117=$mask_idx_addr;
      var $arrayidx120=(($117+$116)|0);
      HEAP8[($arrayidx120)]=0;
      label = 29; break;
    case 29: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_calc_mask_index_s["X"]=1;

function _mask_add_delta($i) {
  var label = 0;


  var $i_addr;
  $i_addr=$i;
  var $0=$i_addr;
  var $arrayidx=((5249740+($0<<2))|0);
  var $1=HEAP32[(($arrayidx)>>2)];

  return $1;
}


function _calc_energy($l, $fftenergy, $eb, $max, $avg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $l_addr;
      var $fftenergy_addr;
      var $eb_addr;
      var $max_addr;
      var $avg_addr;
      var $b;
      var $j;
      var $ebb;
      var $m;
      var $i;
      var $el;
      $l_addr=$l;
      $fftenergy_addr=$fftenergy;
      $eb_addr=$eb;
      $max_addr=$max;
      $avg_addr=$avg;
      $j=0;
      $b=0;
      label = 3; break;
    case 3: 
      var $0=$b;
      var $1=$l_addr;
      var $npart=(($1+2148)|0);
      var $2=HEAP32[(($npart)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $ebb=0;
      $m=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $4=$b;
      var $5=$l_addr;
      var $numlines=(($5+1716)|0);
      var $arrayidx=(($numlines+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $cmp2=(($3)|0) < (($6)|0);
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $7=$j;
      var $8=$fftenergy_addr;
      var $arrayidx4=(($8+($7<<2))|0);
      var $9=HEAPF32[(($arrayidx4)>>2)];
      $el=$9;
      var $10=$el;
      var $11=$ebb;
      var $add=($11)+($10);
      $ebb=$add;
      var $12=$m;
      var $13=$el;
      var $cmp5=$12 < $13;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=$el;
      $m=$14;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      var $16=$j;
      var $inc6=((($16)+(1))|0);
      $j=$inc6;
      label = 5; break;
    case 10: 
      var $17=$ebb;
      var $18=$b;
      var $19=$eb_addr;
      var $arrayidx7=(($19+($18<<2))|0);
      HEAPF32[(($arrayidx7)>>2)]=$17;
      var $20=$m;
      var $21=$b;
      var $22=$max_addr;
      var $arrayidx8=(($22+($21<<2))|0);
      HEAPF32[(($arrayidx8)>>2)]=$20;
      var $23=$ebb;
      var $24=$b;
      var $25=$l_addr;
      var $rnumlines=(($25+512)|0);
      var $arrayidx9=(($rnumlines+($24<<2))|0);
      var $26=HEAPF32[(($arrayidx9)>>2)];
      var $mul=($23)*($26);
      var $27=$b;
      var $28=$avg_addr;
      var $arrayidx10=(($28+($27<<2))|0);
      HEAPF32[(($arrayidx10)>>2)]=$mul;
      label = 11; break;
    case 11: 
      var $29=$b;
      var $inc12=((($29)+(1))|0);
      $b=$inc12;
      label = 3; break;
    case 12: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_calc_energy["X"]=1;

function _vbrpsy_mask_add($m1, $m2, $b, $delta) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m1_addr;
      var $m2_addr;
      var $b_addr;
      var $delta_addr;
      var $ratio;
      var $i;
      $m1_addr=$m1;
      $m2_addr=$m2;
      $b_addr=$b;
      $delta_addr=$delta;
      var $0=$m1_addr;
      var $cmp=$0 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $m1_addr=0;
      label = 4; break;
    case 4: 
      var $1=$m2_addr;
      var $cmp1=$1 < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $m2_addr=0;
      label = 6; break;
    case 6: 
      var $2=$m1_addr;
      var $cmp4=$2 <= 0;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $3=$m2_addr;
      $retval=$3;
      label = 22; break;
    case 8: 
      var $4=$m2_addr;
      var $cmp7=$4 <= 0;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $5=$m1_addr;
      $retval=$5;
      label = 22; break;
    case 10: 
      var $6=$m2_addr;
      var $7=$m1_addr;
      var $cmp10=$6 > $7;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $8=$m2_addr;
      var $9=$m1_addr;
      var $div=($8)/($9);
      $ratio=$div;
      label = 13; break;
    case 12: 
      var $10=$m1_addr;
      var $11=$m2_addr;
      var $div12=($10)/($11);
      $ratio=$div12;
      label = 13; break;
    case 13: 
      var $12=$b_addr;
      var $call=Math.abs($12);
      var $13=$delta_addr;
      var $cmp14=(($call)|0) <= (($13)|0);
      if ($cmp14) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $14=$ratio;
      var $15=HEAPF32[((5314528)>>2)];
      var $cmp16=$14 >= $15;
      if ($cmp16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $16=$m1_addr;
      var $17=$m2_addr;
      var $add=($16)+($17);
      $retval=$add;
      label = 22; break;
    case 16: 
      var $18=$ratio;
      var $call19=_fast_log2($18);
      var $conv=$call19;
      var $mul=($conv)*(4.816479930623698);
      var $conv20=(($mul)&-1);
      $i=$conv20;
      var $19=$m1_addr;
      var $20=$m2_addr;
      var $add21=($19)+($20);
      var $21=$i;
      var $arrayidx=((5248064+($21<<2))|0);
      var $22=HEAPF32[(($arrayidx)>>2)];
      var $mul22=($add21)*($22);
      $retval=$mul22;
      label = 22; break;
    case 17: 
      var $23=$ratio;
      var $24=HEAPF32[((5314524)>>2)];
      var $cmp24=$23 < $24;
      if ($cmp24) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $25=$m1_addr;
      var $26=$m2_addr;
      var $add27=($25)+($26);
      $retval=$add27;
      label = 22; break;
    case 19: 
      var $27=$m1_addr;
      var $28=$m2_addr;
      var $cmp29=$27 < $28;
      if ($cmp29) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $29=$m2_addr;
      $m1_addr=$29;
      label = 21; break;
    case 21: 
      var $30=$m1_addr;
      $retval=$30;
      label = 22; break;
    case 22: 
      var $31=$retval;

      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_vbrpsy_mask_add["X"]=1;

function _calc_mask_index_l($gfc, $max, $avg, $mask_idx) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $max_addr;
      var $avg_addr;
      var $mask_idx_addr;
      var $gdl;
      var $m;
      var $a;
      var $b;
      var $k;
      var $last_tab_entry;
      $gfc_addr=$gfc;
      $max_addr=$max;
      $avg_addr=$avg;
      $mask_idx_addr=$mask_idx;
      var $0=$gfc_addr;
      var $cd_psy=(($0+85796)|0);
      var $1=HEAP32[(($cd_psy)>>2)];
      var $l=(($1)|0);
      $gdl=$l;
      $last_tab_entry=8;
      $b=0;
      var $2=$b;
      var $3=$avg_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAPF32[(($arrayidx)>>2)];
      var $5=$b;
      var $add=((($5)+(1))|0);
      var $6=$avg_addr;
      var $arrayidx1=(($6+($add<<2))|0);
      var $7=HEAPF32[(($arrayidx1)>>2)];
      var $add2=($4)+($7);
      $a=$add2;
      var $8=$a;
      var $cmp=$8 > 0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $9=$b;
      var $10=$max_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      var $11=HEAPF32[(($arrayidx3)>>2)];
      $m=$11;
      var $12=$m;
      var $13=$b;
      var $add4=((($13)+(1))|0);
      var $14=$max_addr;
      var $arrayidx5=(($14+($add4<<2))|0);
      var $15=HEAPF32[(($arrayidx5)>>2)];
      var $cmp6=$12 < $15;
      if ($cmp6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$b;
      var $add8=((($16)+(1))|0);
      var $17=$max_addr;
      var $arrayidx9=(($17+($add8<<2))|0);
      var $18=HEAPF32[(($arrayidx9)>>2)];
      $m=$18;
      label = 5; break;
    case 5: 
      var $19=$m;
      var $mul=($19)*(2);
      var $20=$a;
      var $sub=($mul)-($20);
      var $mul10=($sub)*(20);
      var $21=$a;
      var $22=$b;
      var $23=$gdl;
      var $numlines=(($23+1716)|0);
      var $arrayidx11=(($numlines+($22<<2))|0);
      var $24=HEAP32[(($arrayidx11)>>2)];
      var $25=$b;
      var $add12=((($25)+(1))|0);
      var $26=$gdl;
      var $numlines13=(($26+1716)|0);
      var $arrayidx14=(($numlines13+($add12<<2))|0);
      var $27=HEAP32[(($arrayidx14)>>2)];
      var $add15=((($24)+($27))|0);
      var $sub16=((($add15)-(1))|0);
      var $conv=(($sub16)|0);
      var $mul17=($21)*($conv);
      var $div=($mul10)/($mul17);
      $a=$div;
      var $28=$a;
      var $conv18=(($28)&-1);
      $k=$conv18;
      var $29=$k;
      var $cmp19=(($29)|0) > 8;
      if ($cmp19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $k=8;
      label = 7; break;
    case 7: 
      var $30=$k;
      var $conv23=(($30) & 255);
      var $31=$b;
      var $32=$mask_idx_addr;
      var $arrayidx24=(($32+$31)|0);
      HEAP8[($arrayidx24)]=$conv23;
      label = 9; break;
    case 8: 
      var $33=$b;
      var $34=$mask_idx_addr;
      var $arrayidx25=(($34+$33)|0);
      HEAP8[($arrayidx25)]=0;
      label = 9; break;
    case 9: 
      $b=1;
      label = 10; break;
    case 10: 
      var $35=$b;
      var $36=$gdl;
      var $npart=(($36+2148)|0);
      var $37=HEAP32[(($npart)>>2)];
      var $sub27=((($37)-(1))|0);
      var $cmp28=(($35)|0) < (($sub27)|0);
      if ($cmp28) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $38=$b;
      var $sub30=((($38)-(1))|0);
      var $39=$avg_addr;
      var $arrayidx31=(($39+($sub30<<2))|0);
      var $40=HEAPF32[(($arrayidx31)>>2)];
      var $41=$b;
      var $42=$avg_addr;
      var $arrayidx32=(($42+($41<<2))|0);
      var $43=HEAPF32[(($arrayidx32)>>2)];
      var $add33=($40)+($43);
      var $44=$b;
      var $add34=((($44)+(1))|0);
      var $45=$avg_addr;
      var $arrayidx35=(($45+($add34<<2))|0);
      var $46=HEAPF32[(($arrayidx35)>>2)];
      var $add36=($add33)+($46);
      $a=$add36;
      var $47=$a;
      var $cmp37=$47 > 0;
      if ($cmp37) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $48=$b;
      var $sub40=((($48)-(1))|0);
      var $49=$max_addr;
      var $arrayidx41=(($49+($sub40<<2))|0);
      var $50=HEAPF32[(($arrayidx41)>>2)];
      $m=$50;
      var $51=$m;
      var $52=$b;
      var $53=$max_addr;
      var $arrayidx42=(($53+($52<<2))|0);
      var $54=HEAPF32[(($arrayidx42)>>2)];
      var $cmp43=$51 < $54;
      if ($cmp43) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $55=$b;
      var $56=$max_addr;
      var $arrayidx46=(($56+($55<<2))|0);
      var $57=HEAPF32[(($arrayidx46)>>2)];
      $m=$57;
      label = 14; break;
    case 14: 
      var $58=$m;
      var $59=$b;
      var $add48=((($59)+(1))|0);
      var $60=$max_addr;
      var $arrayidx49=(($60+($add48<<2))|0);
      var $61=HEAPF32[(($arrayidx49)>>2)];
      var $cmp50=$58 < $61;
      if ($cmp50) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $62=$b;
      var $add53=((($62)+(1))|0);
      var $63=$max_addr;
      var $arrayidx54=(($63+($add53<<2))|0);
      var $64=HEAPF32[(($arrayidx54)>>2)];
      $m=$64;
      label = 16; break;
    case 16: 
      var $65=$m;
      var $mul56=($65)*(3);
      var $66=$a;
      var $sub57=($mul56)-($66);
      var $mul58=($sub57)*(20);
      var $67=$a;
      var $68=$b;
      var $sub59=((($68)-(1))|0);
      var $69=$gdl;
      var $numlines60=(($69+1716)|0);
      var $arrayidx61=(($numlines60+($sub59<<2))|0);
      var $70=HEAP32[(($arrayidx61)>>2)];
      var $71=$b;
      var $72=$gdl;
      var $numlines62=(($72+1716)|0);
      var $arrayidx63=(($numlines62+($71<<2))|0);
      var $73=HEAP32[(($arrayidx63)>>2)];
      var $add64=((($70)+($73))|0);
      var $74=$b;
      var $add65=((($74)+(1))|0);
      var $75=$gdl;
      var $numlines66=(($75+1716)|0);
      var $arrayidx67=(($numlines66+($add65<<2))|0);
      var $76=HEAP32[(($arrayidx67)>>2)];
      var $add68=((($add64)+($76))|0);
      var $sub69=((($add68)-(1))|0);
      var $conv70=(($sub69)|0);
      var $mul71=($67)*($conv70);
      var $div72=($mul58)/($mul71);
      $a=$div72;
      var $77=$a;
      var $conv73=(($77)&-1);
      $k=$conv73;
      var $78=$k;
      var $cmp74=(($78)|0) > 8;
      if ($cmp74) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $k=8;
      label = 18; break;
    case 18: 
      var $79=$k;
      var $conv78=(($79) & 255);
      var $80=$b;
      var $81=$mask_idx_addr;
      var $arrayidx79=(($81+$80)|0);
      HEAP8[($arrayidx79)]=$conv78;
      label = 20; break;
    case 19: 
      var $82=$b;
      var $83=$mask_idx_addr;
      var $arrayidx81=(($83+$82)|0);
      HEAP8[($arrayidx81)]=0;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $84=$b;
      var $inc=((($84)+(1))|0);
      $b=$inc;
      label = 10; break;
    case 22: 
      var $85=$b;
      var $sub83=((($85)-(1))|0);
      var $86=$avg_addr;
      var $arrayidx84=(($86+($sub83<<2))|0);
      var $87=HEAPF32[(($arrayidx84)>>2)];
      var $88=$b;
      var $89=$avg_addr;
      var $arrayidx85=(($89+($88<<2))|0);
      var $90=HEAPF32[(($arrayidx85)>>2)];
      var $add86=($87)+($90);
      $a=$add86;
      var $91=$a;
      var $cmp87=$91 > 0;
      if ($cmp87) { label = 23; break; } else { label = 28; break; }
    case 23: 
      var $92=$b;
      var $sub90=((($92)-(1))|0);
      var $93=$max_addr;
      var $arrayidx91=(($93+($sub90<<2))|0);
      var $94=HEAPF32[(($arrayidx91)>>2)];
      $m=$94;
      var $95=$m;
      var $96=$b;
      var $97=$max_addr;
      var $arrayidx92=(($97+($96<<2))|0);
      var $98=HEAPF32[(($arrayidx92)>>2)];
      var $cmp93=$95 < $98;
      if ($cmp93) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $99=$b;
      var $100=$max_addr;
      var $arrayidx96=(($100+($99<<2))|0);
      var $101=HEAPF32[(($arrayidx96)>>2)];
      $m=$101;
      label = 25; break;
    case 25: 
      var $102=$m;
      var $mul98=($102)*(2);
      var $103=$a;
      var $sub99=($mul98)-($103);
      var $mul100=($sub99)*(20);
      var $104=$a;
      var $105=$b;
      var $sub101=((($105)-(1))|0);
      var $106=$gdl;
      var $numlines102=(($106+1716)|0);
      var $arrayidx103=(($numlines102+($sub101<<2))|0);
      var $107=HEAP32[(($arrayidx103)>>2)];
      var $108=$b;
      var $109=$gdl;
      var $numlines104=(($109+1716)|0);
      var $arrayidx105=(($numlines104+($108<<2))|0);
      var $110=HEAP32[(($arrayidx105)>>2)];
      var $add106=((($107)+($110))|0);
      var $sub107=((($add106)-(1))|0);
      var $conv108=(($sub107)|0);
      var $mul109=($104)*($conv108);
      var $div110=($mul100)/($mul109);
      $a=$div110;
      var $111=$a;
      var $conv111=(($111)&-1);
      $k=$conv111;
      var $112=$k;
      var $cmp112=(($112)|0) > 8;
      if ($cmp112) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $k=8;
      label = 27; break;
    case 27: 
      var $113=$k;
      var $conv116=(($113) & 255);
      var $114=$b;
      var $115=$mask_idx_addr;
      var $arrayidx117=(($115+$114)|0);
      HEAP8[($arrayidx117)]=$conv116;
      label = 29; break;
    case 28: 
      var $116=$b;
      var $117=$mask_idx_addr;
      var $arrayidx119=(($117+$116)|0);
      HEAP8[($arrayidx119)]=0;
      label = 29; break;
    case 29: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_calc_mask_index_l["X"]=1;

function _psycho_loudness_approx($energy, $eql_w) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $energy_addr;
      var $eql_w_addr;
      var $i;
      var $loudness_power;
      $energy_addr=$energy;
      $eql_w_addr=$eql_w;
      $loudness_power=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 512;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$energy_addr;
      var $arrayidx=(($2+($1<<2))|0);
      var $3=HEAPF32[(($arrayidx)>>2)];
      var $4=$i;
      var $5=$eql_w_addr;
      var $arrayidx1=(($5+($4<<2))|0);
      var $6=HEAPF32[(($arrayidx1)>>2)];
      var $mul=($3)*($6);
      var $7=$loudness_power;
      var $add=($7)+($mul);
      $loudness_power=$add;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $9=$loudness_power;
      var $conv=$9;
      var $mul2=($conv)*(8.974871343596633e-12);
      var $conv3=$mul2;
      $loudness_power=$conv3;
      var $10=$loudness_power;

      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _init_xrpow_core_init($gfc) {
  var label = 0;


  var $gfc_addr;
  $gfc_addr=$gfc;
  var $0=$gfc_addr;
  var $init_xrpow_core=(($0+85820)|0);
  HEAP32[(($init_xrpow_core)>>2)]=46;

  return;
}


function _init_xrpow_core_c($cod_info, $xrpow, $upper, $sum) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cod_info_addr;
      var $xrpow_addr;
      var $upper_addr;
      var $sum_addr;
      var $i;
      var $tmp;
      $cod_info_addr=$cod_info;
      $xrpow_addr=$xrpow;
      $upper_addr=$upper;
      $sum_addr=$sum;
      var $0=$sum_addr;
      HEAPF32[(($0)>>2)]=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$upper_addr;
      var $cmp=(($1)|0) <= (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$i;
      var $4=$cod_info_addr;
      var $xr=(($4)|0);
      var $arrayidx=(($xr+($3<<2))|0);
      var $5=HEAPF32[(($arrayidx)>>2)];
      var $conv=$5;
      var $call=Math.abs($conv);
      var $conv1=$call;
      $tmp=$conv1;
      var $6=$tmp;
      var $7=$sum_addr;
      var $8=HEAPF32[(($7)>>2)];
      var $add=($8)+($6);
      HEAPF32[(($7)>>2)]=$add;
      var $9=$tmp;
      var $conv2=$9;
      var $10=$tmp;
      var $conv3=$10;
      var $call4=Math.sqrt($conv3);
      var $mul=($conv2)*($call4);
      var $call5=Math.sqrt($mul);
      var $conv6=$call5;
      var $11=$i;
      var $12=$xrpow_addr;
      var $arrayidx7=(($12+($11<<2))|0);
      HEAPF32[(($arrayidx7)>>2)]=$conv6;
      var $13=$i;
      var $14=$xrpow_addr;
      var $arrayidx8=(($14+($13<<2))|0);
      var $15=HEAPF32[(($arrayidx8)>>2)];
      var $16=$cod_info_addr;
      var $xrpow_max=(($16+4764)|0);
      var $17=HEAPF32[(($xrpow_max)>>2)];
      var $cmp9=$15 > $17;
      if ($cmp9) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$i;
      var $19=$xrpow_addr;
      var $arrayidx11=(($19+($18<<2))|0);
      var $20=HEAPF32[(($arrayidx11)>>2)];
      var $21=$cod_info_addr;
      var $xrpow_max12=(($21+4764)|0);
      HEAPF32[(($xrpow_max12)>>2)]=$20;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_xrpow_core_c["X"]=1;

function _VBR_old_iteration_loop($gfc, $pe, $ms_ener_ratio, $ratio) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 3040)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ms_ener_ratio_addr;
      var $ratio_addr;
      var $cfg;
      var $eov;
      var $l3_xmin=__stackBase__;
      var $xrpow=(__stackBase__)+(624);
      var $bands=(__stackBase__)+(2928);
      var $frameBits=(__stackBase__)+(2944);
      var $used_bits;
      var $bits;
      var $min_bits=(__stackBase__)+(3004);
      var $max_bits=(__stackBase__)+(3020);
      var $mean_bits=(__stackBase__)+(3036);
      var $ch;
      var $gr;
      var $analog_silence;
      var $l3_side;
      var $ret;
      var $cod_info;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $ratio_addr=$ratio;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      var $3=$gfc_addr;
      var $4=$pe_addr;
      var $5=$ms_ener_ratio_addr;
      var $6=$ratio_addr;
      var $arraydecay=(($l3_xmin)|0);
      var $arraydecay3=(($frameBits)|0);
      var $arraydecay4=(($min_bits)|0);
      var $arraydecay5=(($max_bits)|0);
      var $arraydecay6=(($bands)|0);
      var $call=_VBR_old_prepare($3, $4, $5, $6, $arraydecay, $arraydecay3, $arraydecay4, $arraydecay5, $arraydecay6);
      $analog_silence=$call;
      label = 3; break;
    case 3: 
      $used_bits=0;
      $gr=0;
      label = 4; break;
    case 4: 
      var $7=$gr;
      var $8=$cfg;
      var $mode_gr=(($8+60)|0);
      var $9=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($7)|0) < (($9)|0);
      if ($cmp) { label = 5; break; } else { label = 16; break; }
    case 5: 
      $ch=0;
      label = 6; break;
    case 6: 
      var $10=$ch;
      var $11=$cfg;
      var $channels_out=(($11+56)|0);
      var $12=HEAP32[(($channels_out)>>2)];
      var $cmp9=(($10)|0) < (($12)|0);
      if ($cmp9) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $13=$ch;
      var $14=$gr;
      var $15=$l3_side;
      var $tt=(($15)|0);
      var $arrayidx=(($tt+($14)*(10504))|0);
      var $arrayidx11=(($arrayidx+($13)*(5252))|0);
      $cod_info=$arrayidx11;
      var $16=$gfc_addr;
      var $17=$cod_info;
      var $arraydecay12=(($xrpow)|0);
      var $call13=_init_xrpow($16, $17, $arraydecay12);
      $ret=$call13;
      var $18=$ret;
      var $cmp14=(($18)|0)==0;
      if ($cmp14) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $19=$ch;
      var $20=$gr;
      var $arrayidx15=(($max_bits+($20<<3))|0);
      var $arrayidx16=(($arrayidx15+($19<<2))|0);
      var $21=HEAP32[(($arrayidx16)>>2)];
      var $cmp17=(($21)|0)==0;
      if ($cmp17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 13; break;
    case 10: 
      var $22=$gfc_addr;
      var $23=$cod_info;
      var $24=$ch;
      var $25=$gr;
      var $arrayidx18=(($l3_xmin+($25)*(312))|0);
      var $arrayidx19=(($arrayidx18+($24)*(156))|0);
      var $arraydecay20=(($arrayidx19)|0);
      var $arraydecay21=(($xrpow)|0);
      var $26=$ch;
      var $27=$ch;
      var $28=$gr;
      var $arrayidx22=(($min_bits+($28<<3))|0);
      var $arrayidx23=(($arrayidx22+($27<<2))|0);
      var $29=HEAP32[(($arrayidx23)>>2)];
      var $30=$ch;
      var $31=$gr;
      var $arrayidx24=(($max_bits+($31<<3))|0);
      var $arrayidx25=(($arrayidx24+($30<<2))|0);
      var $32=HEAP32[(($arrayidx25)>>2)];
      _VBR_encode_granule($22, $23, $arraydecay20, $arraydecay21, $26, $29, $32);
      var $33=$gfc_addr;
      var $sv_qnt=(($33+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $34=HEAP32[(($substep_shaping)>>2)];
      var $and=$34 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $35=$gfc_addr;
      var $36=$ch;
      var $37=$gr;
      var $38=$l3_side;
      var $tt27=(($38)|0);
      var $arrayidx28=(($tt27+($37)*(10504))|0);
      var $arrayidx29=(($arrayidx28+($36)*(5252))|0);
      var $39=$ch;
      var $40=$gr;
      var $arrayidx30=(($l3_xmin+($40)*(312))|0);
      var $arrayidx31=(($arrayidx30+($39)*(156))|0);
      var $arraydecay32=(($arrayidx31)|0);
      var $arraydecay33=(($xrpow)|0);
      _trancate_smallspectrums($35, $arrayidx29, $arraydecay32, $arraydecay33);
      label = 12; break;
    case 12: 
      var $41=$cod_info;
      var $part2_3_length=(($41+4768)|0);
      var $42=HEAP32[(($part2_3_length)>>2)];
      var $43=$cod_info;
      var $part2_length=(($43+4844)|0);
      var $44=HEAP32[(($part2_length)>>2)];
      var $add=((($42)+($44))|0);
      $ret=$add;
      var $45=$ret;
      var $46=$used_bits;
      var $add35=((($46)+($45))|0);
      $used_bits=$add35;
      label = 13; break;
    case 13: 
      var $47=$ch;
      var $inc=((($47)+(1))|0);
      $ch=$inc;
      label = 6; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $48=$gr;
      var $inc37=((($48)+(1))|0);
      $gr=$inc37;
      label = 4; break;
    case 16: 
      var $49=$analog_silence;
      var $tobool39=(($49)|0)!=0;
      if ($tobool39) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $50=$cfg;
      var $enforce_min_bitrate=(($50+108)|0);
      var $51=HEAP32[(($enforce_min_bitrate)>>2)];
      var $tobool40=(($51)|0)!=0;
      if ($tobool40) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $52=$eov;
      var $bitrate_index=(($52+704)|0);
      HEAP32[(($bitrate_index)>>2)]=1;
      label = 20; break;
    case 19: 
      var $53=$cfg;
      var $vbr_min_bitrate_index=(($53+96)|0);
      var $54=HEAP32[(($vbr_min_bitrate_index)>>2)];
      var $55=$eov;
      var $bitrate_index42=(($55+704)|0);
      HEAP32[(($bitrate_index42)>>2)]=$54;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $56=$eov;
      var $bitrate_index45=(($56+704)|0);
      var $57=HEAP32[(($bitrate_index45)>>2)];
      var $58=$cfg;
      var $vbr_max_bitrate_index=(($58+100)|0);
      var $59=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $cmp46=(($57)|0) < (($59)|0);
      if ($cmp46) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $60=$used_bits;
      var $61=$eov;
      var $bitrate_index48=(($61+704)|0);
      var $62=HEAP32[(($bitrate_index48)>>2)];
      var $arrayidx49=(($frameBits+($62<<2))|0);
      var $63=HEAP32[(($arrayidx49)>>2)];
      var $cmp50=(($60)|0) <= (($63)|0);
      if ($cmp50) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $64=$eov;
      var $bitrate_index54=(($64+704)|0);
      var $65=HEAP32[(($bitrate_index54)>>2)];
      var $inc55=((($65)+(1))|0);
      HEAP32[(($bitrate_index54)>>2)]=$inc55;
      label = 21; break;
    case 26: 
      var $66=$gfc_addr;
      var $call57=_ResvFrameBegin($66, $mean_bits);
      $bits=$call57;
      var $67=$used_bits;
      var $68=$bits;
      var $cmp58=(($67)|0) <= (($68)|0);
      if ($cmp58) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $69=$gfc_addr;
      var $arraydecay61=(($l3_xmin)|0);
      var $arraydecay62=(($min_bits)|0);
      var $arraydecay63=(($max_bits)|0);
      _bitpressure_strategy($69, $arraydecay61, $arraydecay62, $arraydecay63);
      label = 3; break;
    case 29: 
      $gr=0;
      label = 30; break;
    case 30: 
      var $70=$gr;
      var $71=$cfg;
      var $mode_gr66=(($71+60)|0);
      var $72=HEAP32[(($mode_gr66)>>2)];
      var $cmp67=(($70)|0) < (($72)|0);
      if ($cmp67) { label = 31; break; } else { label = 37; break; }
    case 31: 
      $ch=0;
      label = 32; break;
    case 32: 
      var $73=$ch;
      var $74=$cfg;
      var $channels_out70=(($74+56)|0);
      var $75=HEAP32[(($channels_out70)>>2)];
      var $cmp71=(($73)|0) < (($75)|0);
      if ($cmp71) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $76=$gfc_addr;
      var $77=$gr;
      var $78=$ch;
      _iteration_finish_one($76, $77, $78);
      label = 34; break;
    case 34: 
      var $79=$ch;
      var $inc74=((($79)+(1))|0);
      $ch=$inc74;
      label = 32; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $80=$gr;
      var $inc77=((($80)+(1))|0);
      $gr=$inc77;
      label = 30; break;
    case 37: 
      var $81=$gfc_addr;
      var $82=HEAP32[(($mean_bits)>>2)];
      _ResvFrameEnd($81, $82);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_VBR_old_iteration_loop["X"]=1;

function _VBR_old_prepare($gfc, $pe, $ms_ener_ratio, $ratio, $l3_xmin, $frameBits, $min_bits, $max_bits, $bands) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ms_ener_ratio_addr;
      var $ratio_addr;
      var $l3_xmin_addr;
      var $frameBits_addr;
      var $min_bits_addr;
      var $max_bits_addr;
      var $bands_addr;
      var $cfg;
      var $eov;
      var $masking_lower_db;
      var $adjust;
      var $gr;
      var $ch;
      var $analog_silence;
      var $avg=__stackBase__;
      var $mxb;
      var $bits;
      var $cod_info;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $ratio_addr=$ratio;
      $l3_xmin_addr=$l3_xmin;
      $frameBits_addr=$frameBits;
      $min_bits_addr=$min_bits;
      $max_bits_addr=$max_bits;
      $bands_addr=$bands;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      $adjust=0;
      $analog_silence=1;
      $bits=0;
      var $2=$cfg;
      var $vbr_max_bitrate_index=(($2+100)|0);
      var $3=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $4=$eov;
      var $bitrate_index=(($4+704)|0);
      HEAP32[(($bitrate_index)>>2)]=$3;
      var $5=$gfc_addr;
      var $call=_ResvFrameBegin($5, $avg);
      var $6=$cfg;
      var $mode_gr=(($6+60)|0);
      var $7=HEAP32[(($mode_gr)>>2)];
      var $div=((((($call)|0))/((($7)|0)))&-1);
      HEAP32[(($avg)>>2)]=$div;
      var $8=$gfc_addr;
      var $9=$frameBits_addr;
      _get_framebits($8, $9);
      $gr=0;
      label = 3; break;
    case 3: 
      var $10=$gr;
      var $11=$cfg;
      var $mode_gr2=(($11+60)|0);
      var $12=HEAP32[(($mode_gr2)>>2)];
      var $cmp=(($10)|0) < (($12)|0);
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $13=$gfc_addr;
      var $14=$pe_addr;
      var $15=$gr;
      var $16=$max_bits_addr;
      var $arrayidx=(($16+($15<<3))|0);
      var $arraydecay=(($arrayidx)|0);
      var $17=HEAP32[(($avg)>>2)];
      var $18=$gr;
      var $call3=_on_pe($13, $14, $arraydecay, $17, $18, 0);
      $mxb=$call3;
      var $19=$gfc_addr;
      var $ov_enc4=(($19+84036)|0);
      var $mode_ext=(($ov_enc4+716)|0);
      var $20=HEAP32[(($mode_ext)>>2)];
      var $cmp5=(($20)|0)==2;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$gfc_addr;
      var $l3_side=(($21+304)|0);
      var $22=$gr;
      _ms_convert($l3_side, $22);
      var $23=$gr;
      var $24=$max_bits_addr;
      var $arrayidx6=(($24+($23<<3))|0);
      var $arraydecay7=(($arrayidx6)|0);
      var $25=$gr;
      var $26=$ms_ener_ratio_addr;
      var $arrayidx8=(($26+($25<<2))|0);
      var $27=HEAPF32[(($arrayidx8)>>2)];
      var $28=HEAP32[(($avg)>>2)];
      var $29=$mxb;
      _reduce_side($arraydecay7, $27, $28, $29);
      label = 6; break;
    case 6: 
      $ch=0;
      label = 7; break;
    case 7: 
      var $30=$ch;
      var $31=$cfg;
      var $channels_out=(($31+56)|0);
      var $32=HEAP32[(($channels_out)>>2)];
      var $cmp10=(($30)|0) < (($32)|0);
      if ($cmp10) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $33=$ch;
      var $34=$gr;
      var $35=$gfc_addr;
      var $l3_side12=(($35+304)|0);
      var $tt=(($l3_side12)|0);
      var $arrayidx13=(($tt+($34)*(10504))|0);
      var $arrayidx14=(($arrayidx13+($33)*(5252))|0);
      $cod_info=$arrayidx14;
      var $36=$cod_info;
      var $block_type=(($36+4788)|0);
      var $37=HEAP32[(($block_type)>>2)];
      var $cmp15=(($37)|0)!=2;
      if ($cmp15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $38=$ch;
      var $39=$gr;
      var $40=$pe_addr;
      var $arrayidx17=(($40+($39<<3))|0);
      var $arrayidx18=(($arrayidx17+($38<<2))|0);
      var $41=HEAPF32[(($arrayidx18)>>2)];
      var $conv=$41;
      var $div19=($conv)/(300);
      var $sub=(3.5)-($div19);
      var $call20=Math.exp($sub);
      var $add=($call20)+(1);
      var $div21=(1.28)/($add);
      var $sub22=($div21)-(0.05);
      var $conv23=$sub22;
      $adjust=$conv23;
      var $42=$gfc_addr;
      var $sv_qnt=(($42+84764)|0);
      var $mask_adjust=(($sv_qnt+144)|0);
      var $43=HEAPF32[(($mask_adjust)>>2)];
      var $44=$adjust;
      var $sub24=($43)-($44);
      $masking_lower_db=$sub24;
      label = 11; break;
    case 10: 
      var $45=$ch;
      var $46=$gr;
      var $47=$pe_addr;
      var $arrayidx25=(($47+($46<<3))|0);
      var $arrayidx26=(($arrayidx25+($45<<2))|0);
      var $48=HEAPF32[(($arrayidx26)>>2)];
      var $conv27=$48;
      var $div28=($conv27)/(300);
      var $sub29=(3.5)-($div28);
      var $call30=Math.exp($sub29);
      var $add31=($call30)+(1);
      var $div32=(2.56)/($add31);
      var $sub33=($div32)-(0.14);
      var $conv34=$sub33;
      $adjust=$conv34;
      var $49=$gfc_addr;
      var $sv_qnt35=(($49+84764)|0);
      var $mask_adjust_short=(($sv_qnt35+148)|0);
      var $50=HEAPF32[(($mask_adjust_short)>>2)];
      var $51=$adjust;
      var $sub36=($50)-($51);
      $masking_lower_db=$sub36;
      label = 11; break;
    case 11: 
      var $52=$masking_lower_db;
      var $conv38=$52;
      var $mul=($conv38)*(0.1);
      var $53=Math.pow(10, $mul);
      var $conv39=$53;
      var $54=$gfc_addr;
      var $sv_qnt40=(($54+84764)|0);
      var $masking_lower=(($sv_qnt40+140)|0);
      HEAPF32[(($masking_lower)>>2)]=$conv39;
      var $55=$gfc_addr;
      var $56=$cod_info;
      _init_outer_loop($55, $56);
      var $57=$gfc_addr;
      var $58=$ch;
      var $59=$gr;
      var $60=$ratio_addr;
      var $arrayidx41=(($60+($59)*(976))|0);
      var $arrayidx42=(($arrayidx41+($58)*(488))|0);
      var $61=$cod_info;
      var $62=$ch;
      var $63=$gr;
      var $64=$l3_xmin_addr;
      var $arrayidx43=(($64+($63)*(312))|0);
      var $arrayidx44=(($arrayidx43+($62)*(156))|0);
      var $arraydecay45=(($arrayidx44)|0);
      var $call46=_calc_xmin($57, $arrayidx42, $61, $arraydecay45);
      var $65=$ch;
      var $66=$gr;
      var $67=$bands_addr;
      var $arrayidx47=(($67+($66<<3))|0);
      var $arrayidx48=(($arrayidx47+($65<<2))|0);
      HEAP32[(($arrayidx48)>>2)]=$call46;
      var $68=$ch;
      var $69=$gr;
      var $70=$bands_addr;
      var $arrayidx49=(($70+($69<<3))|0);
      var $arrayidx50=(($arrayidx49+($68<<2))|0);
      var $71=HEAP32[(($arrayidx50)>>2)];
      var $tobool=(($71)|0)!=0;
      if ($tobool) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $analog_silence=0;
      label = 13; break;
    case 13: 
      var $72=$ch;
      var $73=$gr;
      var $74=$min_bits_addr;
      var $arrayidx53=(($74+($73<<3))|0);
      var $arrayidx54=(($arrayidx53+($72<<2))|0);
      HEAP32[(($arrayidx54)>>2)]=126;
      var $75=$ch;
      var $76=$gr;
      var $77=$max_bits_addr;
      var $arrayidx55=(($77+($76<<3))|0);
      var $arrayidx56=(($arrayidx55+($75<<2))|0);
      var $78=HEAP32[(($arrayidx56)>>2)];
      var $79=$bits;
      var $add57=((($79)+($78))|0);
      $bits=$add57;
      label = 14; break;
    case 14: 
      var $80=$ch;
      var $inc=((($80)+(1))|0);
      $ch=$inc;
      label = 7; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $81=$gr;
      var $inc59=((($81)+(1))|0);
      $gr=$inc59;
      label = 3; break;
    case 17: 
      $gr=0;
      label = 18; break;
    case 18: 
      var $82=$gr;
      var $83=$cfg;
      var $mode_gr62=(($83+60)|0);
      var $84=HEAP32[(($mode_gr62)>>2)];
      var $cmp63=(($82)|0) < (($84)|0);
      if ($cmp63) { label = 19; break; } else { label = 30; break; }
    case 19: 
      $ch=0;
      label = 20; break;
    case 20: 
      var $85=$ch;
      var $86=$cfg;
      var $channels_out67=(($86+56)|0);
      var $87=HEAP32[(($channels_out67)>>2)];
      var $cmp68=(($85)|0) < (($87)|0);
      if ($cmp68) { label = 21; break; } else { label = 28; break; }
    case 21: 
      var $88=$bits;
      var $89=$cfg;
      var $vbr_max_bitrate_index71=(($89+100)|0);
      var $90=HEAP32[(($vbr_max_bitrate_index71)>>2)];
      var $91=$frameBits_addr;
      var $arrayidx72=(($91+($90<<2))|0);
      var $92=HEAP32[(($arrayidx72)>>2)];
      var $cmp73=(($88)|0) > (($92)|0);
      if ($cmp73) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $93=$bits;
      var $cmp75=(($93)|0) > 0;
      if ($cmp75) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $94=$cfg;
      var $vbr_max_bitrate_index78=(($94+100)|0);
      var $95=HEAP32[(($vbr_max_bitrate_index78)>>2)];
      var $96=$frameBits_addr;
      var $arrayidx79=(($96+($95<<2))|0);
      var $97=HEAP32[(($arrayidx79)>>2)];
      var $98=$ch;
      var $99=$gr;
      var $100=$max_bits_addr;
      var $arrayidx80=(($100+($99<<3))|0);
      var $arrayidx81=(($arrayidx80+($98<<2))|0);
      var $101=HEAP32[(($arrayidx81)>>2)];
      var $mul82=((($101)*($97))&-1);
      HEAP32[(($arrayidx81)>>2)]=$mul82;
      var $102=$bits;
      var $103=$ch;
      var $104=$gr;
      var $105=$max_bits_addr;
      var $arrayidx83=(($105+($104<<3))|0);
      var $arrayidx84=(($arrayidx83+($103<<2))|0);
      var $106=HEAP32[(($arrayidx84)>>2)];
      var $div85=((((($106)|0))/((($102)|0)))&-1);
      HEAP32[(($arrayidx84)>>2)]=$div85;
      label = 24; break;
    case 24: 
      var $107=$ch;
      var $108=$gr;
      var $109=$min_bits_addr;
      var $arrayidx87=(($109+($108<<3))|0);
      var $arrayidx88=(($arrayidx87+($107<<2))|0);
      var $110=HEAP32[(($arrayidx88)>>2)];
      var $111=$ch;
      var $112=$gr;
      var $113=$max_bits_addr;
      var $arrayidx89=(($113+($112<<3))|0);
      var $arrayidx90=(($arrayidx89+($111<<2))|0);
      var $114=HEAP32[(($arrayidx90)>>2)];
      var $cmp91=(($110)|0) > (($114)|0);
      if ($cmp91) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $115=$ch;
      var $116=$gr;
      var $117=$max_bits_addr;
      var $arrayidx94=(($117+($116<<3))|0);
      var $arrayidx95=(($arrayidx94+($115<<2))|0);
      var $118=HEAP32[(($arrayidx95)>>2)];
      var $119=$ch;
      var $120=$gr;
      var $121=$min_bits_addr;
      var $arrayidx96=(($121+($120<<3))|0);
      var $arrayidx97=(($arrayidx96+($119<<2))|0);
      HEAP32[(($arrayidx97)>>2)]=$118;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $122=$ch;
      var $inc100=((($122)+(1))|0);
      $ch=$inc100;
      label = 20; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $123=$gr;
      var $inc103=((($123)+(1))|0);
      $gr=$inc103;
      label = 18; break;
    case 30: 
      var $124=$analog_silence;
      STACKTOP = __stackBase__;
      return $124;
    default: assert(0, "bad label: " + label);
  }

}
_VBR_old_prepare["X"]=1;

function _init_xrpow($gfc, $cod_info, $xrpow) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $cod_info_addr;
      var $xrpow_addr;
      var $sum=__stackBase__;
      var $i;
      var $upper;
      var $j;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $xrpow_addr=$xrpow;
      HEAPF32[(($sum)>>2)]=0;
      var $0=$cod_info_addr;
      var $max_nonzero_coeff=(($0+5208)|0);
      var $1=HEAP32[(($max_nonzero_coeff)>>2)];
      $upper=$1;
      var $2=$cod_info_addr;
      var $xrpow_max=(($2+4764)|0);
      HEAPF32[(($xrpow_max)>>2)]=0;
      var $3=$upper;
      var $4=$xrpow_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=$arrayidx;
      var $6=$upper;
      var $sub=(((576)-($6))|0);
      var $mul=((($sub<<2))&-1);
      _memset($5, 0, $mul);
      var $7=$gfc_addr;
      var $init_xrpow_core=(($7+85820)|0);
      var $8=HEAP32[(($init_xrpow_core)>>2)];
      var $9=$cod_info_addr;
      var $10=$xrpow_addr;
      var $11=$upper;
      FUNCTION_TABLE[$8]($9, $10, $11, $sum);
      var $12=HEAPF32[(($sum)>>2)];
      var $cmp=$12 > 9.999999682655225e-21;
      if ($cmp) { label = 3; break; } else { label = 10; break; }
    case 3: 
      $j=0;
      var $13=$gfc_addr;
      var $sv_qnt=(($13+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $14=HEAP32[(($substep_shaping)>>2)];
      var $and=$14 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $j=1;
      label = 5; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $15=$i;
      var $16=$cod_info_addr;
      var $psymax=(($16+4864)|0);
      var $17=HEAP32[(($psymax)>>2)];
      var $cmp2=(($15)|0) < (($17)|0);
      if ($cmp2) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $18=$j;
      var $19=$i;
      var $20=$gfc_addr;
      var $sv_qnt3=(($20+84764)|0);
      var $pseudohalf=(($sv_qnt3+168)|0);
      var $arrayidx4=(($pseudohalf+($19<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$18;
      label = 8; break;
    case 8: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      $retval=1;
      label = 11; break;
    case 10: 
      var $22=$cod_info_addr;
      var $l3_enc=(($22+2304)|0);
      var $arrayidx6=(($l3_enc)|0);
      var $23=$arrayidx6;
      for (var $$dest = $23>>2, $$stop = $$dest + 576; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $retval=0;
      label = 11; break;
    case 11: 
      var $24=$retval;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }

}
_init_xrpow["X"]=1;

function _VBR_encode_granule($gfc, $cod_info, $l3_xmin, $xrpow, $ch, $min_bits, $max_bits) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 7556)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $l3_xmin_addr;
      var $xrpow_addr;
      var $ch_addr;
      var $min_bits_addr;
      var $max_bits_addr;
      var $bst_cod_info=__stackBase__;
      var $bst_xrpow=(__stackBase__)+(5252);
      var $Max_bits;
      var $real_bits;
      var $this_bits;
      var $dbits;
      var $over;
      var $found;
      var $sfb21_extra;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $l3_xmin_addr=$l3_xmin;
      $xrpow_addr=$xrpow;
      $ch_addr=$ch;
      $min_bits_addr=$min_bits;
      $max_bits_addr=$max_bits;
      var $0=$max_bits_addr;
      $Max_bits=$0;
      var $1=$max_bits_addr;
      var $add=((($1)+(1))|0);
      $real_bits=$add;
      var $2=$max_bits_addr;
      var $3=$min_bits_addr;
      var $add1=((($2)+($3))|0);
      var $div=((((($add1)|0))/(2))&-1);
      $this_bits=$div;
      $found=0;
      var $4=$gfc_addr;
      var $sv_qnt=(($4+84764)|0);
      var $sfb21_extra2=(($sv_qnt+324)|0);
      var $5=HEAP32[(($sfb21_extra2)>>2)];
      $sfb21_extra=$5;
      var $l3_enc=(($bst_cod_info+2304)|0);
      var $6=$l3_enc;
      for (var $$dest = $6>>2, $$stop = $$dest + 576; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      label = 3; break;
    case 3: 
      var $7=$this_bits;
      var $8=$Max_bits;
      var $sub=((($8)-(42))|0);
      var $cmp=(($7)|0) > (($sub)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$gfc_addr;
      var $sv_qnt3=(($9+84764)|0);
      var $sfb21_extra4=(($sv_qnt3+324)|0);
      HEAP32[(($sfb21_extra4)>>2)]=0;
      label = 6; break;
    case 5: 
      var $10=$sfb21_extra;
      var $11=$gfc_addr;
      var $sv_qnt5=(($11+84764)|0);
      var $sfb21_extra6=(($sv_qnt5+324)|0);
      HEAP32[(($sfb21_extra6)>>2)]=$10;
      label = 6; break;
    case 6: 
      var $12=$gfc_addr;
      var $13=$cod_info_addr;
      var $14=$l3_xmin_addr;
      var $15=$xrpow_addr;
      var $16=$ch_addr;
      var $17=$this_bits;
      var $call=_outer_loop($12, $13, $14, $15, $16, $17);
      $over=$call;
      var $18=$over;
      var $cmp7=(($18)|0) <= 0;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $found=1;
      var $19=$cod_info_addr;
      var $part2_3_length=(($19+4768)|0);
      var $20=HEAP32[(($part2_3_length)>>2)];
      $real_bits=$20;
      var $21=$cod_info_addr;
      var $22=$bst_cod_info;
      var $23=$21;
      assert(5252 % 1 === 0);for (var $$src = $23>>2, $$dest = $22>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $24=$bst_xrpow;
      var $25=$xrpow_addr;
      var $26=$25;
      assert(2304 % 1 === 0);for (var $$src = $26>>2, $$dest = $24>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $27=$real_bits;
      var $sub9=((($27)-(32))|0);
      $max_bits_addr=$sub9;
      var $28=$max_bits_addr;
      var $29=$min_bits_addr;
      var $sub10=((($28)-($29))|0);
      $dbits=$sub10;
      var $30=$max_bits_addr;
      var $31=$min_bits_addr;
      var $add11=((($30)+($31))|0);
      var $div12=((((($add11)|0))/(2))&-1);
      $this_bits=$div12;
      label = 11; break;
    case 8: 
      var $32=$this_bits;
      var $add14=((($32)+(32))|0);
      $min_bits_addr=$add14;
      var $33=$max_bits_addr;
      var $34=$min_bits_addr;
      var $sub15=((($33)-($34))|0);
      $dbits=$sub15;
      var $35=$max_bits_addr;
      var $36=$min_bits_addr;
      var $add16=((($35)+($36))|0);
      var $div17=((((($add16)|0))/(2))&-1);
      $this_bits=$div17;
      var $37=$found;
      var $tobool=(($37)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $found=2;
      var $38=$cod_info_addr;
      var $39=$38;
      var $40=$bst_cod_info;
      assert(5252 % 1 === 0);for (var $$src = $40>>2, $$dest = $39>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $41=$xrpow_addr;
      var $42=$41;
      var $43=$bst_xrpow;
      assert(2304 % 1 === 0);for (var $$src = $43>>2, $$dest = $42>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $44=$dbits;
      var $cmp21=(($44)|0) > 12;
      if ($cmp21) { label = 3; break; } else { label = 13; break; }
    case 13: 
      var $45=$sfb21_extra;
      var $46=$gfc_addr;
      var $sv_qnt22=(($46+84764)|0);
      var $sfb21_extra23=(($sv_qnt22+324)|0);
      HEAP32[(($sfb21_extra23)>>2)]=$45;
      var $47=$found;
      var $cmp24=(($47)|0)==2;
      if ($cmp24) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $48=$cod_info_addr;
      var $l3_enc26=(($48+2304)|0);
      var $49=$l3_enc26;
      var $l3_enc27=(($bst_cod_info+2304)|0);
      var $50=$l3_enc27;
      assert(2304 % 1 === 0);for (var $$src = $50>>2, $$dest = $49>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_VBR_encode_granule["X"]=1;

function _bitpressure_strategy($gfc, $l3_xmin, $min_bits, $max_bits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $l3_xmin_addr;
      var $min_bits_addr;
      var $max_bits_addr;
      var $cfg;
      var $gr;
      var $ch;
      var $sfb;
      var $gi;
      var $pxmin;
      $gfc_addr=$gfc;
      $l3_xmin_addr=$l3_xmin;
      $min_bits_addr=$min_bits;
      $max_bits_addr=$max_bits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      $gr=0;
      label = 3; break;
    case 3: 
      var $1=$gr;
      var $2=$cfg;
      var $mode_gr=(($2+60)|0);
      var $3=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($1)|0) < (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 23; break; }
    case 4: 
      $ch=0;
      label = 5; break;
    case 5: 
      var $4=$ch;
      var $5=$cfg;
      var $channels_out=(($5+56)|0);
      var $6=HEAP32[(($channels_out)>>2)];
      var $cmp3=(($4)|0) < (($6)|0);
      if ($cmp3) { label = 6; break; } else { label = 21; break; }
    case 6: 
      var $7=$ch;
      var $8=$gr;
      var $9=$gfc_addr;
      var $l3_side=(($9+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx=(($tt+($8)*(10504))|0);
      var $arrayidx5=(($arrayidx+($7)*(5252))|0);
      $gi=$arrayidx5;
      var $10=$ch;
      var $11=$gr;
      var $12=$l3_xmin_addr;
      var $arrayidx6=(($12+($11)*(312))|0);
      var $arrayidx7=(($arrayidx6+($10)*(156))|0);
      var $arraydecay=(($arrayidx7)|0);
      $pxmin=$arraydecay;
      $sfb=0;
      label = 7; break;
    case 7: 
      var $13=$sfb;
      var $14=$gi;
      var $psy_lmax=(($14+4856)|0);
      var $15=HEAP32[(($psy_lmax)>>2)];
      var $cmp9=(($13)|0) < (($15)|0);
      if ($cmp9) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $16=$sfb;
      var $conv=(($16)|0);
      var $mul=($conv)*(0.029);
      var $17=$sfb;
      var $conv11=(($17)|0);
      var $mul12=($mul)*($conv11);
      var $div=($mul12)/(22);
      var $div13=($div)/(22);
      var $add=($div13)+(1);
      var $18=$pxmin;
      var $incdec_ptr=(($18+4)|0);
      $pxmin=$incdec_ptr;
      var $19=HEAPF32[(($18)>>2)];
      var $conv14=$19;
      var $mul15=($conv14)*($add);
      var $conv16=$mul15;
      HEAPF32[(($18)>>2)]=$conv16;
      label = 9; break;
    case 9: 
      var $20=$sfb;
      var $inc=((($20)+(1))|0);
      $sfb=$inc;
      label = 7; break;
    case 10: 
      var $21=$gi;
      var $block_type=(($21+4788)|0);
      var $22=HEAP32[(($block_type)>>2)];
      var $cmp17=(($22)|0)==2;
      if ($cmp17) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $23=$gi;
      var $sfb_smin=(($23+4852)|0);
      var $24=HEAP32[(($sfb_smin)>>2)];
      $sfb=$24;
      label = 12; break;
    case 12: 
      var $25=$sfb;
      var $cmp20=(($25)|0) < 13;
      if ($cmp20) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $26=$sfb;
      var $conv23=(($26)|0);
      var $mul24=($conv23)*(0.029);
      var $27=$sfb;
      var $conv25=(($27)|0);
      var $mul26=($mul24)*($conv25);
      var $div27=($mul26)/(13);
      var $div28=($div27)/(13);
      var $add29=($div28)+(1);
      var $28=$pxmin;
      var $incdec_ptr30=(($28+4)|0);
      $pxmin=$incdec_ptr30;
      var $29=HEAPF32[(($28)>>2)];
      var $conv31=$29;
      var $mul32=($conv31)*($add29);
      var $conv33=$mul32;
      HEAPF32[(($28)>>2)]=$conv33;
      var $30=$sfb;
      var $conv34=(($30)|0);
      var $mul35=($conv34)*(0.029);
      var $31=$sfb;
      var $conv36=(($31)|0);
      var $mul37=($mul35)*($conv36);
      var $div38=($mul37)/(13);
      var $div39=($div38)/(13);
      var $add40=($div39)+(1);
      var $32=$pxmin;
      var $incdec_ptr41=(($32+4)|0);
      $pxmin=$incdec_ptr41;
      var $33=HEAPF32[(($32)>>2)];
      var $conv42=$33;
      var $mul43=($conv42)*($add40);
      var $conv44=$mul43;
      HEAPF32[(($32)>>2)]=$conv44;
      var $34=$sfb;
      var $conv45=(($34)|0);
      var $mul46=($conv45)*(0.029);
      var $35=$sfb;
      var $conv47=(($35)|0);
      var $mul48=($mul46)*($conv47);
      var $div49=($mul48)/(13);
      var $div50=($div49)/(13);
      var $add51=($div50)+(1);
      var $36=$pxmin;
      var $incdec_ptr52=(($36+4)|0);
      $pxmin=$incdec_ptr52;
      var $37=HEAPF32[(($36)>>2)];
      var $conv53=$37;
      var $mul54=($conv53)*($add51);
      var $conv55=$mul54;
      HEAPF32[(($36)>>2)]=$conv55;
      label = 14; break;
    case 14: 
      var $38=$sfb;
      var $inc57=((($38)+(1))|0);
      $sfb=$inc57;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $39=$ch;
      var $40=$gr;
      var $41=$min_bits_addr;
      var $arrayidx59=(($41+($40<<3))|0);
      var $arrayidx60=(($arrayidx59+($39<<2))|0);
      var $42=HEAP32[(($arrayidx60)>>2)];
      var $conv61=(($42)|0);
      var $43=$ch;
      var $44=$gr;
      var $45=$max_bits_addr;
      var $arrayidx62=(($45+($44<<3))|0);
      var $arrayidx63=(($arrayidx62+($43<<2))|0);
      var $46=HEAP32[(($arrayidx63)>>2)];
      var $conv64=(($46)|0);
      var $mul65=($conv64)*(0.9);
      var $cmp66=$conv61 > $mul65;
      if ($cmp66) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $47=$ch;
      var $48=$gr;
      var $49=$min_bits_addr;
      var $arrayidx68=(($49+($48<<3))|0);
      var $arrayidx69=(($arrayidx68+($47<<2))|0);
      var $50=HEAP32[(($arrayidx69)>>2)];
      var $conv70=(($50)|0);
      var $cond = $conv70;label = 19; break;
    case 18: 
      var $51=$ch;
      var $52=$gr;
      var $53=$max_bits_addr;
      var $arrayidx71=(($53+($52<<3))|0);
      var $arrayidx72=(($arrayidx71+($51<<2))|0);
      var $54=HEAP32[(($arrayidx72)>>2)];
      var $conv73=(($54)|0);
      var $mul74=($conv73)*(0.9);
      var $cond = $mul74;label = 19; break;
    case 19: 
      var $cond;
      var $conv75=(($cond)&-1);
      var $55=$ch;
      var $56=$gr;
      var $57=$max_bits_addr;
      var $arrayidx76=(($57+($56<<3))|0);
      var $arrayidx77=(($arrayidx76+($55<<2))|0);
      HEAP32[(($arrayidx77)>>2)]=$conv75;
      label = 20; break;
    case 20: 
      var $58=$ch;
      var $inc79=((($58)+(1))|0);
      $ch=$inc79;
      label = 5; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $59=$gr;
      var $inc82=((($59)+(1))|0);
      $gr=$inc82;
      label = 3; break;
    case 23: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_bitpressure_strategy["X"]=1;

function _trancate_smallspectrums($gfc, $gi, $l3_xmin, $work) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 180)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gi_addr;
      var $l3_xmin_addr;
      var $work_addr;
      var $sfb;
      var $j;
      var $width;
      var $distort=__stackBase__;
      var $dummy=(__stackBase__)+(156);
      var $xr;
      var $allowedNoise;
      var $trancateThreshold;
      var $nsame;
      var $start;
      var $noise;
      $gfc_addr=$gfc;
      $gi_addr=$gi;
      $l3_xmin_addr=$l3_xmin;
      $work_addr=$work;
      var $0=$gfc_addr;
      var $sv_qnt=(($0+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $1=HEAP32[(($substep_shaping)>>2)];
      var $and=$1 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$gi_addr;
      var $block_type=(($2+4788)|0);
      var $3=HEAP32[(($block_type)>>2)];
      var $cmp=(($3)|0)==2;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$gfc_addr;
      var $sv_qnt1=(($4+84764)|0);
      var $substep_shaping2=(($sv_qnt1+328)|0);
      var $5=HEAP32[(($substep_shaping2)>>2)];
      var $and3=$5 & 128;
      var $tobool4=(($and3)|0)!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 48; break;
    case 6: 
      var $6=$gi_addr;
      var $7=$l3_xmin_addr;
      var $arraydecay=(($distort)|0);
      var $call=_calc_noise($6, $7, $arraydecay, $dummy, 0);
      $j=0;
      label = 7; break;
    case 7: 
      var $8=$j;
      var $cmp5=(($8)|0) < 576;
      if ($cmp5) { label = 8; break; } else { label = 12; break; }
    case 8: 
      $xr=0;
      var $9=$j;
      var $10=$gi_addr;
      var $l3_enc=(($10+2304)|0);
      var $arrayidx=(($l3_enc+($9<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $cmp6=(($11)|0)!=0;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$j;
      var $13=$gi_addr;
      var $xr8=(($13)|0);
      var $arrayidx9=(($xr8+($12<<2))|0);
      var $14=HEAPF32[(($arrayidx9)>>2)];
      var $conv=$14;
      var $call10=Math.abs($conv);
      var $conv11=$call10;
      $xr=$conv11;
      label = 10; break;
    case 10: 
      var $15=$xr;
      var $16=$j;
      var $17=$work_addr;
      var $arrayidx13=(($17+($16<<2))|0);
      HEAPF32[(($arrayidx13)>>2)]=$15;
      label = 11; break;
    case 11: 
      var $18=$j;
      var $inc=((($18)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 12: 
      $j=0;
      $sfb=8;
      var $19=$gi_addr;
      var $block_type14=(($19+4788)|0);
      var $20=HEAP32[(($block_type14)>>2)];
      var $cmp15=(($20)|0)==2;
      if ($cmp15) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $sfb=6;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $21=$sfb;
      var $22=$gi_addr;
      var $width19=(($22+4872)|0);
      var $arrayidx20=(($width19+($21<<2))|0);
      var $23=HEAP32[(($arrayidx20)>>2)];
      $width=$23;
      var $24=$width;
      var $25=$j;
      var $add=((($25)+($24))|0);
      $j=$add;
      var $26=$sfb;
      var $arrayidx21=(($distort+($26<<2))|0);
      var $27=HEAPF32[(($arrayidx21)>>2)];
      var $conv22=$27;
      var $cmp23=$conv22 >= 1;
      if ($cmp23) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 46; break;
    case 17: 
      var $28=$j;
      var $29=$width;
      var $sub=((($28)-($29))|0);
      var $30=$work_addr;
      var $arrayidx27=(($30+($sub<<2))|0);
      var $31=$arrayidx27;
      var $32=$width;
      _qsort($31, $32, 4, 18);
      var $33=$j;
      var $sub28=((($33)-(1))|0);
      var $34=$work_addr;
      var $arrayidx29=(($34+($sub28<<2))|0);
      var $35=HEAPF32[(($arrayidx29)>>2)];
      var $conv30=$35;
      var $call31=Math.abs($conv30);
      var $call32=Math.abs(0);
      var $cmp33=$call31 > $call32;
      if ($cmp33) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $36=$j;
      var $sub35=((($36)-(1))|0);
      var $37=$work_addr;
      var $arrayidx36=(($37+($sub35<<2))|0);
      var $38=HEAPF32[(($arrayidx36)>>2)];
      var $conv37=$38;
      var $sub38=$conv37;
      var $call39=Math.abs($sub38);
      var $39=$j;
      var $sub40=((($39)-(1))|0);
      var $40=$work_addr;
      var $arrayidx41=(($40+($sub40<<2))|0);
      var $41=HEAPF32[(($arrayidx41)>>2)];
      var $conv42=$41;
      var $call43=Math.abs($conv42);
      var $mul=($call43)*(9.999999974752427e-7);
      var $cmp44=$call39 <= $mul;
      if ($cmp44) { label = 20; break; } else { label = 21; break; }
    case 19: 
      var $42=$j;
      var $sub46=((($42)-(1))|0);
      var $43=$work_addr;
      var $arrayidx47=(($43+($sub46<<2))|0);
      var $44=HEAPF32[(($arrayidx47)>>2)];
      var $conv48=$44;
      var $sub49=$conv48;
      var $call50=Math.abs($sub49);
      var $call51=Math.abs(0);
      var $mul52=($call51)*(9.999999974752427e-7);
      var $cmp53=$call50 <= $mul52;
      if ($cmp53) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 46; break;
    case 21: 
      var $45=$sfb;
      var $arrayidx57=(($distort+($45<<2))|0);
      var $46=HEAPF32[(($arrayidx57)>>2)];
      var $conv58=$46;
      var $sub59=(1)-($conv58);
      var $47=$sfb;
      var $48=$l3_xmin_addr;
      var $arrayidx60=(($48+($47<<2))|0);
      var $49=HEAPF32[(($arrayidx60)>>2)];
      var $conv61=$49;
      var $mul62=($sub59)*($conv61);
      var $conv63=$mul62;
      $allowedNoise=$conv63;
      $trancateThreshold=0;
      $start=0;
      label = 22; break;
    case 22: 
      $nsame=1;
      label = 23; break;
    case 23: 
      var $50=$start;
      var $51=$nsame;
      var $add66=((($50)+($51))|0);
      var $52=$width;
      var $cmp67=(($add66)|0) < (($52)|0);
      if ($cmp67) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $53=$start;
      var $54=$j;
      var $add70=((($53)+($54))|0);
      var $55=$width;
      var $sub71=((($add70)-($55))|0);
      var $56=$work_addr;
      var $arrayidx72=(($56+($sub71<<2))|0);
      var $57=HEAPF32[(($arrayidx72)>>2)];
      var $conv73=$57;
      var $call74=Math.abs($conv73);
      var $58=$start;
      var $59=$j;
      var $add75=((($58)+($59))|0);
      var $60=$nsame;
      var $add76=((($add75)+($60))|0);
      var $61=$width;
      var $sub77=((($add76)-($61))|0);
      var $62=$work_addr;
      var $arrayidx78=(($62+($sub77<<2))|0);
      var $63=HEAPF32[(($arrayidx78)>>2)];
      var $conv79=$63;
      var $call80=Math.abs($conv79);
      var $cmp81=$call74 > $call80;
      if ($cmp81) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $64=$start;
      var $65=$j;
      var $add84=((($64)+($65))|0);
      var $66=$width;
      var $sub85=((($add84)-($66))|0);
      var $67=$work_addr;
      var $arrayidx86=(($67+($sub85<<2))|0);
      var $68=HEAPF32[(($arrayidx86)>>2)];
      var $69=$start;
      var $70=$j;
      var $add87=((($69)+($70))|0);
      var $71=$nsame;
      var $add88=((($add87)+($71))|0);
      var $72=$width;
      var $sub89=((($add88)-($72))|0);
      var $73=$work_addr;
      var $arrayidx90=(($73+($sub89<<2))|0);
      var $74=HEAPF32[(($arrayidx90)>>2)];
      var $sub91=($68)-($74);
      var $conv92=$sub91;
      var $call93=Math.abs($conv92);
      var $75=$start;
      var $76=$j;
      var $add94=((($75)+($76))|0);
      var $77=$width;
      var $sub95=((($add94)-($77))|0);
      var $78=$work_addr;
      var $arrayidx96=(($78+($sub95<<2))|0);
      var $79=HEAPF32[(($arrayidx96)>>2)];
      var $conv97=$79;
      var $call98=Math.abs($conv97);
      var $mul99=($call98)*(9.999999974752427e-7);
      var $cmp100=$call93 <= $mul99;
      if ($cmp100) { label = 28; break; } else { label = 27; break; }
    case 26: 
      var $80=$start;
      var $81=$j;
      var $add103=((($80)+($81))|0);
      var $82=$width;
      var $sub104=((($add103)-($82))|0);
      var $83=$work_addr;
      var $arrayidx105=(($83+($sub104<<2))|0);
      var $84=HEAPF32[(($arrayidx105)>>2)];
      var $85=$start;
      var $86=$j;
      var $add106=((($85)+($86))|0);
      var $87=$nsame;
      var $add107=((($add106)+($87))|0);
      var $88=$width;
      var $sub108=((($add107)-($88))|0);
      var $89=$work_addr;
      var $arrayidx109=(($89+($sub108<<2))|0);
      var $90=HEAPF32[(($arrayidx109)>>2)];
      var $sub110=($84)-($90);
      var $conv111=$sub110;
      var $call112=Math.abs($conv111);
      var $91=$start;
      var $92=$j;
      var $add113=((($91)+($92))|0);
      var $93=$nsame;
      var $add114=((($add113)+($93))|0);
      var $94=$width;
      var $sub115=((($add114)-($94))|0);
      var $95=$work_addr;
      var $arrayidx116=(($95+($sub115<<2))|0);
      var $96=HEAPF32[(($arrayidx116)>>2)];
      var $conv117=$96;
      var $call118=Math.abs($conv117);
      var $mul119=($call118)*(9.999999974752427e-7);
      var $cmp120=$call112 <= $mul119;
      if ($cmp120) { label = 28; break; } else { label = 27; break; }
    case 27: 
      label = 30; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $97=$nsame;
      var $inc125=((($97)+(1))|0);
      $nsame=$inc125;
      label = 23; break;
    case 30: 
      var $98=$start;
      var $99=$j;
      var $add127=((($98)+($99))|0);
      var $100=$width;
      var $sub128=((($add127)-($100))|0);
      var $101=$work_addr;
      var $arrayidx129=(($101+($sub128<<2))|0);
      var $102=HEAPF32[(($arrayidx129)>>2)];
      var $103=$start;
      var $104=$j;
      var $add130=((($103)+($104))|0);
      var $105=$width;
      var $sub131=((($add130)-($105))|0);
      var $106=$work_addr;
      var $arrayidx132=(($106+($sub131<<2))|0);
      var $107=HEAPF32[(($arrayidx132)>>2)];
      var $mul133=($102)*($107);
      var $108=$nsame;
      var $conv134=(($108)|0);
      var $mul135=($mul133)*($conv134);
      $noise=$mul135;
      var $109=$allowedNoise;
      var $110=$noise;
      var $cmp136=$109 < $110;
      if ($cmp136) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $111=$start;
      var $cmp139=(($111)|0)!=0;
      if ($cmp139) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $112=$start;
      var $113=$j;
      var $add142=((($112)+($113))|0);
      var $114=$width;
      var $sub143=((($add142)-($114))|0);
      var $sub144=((($sub143)-(1))|0);
      var $115=$work_addr;
      var $arrayidx145=(($115+($sub144<<2))|0);
      var $116=HEAPF32[(($arrayidx145)>>2)];
      $trancateThreshold=$116;
      label = 33; break;
    case 33: 
      label = 36; break;
    case 34: 
      var $117=$noise;
      var $118=$allowedNoise;
      var $sub148=($118)-($117);
      $allowedNoise=$sub148;
      var $119=$nsame;
      var $120=$start;
      var $add149=((($120)+($119))|0);
      $start=$add149;
      label = 35; break;
    case 35: 
      var $121=$start;
      var $122=$width;
      var $cmp150=(($121)|0) < (($122)|0);
      if ($cmp150) { label = 22; break; } else { label = 36; break; }
    case 36: 
      var $123=$trancateThreshold;
      var $conv152=$123;
      var $call153=Math.abs($conv152);
      var $call154=Math.abs(0);
      var $cmp155=$call153 > $call154;
      if ($cmp155) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $124=$trancateThreshold;
      var $conv158=$124;
      var $sub159=$conv158;
      var $call160=Math.abs($sub159);
      var $125=$trancateThreshold;
      var $conv161=$125;
      var $call162=Math.abs($conv161);
      var $mul163=($call162)*(9.999999974752427e-7);
      var $cmp164=$call160 <= $mul163;
      if ($cmp164) { label = 39; break; } else { label = 40; break; }
    case 38: 
      var $126=$trancateThreshold;
      var $conv167=$126;
      var $sub168=$conv167;
      var $call169=Math.abs($sub168);
      var $call170=Math.abs(0);
      var $mul171=($call170)*(9.999999974752427e-7);
      var $cmp172=$call169 <= $mul171;
      if ($cmp172) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 46; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $127=$j;
      var $128=$width;
      var $sub177=((($127)-($128))|0);
      var $129=$gi_addr;
      var $xr178=(($129)|0);
      var $arrayidx179=(($xr178+($sub177<<2))|0);
      var $130=HEAPF32[(($arrayidx179)>>2)];
      var $conv180=$130;
      var $call181=Math.abs($conv180);
      var $131=$trancateThreshold;
      var $conv182=$131;
      var $cmp183=$call181 <= $conv182;
      if ($cmp183) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $132=$j;
      var $133=$width;
      var $sub186=((($132)-($133))|0);
      var $134=$gi_addr;
      var $l3_enc187=(($134+2304)|0);
      var $arrayidx188=(($l3_enc187+($sub186<<2))|0);
      HEAP32[(($arrayidx188)>>2)]=0;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $135=$width;
      var $dec=((($135)-(1))|0);
      $width=$dec;
      var $cmp191=(($dec)|0) > 0;
      if ($cmp191) { label = 41; break; } else { label = 45; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $136=$sfb;
      var $inc195=((($136)+(1))|0);
      $sfb=$inc195;
      var $137=$gi_addr;
      var $psymax=(($137+4864)|0);
      var $138=HEAP32[(($psymax)>>2)];
      var $cmp196=(($inc195)|0) < (($138)|0);
      if ($cmp196) { label = 15; break; } else { label = 47; break; }
    case 47: 
      var $139=$gfc_addr;
      var $140=$gi_addr;
      var $call199=_noquant_count_bits($139, $140, 0);
      var $141=$gi_addr;
      var $part2_3_length=(($141+4768)|0);
      HEAP32[(($part2_3_length)>>2)]=$call199;
      label = 48; break;
    case 48: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_trancate_smallspectrums["X"]=1;

function _iteration_finish_one($gfc, $gr, $ch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gr_addr;
      var $ch_addr;
      var $cfg;
      var $l3_side;
      var $cod_info;
      $gfc_addr=$gfc;
      $gr_addr=$gr;
      $ch_addr=$ch;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $l3_side2=(($1+304)|0);
      $l3_side=$l3_side2;
      var $2=$ch_addr;
      var $3=$gr_addr;
      var $4=$l3_side;
      var $tt=(($4)|0);
      var $arrayidx=(($tt+($3)*(10504))|0);
      var $arrayidx3=(($arrayidx+($2)*(5252))|0);
      $cod_info=$arrayidx3;
      var $5=$gfc_addr;
      var $6=$gr_addr;
      var $7=$ch_addr;
      var $8=$l3_side;
      _best_scalefac_store($5, $6, $7, $8);
      var $9=$cfg;
      var $use_best_huffman=(($9+20)|0);
      var $10=HEAP32[(($use_best_huffman)>>2)];
      var $cmp=(($10)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$gfc_addr;
      var $12=$cod_info;
      _best_huffman_divide($11, $12);
      label = 4; break;
    case 4: 
      var $13=$gfc_addr;
      var $14=$cod_info;
      _ResvAdjust($13, $14);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _VBR_new_prepare($gfc, $pe, $ratio, $l3_xmin, $frameBits, $max_bits, $max_resv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ratio_addr;
      var $l3_xmin_addr;
      var $frameBits_addr;
      var $max_bits_addr;
      var $max_resv_addr;
      var $cfg;
      var $eov;
      var $gr;
      var $ch;
      var $analog_silence;
      var $avg=__stackBase__;
      var $bits;
      var $maximum_framebits;
      var $cod_info;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ratio_addr=$ratio;
      $l3_xmin_addr=$l3_xmin;
      $frameBits_addr=$frameBits;
      $max_bits_addr=$max_bits;
      $max_resv_addr=$max_resv;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      $analog_silence=1;
      $bits=0;
      var $2=$cfg;
      var $free_format=(($2+136)|0);
      var $3=HEAP32[(($free_format)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$cfg;
      var $vbr_max_bitrate_index=(($4+100)|0);
      var $5=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $6=$eov;
      var $bitrate_index=(($6+704)|0);
      HEAP32[(($bitrate_index)>>2)]=$5;
      var $7=$gfc_addr;
      var $call=_ResvFrameBegin($7, $avg);
      var $8=$gfc_addr;
      var $sv_enc=(($8+27820)|0);
      var $ResvMax=(($sv_enc+24320)|0);
      var $9=HEAP32[(($ResvMax)>>2)];
      var $10=$max_resv_addr;
      HEAP32[(($10)>>2)]=$9;
      var $11=$gfc_addr;
      var $12=$frameBits_addr;
      _get_framebits($11, $12);
      var $13=$cfg;
      var $vbr_max_bitrate_index2=(($13+100)|0);
      var $14=HEAP32[(($vbr_max_bitrate_index2)>>2)];
      var $15=$frameBits_addr;
      var $arrayidx=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx)>>2)];
      $maximum_framebits=$16;
      label = 5; break;
    case 4: 
      var $17=$eov;
      var $bitrate_index3=(($17+704)|0);
      HEAP32[(($bitrate_index3)>>2)]=0;
      var $18=$gfc_addr;
      var $call4=_ResvFrameBegin($18, $avg);
      $maximum_framebits=$call4;
      var $19=$maximum_framebits;
      var $20=$frameBits_addr;
      var $arrayidx5=(($20)|0);
      HEAP32[(($arrayidx5)>>2)]=$19;
      var $21=$gfc_addr;
      var $sv_enc6=(($21+27820)|0);
      var $ResvMax7=(($sv_enc6+24320)|0);
      var $22=HEAP32[(($ResvMax7)>>2)];
      var $23=$max_resv_addr;
      HEAP32[(($23)>>2)]=$22;
      label = 5; break;
    case 5: 
      $gr=0;
      label = 6; break;
    case 6: 
      var $24=$gr;
      var $25=$cfg;
      var $mode_gr=(($25+60)|0);
      var $26=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($24)|0) < (($26)|0);
      if ($cmp) { label = 7; break; } else { label = 17; break; }
    case 7: 
      var $27=$gfc_addr;
      var $28=$pe_addr;
      var $29=$gr;
      var $30=$max_bits_addr;
      var $arrayidx8=(($30+($29<<3))|0);
      var $arraydecay=(($arrayidx8)|0);
      var $31=HEAP32[(($avg)>>2)];
      var $32=$gr;
      var $call9=_on_pe($27, $28, $arraydecay, $31, $32, 0);
      var $33=$gfc_addr;
      var $ov_enc10=(($33+84036)|0);
      var $mode_ext=(($ov_enc10+716)|0);
      var $34=HEAP32[(($mode_ext)>>2)];
      var $cmp11=(($34)|0)==2;
      if ($cmp11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $35=$gfc_addr;
      var $l3_side=(($35+304)|0);
      var $36=$gr;
      _ms_convert($l3_side, $36);
      label = 9; break;
    case 9: 
      $ch=0;
      label = 10; break;
    case 10: 
      var $37=$ch;
      var $38=$cfg;
      var $channels_out=(($38+56)|0);
      var $39=HEAP32[(($channels_out)>>2)];
      var $cmp15=(($37)|0) < (($39)|0);
      if ($cmp15) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $40=$ch;
      var $41=$gr;
      var $42=$gfc_addr;
      var $l3_side17=(($42+304)|0);
      var $tt=(($l3_side17)|0);
      var $arrayidx18=(($tt+($41)*(10504))|0);
      var $arrayidx19=(($arrayidx18+($40)*(5252))|0);
      $cod_info=$arrayidx19;
      var $43=$gfc_addr;
      var $sv_qnt=(($43+84764)|0);
      var $mask_adjust=(($sv_qnt+144)|0);
      var $44=HEAPF32[(($mask_adjust)>>2)];
      var $conv=$44;
      var $mul=($conv)*(0.1);
      var $45=Math.pow(10, $mul);
      var $conv20=$45;
      var $46=$gfc_addr;
      var $sv_qnt21=(($46+84764)|0);
      var $masking_lower=(($sv_qnt21+140)|0);
      HEAPF32[(($masking_lower)>>2)]=$conv20;
      var $47=$gfc_addr;
      var $48=$cod_info;
      _init_outer_loop($47, $48);
      var $49=$gfc_addr;
      var $50=$ch;
      var $51=$gr;
      var $52=$ratio_addr;
      var $arrayidx22=(($52+($51)*(976))|0);
      var $arrayidx23=(($arrayidx22+($50)*(488))|0);
      var $53=$cod_info;
      var $54=$ch;
      var $55=$gr;
      var $56=$l3_xmin_addr;
      var $arrayidx24=(($56+($55)*(312))|0);
      var $arrayidx25=(($arrayidx24+($54)*(156))|0);
      var $arraydecay26=(($arrayidx25)|0);
      var $call27=_calc_xmin($49, $arrayidx23, $53, $arraydecay26);
      var $cmp28=0!=(($call27)|0);
      if ($cmp28) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $analog_silence=0;
      label = 13; break;
    case 13: 
      var $57=$ch;
      var $58=$gr;
      var $59=$max_bits_addr;
      var $arrayidx32=(($59+($58<<3))|0);
      var $arrayidx33=(($arrayidx32+($57<<2))|0);
      var $60=HEAP32[(($arrayidx33)>>2)];
      var $61=$bits;
      var $add=((($61)+($60))|0);
      $bits=$add;
      label = 14; break;
    case 14: 
      var $62=$ch;
      var $inc=((($62)+(1))|0);
      $ch=$inc;
      label = 10; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $63=$gr;
      var $inc35=((($63)+(1))|0);
      $gr=$inc35;
      label = 6; break;
    case 17: 
      $gr=0;
      label = 18; break;
    case 18: 
      var $64=$gr;
      var $65=$cfg;
      var $mode_gr38=(($65+60)|0);
      var $66=HEAP32[(($mode_gr38)>>2)];
      var $cmp39=(($64)|0) < (($66)|0);
      if ($cmp39) { label = 19; break; } else { label = 28; break; }
    case 19: 
      $ch=0;
      label = 20; break;
    case 20: 
      var $67=$ch;
      var $68=$cfg;
      var $channels_out43=(($68+56)|0);
      var $69=HEAP32[(($channels_out43)>>2)];
      var $cmp44=(($67)|0) < (($69)|0);
      if ($cmp44) { label = 21; break; } else { label = 26; break; }
    case 21: 
      var $70=$bits;
      var $71=$maximum_framebits;
      var $cmp47=(($70)|0) > (($71)|0);
      if ($cmp47) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $72=$bits;
      var $cmp49=(($72)|0) > 0;
      if ($cmp49) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $73=$maximum_framebits;
      var $74=$ch;
      var $75=$gr;
      var $76=$max_bits_addr;
      var $arrayidx52=(($76+($75<<3))|0);
      var $arrayidx53=(($arrayidx52+($74<<2))|0);
      var $77=HEAP32[(($arrayidx53)>>2)];
      var $mul54=((($77)*($73))&-1);
      HEAP32[(($arrayidx53)>>2)]=$mul54;
      var $78=$bits;
      var $79=$ch;
      var $80=$gr;
      var $81=$max_bits_addr;
      var $arrayidx55=(($81+($80<<3))|0);
      var $arrayidx56=(($arrayidx55+($79<<2))|0);
      var $82=HEAP32[(($arrayidx56)>>2)];
      var $div=((((($82)|0))/((($78)|0)))&-1);
      HEAP32[(($arrayidx56)>>2)]=$div;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $83=$ch;
      var $inc59=((($83)+(1))|0);
      $ch=$inc59;
      label = 20; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $84=$gr;
      var $inc62=((($84)+(1))|0);
      $gr=$inc62;
      label = 18; break;
    case 28: 
      var $85=$analog_silence;
      var $tobool64=(($85)|0)!=0;
      if ($tobool64) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $86=$max_resv_addr;
      HEAP32[(($86)>>2)]=0;
      label = 30; break;
    case 30: 
      var $87=$analog_silence;
      STACKTOP = __stackBase__;
      return $87;
    default: assert(0, "bad label: " + label);
  }

}
_VBR_new_prepare["X"]=1;

function _ABR_iteration_loop($gfc, $pe, $ms_ener_ratio, $ratio) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2488)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ms_ener_ratio_addr;
      var $ratio_addr;
      var $cfg;
      var $eov;
      var $l3_xmin=__stackBase__;
      var $xrpow=(__stackBase__)+(156);
      var $targ_bits=(__stackBase__)+(2460);
      var $mean_bits=(__stackBase__)+(2476);
      var $max_frame_bits=(__stackBase__)+(2480);
      var $ch;
      var $gr;
      var $ath_over;
      var $analog_silence_bits=(__stackBase__)+(2484);
      var $cod_info;
      var $l3_side;
      var $adjust;
      var $masking_lower_db;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $ratio_addr=$ratio;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      HEAP32[(($mean_bits)>>2)]=0;
      var $3=$gfc_addr;
      var $4=$pe_addr;
      var $5=$ms_ener_ratio_addr;
      var $arraydecay=(($targ_bits)|0);
      _calc_target_bits($3, $4, $5, $arraydecay, $analog_silence_bits, $max_frame_bits);
      $gr=0;
      label = 3; break;
    case 3: 
      var $6=$gr;
      var $7=$cfg;
      var $mode_gr=(($7+60)|0);
      var $8=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($6)|0) < (($8)|0);
      if ($cmp) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $9=$gfc_addr;
      var $ov_enc3=(($9+84036)|0);
      var $mode_ext=(($ov_enc3+716)|0);
      var $10=HEAP32[(($mode_ext)>>2)];
      var $cmp4=(($10)|0)==2;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$gfc_addr;
      var $l3_side5=(($11+304)|0);
      var $12=$gr;
      _ms_convert($l3_side5, $12);
      label = 6; break;
    case 6: 
      $ch=0;
      label = 7; break;
    case 7: 
      var $13=$ch;
      var $14=$cfg;
      var $channels_out=(($14+56)|0);
      var $15=HEAP32[(($channels_out)>>2)];
      var $cmp7=(($13)|0) < (($15)|0);
      if ($cmp7) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $16=$ch;
      var $17=$gr;
      var $18=$l3_side;
      var $tt=(($18)|0);
      var $arrayidx=(($tt+($17)*(10504))|0);
      var $arrayidx9=(($arrayidx+($16)*(5252))|0);
      $cod_info=$arrayidx9;
      var $19=$cod_info;
      var $block_type=(($19+4788)|0);
      var $20=HEAP32[(($block_type)>>2)];
      var $cmp10=(($20)|0)!=2;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $adjust=0;
      var $21=$gfc_addr;
      var $sv_qnt=(($21+84764)|0);
      var $mask_adjust=(($sv_qnt+144)|0);
      var $22=HEAPF32[(($mask_adjust)>>2)];
      var $23=$adjust;
      var $sub=($22)-($23);
      $masking_lower_db=$sub;
      label = 11; break;
    case 10: 
      $adjust=0;
      var $24=$gfc_addr;
      var $sv_qnt12=(($24+84764)|0);
      var $mask_adjust_short=(($sv_qnt12+148)|0);
      var $25=HEAPF32[(($mask_adjust_short)>>2)];
      var $26=$adjust;
      var $sub13=($25)-($26);
      $masking_lower_db=$sub13;
      label = 11; break;
    case 11: 
      var $27=$masking_lower_db;
      var $conv=$27;
      var $mul=($conv)*(0.1);
      var $28=Math.pow(10, $mul);
      var $conv15=$28;
      var $29=$gfc_addr;
      var $sv_qnt16=(($29+84764)|0);
      var $masking_lower=(($sv_qnt16+140)|0);
      HEAPF32[(($masking_lower)>>2)]=$conv15;
      var $30=$gfc_addr;
      var $31=$cod_info;
      _init_outer_loop($30, $31);
      var $32=$gfc_addr;
      var $33=$cod_info;
      var $arraydecay17=(($xrpow)|0);
      var $call=_init_xrpow($32, $33, $arraydecay17);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $34=$gfc_addr;
      var $35=$ch;
      var $36=$gr;
      var $37=$ratio_addr;
      var $arrayidx19=(($37+($36)*(976))|0);
      var $arrayidx20=(($arrayidx19+($35)*(488))|0);
      var $38=$cod_info;
      var $arraydecay21=(($l3_xmin)|0);
      var $call22=_calc_xmin($34, $arrayidx20, $38, $arraydecay21);
      $ath_over=$call22;
      var $39=$ath_over;
      var $cmp23=0==(($39)|0);
      if ($cmp23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $40=HEAP32[(($analog_silence_bits)>>2)];
      var $41=$ch;
      var $42=$gr;
      var $arrayidx26=(($targ_bits+($42<<3))|0);
      var $arrayidx27=(($arrayidx26+($41<<2))|0);
      HEAP32[(($arrayidx27)>>2)]=$40;
      label = 14; break;
    case 14: 
      var $43=$gfc_addr;
      var $44=$cod_info;
      var $arraydecay29=(($l3_xmin)|0);
      var $arraydecay30=(($xrpow)|0);
      var $45=$ch;
      var $46=$ch;
      var $47=$gr;
      var $arrayidx31=(($targ_bits+($47<<3))|0);
      var $arrayidx32=(($arrayidx31+($46<<2))|0);
      var $48=HEAP32[(($arrayidx32)>>2)];
      var $call33=_outer_loop($43, $44, $arraydecay29, $arraydecay30, $45, $48);
      label = 15; break;
    case 15: 
      var $49=$gfc_addr;
      var $50=$gr;
      var $51=$ch;
      _iteration_finish_one($49, $50, $51);
      label = 16; break;
    case 16: 
      var $52=$ch;
      var $inc=((($52)+(1))|0);
      $ch=$inc;
      label = 7; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $53=$gr;
      var $inc36=((($53)+(1))|0);
      $gr=$inc36;
      label = 3; break;
    case 19: 
      var $54=$cfg;
      var $vbr_min_bitrate_index=(($54+96)|0);
      var $55=HEAP32[(($vbr_min_bitrate_index)>>2)];
      var $56=$eov;
      var $bitrate_index=(($56+704)|0);
      HEAP32[(($bitrate_index)>>2)]=$55;
      label = 20; break;
    case 20: 
      var $57=$eov;
      var $bitrate_index39=(($57+704)|0);
      var $58=HEAP32[(($bitrate_index39)>>2)];
      var $59=$cfg;
      var $vbr_max_bitrate_index=(($59+100)|0);
      var $60=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $cmp40=(($58)|0) <= (($60)|0);
      if ($cmp40) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $61=$gfc_addr;
      var $call43=_ResvFrameBegin($61, $mean_bits);
      var $cmp44=(($call43)|0) >= 0;
      if ($cmp44) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $62=$eov;
      var $bitrate_index49=(($62+704)|0);
      var $63=HEAP32[(($bitrate_index49)>>2)];
      var $inc50=((($63)+(1))|0);
      HEAP32[(($bitrate_index49)>>2)]=$inc50;
      label = 20; break;
    case 25: 
      var $64=$gfc_addr;
      var $65=HEAP32[(($mean_bits)>>2)];
      _ResvFrameEnd($64, $65);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_ABR_iteration_loop["X"]=1;

function _VBR_new_iteration_loop($gfc, $pe, $ms_ener_ratio, $ratio) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 9924)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ms_ener_ratio_addr;
      var $ratio_addr;
      var $cfg;
      var $eov;
      var $l3_xmin=__stackBase__;
      var $xrpow=(__stackBase__)+(624);
      var $frameBits=(__stackBase__)+(9840);
      var $used_bits;
      var $max_bits=(__stackBase__)+(9900);
      var $ch;
      var $gr;
      var $analog_silence;
      var $pad=(__stackBase__)+(9916);
      var $l3_side;
      var $const_l3_xmin;
      var $const_xrpow;
      var $const_max_bits;
      var $cod_info;
      var $i;
      var $j;
      var $unused;
      var $mean_bits=(__stackBase__)+(9920);
      var $fullframebits;
      var $cod_info74;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $ratio_addr=$ratio;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      var $arraydecay=(($l3_xmin)|0);
      $const_l3_xmin=$arraydecay;
      var $arraydecay3=(($xrpow)|0);
      $const_xrpow=$arraydecay3;
      var $arraydecay4=(($max_bits)|0);
      $const_max_bits=$arraydecay4;
      var $3=$ms_ener_ratio_addr;
      var $4=$xrpow;
      for (var $$dest = $4>>2, $$stop = $$dest + 2304; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $5=$gfc_addr;
      var $6=$pe_addr;
      var $7=$ratio_addr;
      var $arraydecay5=(($l3_xmin)|0);
      var $arraydecay6=(($frameBits)|0);
      var $arraydecay7=(($max_bits)|0);
      var $call=_VBR_new_prepare($5, $6, $7, $arraydecay5, $arraydecay6, $arraydecay7, $pad);
      $analog_silence=$call;
      $gr=0;
      label = 3; break;
    case 3: 
      var $8=$gr;
      var $9=$cfg;
      var $mode_gr=(($9+60)|0);
      var $10=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($8)|0) < (($10)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $ch=0;
      label = 5; break;
    case 5: 
      var $11=$ch;
      var $12=$cfg;
      var $channels_out=(($12+56)|0);
      var $13=HEAP32[(($channels_out)>>2)];
      var $cmp9=(($11)|0) < (($13)|0);
      if ($cmp9) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $14=$ch;
      var $15=$gr;
      var $16=$l3_side;
      var $tt=(($16)|0);
      var $arrayidx=(($tt+($15)*(10504))|0);
      var $arrayidx11=(($arrayidx+($14)*(5252))|0);
      $cod_info=$arrayidx11;
      var $17=$gfc_addr;
      var $18=$cod_info;
      var $19=$ch;
      var $20=$gr;
      var $arrayidx12=(($xrpow+($20)*(4608))|0);
      var $arrayidx13=(($arrayidx12+($19)*(2304))|0);
      var $arraydecay14=(($arrayidx13)|0);
      var $call15=_init_xrpow($17, $18, $arraydecay14);
      var $cmp16=0==(($call15)|0);
      if ($cmp16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $21=$ch;
      var $22=$gr;
      var $arrayidx17=(($max_bits+($22<<3))|0);
      var $arrayidx18=(($arrayidx17+($21<<2))|0);
      HEAP32[(($arrayidx18)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$ch;
      var $inc=((($23)+(1))|0);
      $ch=$inc;
      label = 5; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $24=$gr;
      var $inc20=((($24)+(1))|0);
      $gr=$inc20;
      label = 3; break;
    case 12: 
      var $25=$gfc_addr;
      var $26=$const_xrpow;
      var $27=$const_l3_xmin;
      var $28=$const_max_bits;
      var $call22=_VBR_encode_frame($25, $26, $27, $28);
      $used_bits=$call22;
      var $29=$cfg;
      var $free_format=(($29+136)|0);
      var $30=HEAP32[(($free_format)>>2)];
      var $tobool=(($30)|0)!=0;
      if ($tobool) { label = 35; break; } else { label = 13; break; }
    case 13: 
      var $31=$analog_silence;
      var $tobool24=(($31)|0)!=0;
      if ($tobool24) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $32=$cfg;
      var $enforce_min_bitrate=(($32+108)|0);
      var $33=HEAP32[(($enforce_min_bitrate)>>2)];
      var $tobool25=(($33)|0)!=0;
      if ($tobool25) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $i=1;
      label = 17; break;
    case 16: 
      var $34=$cfg;
      var $vbr_min_bitrate_index=(($34+96)|0);
      var $35=HEAP32[(($vbr_min_bitrate_index)>>2)];
      $i=$35;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $36=$i;
      var $37=$cfg;
      var $vbr_max_bitrate_index=(($37+100)|0);
      var $38=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $cmp29=(($36)|0) < (($38)|0);
      if ($cmp29) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $39=$used_bits;
      var $40=$i;
      var $arrayidx31=(($frameBits+($40<<2))|0);
      var $41=HEAP32[(($arrayidx31)>>2)];
      var $cmp32=(($39)|0) <= (($41)|0);
      if ($cmp32) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 23; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $42=$i;
      var $inc36=((($42)+(1))|0);
      $i=$inc36;
      label = 18; break;
    case 23: 
      var $43=$i;
      var $44=$cfg;
      var $vbr_max_bitrate_index38=(($44+100)|0);
      var $45=HEAP32[(($vbr_max_bitrate_index38)>>2)];
      var $cmp39=(($43)|0) > (($45)|0);
      if ($cmp39) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $46=$cfg;
      var $vbr_max_bitrate_index41=(($46+100)|0);
      var $47=HEAP32[(($vbr_max_bitrate_index41)>>2)];
      $i=$47;
      label = 25; break;
    case 25: 
      var $48=HEAP32[(($pad)>>2)];
      var $cmp43=(($48)|0) > 0;
      if ($cmp43) { label = 26; break; } else { label = 33; break; }
    case 26: 
      var $49=$cfg;
      var $vbr_max_bitrate_index45=(($49+100)|0);
      var $50=HEAP32[(($vbr_max_bitrate_index45)>>2)];
      $j=$50;
      label = 27; break;
    case 27: 
      var $51=$j;
      var $52=$i;
      var $cmp47=(($51)|0) > (($52)|0);
      if ($cmp47) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $53=$j;
      var $arrayidx49=(($frameBits+($53<<2))|0);
      var $54=HEAP32[(($arrayidx49)>>2)];
      var $55=$used_bits;
      var $sub=((($54)-($55))|0);
      $unused=$sub;
      var $56=$unused;
      var $57=HEAP32[(($pad)>>2)];
      var $cmp50=(($56)|0) <= (($57)|0);
      if ($cmp50) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 32; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $58=$j;
      var $dec=((($58)-(1))|0);
      $j=$dec;
      label = 27; break;
    case 32: 
      var $59=$j;
      var $60=$eov;
      var $bitrate_index=(($60+704)|0);
      HEAP32[(($bitrate_index)>>2)]=$59;
      label = 34; break;
    case 33: 
      var $61=$i;
      var $62=$eov;
      var $bitrate_index56=(($62+704)|0);
      HEAP32[(($bitrate_index56)>>2)]=$61;
      label = 34; break;
    case 34: 
      label = 36; break;
    case 35: 
      var $63=$eov;
      var $bitrate_index59=(($63+704)|0);
      HEAP32[(($bitrate_index59)>>2)]=0;
      label = 36; break;
    case 36: 
      var $64=$used_bits;
      var $65=$eov;
      var $bitrate_index61=(($65+704)|0);
      var $66=HEAP32[(($bitrate_index61)>>2)];
      var $arrayidx62=(($frameBits+($66<<2))|0);
      var $67=HEAP32[(($arrayidx62)>>2)];
      var $cmp63=(($64)|0) <= (($67)|0);
      if ($cmp63) { label = 37; break; } else { label = 46; break; }
    case 37: 
      var $68=$gfc_addr;
      var $call65=_ResvFrameBegin($68, $mean_bits);
      $fullframebits=$call65;
      $gr=0;
      label = 38; break;
    case 38: 
      var $69=$gr;
      var $70=$cfg;
      var $mode_gr67=(($70+60)|0);
      var $71=HEAP32[(($mode_gr67)>>2)];
      var $cmp68=(($69)|0) < (($71)|0);
      if ($cmp68) { label = 39; break; } else { label = 45; break; }
    case 39: 
      $ch=0;
      label = 40; break;
    case 40: 
      var $72=$ch;
      var $73=$cfg;
      var $channels_out71=(($73+56)|0);
      var $74=HEAP32[(($channels_out71)>>2)];
      var $cmp72=(($72)|0) < (($74)|0);
      if ($cmp72) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $75=$ch;
      var $76=$gr;
      var $77=$l3_side;
      var $tt75=(($77)|0);
      var $arrayidx76=(($tt75+($76)*(10504))|0);
      var $arrayidx77=(($arrayidx76+($75)*(5252))|0);
      $cod_info74=$arrayidx77;
      var $78=$gfc_addr;
      var $79=$cod_info74;
      _ResvAdjust($78, $79);
      label = 42; break;
    case 42: 
      var $80=$ch;
      var $inc79=((($80)+(1))|0);
      $ch=$inc79;
      label = 40; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $81=$gr;
      var $inc82=((($81)+(1))|0);
      $gr=$inc82;
      label = 38; break;
    case 45: 
      var $82=$gfc_addr;
      var $83=HEAP32[(($mean_bits)>>2)];
      _ResvFrameEnd($82, $83);
      label = 47; break;
    case 46: 
      var $84=$gfc_addr;
      _lame_errorf($84, ((5385584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(-1);
      throw "Reached an unreachable!"
    case 47: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_VBR_new_iteration_loop["X"]=1;

function _ms_convert($l3_side, $gr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $l3_side_addr;
      var $gr_addr;
      var $i;
      var $l;
      var $r;
      $l3_side_addr=$l3_side;
      $gr_addr=$gr;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) < 576;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$gr_addr;
      var $3=$l3_side_addr;
      var $tt=(($3)|0);
      var $arrayidx=(($tt+($2)*(10504))|0);
      var $arrayidx1=(($arrayidx)|0);
      var $xr=(($arrayidx1)|0);
      var $arrayidx2=(($xr+($1<<2))|0);
      var $4=HEAPF32[(($arrayidx2)>>2)];
      $l=$4;
      var $5=$i;
      var $6=$gr_addr;
      var $7=$l3_side_addr;
      var $tt3=(($7)|0);
      var $arrayidx4=(($tt3+($6)*(10504))|0);
      var $arrayidx5=(($arrayidx4+5252)|0);
      var $xr6=(($arrayidx5)|0);
      var $arrayidx7=(($xr6+($5<<2))|0);
      var $8=HEAPF32[(($arrayidx7)>>2)];
      $r=$8;
      var $9=$l;
      var $10=$r;
      var $add=($9)+($10);
      var $mul=($add)*(0.7071067690849304);
      var $11=$i;
      var $12=$gr_addr;
      var $13=$l3_side_addr;
      var $tt8=(($13)|0);
      var $arrayidx9=(($tt8+($12)*(10504))|0);
      var $arrayidx10=(($arrayidx9)|0);
      var $xr11=(($arrayidx10)|0);
      var $arrayidx12=(($xr11+($11<<2))|0);
      HEAPF32[(($arrayidx12)>>2)]=$mul;
      var $14=$l;
      var $15=$r;
      var $sub=($14)-($15);
      var $mul13=($sub)*(0.7071067690849304);
      var $16=$i;
      var $17=$gr_addr;
      var $18=$l3_side_addr;
      var $tt14=(($18)|0);
      var $arrayidx15=(($tt14+($17)*(10504))|0);
      var $arrayidx16=(($arrayidx15+5252)|0);
      var $xr17=(($arrayidx16)|0);
      var $arrayidx18=(($xr17+($16<<2))|0);
      HEAPF32[(($arrayidx18)>>2)]=$mul13;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_ms_convert["X"]=1;

function _calc_target_bits($gfc, $pe, $ms_ener_ratio, $targ_bits, $analog_silence_bits, $max_frame_bits) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ms_ener_ratio_addr;
      var $targ_bits_addr;
      var $analog_silence_bits_addr;
      var $max_frame_bits_addr;
      var $cfg;
      var $eov;
      var $l3_side;
      var $res_factor;
      var $gr;
      var $ch;
      var $totbits;
      var $mean_bits=__stackBase__;
      var $framesize;
      var $sum;
      var $add_bits;
      var $cod_info;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $targ_bits_addr=$targ_bits;
      $analog_silence_bits_addr=$analog_silence_bits;
      $max_frame_bits_addr=$max_frame_bits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      var $3=$cfg;
      var $mode_gr=(($3+60)|0);
      var $4=HEAP32[(($mode_gr)>>2)];
      var $mul=((($4)*(576))&-1);
      $framesize=$mul;
      var $5=$cfg;
      var $vbr_max_bitrate_index=(($5+100)|0);
      var $6=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $7=$eov;
      var $bitrate_index=(($7+704)|0);
      HEAP32[(($bitrate_index)>>2)]=$6;
      var $8=$gfc_addr;
      var $call=_ResvFrameBegin($8, $mean_bits);
      var $9=$max_frame_bits_addr;
      HEAP32[(($9)>>2)]=$call;
      var $10=$eov;
      var $bitrate_index3=(($10+704)|0);
      HEAP32[(($bitrate_index3)>>2)]=1;
      var $11=$gfc_addr;
      var $call4=_getframebits($11);
      var $12=$cfg;
      var $sideinfo_len=(($12+8)|0);
      var $13=HEAP32[(($sideinfo_len)>>2)];
      var $mul5=((($13<<3))&-1);
      var $sub=((($call4)-($mul5))|0);
      HEAP32[(($mean_bits)>>2)]=$sub;
      var $14=HEAP32[(($mean_bits)>>2)];
      var $15=$cfg;
      var $mode_gr6=(($15+60)|0);
      var $16=HEAP32[(($mode_gr6)>>2)];
      var $17=$cfg;
      var $channels_out=(($17+56)|0);
      var $18=HEAP32[(($channels_out)>>2)];
      var $mul7=((($16)*($18))&-1);
      var $div=((((($14)|0))/((($mul7)|0)))&-1);
      var $19=$analog_silence_bits_addr;
      HEAP32[(($19)>>2)]=$div;
      var $20=$cfg;
      var $vbr_avg_bitrate_kbps=(($20+92)|0);
      var $21=HEAP32[(($vbr_avg_bitrate_kbps)>>2)];
      var $22=$framesize;
      var $mul8=((($21)*($22))&-1);
      var $mul9=((($mul8)*(1000))&-1);
      HEAP32[(($mean_bits)>>2)]=$mul9;
      var $23=$gfc_addr;
      var $sv_qnt=(($23+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $24=HEAP32[(($substep_shaping)>>2)];
      var $and=$24 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=HEAP32[(($mean_bits)>>2)];
      var $conv=(($25)|0);
      var $mul10=($conv)*(1.09);
      var $conv11=(($mul10)&-1);
      HEAP32[(($mean_bits)>>2)]=$conv11;
      label = 4; break;
    case 4: 
      var $26=$cfg;
      var $samplerate_out=(($26+48)|0);
      var $27=HEAP32[(($samplerate_out)>>2)];
      var $28=HEAP32[(($mean_bits)>>2)];
      var $div12=((((($28)|0))/((($27)|0)))&-1);
      HEAP32[(($mean_bits)>>2)]=$div12;
      var $29=$cfg;
      var $sideinfo_len13=(($29+8)|0);
      var $30=HEAP32[(($sideinfo_len13)>>2)];
      var $mul14=((($30<<3))&-1);
      var $31=HEAP32[(($mean_bits)>>2)];
      var $sub15=((($31)-($mul14))|0);
      HEAP32[(($mean_bits)>>2)]=$sub15;
      var $32=$cfg;
      var $mode_gr16=(($32+60)|0);
      var $33=HEAP32[(($mode_gr16)>>2)];
      var $34=$cfg;
      var $channels_out17=(($34+56)|0);
      var $35=HEAP32[(($channels_out17)>>2)];
      var $mul18=((($33)*($35))&-1);
      var $36=HEAP32[(($mean_bits)>>2)];
      var $div19=((((($36)|0))/((($mul18)|0)))&-1);
      HEAP32[(($mean_bits)>>2)]=$div19;
      var $37=$cfg;
      var $compression_ratio=(($37+228)|0);
      var $38=HEAPF32[(($compression_ratio)>>2)];
      var $conv20=$38;
      var $sub21=(11)-($conv20);
      var $mul22=($sub21)*(0.07);
      var $div23=($mul22)/(5.5);
      var $add=($div23)+(0.93);
      var $conv24=$add;
      $res_factor=$conv24;
      var $39=$res_factor;
      var $conv25=$39;
      var $cmp=$conv25 < 0.9;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $res_factor=0.8999999761581421;
      label = 6; break;
    case 6: 
      var $40=$res_factor;
      var $conv29=$40;
      var $cmp30=$conv29 > 1;
      if ($cmp30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $res_factor=1;
      label = 8; break;
    case 8: 
      $gr=0;
      label = 9; break;
    case 9: 
      var $41=$gr;
      var $42=$cfg;
      var $mode_gr34=(($42+60)|0);
      var $43=HEAP32[(($mode_gr34)>>2)];
      var $cmp35=(($41)|0) < (($43)|0);
      if ($cmp35) { label = 10; break; } else { label = 35; break; }
    case 10: 
      $sum=0;
      $ch=0;
      label = 11; break;
    case 11: 
      var $44=$ch;
      var $45=$cfg;
      var $channels_out38=(($45+56)|0);
      var $46=HEAP32[(($channels_out38)>>2)];
      var $cmp39=(($44)|0) < (($46)|0);
      if ($cmp39) { label = 12; break; } else { label = 27; break; }
    case 12: 
      var $47=$res_factor;
      var $48=HEAP32[(($mean_bits)>>2)];
      var $conv42=(($48)|0);
      var $mul43=($47)*($conv42);
      var $conv44=(($mul43)&-1);
      var $49=$ch;
      var $50=$gr;
      var $51=$targ_bits_addr;
      var $arrayidx=(($51+($50<<3))|0);
      var $arrayidx45=(($arrayidx+($49<<2))|0);
      HEAP32[(($arrayidx45)>>2)]=$conv44;
      var $52=$ch;
      var $53=$gr;
      var $54=$pe_addr;
      var $arrayidx46=(($54+($53<<3))|0);
      var $arrayidx47=(($arrayidx46+($52<<2))|0);
      var $55=HEAPF32[(($arrayidx47)>>2)];
      var $cmp48=$55 > 700;
      if ($cmp48) { label = 13; break; } else { label = 23; break; }
    case 13: 
      var $56=$ch;
      var $57=$gr;
      var $58=$pe_addr;
      var $arrayidx51=(($58+($57<<3))|0);
      var $arrayidx52=(($arrayidx51+($56<<2))|0);
      var $59=HEAPF32[(($arrayidx52)>>2)];
      var $sub53=($59)-(700);
      var $conv54=$sub53;
      var $div55=($conv54)/(1.4);
      var $conv56=(($div55)&-1);
      $add_bits=$conv56;
      var $60=$ch;
      var $61=$gr;
      var $62=$l3_side;
      var $tt=(($62)|0);
      var $arrayidx57=(($tt+($61)*(10504))|0);
      var $arrayidx58=(($arrayidx57+($60)*(5252))|0);
      $cod_info=$arrayidx58;
      var $63=$res_factor;
      var $64=HEAP32[(($mean_bits)>>2)];
      var $conv59=(($64)|0);
      var $mul60=($63)*($conv59);
      var $conv61=(($mul60)&-1);
      var $65=$ch;
      var $66=$gr;
      var $67=$targ_bits_addr;
      var $arrayidx62=(($67+($66<<3))|0);
      var $arrayidx63=(($arrayidx62+($65<<2))|0);
      HEAP32[(($arrayidx63)>>2)]=$conv61;
      var $68=$cod_info;
      var $block_type=(($68+4788)|0);
      var $69=HEAP32[(($block_type)>>2)];
      var $cmp64=(($69)|0)==2;
      if ($cmp64) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $70=$add_bits;
      var $71=HEAP32[(($mean_bits)>>2)];
      var $div67=((((($71)|0))/(2))&-1);
      var $cmp68=(($70)|0) < (($div67)|0);
      if ($cmp68) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $72=HEAP32[(($mean_bits)>>2)];
      var $div71=((((($72)|0))/(2))&-1);
      $add_bits=$div71;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $73=$add_bits;
      var $74=HEAP32[(($mean_bits)>>2)];
      var $mul74=((($74)*(3))&-1);
      var $div75=((((($mul74)|0))/(2))&-1);
      var $cmp76=(($73)|0) > (($div75)|0);
      if ($cmp76) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $75=HEAP32[(($mean_bits)>>2)];
      var $mul79=((($75)*(3))&-1);
      var $div80=((((($mul79)|0))/(2))&-1);
      $add_bits=$div80;
      label = 22; break;
    case 19: 
      var $76=$add_bits;
      var $cmp81=(($76)|0) < 0;
      if ($cmp81) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $add_bits=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $77=$add_bits;
      var $78=$ch;
      var $79=$gr;
      var $80=$targ_bits_addr;
      var $arrayidx86=(($80+($79<<3))|0);
      var $arrayidx87=(($arrayidx86+($78<<2))|0);
      var $81=HEAP32[(($arrayidx87)>>2)];
      var $add88=((($81)+($77))|0);
      HEAP32[(($arrayidx87)>>2)]=$add88;
      label = 23; break;
    case 23: 
      var $82=$ch;
      var $83=$gr;
      var $84=$targ_bits_addr;
      var $arrayidx90=(($84+($83<<3))|0);
      var $arrayidx91=(($arrayidx90+($82<<2))|0);
      var $85=HEAP32[(($arrayidx91)>>2)];
      var $cmp92=(($85)|0) > 4095;
      if ($cmp92) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $86=$ch;
      var $87=$gr;
      var $88=$targ_bits_addr;
      var $arrayidx95=(($88+($87<<3))|0);
      var $arrayidx96=(($arrayidx95+($86<<2))|0);
      HEAP32[(($arrayidx96)>>2)]=4095;
      label = 25; break;
    case 25: 
      var $89=$ch;
      var $90=$gr;
      var $91=$targ_bits_addr;
      var $arrayidx98=(($91+($90<<3))|0);
      var $arrayidx99=(($arrayidx98+($89<<2))|0);
      var $92=HEAP32[(($arrayidx99)>>2)];
      var $93=$sum;
      var $add100=((($93)+($92))|0);
      $sum=$add100;
      label = 26; break;
    case 26: 
      var $94=$ch;
      var $inc=((($94)+(1))|0);
      $ch=$inc;
      label = 11; break;
    case 27: 
      var $95=$sum;
      var $cmp101=(($95)|0) > 7680;
      if ($cmp101) { label = 28; break; } else { label = 33; break; }
    case 28: 
      $ch=0;
      label = 29; break;
    case 29: 
      var $96=$ch;
      var $97=$cfg;
      var $channels_out105=(($97+56)|0);
      var $98=HEAP32[(($channels_out105)>>2)];
      var $cmp106=(($96)|0) < (($98)|0);
      if ($cmp106) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $99=$ch;
      var $100=$gr;
      var $101=$targ_bits_addr;
      var $arrayidx109=(($101+($100<<3))|0);
      var $arrayidx110=(($arrayidx109+($99<<2))|0);
      var $102=HEAP32[(($arrayidx110)>>2)];
      var $mul111=((($102)*(7680))&-1);
      HEAP32[(($arrayidx110)>>2)]=$mul111;
      var $103=$sum;
      var $104=$ch;
      var $105=$gr;
      var $106=$targ_bits_addr;
      var $arrayidx112=(($106+($105<<3))|0);
      var $arrayidx113=(($arrayidx112+($104<<2))|0);
      var $107=HEAP32[(($arrayidx113)>>2)];
      var $div114=((((($107)|0))/((($103)|0)))&-1);
      HEAP32[(($arrayidx113)>>2)]=$div114;
      label = 31; break;
    case 31: 
      var $108=$ch;
      var $inc116=((($108)+(1))|0);
      $ch=$inc116;
      label = 29; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $109=$gr;
      var $inc120=((($109)+(1))|0);
      $gr=$inc120;
      label = 9; break;
    case 35: 
      var $110=$gfc_addr;
      var $ov_enc122=(($110+84036)|0);
      var $mode_ext=(($ov_enc122+716)|0);
      var $111=HEAP32[(($mode_ext)>>2)];
      var $cmp123=(($111)|0)==2;
      if ($cmp123) { label = 36; break; } else { label = 41; break; }
    case 36: 
      $gr=0;
      label = 37; break;
    case 37: 
      var $112=$gr;
      var $113=$cfg;
      var $mode_gr127=(($113+60)|0);
      var $114=HEAP32[(($mode_gr127)>>2)];
      var $cmp128=(($112)|0) < (($114)|0);
      if ($cmp128) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $115=$gr;
      var $116=$targ_bits_addr;
      var $arrayidx131=(($116+($115<<3))|0);
      var $arraydecay=(($arrayidx131)|0);
      var $117=$gr;
      var $118=$ms_ener_ratio_addr;
      var $arrayidx132=(($118+($117<<2))|0);
      var $119=HEAPF32[(($arrayidx132)>>2)];
      var $120=HEAP32[(($mean_bits)>>2)];
      var $121=$cfg;
      var $channels_out133=(($121+56)|0);
      var $122=HEAP32[(($channels_out133)>>2)];
      var $mul134=((($120)*($122))&-1);
      _reduce_side($arraydecay, $119, $mul134, 7680);
      label = 39; break;
    case 39: 
      var $123=$gr;
      var $inc136=((($123)+(1))|0);
      $gr=$inc136;
      label = 37; break;
    case 40: 
      label = 41; break;
    case 41: 
      $totbits=0;
      $gr=0;
      label = 42; break;
    case 42: 
      var $124=$gr;
      var $125=$cfg;
      var $mode_gr140=(($125+60)|0);
      var $126=HEAP32[(($mode_gr140)>>2)];
      var $cmp141=(($124)|0) < (($126)|0);
      if ($cmp141) { label = 43; break; } else { label = 51; break; }
    case 43: 
      $ch=0;
      label = 44; break;
    case 44: 
      var $127=$ch;
      var $128=$cfg;
      var $channels_out145=(($128+56)|0);
      var $129=HEAP32[(($channels_out145)>>2)];
      var $cmp146=(($127)|0) < (($129)|0);
      if ($cmp146) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $130=$ch;
      var $131=$gr;
      var $132=$targ_bits_addr;
      var $arrayidx149=(($132+($131<<3))|0);
      var $arrayidx150=(($arrayidx149+($130<<2))|0);
      var $133=HEAP32[(($arrayidx150)>>2)];
      var $cmp151=(($133)|0) > 4095;
      if ($cmp151) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $134=$ch;
      var $135=$gr;
      var $136=$targ_bits_addr;
      var $arrayidx154=(($136+($135<<3))|0);
      var $arrayidx155=(($arrayidx154+($134<<2))|0);
      HEAP32[(($arrayidx155)>>2)]=4095;
      label = 47; break;
    case 47: 
      var $137=$ch;
      var $138=$gr;
      var $139=$targ_bits_addr;
      var $arrayidx157=(($139+($138<<3))|0);
      var $arrayidx158=(($arrayidx157+($137<<2))|0);
      var $140=HEAP32[(($arrayidx158)>>2)];
      var $141=$totbits;
      var $add159=((($141)+($140))|0);
      $totbits=$add159;
      label = 48; break;
    case 48: 
      var $142=$ch;
      var $inc161=((($142)+(1))|0);
      $ch=$inc161;
      label = 44; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $143=$gr;
      var $inc164=((($143)+(1))|0);
      $gr=$inc164;
      label = 42; break;
    case 51: 
      var $144=$totbits;
      var $145=$max_frame_bits_addr;
      var $146=HEAP32[(($145)>>2)];
      var $cmp166=(($144)|0) > (($146)|0);
      if ($cmp166) { label = 52; break; } else { label = 62; break; }
    case 52: 
      var $147=$totbits;
      var $cmp168=(($147)|0) > 0;
      if ($cmp168) { label = 53; break; } else { label = 62; break; }
    case 53: 
      $gr=0;
      label = 54; break;
    case 54: 
      var $148=$gr;
      var $149=$cfg;
      var $mode_gr172=(($149+60)|0);
      var $150=HEAP32[(($mode_gr172)>>2)];
      var $cmp173=(($148)|0) < (($150)|0);
      if ($cmp173) { label = 55; break; } else { label = 61; break; }
    case 55: 
      $ch=0;
      label = 56; break;
    case 56: 
      var $151=$ch;
      var $152=$cfg;
      var $channels_out177=(($152+56)|0);
      var $153=HEAP32[(($channels_out177)>>2)];
      var $cmp178=(($151)|0) < (($153)|0);
      if ($cmp178) { label = 57; break; } else { label = 59; break; }
    case 57: 
      var $154=$max_frame_bits_addr;
      var $155=HEAP32[(($154)>>2)];
      var $156=$ch;
      var $157=$gr;
      var $158=$targ_bits_addr;
      var $arrayidx181=(($158+($157<<3))|0);
      var $arrayidx182=(($arrayidx181+($156<<2))|0);
      var $159=HEAP32[(($arrayidx182)>>2)];
      var $mul183=((($159)*($155))&-1);
      HEAP32[(($arrayidx182)>>2)]=$mul183;
      var $160=$totbits;
      var $161=$ch;
      var $162=$gr;
      var $163=$targ_bits_addr;
      var $arrayidx184=(($163+($162<<3))|0);
      var $arrayidx185=(($arrayidx184+($161<<2))|0);
      var $164=HEAP32[(($arrayidx185)>>2)];
      var $div186=((((($164)|0))/((($160)|0)))&-1);
      HEAP32[(($arrayidx185)>>2)]=$div186;
      label = 58; break;
    case 58: 
      var $165=$ch;
      var $inc188=((($165)+(1))|0);
      $ch=$inc188;
      label = 56; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $166=$gr;
      var $inc191=((($166)+(1))|0);
      $gr=$inc191;
      label = 54; break;
    case 61: 
      label = 62; break;
    case 62: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_calc_target_bits["X"]=1;

function _init_outer_loop($gfc, $cod_info) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2304)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $cfg;
      var $sfb;
      var $j;
      var $ixwork=__stackBase__;
      var $ix;
      var $start;
      var $end;
      var $window89;
      var $l90;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$cod_info_addr;
      var $part2_3_length=(($1+4768)|0);
      HEAP32[(($part2_3_length)>>2)]=0;
      var $2=$cod_info_addr;
      var $big_values=(($2+4772)|0);
      HEAP32[(($big_values)>>2)]=0;
      var $3=$cod_info_addr;
      var $count1=(($3+4776)|0);
      HEAP32[(($count1)>>2)]=0;
      var $4=$cod_info_addr;
      var $global_gain=(($4+4780)|0);
      HEAP32[(($global_gain)>>2)]=210;
      var $5=$cod_info_addr;
      var $scalefac_compress=(($5+4784)|0);
      HEAP32[(($scalefac_compress)>>2)]=0;
      var $6=$cod_info_addr;
      var $table_select=(($6+4796)|0);
      var $arrayidx=(($table_select)|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $7=$cod_info_addr;
      var $table_select2=(($7+4796)|0);
      var $arrayidx3=(($table_select2+4)|0);
      HEAP32[(($arrayidx3)>>2)]=0;
      var $8=$cod_info_addr;
      var $table_select4=(($8+4796)|0);
      var $arrayidx5=(($table_select4+8)|0);
      HEAP32[(($arrayidx5)>>2)]=0;
      var $9=$cod_info_addr;
      var $subblock_gain=(($9+4808)|0);
      var $arrayidx6=(($subblock_gain)|0);
      HEAP32[(($arrayidx6)>>2)]=0;
      var $10=$cod_info_addr;
      var $subblock_gain7=(($10+4808)|0);
      var $arrayidx8=(($subblock_gain7+4)|0);
      HEAP32[(($arrayidx8)>>2)]=0;
      var $11=$cod_info_addr;
      var $subblock_gain9=(($11+4808)|0);
      var $arrayidx10=(($subblock_gain9+8)|0);
      HEAP32[(($arrayidx10)>>2)]=0;
      var $12=$cod_info_addr;
      var $subblock_gain11=(($12+4808)|0);
      var $arrayidx12=(($subblock_gain11+12)|0);
      HEAP32[(($arrayidx12)>>2)]=0;
      var $13=$cod_info_addr;
      var $region0_count=(($13+4824)|0);
      HEAP32[(($region0_count)>>2)]=0;
      var $14=$cod_info_addr;
      var $region1_count=(($14+4828)|0);
      HEAP32[(($region1_count)>>2)]=0;
      var $15=$cod_info_addr;
      var $preflag=(($15+4832)|0);
      HEAP32[(($preflag)>>2)]=0;
      var $16=$cod_info_addr;
      var $scalefac_scale=(($16+4836)|0);
      HEAP32[(($scalefac_scale)>>2)]=0;
      var $17=$cod_info_addr;
      var $count1table_select=(($17+4840)|0);
      HEAP32[(($count1table_select)>>2)]=0;
      var $18=$cod_info_addr;
      var $part2_length=(($18+4844)|0);
      HEAP32[(($part2_length)>>2)]=0;
      var $19=$cfg;
      var $samplerate_out=(($19+48)|0);
      var $20=HEAP32[(($samplerate_out)>>2)];
      var $cmp=(($20)|0) <= 8000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $21=$cod_info_addr;
      var $sfb_lmax=(($21+4848)|0);
      HEAP32[(($sfb_lmax)>>2)]=17;
      var $22=$cod_info_addr;
      var $sfb_smin=(($22+4852)|0);
      HEAP32[(($sfb_smin)>>2)]=9;
      var $23=$cod_info_addr;
      var $psy_lmax=(($23+4856)|0);
      HEAP32[(($psy_lmax)>>2)]=17;
      label = 5; break;
    case 4: 
      var $24=$cod_info_addr;
      var $sfb_lmax13=(($24+4848)|0);
      HEAP32[(($sfb_lmax13)>>2)]=21;
      var $25=$cod_info_addr;
      var $sfb_smin14=(($25+4852)|0);
      HEAP32[(($sfb_smin14)>>2)]=12;
      var $26=$gfc_addr;
      var $sv_qnt=(($26+84764)|0);
      var $sfb21_extra=(($sv_qnt+324)|0);
      var $27=HEAP32[(($sfb21_extra)>>2)];
      var $tobool=(($27)|0)!=0;
      var $cond=$tobool ? 22 : 21;
      var $28=$cod_info_addr;
      var $psy_lmax15=(($28+4856)|0);
      HEAP32[(($psy_lmax15)>>2)]=$cond;
      label = 5; break;
    case 5: 
      var $29=$cod_info_addr;
      var $psy_lmax16=(($29+4856)|0);
      var $30=HEAP32[(($psy_lmax16)>>2)];
      var $31=$cod_info_addr;
      var $psymax=(($31+4864)|0);
      HEAP32[(($psymax)>>2)]=$30;
      var $32=$cod_info_addr;
      var $sfb_lmax17=(($32+4848)|0);
      var $33=HEAP32[(($sfb_lmax17)>>2)];
      var $34=$cod_info_addr;
      var $sfbmax=(($34+4860)|0);
      HEAP32[(($sfbmax)>>2)]=$33;
      var $35=$cod_info_addr;
      var $sfbdivide=(($35+4868)|0);
      HEAP32[(($sfbdivide)>>2)]=11;
      $sfb=0;
      label = 6; break;
    case 6: 
      var $36=$sfb;
      var $cmp18=(($36)|0) < 22;
      if ($cmp18) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $37=$sfb;
      var $add=((($37)+(1))|0);
      var $38=$gfc_addr;
      var $scalefac_band=(($38+21360)|0);
      var $l=(($scalefac_band)|0);
      var $arrayidx19=(($l+($add<<2))|0);
      var $39=HEAP32[(($arrayidx19)>>2)];
      var $40=$sfb;
      var $41=$gfc_addr;
      var $scalefac_band20=(($41+21360)|0);
      var $l21=(($scalefac_band20)|0);
      var $arrayidx22=(($l21+($40<<2))|0);
      var $42=HEAP32[(($arrayidx22)>>2)];
      var $sub=((($39)-($42))|0);
      var $43=$sfb;
      var $44=$cod_info_addr;
      var $width=(($44+4872)|0);
      var $arrayidx23=(($width+($43<<2))|0);
      HEAP32[(($arrayidx23)>>2)]=$sub;
      var $45=$sfb;
      var $46=$cod_info_addr;
      var $window=(($46+5028)|0);
      var $arrayidx24=(($window+($45<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=3;
      label = 8; break;
    case 8: 
      var $47=$sfb;
      var $inc=((($47)+(1))|0);
      $sfb=$inc;
      label = 6; break;
    case 9: 
      var $48=$cod_info_addr;
      var $block_type=(($48+4788)|0);
      var $49=HEAP32[(($block_type)>>2)];
      var $cmp25=(($49)|0)==2;
      if ($cmp25) { label = 10; break; } else { label = 32; break; }
    case 10: 
      var $50=$cod_info_addr;
      var $sfb_smin27=(($50+4852)|0);
      HEAP32[(($sfb_smin27)>>2)]=0;
      var $51=$cod_info_addr;
      var $sfb_lmax28=(($51+4848)|0);
      HEAP32[(($sfb_lmax28)>>2)]=0;
      var $52=$cod_info_addr;
      var $mixed_block_flag=(($52+4792)|0);
      var $53=HEAP32[(($mixed_block_flag)>>2)];
      var $tobool29=(($53)|0)!=0;
      if ($tobool29) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $54=$cod_info_addr;
      var $sfb_smin31=(($54+4852)|0);
      HEAP32[(($sfb_smin31)>>2)]=3;
      var $55=$cfg;
      var $mode_gr=(($55+60)|0);
      var $56=HEAP32[(($mode_gr)>>2)];
      var $mul=((($56<<1))&-1);
      var $add32=((($mul)+(4))|0);
      var $57=$cod_info_addr;
      var $sfb_lmax33=(($57+4848)|0);
      HEAP32[(($sfb_lmax33)>>2)]=$add32;
      label = 12; break;
    case 12: 
      var $58=$cfg;
      var $samplerate_out35=(($58+48)|0);
      var $59=HEAP32[(($samplerate_out35)>>2)];
      var $cmp36=(($59)|0) <= 8000;
      if ($cmp36) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $60=$cod_info_addr;
      var $sfb_lmax38=(($60+4848)|0);
      var $61=HEAP32[(($sfb_lmax38)>>2)];
      var $62=$cod_info_addr;
      var $sfb_smin39=(($62+4852)|0);
      var $63=HEAP32[(($sfb_smin39)>>2)];
      var $sub40=(((9)-($63))|0);
      var $mul41=((($sub40)*(3))&-1);
      var $add42=((($61)+($mul41))|0);
      var $64=$cod_info_addr;
      var $psymax43=(($64+4864)|0);
      HEAP32[(($psymax43)>>2)]=$add42;
      var $65=$cod_info_addr;
      var $sfb_lmax44=(($65+4848)|0);
      var $66=HEAP32[(($sfb_lmax44)>>2)];
      var $67=$cod_info_addr;
      var $sfb_smin45=(($67+4852)|0);
      var $68=HEAP32[(($sfb_smin45)>>2)];
      var $sub46=(((9)-($68))|0);
      var $mul47=((($sub46)*(3))&-1);
      var $add48=((($66)+($mul47))|0);
      var $69=$cod_info_addr;
      var $sfbmax49=(($69+4860)|0);
      HEAP32[(($sfbmax49)>>2)]=$add48;
      label = 15; break;
    case 14: 
      var $70=$cod_info_addr;
      var $sfb_lmax51=(($70+4848)|0);
      var $71=HEAP32[(($sfb_lmax51)>>2)];
      var $72=$gfc_addr;
      var $sv_qnt52=(($72+84764)|0);
      var $sfb21_extra53=(($sv_qnt52+324)|0);
      var $73=HEAP32[(($sfb21_extra53)>>2)];
      var $tobool54=(($73)|0)!=0;
      var $cond55=$tobool54 ? 13 : 12;
      var $74=$cod_info_addr;
      var $sfb_smin56=(($74+4852)|0);
      var $75=HEAP32[(($sfb_smin56)>>2)];
      var $sub57=((($cond55)-($75))|0);
      var $mul58=((($sub57)*(3))&-1);
      var $add59=((($71)+($mul58))|0);
      var $76=$cod_info_addr;
      var $psymax60=(($76+4864)|0);
      HEAP32[(($psymax60)>>2)]=$add59;
      var $77=$cod_info_addr;
      var $sfb_lmax61=(($77+4848)|0);
      var $78=HEAP32[(($sfb_lmax61)>>2)];
      var $79=$cod_info_addr;
      var $sfb_smin62=(($79+4852)|0);
      var $80=HEAP32[(($sfb_smin62)>>2)];
      var $sub63=(((12)-($80))|0);
      var $mul64=((($sub63)*(3))&-1);
      var $add65=((($78)+($mul64))|0);
      var $81=$cod_info_addr;
      var $sfbmax66=(($81+4860)|0);
      HEAP32[(($sfbmax66)>>2)]=$add65;
      label = 15; break;
    case 15: 
      var $82=$cod_info_addr;
      var $sfbmax68=(($82+4860)|0);
      var $83=HEAP32[(($sfbmax68)>>2)];
      var $sub69=((($83)-(18))|0);
      var $84=$cod_info_addr;
      var $sfbdivide70=(($84+4868)|0);
      HEAP32[(($sfbdivide70)>>2)]=$sub69;
      var $85=$cod_info_addr;
      var $sfb_lmax71=(($85+4848)|0);
      var $86=HEAP32[(($sfb_lmax71)>>2)];
      var $87=$cod_info_addr;
      var $psy_lmax72=(($87+4856)|0);
      HEAP32[(($psy_lmax72)>>2)]=$86;
      var $88=$cod_info_addr;
      var $sfb_lmax73=(($88+4848)|0);
      var $89=HEAP32[(($sfb_lmax73)>>2)];
      var $90=$gfc_addr;
      var $scalefac_band74=(($90+21360)|0);
      var $l75=(($scalefac_band74)|0);
      var $arrayidx76=(($l75+($89<<2))|0);
      var $91=HEAP32[(($arrayidx76)>>2)];
      var $92=$cod_info_addr;
      var $xr=(($92)|0);
      var $arrayidx77=(($xr+($91<<2))|0);
      $ix=$arrayidx77;
      var $93=$ixwork;
      var $94=$cod_info_addr;
      var $xr78=(($94)|0);
      var $95=$xr78;
      assert(2304 % 1 === 0);for (var $$src = $95>>2, $$dest = $93>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $96=$cod_info_addr;
      var $sfb_smin79=(($96+4852)|0);
      var $97=HEAP32[(($sfb_smin79)>>2)];
      $sfb=$97;
      label = 16; break;
    case 16: 
      var $98=$sfb;
      var $cmp81=(($98)|0) < 13;
      if ($cmp81) { label = 17; break; } else { label = 27; break; }
    case 17: 
      var $99=$sfb;
      var $100=$gfc_addr;
      var $scalefac_band83=(($100+21360)|0);
      var $s=(($scalefac_band83+92)|0);
      var $arrayidx84=(($s+($99<<2))|0);
      var $101=HEAP32[(($arrayidx84)>>2)];
      $start=$101;
      var $102=$sfb;
      var $add85=((($102)+(1))|0);
      var $103=$gfc_addr;
      var $scalefac_band86=(($103+21360)|0);
      var $s87=(($scalefac_band86+92)|0);
      var $arrayidx88=(($s87+($add85<<2))|0);
      var $104=HEAP32[(($arrayidx88)>>2)];
      $end=$104;
      $window89=0;
      label = 18; break;
    case 18: 
      var $105=$window89;
      var $cmp92=(($105)|0) < 3;
      if ($cmp92) { label = 19; break; } else { label = 25; break; }
    case 19: 
      var $106=$start;
      $l90=$106;
      label = 20; break;
    case 20: 
      var $107=$l90;
      var $108=$end;
      var $cmp95=(($107)|0) < (($108)|0);
      if ($cmp95) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $109=$l90;
      var $mul97=((($109)*(3))&-1);
      var $110=$window89;
      var $add98=((($mul97)+($110))|0);
      var $arrayidx99=(($ixwork+($add98<<2))|0);
      var $111=HEAPF32[(($arrayidx99)>>2)];
      var $112=$ix;
      var $incdec_ptr=(($112+4)|0);
      $ix=$incdec_ptr;
      HEAPF32[(($112)>>2)]=$111;
      label = 22; break;
    case 22: 
      var $113=$l90;
      var $inc101=((($113)+(1))|0);
      $l90=$inc101;
      label = 20; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $114=$window89;
      var $inc104=((($114)+(1))|0);
      $window89=$inc104;
      label = 18; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $115=$sfb;
      var $inc107=((($115)+(1))|0);
      $sfb=$inc107;
      label = 16; break;
    case 27: 
      var $116=$cod_info_addr;
      var $sfb_lmax109=(($116+4848)|0);
      var $117=HEAP32[(($sfb_lmax109)>>2)];
      $j=$117;
      var $118=$cod_info_addr;
      var $sfb_smin110=(($118+4852)|0);
      var $119=HEAP32[(($sfb_smin110)>>2)];
      $sfb=$119;
      label = 28; break;
    case 28: 
      var $120=$sfb;
      var $cmp112=(($120)|0) < 13;
      if ($cmp112) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $121=$sfb;
      var $add114=((($121)+(1))|0);
      var $122=$gfc_addr;
      var $scalefac_band115=(($122+21360)|0);
      var $s116=(($scalefac_band115+92)|0);
      var $arrayidx117=(($s116+($add114<<2))|0);
      var $123=HEAP32[(($arrayidx117)>>2)];
      var $124=$sfb;
      var $125=$gfc_addr;
      var $scalefac_band118=(($125+21360)|0);
      var $s119=(($scalefac_band118+92)|0);
      var $arrayidx120=(($s119+($124<<2))|0);
      var $126=HEAP32[(($arrayidx120)>>2)];
      var $sub121=((($123)-($126))|0);
      var $127=$j;
      var $add122=((($127)+(2))|0);
      var $128=$cod_info_addr;
      var $width123=(($128+4872)|0);
      var $arrayidx124=(($width123+($add122<<2))|0);
      HEAP32[(($arrayidx124)>>2)]=$sub121;
      var $129=$j;
      var $add125=((($129)+(1))|0);
      var $130=$cod_info_addr;
      var $width126=(($130+4872)|0);
      var $arrayidx127=(($width126+($add125<<2))|0);
      HEAP32[(($arrayidx127)>>2)]=$sub121;
      var $131=$j;
      var $132=$cod_info_addr;
      var $width128=(($132+4872)|0);
      var $arrayidx129=(($width128+($131<<2))|0);
      HEAP32[(($arrayidx129)>>2)]=$sub121;
      var $133=$j;
      var $134=$cod_info_addr;
      var $window130=(($134+5028)|0);
      var $arrayidx131=(($window130+($133<<2))|0);
      HEAP32[(($arrayidx131)>>2)]=0;
      var $135=$j;
      var $add132=((($135)+(1))|0);
      var $136=$cod_info_addr;
      var $window133=(($136+5028)|0);
      var $arrayidx134=(($window133+($add132<<2))|0);
      HEAP32[(($arrayidx134)>>2)]=1;
      var $137=$j;
      var $add135=((($137)+(2))|0);
      var $138=$cod_info_addr;
      var $window136=(($138+5028)|0);
      var $arrayidx137=(($window136+($add135<<2))|0);
      HEAP32[(($arrayidx137)>>2)]=2;
      var $139=$j;
      var $add138=((($139)+(3))|0);
      $j=$add138;
      label = 30; break;
    case 30: 
      var $140=$sfb;
      var $inc140=((($140)+(1))|0);
      $sfb=$inc140;
      label = 28; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $141=$cod_info_addr;
      var $count1bits=(($141+5184)|0);
      HEAP32[(($count1bits)>>2)]=0;
      var $142=$cod_info_addr;
      var $sfb_partition_table=(($142+5188)|0);
      HEAP32[(($sfb_partition_table)>>2)]=((5291892)|0);
      var $143=$cod_info_addr;
      var $slen=(($143+5192)|0);
      var $arrayidx143=(($slen)|0);
      HEAP32[(($arrayidx143)>>2)]=0;
      var $144=$cod_info_addr;
      var $slen144=(($144+5192)|0);
      var $arrayidx145=(($slen144+4)|0);
      HEAP32[(($arrayidx145)>>2)]=0;
      var $145=$cod_info_addr;
      var $slen146=(($145+5192)|0);
      var $arrayidx147=(($slen146+8)|0);
      HEAP32[(($arrayidx147)>>2)]=0;
      var $146=$cod_info_addr;
      var $slen148=(($146+5192)|0);
      var $arrayidx149=(($slen148+12)|0);
      HEAP32[(($arrayidx149)>>2)]=0;
      var $147=$cod_info_addr;
      var $max_nonzero_coeff=(($147+5208)|0);
      HEAP32[(($max_nonzero_coeff)>>2)]=575;
      var $148=$cod_info_addr;
      var $scalefac=(($148+4608)|0);
      var $149=$scalefac;
      for (var $$dest = $149>>2, $$stop = $$dest + 39; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $150=$cfg;
      var $vbr=(($150+88)|0);
      var $151=HEAP32[(($vbr)>>2)];
      var $cmp150=(($151)|0)!=1;
      if ($cmp150) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $152=$cfg;
      var $vbr151=(($152+88)|0);
      var $153=HEAP32[(($vbr151)>>2)];
      var $cmp152=(($153)|0)!=4;
      if ($cmp152) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $154=$cfg;
      var $vbr154=(($154+88)|0);
      var $155=HEAP32[(($vbr154)>>2)];
      var $cmp155=(($155)|0)!=3;
      if ($cmp155) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $156=$cfg;
      var $vbr157=(($156+88)|0);
      var $157=HEAP32[(($vbr157)>>2)];
      var $cmp158=(($157)|0)!=0;
      if ($cmp158) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $158=$gfc_addr;
      var $159=$cod_info_addr;
      _psfb21_analogsilence($158, $159);
      label = 37; break;
    case 37: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_outer_loop["X"]=1;

function _outer_loop($gfc, $cod_info, $l3_xmin, $xrpow, $ch, $targ_bits) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8236)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $cod_info_addr;
      var $l3_xmin_addr;
      var $xrpow_addr;
      var $ch_addr;
      var $targ_bits_addr;
      var $cfg;
      var $cod_info_w=__stackBase__;
      var $save_xrpow=(__stackBase__)+(5252);
      var $distort=(__stackBase__)+(7556);
      var $best_noise_info=(__stackBase__)+(7712);
      var $huff_bits;
      var $better;
      var $age;
      var $prev_noise=(__stackBase__)+(7736);
      var $best_part2_3_length;
      var $bEndOfSearch;
      var $bRefine;
      var $best_ggain_pass1;
      var $noise_info=(__stackBase__)+(8212);
      var $search_limit;
      var $maxggain;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $l3_xmin_addr=$l3_xmin;
      $xrpow_addr=$xrpow;
      $ch_addr=$ch;
      $targ_bits_addr=$targ_bits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      $best_part2_3_length=9999999;
      $bEndOfSearch=0;
      $bRefine=0;
      $best_ggain_pass1=0;
      var $1=$gfc_addr;
      var $2=$cod_info_addr;
      var $3=$targ_bits_addr;
      var $4=$ch_addr;
      var $5=$xrpow_addr;
      var $call=_bin_search_StepSize($1, $2, $3, $4, $5);
      var $6=$cfg;
      var $noise_shaping=(($6+12)|0);
      var $7=HEAP32[(($noise_shaping)>>2)];
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=100;
      label = 76; break;
    case 4: 
      var $8=$prev_noise;
      for (var $$dest = $8>>2, $$stop = $$dest + 119; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $9=$cod_info_addr;
      var $10=$l3_xmin_addr;
      var $arraydecay=(($distort)|0);
      var $call2=_calc_noise($9, $10, $arraydecay, $best_noise_info, $prev_noise);
      var $11=$cod_info_addr;
      var $part2_3_length=(($11+4768)|0);
      var $12=HEAP32[(($part2_3_length)>>2)];
      var $bits=(($best_noise_info+20)|0);
      HEAP32[(($bits)>>2)]=$12;
      var $13=$cod_info_addr;
      var $14=$cod_info_w;
      var $15=$13;
      assert(5252 % 1 === 0);for (var $$src = $15>>2, $$dest = $14>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      $age=0;
      var $16=$save_xrpow;
      var $17=$xrpow_addr;
      var $18=$17;
      assert(2304 % 1 === 0);for (var $$src = $18>>2, $$dest = $16>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 5; break;
    case 5: 
      var $19=$bEndOfSearch;
      var $tobool3=(($19)|0)!=0;
      var $lnot=$tobool3 ^ 1;
      if ($lnot) { label = 6; break; } else { label = 68; break; }
    case 6: 
      label = 7; break;
    case 7: 
      $maxggain=255;
      var $20=$gfc_addr;
      var $sv_qnt=(($20+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $21=HEAP32[(($substep_shaping)>>2)];
      var $and=$21 & 2;
      var $tobool4=(($and)|0)!=0;
      if ($tobool4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $search_limit=20;
      label = 10; break;
    case 9: 
      $search_limit=3;
      label = 10; break;
    case 10: 
      var $22=$gfc_addr;
      var $sv_qnt7=(($22+84764)|0);
      var $sfb21_extra=(($sv_qnt7+324)|0);
      var $23=HEAP32[(($sfb21_extra)>>2)];
      var $tobool8=(($23)|0)!=0;
      if ($tobool8) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $sfbmax=(($cod_info_w+4860)|0);
      var $24=HEAP32[(($sfbmax)>>2)];
      var $arrayidx=(($distort+($24<<2))|0);
      var $25=HEAPF32[(($arrayidx)>>2)];
      var $conv=$25;
      var $cmp=$conv > 1;
      if ($cmp) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 61; break;
    case 13: 
      var $block_type=(($cod_info_w+4788)|0);
      var $26=HEAP32[(($block_type)>>2)];
      var $cmp13=(($26)|0)==2;
      if ($cmp13) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $sfbmax15=(($cod_info_w+4860)|0);
      var $27=HEAP32[(($sfbmax15)>>2)];
      var $add=((($27)+(1))|0);
      var $arrayidx16=(($distort+($add<<2))|0);
      var $28=HEAPF32[(($arrayidx16)>>2)];
      var $conv17=$28;
      var $cmp18=$conv17 > 1;
      if ($cmp18) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $sfbmax20=(($cod_info_w+4860)|0);
      var $29=HEAP32[(($sfbmax20)>>2)];
      var $add21=((($29)+(2))|0);
      var $arrayidx22=(($distort+($add21<<2))|0);
      var $30=HEAPF32[(($arrayidx22)>>2)];
      var $conv23=$30;
      var $cmp24=$conv23 > 1;
      if ($cmp24) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 61; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $31=$gfc_addr;
      var $arraydecay29=(($distort)|0);
      var $32=$xrpow_addr;
      var $33=$bRefine;
      var $call30=_balance_noise($31, $cod_info_w, $arraydecay29, $32, $33);
      var $cmp31=(($call30)|0)==0;
      if ($cmp31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 61; break;
    case 20: 
      var $scalefac_scale=(($cod_info_w+4836)|0);
      var $34=HEAP32[(($scalefac_scale)>>2)];
      var $tobool35=(($34)|0)!=0;
      if ($tobool35) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $maxggain=254;
      label = 22; break;
    case 22: 
      var $35=$targ_bits_addr;
      var $part2_length=(($cod_info_w+4844)|0);
      var $36=HEAP32[(($part2_length)>>2)];
      var $sub=((($35)-($36))|0);
      $huff_bits=$sub;
      var $37=$huff_bits;
      var $cmp38=(($37)|0) <= 0;
      if ($cmp38) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 61; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $38=$gfc_addr;
      var $39=$xrpow_addr;
      var $call43=_count_bits($38, $39, $cod_info_w, $prev_noise);
      var $part2_3_length44=(($cod_info_w+4768)|0);
      HEAP32[(($part2_3_length44)>>2)]=$call43;
      var $40=$huff_bits;
      var $cmp45=(($call43)|0) > (($40)|0);
      if ($cmp45) { label = 26; break; } else { var $43 = 0;label = 27; break; }
    case 26: 
      var $global_gain=(($cod_info_w+4780)|0);
      var $41=HEAP32[(($global_gain)>>2)];
      var $42=$maxggain;
      var $cmp47=(($41)|0) <= (($42)|0);
      var $43 = $cmp47;label = 27; break;
    case 27: 
      var $43;
      if ($43) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $global_gain50=(($cod_info_w+4780)|0);
      var $44=HEAP32[(($global_gain50)>>2)];
      var $inc=((($44)+(1))|0);
      HEAP32[(($global_gain50)>>2)]=$inc;
      label = 25; break;
    case 29: 
      var $global_gain51=(($cod_info_w+4780)|0);
      var $45=HEAP32[(($global_gain51)>>2)];
      var $46=$maxggain;
      var $cmp52=(($45)|0) > (($46)|0);
      if ($cmp52) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 61; break;
    case 31: 
      var $over_count=(($best_noise_info+12)|0);
      var $47=HEAP32[(($over_count)>>2)];
      var $cmp56=(($47)|0)==0;
      if ($cmp56) { label = 32; break; } else { label = 40; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $48=$gfc_addr;
      var $49=$xrpow_addr;
      var $call60=_count_bits($48, $49, $cod_info_w, $prev_noise);
      var $part2_3_length61=(($cod_info_w+4768)|0);
      HEAP32[(($part2_3_length61)>>2)]=$call60;
      var $50=$best_part2_3_length;
      var $cmp62=(($call60)|0) > (($50)|0);
      if ($cmp62) { label = 34; break; } else { var $53 = 0;label = 35; break; }
    case 34: 
      var $global_gain65=(($cod_info_w+4780)|0);
      var $51=HEAP32[(($global_gain65)>>2)];
      var $52=$maxggain;
      var $cmp66=(($51)|0) <= (($52)|0);
      var $53 = $cmp66;label = 35; break;
    case 35: 
      var $53;
      if ($53) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $global_gain70=(($cod_info_w+4780)|0);
      var $54=HEAP32[(($global_gain70)>>2)];
      var $inc71=((($54)+(1))|0);
      HEAP32[(($global_gain70)>>2)]=$inc71;
      label = 33; break;
    case 37: 
      var $global_gain73=(($cod_info_w+4780)|0);
      var $55=HEAP32[(($global_gain73)>>2)];
      var $56=$maxggain;
      var $cmp74=(($55)|0) > (($56)|0);
      if ($cmp74) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 61; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $57=$l3_xmin_addr;
      var $arraydecay79=(($distort)|0);
      var $call80=_calc_noise($cod_info_w, $57, $arraydecay79, $noise_info, $prev_noise);
      var $part2_3_length81=(($cod_info_w+4768)|0);
      var $58=HEAP32[(($part2_3_length81)>>2)];
      var $bits82=(($noise_info+20)|0);
      HEAP32[(($bits82)>>2)]=$58;
      var $59=$cod_info_addr;
      var $block_type83=(($59+4788)|0);
      var $60=HEAP32[(($block_type83)>>2)];
      var $cmp84=(($60)|0)!=2;
      if ($cmp84) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $61=$cfg;
      var $quant_comp=(($61+68)|0);
      var $62=HEAP32[(($quant_comp)>>2)];
      $better=$62;
      label = 43; break;
    case 42: 
      var $63=$cfg;
      var $quant_comp_short=(($63+72)|0);
      var $64=HEAP32[(($quant_comp_short)>>2)];
      $better=$64;
      label = 43; break;
    case 43: 
      var $65=$better;
      var $arraydecay89=(($distort)|0);
      var $call90=_quant_compare($65, $best_noise_info, $noise_info, $cod_info_w, $arraydecay89);
      $better=$call90;
      var $66=$better;
      var $tobool91=(($66)|0)!=0;
      if ($tobool91) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $67=$cod_info_addr;
      var $part2_3_length93=(($67+4768)|0);
      var $68=HEAP32[(($part2_3_length93)>>2)];
      $best_part2_3_length=$68;
      var $69=$best_noise_info;
      var $70=$noise_info;
      assert(24 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];HEAP32[((($69)+(12))>>2)]=HEAP32[((($70)+(12))>>2)];HEAP32[((($69)+(16))>>2)]=HEAP32[((($70)+(16))>>2)];HEAP32[((($69)+(20))>>2)]=HEAP32[((($70)+(20))>>2)];
      var $71=$cod_info_addr;
      var $72=$71;
      var $73=$cod_info_w;
      assert(5252 % 1 === 0);for (var $$src = $73>>2, $$dest = $72>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      $age=0;
      var $74=$save_xrpow;
      var $75=$xrpow_addr;
      var $76=$75;
      assert(2304 % 1 === 0);for (var $$src = $76>>2, $$dest = $74>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 59; break;
    case 45: 
      var $77=$cfg;
      var $full_outer_loop=(($77+32)|0);
      var $78=HEAP32[(($full_outer_loop)>>2)];
      var $cmp95=(($78)|0)==0;
      if ($cmp95) { label = 46; break; } else { label = 58; break; }
    case 46: 
      var $79=$age;
      var $inc98=((($79)+(1))|0);
      $age=$inc98;
      var $80=$search_limit;
      var $cmp99=(($inc98)|0) > (($80)|0);
      if ($cmp99) { label = 47; break; } else { label = 49; break; }
    case 47: 
      var $over_count102=(($best_noise_info+12)|0);
      var $81=HEAP32[(($over_count102)>>2)];
      var $cmp103=(($81)|0)==0;
      if ($cmp103) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 61; break;
    case 49: 
      var $82=$cfg;
      var $noise_shaping_amp=(($82+24)|0);
      var $83=HEAP32[(($noise_shaping_amp)>>2)];
      var $cmp107=(($83)|0)==3;
      if ($cmp107) { label = 50; break; } else { label = 53; break; }
    case 50: 
      var $84=$bRefine;
      var $tobool110=(($84)|0)!=0;
      if ($tobool110) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $85=$age;
      var $cmp112=(($85)|0) > 30;
      if ($cmp112) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 61; break;
    case 53: 
      var $86=$cfg;
      var $noise_shaping_amp116=(($86+24)|0);
      var $87=HEAP32[(($noise_shaping_amp116)>>2)];
      var $cmp117=(($87)|0)==3;
      if ($cmp117) { label = 54; break; } else { label = 57; break; }
    case 54: 
      var $88=$bRefine;
      var $tobool120=(($88)|0)!=0;
      if ($tobool120) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $global_gain122=(($cod_info_w+4780)|0);
      var $89=HEAP32[(($global_gain122)>>2)];
      var $90=$best_ggain_pass1;
      var $sub123=((($89)-($90))|0);
      var $cmp124=(($sub123)|0) > 15;
      if ($cmp124) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 61; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $global_gain130=(($cod_info_w+4780)|0);
      var $91=HEAP32[(($global_gain130)>>2)];
      var $scalefac_scale131=(($cod_info_w+4836)|0);
      var $92=HEAP32[(($scalefac_scale131)>>2)];
      var $add132=((($91)+($92))|0);
      var $cmp133=(($add132)|0) < 255;
      if ($cmp133) { label = 7; break; } else { label = 61; break; }
    case 61: 
      var $93=$cfg;
      var $noise_shaping_amp135=(($93+24)|0);
      var $94=HEAP32[(($noise_shaping_amp135)>>2)];
      var $cmp136=(($94)|0)==3;
      if ($cmp136) { label = 62; break; } else { label = 66; break; }
    case 62: 
      var $95=$bRefine;
      var $tobool139=(($95)|0)!=0;
      if ($tobool139) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $96=$cod_info_addr;
      var $97=$cod_info_w;
      var $98=$96;
      assert(5252 % 1 === 0);for (var $$src = $98>>2, $$dest = $97>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $99=$xrpow_addr;
      var $100=$99;
      var $101=$save_xrpow;
      assert(2304 % 1 === 0);for (var $$src = $101>>2, $$dest = $100>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      $age=0;
      var $global_gain141=(($cod_info_w+4780)|0);
      var $102=HEAP32[(($global_gain141)>>2)];
      $best_ggain_pass1=$102;
      $bRefine=1;
      label = 65; break;
    case 64: 
      $bEndOfSearch=1;
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      $bEndOfSearch=1;
      label = 67; break;
    case 67: 
      label = 5; break;
    case 68: 
      var $103=$cfg;
      var $vbr=(($103+88)|0);
      var $104=HEAP32[(($vbr)>>2)];
      var $cmp147=(($104)|0)==2;
      if ($cmp147) { label = 71; break; } else { label = 69; break; }
    case 69: 
      var $105=$cfg;
      var $vbr150=(($105+88)|0);
      var $106=HEAP32[(($vbr150)>>2)];
      var $cmp151=(($106)|0)==4;
      if ($cmp151) { label = 71; break; } else { label = 70; break; }
    case 70: 
      var $107=$cfg;
      var $vbr154=(($107+88)|0);
      var $108=HEAP32[(($vbr154)>>2)];
      var $cmp155=(($108)|0)==1;
      if ($cmp155) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $109=$xrpow_addr;
      var $110=$109;
      var $111=$save_xrpow;
      assert(2304 % 1 === 0);for (var $$src = $111>>2, $$dest = $110>>2, $$stop = $$src + 576; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 75; break;
    case 72: 
      var $112=$gfc_addr;
      var $sv_qnt159=(($112+84764)|0);
      var $substep_shaping160=(($sv_qnt159+328)|0);
      var $113=HEAP32[(($substep_shaping160)>>2)];
      var $and161=$113 & 1;
      var $tobool162=(($and161)|0)!=0;
      if ($tobool162) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $114=$gfc_addr;
      var $115=$cod_info_addr;
      var $116=$l3_xmin_addr;
      var $117=$xrpow_addr;
      _trancate_smallspectrums($114, $115, $116, $117);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $over_count166=(($best_noise_info+12)|0);
      var $118=HEAP32[(($over_count166)>>2)];
      $retval=$118;
      label = 76; break;
    case 76: 
      var $119=$retval;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + label);
  }

}
_outer_loop["X"]=1;

function _CBR_iteration_loop($gfc, $pe, $ms_ener_ratio, $ratio) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2472)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $ms_ener_ratio_addr;
      var $ratio_addr;
      var $cfg;
      var $l3_xmin=__stackBase__;
      var $xrpow=(__stackBase__)+(156);
      var $targ_bits=(__stackBase__)+(2460);
      var $mean_bits=(__stackBase__)+(2468);
      var $max_bits;
      var $gr;
      var $ch;
      var $l3_side;
      var $cod_info;
      var $adjust;
      var $masking_lower_db;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $ratio_addr=$ratio;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $l3_side2=(($1+304)|0);
      $l3_side=$l3_side2;
      var $2=$gfc_addr;
      var $call=_ResvFrameBegin($2, $mean_bits);
      $gr=0;
      label = 3; break;
    case 3: 
      var $3=$gr;
      var $4=$cfg;
      var $mode_gr=(($4+60)|0);
      var $5=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($3)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $6=$gfc_addr;
      var $7=$pe_addr;
      var $arraydecay=(($targ_bits)|0);
      var $8=HEAP32[(($mean_bits)>>2)];
      var $9=$gr;
      var $10=$gr;
      var $call3=_on_pe($6, $7, $arraydecay, $8, $9, $10);
      $max_bits=$call3;
      var $11=$gfc_addr;
      var $ov_enc=(($11+84036)|0);
      var $mode_ext=(($ov_enc+716)|0);
      var $12=HEAP32[(($mode_ext)>>2)];
      var $cmp4=(($12)|0)==2;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$gfc_addr;
      var $l3_side5=(($13+304)|0);
      var $14=$gr;
      _ms_convert($l3_side5, $14);
      var $arraydecay6=(($targ_bits)|0);
      var $15=$gr;
      var $16=$ms_ener_ratio_addr;
      var $arrayidx=(($16+($15<<2))|0);
      var $17=HEAPF32[(($arrayidx)>>2)];
      var $18=HEAP32[(($mean_bits)>>2)];
      var $19=$max_bits;
      _reduce_side($arraydecay6, $17, $18, $19);
      label = 6; break;
    case 6: 
      $ch=0;
      label = 7; break;
    case 7: 
      var $20=$ch;
      var $21=$cfg;
      var $channels_out=(($21+56)|0);
      var $22=HEAP32[(($channels_out)>>2)];
      var $cmp8=(($20)|0) < (($22)|0);
      if ($cmp8) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $23=$ch;
      var $24=$gr;
      var $25=$l3_side;
      var $tt=(($25)|0);
      var $arrayidx10=(($tt+($24)*(10504))|0);
      var $arrayidx11=(($arrayidx10+($23)*(5252))|0);
      $cod_info=$arrayidx11;
      var $26=$cod_info;
      var $block_type=(($26+4788)|0);
      var $27=HEAP32[(($block_type)>>2)];
      var $cmp12=(($27)|0)!=2;
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $adjust=0;
      var $28=$gfc_addr;
      var $sv_qnt=(($28+84764)|0);
      var $mask_adjust=(($sv_qnt+144)|0);
      var $29=HEAPF32[(($mask_adjust)>>2)];
      var $30=$adjust;
      var $sub=($29)-($30);
      $masking_lower_db=$sub;
      label = 11; break;
    case 10: 
      $adjust=0;
      var $31=$gfc_addr;
      var $sv_qnt14=(($31+84764)|0);
      var $mask_adjust_short=(($sv_qnt14+148)|0);
      var $32=HEAPF32[(($mask_adjust_short)>>2)];
      var $33=$adjust;
      var $sub15=($32)-($33);
      $masking_lower_db=$sub15;
      label = 11; break;
    case 11: 
      var $34=$masking_lower_db;
      var $conv=$34;
      var $mul=($conv)*(0.1);
      var $35=Math.pow(10, $mul);
      var $conv17=$35;
      var $36=$gfc_addr;
      var $sv_qnt18=(($36+84764)|0);
      var $masking_lower=(($sv_qnt18+140)|0);
      HEAPF32[(($masking_lower)>>2)]=$conv17;
      var $37=$gfc_addr;
      var $38=$cod_info;
      _init_outer_loop($37, $38);
      var $39=$gfc_addr;
      var $40=$cod_info;
      var $arraydecay19=(($xrpow)|0);
      var $call20=_init_xrpow($39, $40, $arraydecay19);
      var $tobool=(($call20)|0)!=0;
      if ($tobool) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$gfc_addr;
      var $42=$ch;
      var $43=$gr;
      var $44=$ratio_addr;
      var $arrayidx22=(($44+($43)*(976))|0);
      var $arrayidx23=(($arrayidx22+($42)*(488))|0);
      var $45=$cod_info;
      var $arraydecay24=(($l3_xmin)|0);
      var $call25=_calc_xmin($41, $arrayidx23, $45, $arraydecay24);
      var $46=$gfc_addr;
      var $47=$cod_info;
      var $arraydecay26=(($l3_xmin)|0);
      var $arraydecay27=(($xrpow)|0);
      var $48=$ch;
      var $49=$ch;
      var $arrayidx28=(($targ_bits+($49<<2))|0);
      var $50=HEAP32[(($arrayidx28)>>2)];
      var $call29=_outer_loop($46, $47, $arraydecay26, $arraydecay27, $48, $50);
      label = 13; break;
    case 13: 
      var $51=$gfc_addr;
      var $52=$gr;
      var $53=$ch;
      _iteration_finish_one($51, $52, $53);
      label = 14; break;
    case 14: 
      var $54=$ch;
      var $inc=((($54)+(1))|0);
      $ch=$inc;
      label = 7; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $55=$gr;
      var $inc32=((($55)+(1))|0);
      $gr=$inc32;
      label = 3; break;
    case 17: 
      var $56=$gfc_addr;
      var $57=HEAP32[(($mean_bits)>>2)];
      _ResvFrameEnd($56, $57);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_CBR_iteration_loop["X"]=1;

function _bin_search_StepSize($gfc, $cod_info, $desired_rate, $ch, $xrpow) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $desired_rate_addr;
      var $ch_addr;
      var $xrpow_addr;
      var $nBits;
      var $CurrentStep;
      var $flag_GoneOver;
      var $start;
      var $Direction;
      var $step;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $desired_rate_addr=$desired_rate;
      $ch_addr=$ch;
      $xrpow_addr=$xrpow;
      var $0=$ch_addr;
      var $1=$gfc_addr;
      var $sv_qnt=(($1+84764)|0);
      var $CurrentStep1=(($sv_qnt+160)|0);
      var $arrayidx=(($CurrentStep1+($0<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      $CurrentStep=$2;
      $flag_GoneOver=0;
      var $3=$ch_addr;
      var $4=$gfc_addr;
      var $sv_qnt2=(($4+84764)|0);
      var $OldValue=(($sv_qnt2+152)|0);
      var $arrayidx3=(($OldValue+($3<<2))|0);
      var $5=HEAP32[(($arrayidx3)>>2)];
      $start=$5;
      $Direction=0;
      var $6=$start;
      var $7=$cod_info_addr;
      var $global_gain=(($7+4780)|0);
      HEAP32[(($global_gain)>>2)]=$6;
      var $8=$cod_info_addr;
      var $part2_length=(($8+4844)|0);
      var $9=HEAP32[(($part2_length)>>2)];
      var $10=$desired_rate_addr;
      var $sub=((($10)-($9))|0);
      $desired_rate_addr=$sub;
      label = 3; break;
    case 3: 
      var $11=$gfc_addr;
      var $12=$xrpow_addr;
      var $13=$cod_info_addr;
      var $call=_count_bits($11, $12, $13, 0);
      $nBits=$call;
      var $14=$CurrentStep;
      var $cmp=(($14)|0)==1;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$nBits;
      var $16=$desired_rate_addr;
      var $cmp4=(($15)|0)==(($16)|0);
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 22; break;
    case 6: 
      var $17=$nBits;
      var $18=$desired_rate_addr;
      var $cmp5=(($17)|0) > (($18)|0);
      if ($cmp5) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $19=$Direction;
      var $cmp7=(($19)|0)==2;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $flag_GoneOver=1;
      label = 9; break;
    case 9: 
      var $20=$flag_GoneOver;
      var $tobool=(($20)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $21=$CurrentStep;
      var $div=((((($21)|0))/(2))&-1);
      $CurrentStep=$div;
      label = 11; break;
    case 11: 
      $Direction=1;
      var $22=$CurrentStep;
      $step=$22;
      label = 17; break;
    case 12: 
      var $23=$Direction;
      var $cmp12=(($23)|0)==1;
      if ($cmp12) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $flag_GoneOver=1;
      label = 14; break;
    case 14: 
      var $24=$flag_GoneOver;
      var $tobool15=(($24)|0)!=0;
      if ($tobool15) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $25=$CurrentStep;
      var $div17=((((($25)|0))/(2))&-1);
      $CurrentStep=$div17;
      label = 16; break;
    case 16: 
      $Direction=2;
      var $26=$CurrentStep;
      var $sub19=(((-$26))|0);
      $step=$sub19;
      label = 17; break;
    case 17: 
      var $27=$step;
      var $28=$cod_info_addr;
      var $global_gain21=(($28+4780)|0);
      var $29=HEAP32[(($global_gain21)>>2)];
      var $add=((($29)+($27))|0);
      HEAP32[(($global_gain21)>>2)]=$add;
      var $30=$cod_info_addr;
      var $global_gain22=(($30+4780)|0);
      var $31=HEAP32[(($global_gain22)>>2)];
      var $cmp23=(($31)|0) < 0;
      if ($cmp23) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $32=$cod_info_addr;
      var $global_gain25=(($32+4780)|0);
      HEAP32[(($global_gain25)>>2)]=0;
      $flag_GoneOver=1;
      label = 19; break;
    case 19: 
      var $33=$cod_info_addr;
      var $global_gain27=(($33+4780)|0);
      var $34=HEAP32[(($global_gain27)>>2)];
      var $cmp28=(($34)|0) > 255;
      if ($cmp28) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $35=$cod_info_addr;
      var $global_gain30=(($35+4780)|0);
      HEAP32[(($global_gain30)>>2)]=255;
      $flag_GoneOver=1;
      label = 21; break;
    case 21: 
      label = 3; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $36=$nBits;
      var $37=$desired_rate_addr;
      var $cmp32=(($36)|0) > (($37)|0);
      if ($cmp32) { label = 24; break; } else { var $40 = 0;label = 25; break; }
    case 24: 
      var $38=$cod_info_addr;
      var $global_gain33=(($38+4780)|0);
      var $39=HEAP32[(($global_gain33)>>2)];
      var $cmp34=(($39)|0) < 255;
      var $40 = $cmp34;label = 25; break;
    case 25: 
      var $40;
      if ($40) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $41=$cod_info_addr;
      var $global_gain35=(($41+4780)|0);
      var $42=HEAP32[(($global_gain35)>>2)];
      var $inc=((($42)+(1))|0);
      HEAP32[(($global_gain35)>>2)]=$inc;
      var $43=$gfc_addr;
      var $44=$xrpow_addr;
      var $45=$cod_info_addr;
      var $call36=_count_bits($43, $44, $45, 0);
      $nBits=$call36;
      label = 23; break;
    case 27: 
      var $46=$start;
      var $47=$cod_info_addr;
      var $global_gain37=(($47+4780)|0);
      var $48=HEAP32[(($global_gain37)>>2)];
      var $sub38=((($46)-($48))|0);
      var $cmp39=(($sub38)|0) >= 4;
      var $cond=$cmp39 ? 4 : 2;
      var $49=$ch_addr;
      var $50=$gfc_addr;
      var $sv_qnt40=(($50+84764)|0);
      var $CurrentStep41=(($sv_qnt40+160)|0);
      var $arrayidx42=(($CurrentStep41+($49<<2))|0);
      HEAP32[(($arrayidx42)>>2)]=$cond;
      var $51=$cod_info_addr;
      var $global_gain43=(($51+4780)|0);
      var $52=HEAP32[(($global_gain43)>>2)];
      var $53=$ch_addr;
      var $54=$gfc_addr;
      var $sv_qnt44=(($54+84764)|0);
      var $OldValue45=(($sv_qnt44+152)|0);
      var $arrayidx46=(($OldValue45+($53<<2))|0);
      HEAP32[(($arrayidx46)>>2)]=$52;
      var $55=$nBits;
      var $56=$cod_info_addr;
      var $part2_3_length=(($56+4768)|0);
      HEAP32[(($part2_3_length)>>2)]=$55;
      var $57=$nBits;

      return $57;
    default: assert(0, "bad label: " + label);
  }

}
_bin_search_StepSize["X"]=1;

function _balance_noise($gfc, $cod_info, $distort, $xrpow, $bRefine) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $cod_info_addr;
      var $distort_addr;
      var $xrpow_addr;
      var $bRefine_addr;
      var $cfg;
      var $status;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $distort_addr=$distort;
      $xrpow_addr=$xrpow;
      $bRefine_addr=$bRefine;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $2=$cod_info_addr;
      var $3=$distort_addr;
      var $4=$xrpow_addr;
      var $5=$bRefine_addr;
      _amp_scalefac_bands($1, $2, $3, $4, $5);
      var $6=$cod_info_addr;
      var $call=_loop_break($6);
      $status=$call;
      var $7=$status;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 19; break;
    case 4: 
      var $8=$gfc_addr;
      var $9=$cod_info_addr;
      var $call2=_scale_bitcount($8, $9);
      $status=$call2;
      var $10=$status;
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=1;
      label = 19; break;
    case 6: 
      var $11=$cfg;
      var $noise_shaping=(($11+12)|0);
      var $12=HEAP32[(($noise_shaping)>>2)];
      var $cmp=(($12)|0) > 1;
      if ($cmp) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $13=$gfc_addr;
      var $sv_qnt=(($13+84764)|0);
      var $pseudohalf=(($sv_qnt+168)|0);
      var $arrayidx=(($pseudohalf)|0);
      var $14=$arrayidx;
      for (var $$dest = $14>>2, $$stop = $$dest + 39; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $15=$cod_info_addr;
      var $scalefac_scale=(($15+4836)|0);
      var $16=HEAP32[(($scalefac_scale)>>2)];
      var $tobool7=(($16)|0)!=0;
      if ($tobool7) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $17=$cod_info_addr;
      var $18=$xrpow_addr;
      _inc_scalefac_scale($17, $18);
      $status=0;
      label = 15; break;
    case 9: 
      var $19=$cod_info_addr;
      var $block_type=(($19+4788)|0);
      var $20=HEAP32[(($block_type)>>2)];
      var $cmp9=(($20)|0)==2;
      if ($cmp9) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $21=$cfg;
      var $subblock_gain=(($21+16)|0);
      var $22=HEAP32[(($subblock_gain)>>2)];
      var $cmp10=(($22)|0) > 0;
      if ($cmp10) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $23=$gfc_addr;
      var $24=$cod_info_addr;
      var $25=$xrpow_addr;
      var $call12=_inc_subblock_gain($23, $24, $25);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { var $27 = 1;label = 13; break; } else { label = 12; break; }
    case 12: 
      var $26=$cod_info_addr;
      var $call14=_loop_break($26);
      var $tobool15=(($call14)|0)!=0;
      var $27 = $tobool15;label = 13; break;
    case 13: 
      var $27;
      var $lor_ext=(($27)&1);
      $status=$lor_ext;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $28=$status;
      var $tobool19=(($28)|0)!=0;
      if ($tobool19) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $29=$gfc_addr;
      var $30=$cod_info_addr;
      var $call21=_scale_bitcount($29, $30);
      $status=$call21;
      label = 18; break;
    case 18: 
      var $31=$status;
      var $tobool23=(($31)|0)!=0;
      var $lnot=$tobool23 ^ 1;
      var $lnot_ext=(($lnot)&1);
      $retval=$lnot_ext;
      label = 19; break;
    case 19: 
      var $32=$retval;

      return $32;
    default: assert(0, "bad label: " + label);
  }

}
_balance_noise["X"]=1;

function _quant_compare($quant_comp, $best, $calc, $gi, $distort) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $quant_comp_addr;
      var $best_addr;
      var $calc_addr;
      var $gi_addr;
      var $distort_addr;
      var $better;
      $quant_comp_addr=$quant_comp;
      $best_addr=$best;
      $calc_addr=$calc;
      $gi_addr=$gi;
      $distort_addr=$distort;
      var $0=$quant_comp_addr;
      if ((($0)|0)==9) {
        label = 4; break;
      }
      else if ((($0)|0)==0) {
        label = 12; break;
      }
      else if ((($0)|0)==8) {
        label = 22; break;
      }
      else if ((($0)|0)==1) {
        label = 23; break;
      }
      else if ((($0)|0)==2) {
        label = 24; break;
      }
      else if ((($0)|0)==3) {
        label = 25; break;
      }
      else if ((($0)|0)==4) {
        label = 28; break;
      }
      else if ((($0)|0)==5) {
        label = 48; break;
      }
      else if ((($0)|0)==6) {
        label = 55; break;
      }
      else if ((($0)|0)==7) {
        label = 68; break;
      }
      else {
      label = 3; break;
      }
      
    case 3: 
      label = 4; break;
    case 4: 
      var $1=$best_addr;
      var $over_count=(($1+12)|0);
      var $2=HEAP32[(($over_count)>>2)];
      var $cmp=(($2)|0) > 0;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $3=$calc_addr;
      var $over_SSD=(($3+16)|0);
      var $4=HEAP32[(($over_SSD)>>2)];
      var $5=$best_addr;
      var $over_SSD1=(($5+16)|0);
      var $6=HEAP32[(($over_SSD1)>>2)];
      var $cmp2=(($4)|0) <= (($6)|0);
      var $conv=(($cmp2)&1);
      $better=$conv;
      var $7=$calc_addr;
      var $over_SSD3=(($7+16)|0);
      var $8=HEAP32[(($over_SSD3)>>2)];
      var $9=$best_addr;
      var $over_SSD4=(($9+16)|0);
      var $10=HEAP32[(($over_SSD4)>>2)];
      var $cmp5=(($8)|0)==(($10)|0);
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$calc_addr;
      var $bits=(($11+20)|0);
      var $12=HEAP32[(($bits)>>2)];
      var $13=$best_addr;
      var $bits8=(($13+20)|0);
      var $14=HEAP32[(($bits8)>>2)];
      var $cmp9=(($12)|0) < (($14)|0);
      var $conv10=(($cmp9)&1);
      $better=$conv10;
      label = 7; break;
    case 7: 
      label = 11; break;
    case 8: 
      var $15=$calc_addr;
      var $max_noise=(($15+8)|0);
      var $16=HEAPF32[(($max_noise)>>2)];
      var $cmp11=$16 < 0;
      if ($cmp11) { label = 9; break; } else { var $25 = 0;label = 10; break; }
    case 9: 
      var $17=$calc_addr;
      var $max_noise13=(($17+8)|0);
      var $18=HEAPF32[(($max_noise13)>>2)];
      var $mul=($18)*(10);
      var $19=$calc_addr;
      var $bits14=(($19+20)|0);
      var $20=HEAP32[(($bits14)>>2)];
      var $conv15=(($20)|0);
      var $add=($mul)+($conv15);
      var $21=$best_addr;
      var $max_noise16=(($21+8)|0);
      var $22=HEAPF32[(($max_noise16)>>2)];
      var $mul17=($22)*(10);
      var $23=$best_addr;
      var $bits18=(($23+20)|0);
      var $24=HEAP32[(($bits18)>>2)];
      var $conv19=(($24)|0);
      var $add20=($mul17)+($conv19);
      var $cmp21=$add <= $add20;
      var $25 = $cmp21;label = 10; break;
    case 10: 
      var $25;
      var $land_ext=(($25)&1);
      $better=$land_ext;
      label = 11; break;
    case 11: 
      label = 71; break;
    case 12: 
      var $26=$calc_addr;
      var $over_count25=(($26+12)|0);
      var $27=HEAP32[(($over_count25)>>2)];
      var $28=$best_addr;
      var $over_count26=(($28+12)|0);
      var $29=HEAP32[(($over_count26)>>2)];
      var $cmp27=(($27)|0) < (($29)|0);
      if ($cmp27) { var $63 = 1;label = 21; break; } else { label = 13; break; }
    case 13: 
      var $30=$calc_addr;
      var $over_count29=(($30+12)|0);
      var $31=HEAP32[(($over_count29)>>2)];
      var $32=$best_addr;
      var $over_count30=(($32+12)|0);
      var $33=HEAP32[(($over_count30)>>2)];
      var $cmp31=(($31)|0)==(($33)|0);
      if ($cmp31) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $34=$calc_addr;
      var $over_noise=(($34)|0);
      var $35=HEAPF32[(($over_noise)>>2)];
      var $36=$best_addr;
      var $over_noise33=(($36)|0);
      var $37=HEAPF32[(($over_noise33)>>2)];
      var $cmp34=$35 < $37;
      if ($cmp34) { var $63 = 1;label = 21; break; } else { label = 15; break; }
    case 15: 
      var $38=$calc_addr;
      var $over_count36=(($38+12)|0);
      var $39=HEAP32[(($over_count36)>>2)];
      var $40=$best_addr;
      var $over_count37=(($40+12)|0);
      var $41=HEAP32[(($over_count37)>>2)];
      var $cmp38=(($39)|0)==(($41)|0);
      if ($cmp38) { label = 16; break; } else { var $62 = 0;label = 20; break; }
    case 16: 
      var $42=$calc_addr;
      var $over_noise41=(($42)|0);
      var $43=HEAPF32[(($over_noise41)>>2)];
      var $conv42=$43;
      var $call=Math.abs($conv42);
      var $44=$best_addr;
      var $over_noise43=(($44)|0);
      var $45=HEAPF32[(($over_noise43)>>2)];
      var $conv44=$45;
      var $call45=Math.abs($conv44);
      var $cmp46=$call > $call45;
      if ($cmp46) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $46=$calc_addr;
      var $over_noise48=(($46)|0);
      var $47=HEAPF32[(($over_noise48)>>2)];
      var $48=$best_addr;
      var $over_noise49=(($48)|0);
      var $49=HEAPF32[(($over_noise49)>>2)];
      var $sub=($47)-($49);
      var $conv50=$sub;
      var $call51=Math.abs($conv50);
      var $50=$calc_addr;
      var $over_noise52=(($50)|0);
      var $51=HEAPF32[(($over_noise52)>>2)];
      var $conv53=$51;
      var $call54=Math.abs($conv53);
      var $mul55=($call54)*(9.999999974752427e-7);
      var $cmp56=$call51 <= $mul55;
      if ($cmp56) { label = 19; break; } else { var $62 = 0;label = 20; break; }
    case 18: 
      var $52=$calc_addr;
      var $over_noise58=(($52)|0);
      var $53=HEAPF32[(($over_noise58)>>2)];
      var $54=$best_addr;
      var $over_noise59=(($54)|0);
      var $55=HEAPF32[(($over_noise59)>>2)];
      var $sub60=($53)-($55);
      var $conv61=$sub60;
      var $call62=Math.abs($conv61);
      var $56=$best_addr;
      var $over_noise63=(($56)|0);
      var $57=HEAPF32[(($over_noise63)>>2)];
      var $conv64=$57;
      var $call65=Math.abs($conv64);
      var $mul66=($call65)*(9.999999974752427e-7);
      var $cmp67=$call62 <= $mul66;
      if ($cmp67) { label = 19; break; } else { var $62 = 0;label = 20; break; }
    case 19: 
      var $58=$calc_addr;
      var $tot_noise=(($58+4)|0);
      var $59=HEAPF32[(($tot_noise)>>2)];
      var $60=$best_addr;
      var $tot_noise70=(($60+4)|0);
      var $61=HEAPF32[(($tot_noise70)>>2)];
      var $cmp71=$59 < $61;
      var $62 = $cmp71;label = 20; break;
    case 20: 
      var $62;
      var $63 = $62;label = 21; break;
    case 21: 
      var $63;
      var $lor_ext=(($63)&1);
      $better=$lor_ext;
      label = 71; break;
    case 22: 
      var $64=$distort_addr;
      var $65=$gi_addr;
      var $call76=_get_klemm_noise($64, $65);
      var $conv77=$call76;
      var $66=$calc_addr;
      var $max_noise78=(($66+8)|0);
      HEAPF32[(($max_noise78)>>2)]=$conv77;
      label = 23; break;
    case 23: 
      var $67=$calc_addr;
      var $max_noise80=(($67+8)|0);
      var $68=HEAPF32[(($max_noise80)>>2)];
      var $69=$best_addr;
      var $max_noise81=(($69+8)|0);
      var $70=HEAPF32[(($max_noise81)>>2)];
      var $cmp82=$68 < $70;
      var $conv83=(($cmp82)&1);
      $better=$conv83;
      label = 71; break;
    case 24: 
      var $71=$calc_addr;
      var $tot_noise85=(($71+4)|0);
      var $72=HEAPF32[(($tot_noise85)>>2)];
      var $73=$best_addr;
      var $tot_noise86=(($73+4)|0);
      var $74=HEAPF32[(($tot_noise86)>>2)];
      var $cmp87=$72 < $74;
      var $conv88=(($cmp87)&1);
      $better=$conv88;
      label = 71; break;
    case 25: 
      var $75=$calc_addr;
      var $tot_noise90=(($75+4)|0);
      var $76=HEAPF32[(($tot_noise90)>>2)];
      var $77=$best_addr;
      var $tot_noise91=(($77+4)|0);
      var $78=HEAPF32[(($tot_noise91)>>2)];
      var $cmp92=$76 < $78;
      if ($cmp92) { label = 26; break; } else { var $83 = 0;label = 27; break; }
    case 26: 
      var $79=$calc_addr;
      var $max_noise95=(($79+8)|0);
      var $80=HEAPF32[(($max_noise95)>>2)];
      var $81=$best_addr;
      var $max_noise96=(($81+8)|0);
      var $82=HEAPF32[(($max_noise96)>>2)];
      var $cmp97=$80 < $82;
      var $83 = $cmp97;label = 27; break;
    case 27: 
      var $83;
      var $land_ext100=(($83)&1);
      $better=$land_ext100;
      label = 71; break;
    case 28: 
      var $84=$calc_addr;
      var $max_noise102=(($84+8)|0);
      var $85=HEAPF32[(($max_noise102)>>2)];
      var $conv103=$85;
      var $cmp104=$conv103 <= 0;
      if ($cmp104) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $86=$best_addr;
      var $max_noise107=(($86+8)|0);
      var $87=HEAPF32[(($max_noise107)>>2)];
      var $conv108=$87;
      var $cmp109=$conv108 > 0.2;
      if ($cmp109) { var $151 = 1;label = 47; break; } else { label = 30; break; }
    case 30: 
      var $88=$calc_addr;
      var $max_noise112=(($88+8)|0);
      var $89=HEAPF32[(($max_noise112)>>2)];
      var $conv113=$89;
      var $cmp114=$conv113 <= 0;
      if ($cmp114) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $90=$best_addr;
      var $max_noise117=(($90+8)|0);
      var $91=HEAPF32[(($max_noise117)>>2)];
      var $conv118=$91;
      var $cmp119=$conv118 < 0;
      if ($cmp119) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $92=$best_addr;
      var $max_noise122=(($92+8)|0);
      var $93=HEAPF32[(($max_noise122)>>2)];
      var $conv123=$93;
      var $94=$calc_addr;
      var $max_noise124=(($94+8)|0);
      var $95=HEAPF32[(($max_noise124)>>2)];
      var $conv125=$95;
      var $sub126=($conv125)-(0.2);
      var $cmp127=$conv123 > $sub126;
      if ($cmp127) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $96=$calc_addr;
      var $tot_noise130=(($96+4)|0);
      var $97=HEAPF32[(($tot_noise130)>>2)];
      var $98=$best_addr;
      var $tot_noise131=(($98+4)|0);
      var $99=HEAPF32[(($tot_noise131)>>2)];
      var $cmp132=$97 < $99;
      if ($cmp132) { var $151 = 1;label = 47; break; } else { label = 34; break; }
    case 34: 
      var $100=$calc_addr;
      var $max_noise135=(($100+8)|0);
      var $101=HEAPF32[(($max_noise135)>>2)];
      var $conv136=$101;
      var $cmp137=$conv136 <= 0;
      if ($cmp137) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $102=$best_addr;
      var $max_noise140=(($102+8)|0);
      var $103=HEAPF32[(($max_noise140)>>2)];
      var $conv141=$103;
      var $cmp142=$conv141 > 0;
      if ($cmp142) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $104=$best_addr;
      var $max_noise145=(($104+8)|0);
      var $105=HEAPF32[(($max_noise145)>>2)];
      var $conv146=$105;
      var $106=$calc_addr;
      var $max_noise147=(($106+8)|0);
      var $107=HEAPF32[(($max_noise147)>>2)];
      var $conv148=$107;
      var $sub149=($conv148)-(0.2);
      var $cmp150=$conv146 > $sub149;
      if ($cmp150) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $108=$calc_addr;
      var $tot_noise153=(($108+4)|0);
      var $109=HEAPF32[(($tot_noise153)>>2)];
      var $110=$best_addr;
      var $tot_noise154=(($110+4)|0);
      var $111=HEAPF32[(($tot_noise154)>>2)];
      var $112=$best_addr;
      var $over_noise155=(($112)|0);
      var $113=HEAPF32[(($over_noise155)>>2)];
      var $add156=($111)+($113);
      var $cmp157=$109 < $add156;
      if ($cmp157) { var $151 = 1;label = 47; break; } else { label = 38; break; }
    case 38: 
      var $114=$calc_addr;
      var $max_noise160=(($114+8)|0);
      var $115=HEAPF32[(($max_noise160)>>2)];
      var $conv161=$115;
      var $cmp162=$conv161 > 0;
      if ($cmp162) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $116=$best_addr;
      var $max_noise165=(($116+8)|0);
      var $117=HEAPF32[(($max_noise165)>>2)];
      var $conv166=$117;
      var $cmp167=$conv166 > -0.05;
      if ($cmp167) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $118=$best_addr;
      var $max_noise170=(($118+8)|0);
      var $119=HEAPF32[(($max_noise170)>>2)];
      var $conv171=$119;
      var $120=$calc_addr;
      var $max_noise172=(($120+8)|0);
      var $121=HEAPF32[(($max_noise172)>>2)];
      var $conv173=$121;
      var $sub174=($conv173)-(0.1);
      var $cmp175=$conv171 > $sub174;
      if ($cmp175) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $122=$calc_addr;
      var $tot_noise178=(($122+4)|0);
      var $123=HEAPF32[(($tot_noise178)>>2)];
      var $124=$calc_addr;
      var $over_noise179=(($124)|0);
      var $125=HEAPF32[(($over_noise179)>>2)];
      var $add180=($123)+($125);
      var $126=$best_addr;
      var $tot_noise181=(($126+4)|0);
      var $127=HEAPF32[(($tot_noise181)>>2)];
      var $128=$best_addr;
      var $over_noise182=(($128)|0);
      var $129=HEAPF32[(($over_noise182)>>2)];
      var $add183=($127)+($129);
      var $cmp184=$add180 < $add183;
      if ($cmp184) { var $151 = 1;label = 47; break; } else { label = 42; break; }
    case 42: 
      var $130=$calc_addr;
      var $max_noise187=(($130+8)|0);
      var $131=HEAPF32[(($max_noise187)>>2)];
      var $conv188=$131;
      var $cmp189=$conv188 > 0;
      if ($cmp189) { label = 43; break; } else { var $150 = 0;label = 46; break; }
    case 43: 
      var $132=$best_addr;
      var $max_noise192=(($132+8)|0);
      var $133=HEAPF32[(($max_noise192)>>2)];
      var $conv193=$133;
      var $cmp194=$conv193 > -0.1;
      if ($cmp194) { label = 44; break; } else { var $150 = 0;label = 46; break; }
    case 44: 
      var $134=$best_addr;
      var $max_noise197=(($134+8)|0);
      var $135=HEAPF32[(($max_noise197)>>2)];
      var $conv198=$135;
      var $136=$calc_addr;
      var $max_noise199=(($136+8)|0);
      var $137=HEAPF32[(($max_noise199)>>2)];
      var $conv200=$137;
      var $sub201=($conv200)-(0.15);
      var $cmp202=$conv198 > $sub201;
      if ($cmp202) { label = 45; break; } else { var $150 = 0;label = 46; break; }
    case 45: 
      var $138=$calc_addr;
      var $tot_noise205=(($138+4)|0);
      var $139=HEAPF32[(($tot_noise205)>>2)];
      var $140=$calc_addr;
      var $over_noise206=(($140)|0);
      var $141=HEAPF32[(($over_noise206)>>2)];
      var $add207=($139)+($141);
      var $142=$calc_addr;
      var $over_noise208=(($142)|0);
      var $143=HEAPF32[(($over_noise208)>>2)];
      var $add209=($add207)+($143);
      var $144=$best_addr;
      var $tot_noise210=(($144+4)|0);
      var $145=HEAPF32[(($tot_noise210)>>2)];
      var $146=$best_addr;
      var $over_noise211=(($146)|0);
      var $147=HEAPF32[(($over_noise211)>>2)];
      var $add212=($145)+($147);
      var $148=$best_addr;
      var $over_noise213=(($148)|0);
      var $149=HEAPF32[(($over_noise213)>>2)];
      var $add214=($add212)+($149);
      var $cmp215=$add209 < $add214;
      var $150 = $cmp215;label = 46; break;
    case 46: 
      var $150;
      var $151 = $150;label = 47; break;
    case 47: 
      var $151;
      var $lor_ext220=(($151)&1);
      $better=$lor_ext220;
      label = 71; break;
    case 48: 
      var $152=$calc_addr;
      var $over_noise222=(($152)|0);
      var $153=HEAPF32[(($over_noise222)>>2)];
      var $154=$best_addr;
      var $over_noise223=(($154)|0);
      var $155=HEAPF32[(($over_noise223)>>2)];
      var $cmp224=$153 < $155;
      if ($cmp224) { var $177 = 1;label = 54; break; } else { label = 49; break; }
    case 49: 
      var $156=$calc_addr;
      var $over_noise227=(($156)|0);
      var $157=HEAPF32[(($over_noise227)>>2)];
      var $conv228=$157;
      var $call229=Math.abs($conv228);
      var $158=$best_addr;
      var $over_noise230=(($158)|0);
      var $159=HEAPF32[(($over_noise230)>>2)];
      var $conv231=$159;
      var $call232=Math.abs($conv231);
      var $cmp233=$call229 > $call232;
      if ($cmp233) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $160=$calc_addr;
      var $over_noise236=(($160)|0);
      var $161=HEAPF32[(($over_noise236)>>2)];
      var $162=$best_addr;
      var $over_noise237=(($162)|0);
      var $163=HEAPF32[(($over_noise237)>>2)];
      var $sub238=($161)-($163);
      var $conv239=$sub238;
      var $call240=Math.abs($conv239);
      var $164=$calc_addr;
      var $over_noise241=(($164)|0);
      var $165=HEAPF32[(($over_noise241)>>2)];
      var $conv242=$165;
      var $call243=Math.abs($conv242);
      var $mul244=($call243)*(9.999999974752427e-7);
      var $cmp245=$call240 <= $mul244;
      if ($cmp245) { label = 52; break; } else { var $176 = 0;label = 53; break; }
    case 51: 
      var $166=$calc_addr;
      var $over_noise248=(($166)|0);
      var $167=HEAPF32[(($over_noise248)>>2)];
      var $168=$best_addr;
      var $over_noise249=(($168)|0);
      var $169=HEAPF32[(($over_noise249)>>2)];
      var $sub250=($167)-($169);
      var $conv251=$sub250;
      var $call252=Math.abs($conv251);
      var $170=$best_addr;
      var $over_noise253=(($170)|0);
      var $171=HEAPF32[(($over_noise253)>>2)];
      var $conv254=$171;
      var $call255=Math.abs($conv254);
      var $mul256=($call255)*(9.999999974752427e-7);
      var $cmp257=$call252 <= $mul256;
      if ($cmp257) { label = 52; break; } else { var $176 = 0;label = 53; break; }
    case 52: 
      var $172=$calc_addr;
      var $tot_noise260=(($172+4)|0);
      var $173=HEAPF32[(($tot_noise260)>>2)];
      var $174=$best_addr;
      var $tot_noise261=(($174+4)|0);
      var $175=HEAPF32[(($tot_noise261)>>2)];
      var $cmp262=$173 < $175;
      var $176 = $cmp262;label = 53; break;
    case 53: 
      var $176;
      var $177 = $176;label = 54; break;
    case 54: 
      var $177;
      var $lor_ext267=(($177)&1);
      $better=$lor_ext267;
      label = 71; break;
    case 55: 
      var $178=$calc_addr;
      var $over_noise269=(($178)|0);
      var $179=HEAPF32[(($over_noise269)>>2)];
      var $180=$best_addr;
      var $over_noise270=(($180)|0);
      var $181=HEAPF32[(($over_noise270)>>2)];
      var $cmp271=$179 < $181;
      if ($cmp271) { var $225 = 1;label = 67; break; } else { label = 56; break; }
    case 56: 
      var $182=$calc_addr;
      var $over_noise274=(($182)|0);
      var $183=HEAPF32[(($over_noise274)>>2)];
      var $conv275=$183;
      var $call276=Math.abs($conv275);
      var $184=$best_addr;
      var $over_noise277=(($184)|0);
      var $185=HEAPF32[(($over_noise277)>>2)];
      var $conv278=$185;
      var $call279=Math.abs($conv278);
      var $cmp280=$call276 > $call279;
      if ($cmp280) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $186=$calc_addr;
      var $over_noise283=(($186)|0);
      var $187=HEAPF32[(($over_noise283)>>2)];
      var $188=$best_addr;
      var $over_noise284=(($188)|0);
      var $189=HEAPF32[(($over_noise284)>>2)];
      var $sub285=($187)-($189);
      var $conv286=$sub285;
      var $call287=Math.abs($conv286);
      var $190=$calc_addr;
      var $over_noise288=(($190)|0);
      var $191=HEAPF32[(($over_noise288)>>2)];
      var $conv289=$191;
      var $call290=Math.abs($conv289);
      var $mul291=($call290)*(9.999999974752427e-7);
      var $cmp292=$call287 <= $mul291;
      if ($cmp292) { label = 59; break; } else { var $224 = 0;label = 66; break; }
    case 58: 
      var $192=$calc_addr;
      var $over_noise295=(($192)|0);
      var $193=HEAPF32[(($over_noise295)>>2)];
      var $194=$best_addr;
      var $over_noise296=(($194)|0);
      var $195=HEAPF32[(($over_noise296)>>2)];
      var $sub297=($193)-($195);
      var $conv298=$sub297;
      var $call299=Math.abs($conv298);
      var $196=$best_addr;
      var $over_noise300=(($196)|0);
      var $197=HEAPF32[(($over_noise300)>>2)];
      var $conv301=$197;
      var $call302=Math.abs($conv301);
      var $mul303=($call302)*(9.999999974752427e-7);
      var $cmp304=$call299 <= $mul303;
      if ($cmp304) { label = 59; break; } else { var $224 = 0;label = 66; break; }
    case 59: 
      var $198=$calc_addr;
      var $max_noise307=(($198+8)|0);
      var $199=HEAPF32[(($max_noise307)>>2)];
      var $200=$best_addr;
      var $max_noise308=(($200+8)|0);
      var $201=HEAPF32[(($max_noise308)>>2)];
      var $cmp309=$199 < $201;
      if ($cmp309) { var $223 = 1;label = 65; break; } else { label = 60; break; }
    case 60: 
      var $202=$calc_addr;
      var $max_noise312=(($202+8)|0);
      var $203=HEAPF32[(($max_noise312)>>2)];
      var $conv313=$203;
      var $call314=Math.abs($conv313);
      var $204=$best_addr;
      var $max_noise315=(($204+8)|0);
      var $205=HEAPF32[(($max_noise315)>>2)];
      var $conv316=$205;
      var $call317=Math.abs($conv316);
      var $cmp318=$call314 > $call317;
      if ($cmp318) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $206=$calc_addr;
      var $max_noise321=(($206+8)|0);
      var $207=HEAPF32[(($max_noise321)>>2)];
      var $208=$best_addr;
      var $max_noise322=(($208+8)|0);
      var $209=HEAPF32[(($max_noise322)>>2)];
      var $sub323=($207)-($209);
      var $conv324=$sub323;
      var $call325=Math.abs($conv324);
      var $210=$calc_addr;
      var $max_noise326=(($210+8)|0);
      var $211=HEAPF32[(($max_noise326)>>2)];
      var $conv327=$211;
      var $call328=Math.abs($conv327);
      var $mul329=($call328)*(9.999999974752427e-7);
      var $cmp330=$call325 <= $mul329;
      if ($cmp330) { label = 63; break; } else { var $222 = 0;label = 64; break; }
    case 62: 
      var $212=$calc_addr;
      var $max_noise333=(($212+8)|0);
      var $213=HEAPF32[(($max_noise333)>>2)];
      var $214=$best_addr;
      var $max_noise334=(($214+8)|0);
      var $215=HEAPF32[(($max_noise334)>>2)];
      var $sub335=($213)-($215);
      var $conv336=$sub335;
      var $call337=Math.abs($conv336);
      var $216=$best_addr;
      var $max_noise338=(($216+8)|0);
      var $217=HEAPF32[(($max_noise338)>>2)];
      var $conv339=$217;
      var $call340=Math.abs($conv339);
      var $mul341=($call340)*(9.999999974752427e-7);
      var $cmp342=$call337 <= $mul341;
      if ($cmp342) { label = 63; break; } else { var $222 = 0;label = 64; break; }
    case 63: 
      var $218=$calc_addr;
      var $tot_noise345=(($218+4)|0);
      var $219=HEAPF32[(($tot_noise345)>>2)];
      var $220=$best_addr;
      var $tot_noise346=(($220+4)|0);
      var $221=HEAPF32[(($tot_noise346)>>2)];
      var $cmp347=$219 <= $221;
      var $222 = $cmp347;label = 64; break;
    case 64: 
      var $222;
      var $223 = $222;label = 65; break;
    case 65: 
      var $223;
      var $224 = $223;label = 66; break;
    case 66: 
      var $224;
      var $225 = $224;label = 67; break;
    case 67: 
      var $225;
      var $lor_ext356=(($225)&1);
      $better=$lor_ext356;
      label = 71; break;
    case 68: 
      var $226=$calc_addr;
      var $over_count358=(($226+12)|0);
      var $227=HEAP32[(($over_count358)>>2)];
      var $228=$best_addr;
      var $over_count359=(($228+12)|0);
      var $229=HEAP32[(($over_count359)>>2)];
      var $cmp360=(($227)|0) < (($229)|0);
      if ($cmp360) { var $234 = 1;label = 70; break; } else { label = 69; break; }
    case 69: 
      var $230=$calc_addr;
      var $over_noise363=(($230)|0);
      var $231=HEAPF32[(($over_noise363)>>2)];
      var $232=$best_addr;
      var $over_noise364=(($232)|0);
      var $233=HEAPF32[(($over_noise364)>>2)];
      var $cmp365=$231 < $233;
      var $234 = $cmp365;label = 70; break;
    case 70: 
      var $234;
      var $lor_ext368=(($234)&1);
      $better=$lor_ext368;
      label = 71; break;
    case 71: 
      var $235=$best_addr;
      var $over_count369=(($235+12)|0);
      var $236=HEAP32[(($over_count369)>>2)];
      var $cmp370=(($236)|0)==0;
      if ($cmp370) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $237=$better;
      var $tobool=(($237)|0)!=0;
      if ($tobool) { label = 73; break; } else { var $242 = 0;label = 74; break; }
    case 73: 
      var $238=$calc_addr;
      var $bits374=(($238+20)|0);
      var $239=HEAP32[(($bits374)>>2)];
      var $240=$best_addr;
      var $bits375=(($240+20)|0);
      var $241=HEAP32[(($bits375)>>2)];
      var $cmp376=(($239)|0) < (($241)|0);
      var $242 = $cmp376;label = 74; break;
    case 74: 
      var $242;
      var $land_ext379=(($242)&1);
      $better=$land_ext379;
      label = 75; break;
    case 75: 
      var $243=$better;

      return $243;
    default: assert(0, "bad label: " + label);
  }

}
_quant_compare["X"]=1;

function _get_klemm_noise($distort, $gi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $distort_addr;
      var $gi_addr;
      var $sfb;
      var $klemm_noise;
      $distort_addr=$distort;
      $gi_addr=$gi;
      $klemm_noise=1e-37;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $0=$sfb;
      var $1=$gi_addr;
      var $psymax=(($1+4864)|0);
      var $2=HEAP32[(($psymax)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$sfb;
      var $4=$distort_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAPF32[(($arrayidx)>>2)];
      var $conv=$5;
      var $call=_penalties($conv);
      var $6=$klemm_noise;
      var $add=($6)+($call);
      $klemm_noise=$add;
      label = 5; break;
    case 5: 
      var $7=$sfb;
      var $inc=((($7)+(1))|0);
      $sfb=$inc;
      label = 3; break;
    case 6: 
      var $8=$klemm_noise;
      var $cmp1=1e-20 > $8;
      if ($cmp1) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 1e-20;label = 9; break;
    case 8: 
      var $9=$klemm_noise;
      var $cond = $9;label = 9; break;
    case 9: 
      var $cond;

      return $cond;
    default: assert(0, "bad label: " + label);
  }

}


function _penalties($noise) {
  var label = 0;


  var $noise_addr;
  $noise_addr=$noise;
  var $0=$noise_addr;
  var $mul=($0)*(0.632);
  var $1=$noise_addr;
  var $mul1=($mul)*($1);
  var $2=$noise_addr;
  var $mul2=($mul1)*($2);
  var $add=($mul2)+(0.368);
  var $conv=$add;
  var $call=_fast_log2($conv);
  var $conv3=$call;
  var $mul4=($conv3)*(0.30102999566398114);

  return $mul4;
}



function _loop_break($cod_info) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $cod_info_addr;
      var $sfb;
      $cod_info_addr=$cod_info;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $0=$sfb;
      var $1=$cod_info_addr;
      var $sfbmax=(($1+4860)|0);
      var $2=HEAP32[(($sfbmax)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$sfb;
      var $4=$cod_info_addr;
      var $scalefac=(($4+4608)|0);
      var $arrayidx=(($scalefac+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $6=$sfb;
      var $7=$cod_info_addr;
      var $window=(($7+5028)|0);
      var $arrayidx1=(($window+($6<<2))|0);
      var $8=HEAP32[(($arrayidx1)>>2)];
      var $9=$cod_info_addr;
      var $subblock_gain=(($9+4808)|0);
      var $arrayidx2=(($subblock_gain+($8<<2))|0);
      var $10=HEAP32[(($arrayidx2)>>2)];
      var $add=((($5)+($10))|0);
      var $cmp3=(($add)|0)==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$sfb;
      var $inc=((($11)+(1))|0);
      $sfb=$inc;
      label = 3; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _inc_scalefac_scale($cod_info, $xrpow) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cod_info_addr;
      var $xrpow_addr;
      var $l;
      var $j;
      var $sfb;
      var $ifqstep34;
      var $width;
      var $s;
      $cod_info_addr=$cod_info;
      $xrpow_addr=$xrpow;
      $ifqstep34=1.2968395948410034;
      $j=0;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $0=$sfb;
      var $1=$cod_info_addr;
      var $sfbmax=(($1+4860)|0);
      var $2=HEAP32[(($sfbmax)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $3=$sfb;
      var $4=$cod_info_addr;
      var $width1=(($4+4872)|0);
      var $arrayidx=(($width1+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $width=$5;
      var $6=$sfb;
      var $7=$cod_info_addr;
      var $scalefac=(($7+4608)|0);
      var $arrayidx2=(($scalefac+($6<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      $s=$8;
      var $9=$cod_info_addr;
      var $preflag=(($9+4832)|0);
      var $10=HEAP32[(($preflag)>>2)];
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$sfb;
      var $arrayidx3=((5257016+($11<<2))|0);
      var $12=HEAP32[(($arrayidx3)>>2)];
      var $13=$s;
      var $add=((($13)+($12))|0);
      $s=$add;
      label = 6; break;
    case 6: 
      var $14=$width;
      var $15=$j;
      var $add4=((($15)+($14))|0);
      $j=$add4;
      var $16=$s;
      var $and=$16 & 1;
      var $tobool5=(($and)|0)!=0;
      if ($tobool5) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $17=$s;
      var $inc=((($17)+(1))|0);
      $s=$inc;
      var $18=$width;
      var $sub=(((-$18))|0);
      $l=$sub;
      label = 8; break;
    case 8: 
      var $19=$l;
      var $cmp8=(($19)|0) < 0;
      if ($cmp8) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $20=$j;
      var $21=$l;
      var $add10=((($20)+($21))|0);
      var $22=$xrpow_addr;
      var $arrayidx11=(($22+($add10<<2))|0);
      var $23=HEAPF32[(($arrayidx11)>>2)];
      var $mul=($23)*(1.2968395948410034);
      HEAPF32[(($arrayidx11)>>2)]=$mul;
      var $24=$j;
      var $25=$l;
      var $add12=((($24)+($25))|0);
      var $26=$xrpow_addr;
      var $arrayidx13=(($26+($add12<<2))|0);
      var $27=HEAPF32[(($arrayidx13)>>2)];
      var $28=$cod_info_addr;
      var $xrpow_max=(($28+4764)|0);
      var $29=HEAPF32[(($xrpow_max)>>2)];
      var $cmp14=$27 > $29;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $30=$j;
      var $31=$l;
      var $add16=((($30)+($31))|0);
      var $32=$xrpow_addr;
      var $arrayidx17=(($32+($add16<<2))|0);
      var $33=HEAPF32[(($arrayidx17)>>2)];
      var $34=$cod_info_addr;
      var $xrpow_max18=(($34+4764)|0);
      HEAPF32[(($xrpow_max18)>>2)]=$33;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $35=$l;
      var $inc20=((($35)+(1))|0);
      $l=$inc20;
      label = 8; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $36=$s;
      var $shr=$36 >> 1;
      var $37=$sfb;
      var $38=$cod_info_addr;
      var $scalefac22=(($38+4608)|0);
      var $arrayidx23=(($scalefac22+($37<<2))|0);
      HEAP32[(($arrayidx23)>>2)]=$shr;
      label = 15; break;
    case 15: 
      var $39=$sfb;
      var $inc25=((($39)+(1))|0);
      $sfb=$inc25;
      label = 3; break;
    case 16: 
      var $40=$cod_info_addr;
      var $preflag27=(($40+4832)|0);
      HEAP32[(($preflag27)>>2)]=0;
      var $41=$cod_info_addr;
      var $scalefac_scale=(($41+4836)|0);
      HEAP32[(($scalefac_scale)>>2)]=1;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_inc_scalefac_scale["X"]=1;

function _inc_subblock_gain($gfc, $cod_info, $xrpow) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $cod_info_addr;
      var $xrpow_addr;
      var $sfb;
      var $window;
      var $scalefac;
      var $s1;
      var $s2;
      var $l;
      var $j;
      var $amp;
      var $width;
      var $s;
      var $gain;
      var $amp90;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $xrpow_addr=$xrpow;
      var $0=$cod_info_addr;
      var $scalefac1=(($0+4608)|0);
      var $arraydecay=(($scalefac1)|0);
      $scalefac=$arraydecay;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $1=$sfb;
      var $2=$cod_info_addr;
      var $sfb_lmax=(($2+4848)|0);
      var $3=HEAP32[(($sfb_lmax)>>2)];
      var $cmp=(($1)|0) < (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$sfb;
      var $5=$scalefac;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $cmp2=(($6)|0) >= 16;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 48; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $7=$sfb;
      var $inc=((($7)+(1))|0);
      $sfb=$inc;
      label = 3; break;
    case 8: 
      $window=0;
      label = 9; break;
    case 9: 
      var $8=$window;
      var $cmp4=(($8)|0) < 3;
      if ($cmp4) { label = 10; break; } else { label = 47; break; }
    case 10: 
      $s2=0;
      $s1=0;
      var $9=$cod_info_addr;
      var $sfb_lmax6=(($9+4848)|0);
      var $10=HEAP32[(($sfb_lmax6)>>2)];
      var $11=$window;
      var $add=((($10)+($11))|0);
      $sfb=$add;
      label = 11; break;
    case 11: 
      var $12=$sfb;
      var $13=$cod_info_addr;
      var $sfbdivide=(($13+4868)|0);
      var $14=HEAP32[(($sfbdivide)>>2)];
      var $cmp8=(($12)|0) < (($14)|0);
      if ($cmp8) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $15=$s1;
      var $16=$sfb;
      var $17=$scalefac;
      var $arrayidx10=(($17+($16<<2))|0);
      var $18=HEAP32[(($arrayidx10)>>2)];
      var $cmp11=(($15)|0) < (($18)|0);
      if ($cmp11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $19=$sfb;
      var $20=$scalefac;
      var $arrayidx13=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx13)>>2)];
      $s1=$21;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $22=$sfb;
      var $add16=((($22)+(3))|0);
      $sfb=$add16;
      label = 11; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $23=$sfb;
      var $24=$cod_info_addr;
      var $sfbmax=(($24+4860)|0);
      var $25=HEAP32[(($sfbmax)>>2)];
      var $cmp19=(($23)|0) < (($25)|0);
      if ($cmp19) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $26=$s2;
      var $27=$sfb;
      var $28=$scalefac;
      var $arrayidx21=(($28+($27<<2))|0);
      var $29=HEAP32[(($arrayidx21)>>2)];
      var $cmp22=(($26)|0) < (($29)|0);
      if ($cmp22) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $30=$sfb;
      var $31=$scalefac;
      var $arrayidx24=(($31+($30<<2))|0);
      var $32=HEAP32[(($arrayidx24)>>2)];
      $s2=$32;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $33=$sfb;
      var $add27=((($33)+(3))|0);
      $sfb=$add27;
      label = 17; break;
    case 22: 
      var $34=$s1;
      var $cmp29=(($34)|0) < 16;
      if ($cmp29) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $35=$s2;
      var $cmp30=(($35)|0) < 8;
      if ($cmp30) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 46; break;
    case 25: 
      var $36=$window;
      var $37=$cod_info_addr;
      var $subblock_gain=(($37+4808)|0);
      var $arrayidx33=(($subblock_gain+($36<<2))|0);
      var $38=HEAP32[(($arrayidx33)>>2)];
      var $cmp34=(($38)|0) >= 7;
      if ($cmp34) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $retval=1;
      label = 48; break;
    case 27: 
      var $39=$window;
      var $40=$cod_info_addr;
      var $subblock_gain37=(($40+4808)|0);
      var $arrayidx38=(($subblock_gain37+($39<<2))|0);
      var $41=HEAP32[(($arrayidx38)>>2)];
      var $inc39=((($41)+(1))|0);
      HEAP32[(($arrayidx38)>>2)]=$inc39;
      var $42=$cod_info_addr;
      var $sfb_lmax40=(($42+4848)|0);
      var $43=HEAP32[(($sfb_lmax40)>>2)];
      var $44=$gfc_addr;
      var $scalefac_band=(($44+21360)|0);
      var $l41=(($scalefac_band)|0);
      var $arrayidx42=(($l41+($43<<2))|0);
      var $45=HEAP32[(($arrayidx42)>>2)];
      $j=$45;
      var $46=$cod_info_addr;
      var $sfb_lmax43=(($46+4848)|0);
      var $47=HEAP32[(($sfb_lmax43)>>2)];
      var $48=$window;
      var $add44=((($47)+($48))|0);
      $sfb=$add44;
      label = 28; break;
    case 28: 
      var $49=$sfb;
      var $50=$cod_info_addr;
      var $sfbmax46=(($50+4860)|0);
      var $51=HEAP32[(($sfbmax46)>>2)];
      var $cmp47=(($49)|0) < (($51)|0);
      if ($cmp47) { label = 29; break; } else { label = 39; break; }
    case 29: 
      var $52=$sfb;
      var $53=$cod_info_addr;
      var $width49=(($53+4872)|0);
      var $arrayidx50=(($width49+($52<<2))|0);
      var $54=HEAP32[(($arrayidx50)>>2)];
      $width=$54;
      var $55=$sfb;
      var $56=$scalefac;
      var $arrayidx51=(($56+($55<<2))|0);
      var $57=HEAP32[(($arrayidx51)>>2)];
      $s=$57;
      var $58=$s;
      var $59=$cod_info_addr;
      var $scalefac_scale=(($59+4836)|0);
      var $60=HEAP32[(($scalefac_scale)>>2)];
      var $shr=4 >> (($60)|0);
      var $sub=((($58)-($shr))|0);
      $s=$sub;
      var $61=$s;
      var $cmp52=(($61)|0) >= 0;
      if ($cmp52) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $62=$s;
      var $63=$sfb;
      var $64=$scalefac;
      var $arrayidx54=(($64+($63<<2))|0);
      HEAP32[(($arrayidx54)>>2)]=$62;
      var $65=$width;
      var $mul=((($65)*(3))&-1);
      var $66=$j;
      var $add55=((($66)+($mul))|0);
      $j=$add55;
      label = 38; break;
    case 31: 
      var $67=$sfb;
      var $68=$scalefac;
      var $arrayidx57=(($68+($67<<2))|0);
      HEAP32[(($arrayidx57)>>2)]=0;
      var $69=$s;
      var $70=$cod_info_addr;
      var $scalefac_scale58=(($70+4836)|0);
      var $71=HEAP32[(($scalefac_scale58)>>2)];
      var $add59=((($71)+(1))|0);
      var $shl=$69 << $add59;
      var $add60=((($shl)+(210))|0);
      $gain=$add60;
      var $72=$gain;
      var $arrayidx61=((5326260+($72<<2))|0);
      var $73=HEAPF32[(($arrayidx61)>>2)];
      $amp=$73;
      var $74=$width;
      var $75=$window;
      var $add62=((($75)+(1))|0);
      var $mul63=((($74)*($add62))&-1);
      var $76=$j;
      var $add64=((($76)+($mul63))|0);
      $j=$add64;
      var $77=$width;
      var $sub65=(((-$77))|0);
      $l=$sub65;
      label = 32; break;
    case 32: 
      var $78=$l;
      var $cmp67=(($78)|0) < 0;
      if ($cmp67) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $79=$amp;
      var $80=$j;
      var $81=$l;
      var $add69=((($80)+($81))|0);
      var $82=$xrpow_addr;
      var $arrayidx70=(($82+($add69<<2))|0);
      var $83=HEAPF32[(($arrayidx70)>>2)];
      var $mul71=($83)*($79);
      HEAPF32[(($arrayidx70)>>2)]=$mul71;
      var $84=$j;
      var $85=$l;
      var $add72=((($84)+($85))|0);
      var $86=$xrpow_addr;
      var $arrayidx73=(($86+($add72<<2))|0);
      var $87=HEAPF32[(($arrayidx73)>>2)];
      var $88=$cod_info_addr;
      var $xrpow_max=(($88+4764)|0);
      var $89=HEAPF32[(($xrpow_max)>>2)];
      var $cmp74=$87 > $89;
      if ($cmp74) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $90=$j;
      var $91=$l;
      var $add76=((($90)+($91))|0);
      var $92=$xrpow_addr;
      var $arrayidx77=(($92+($add76<<2))|0);
      var $93=HEAPF32[(($arrayidx77)>>2)];
      var $94=$cod_info_addr;
      var $xrpow_max78=(($94+4764)|0);
      HEAPF32[(($xrpow_max78)>>2)]=$93;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $95=$l;
      var $inc81=((($95)+(1))|0);
      $l=$inc81;
      label = 32; break;
    case 37: 
      var $96=$width;
      var $97=$window;
      var $sub83=(((3)-($97))|0);
      var $sub84=((($sub83)-(1))|0);
      var $mul85=((($96)*($sub84))&-1);
      var $98=$j;
      var $add86=((($98)+($mul85))|0);
      $j=$add86;
      label = 38; break;
    case 38: 
      var $99=$sfb;
      var $add88=((($99)+(3))|0);
      $sfb=$add88;
      label = 28; break;
    case 39: 
      var $100=HEAPF32[((((5327068)|0))>>2)];
      $amp90=$100;
      var $101=$sfb;
      var $102=$cod_info_addr;
      var $width91=(($102+4872)|0);
      var $arrayidx92=(($width91+($101<<2))|0);
      var $103=HEAP32[(($arrayidx92)>>2)];
      var $104=$window;
      var $add93=((($104)+(1))|0);
      var $mul94=((($103)*($add93))&-1);
      var $105=$j;
      var $add95=((($105)+($mul94))|0);
      $j=$add95;
      var $106=$sfb;
      var $107=$cod_info_addr;
      var $width96=(($107+4872)|0);
      var $arrayidx97=(($width96+($106<<2))|0);
      var $108=HEAP32[(($arrayidx97)>>2)];
      var $sub98=(((-$108))|0);
      $l=$sub98;
      label = 40; break;
    case 40: 
      var $109=$l;
      var $cmp100=(($109)|0) < 0;
      if ($cmp100) { label = 41; break; } else { label = 45; break; }
    case 41: 
      var $110=$amp90;
      var $111=$j;
      var $112=$l;
      var $add102=((($111)+($112))|0);
      var $113=$xrpow_addr;
      var $arrayidx103=(($113+($add102<<2))|0);
      var $114=HEAPF32[(($arrayidx103)>>2)];
      var $mul104=($114)*($110);
      HEAPF32[(($arrayidx103)>>2)]=$mul104;
      var $115=$j;
      var $116=$l;
      var $add105=((($115)+($116))|0);
      var $117=$xrpow_addr;
      var $arrayidx106=(($117+($add105<<2))|0);
      var $118=HEAPF32[(($arrayidx106)>>2)];
      var $119=$cod_info_addr;
      var $xrpow_max107=(($119+4764)|0);
      var $120=HEAPF32[(($xrpow_max107)>>2)];
      var $cmp108=$118 > $120;
      if ($cmp108) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $121=$j;
      var $122=$l;
      var $add110=((($121)+($122))|0);
      var $123=$xrpow_addr;
      var $arrayidx111=(($123+($add110<<2))|0);
      var $124=HEAPF32[(($arrayidx111)>>2)];
      var $125=$cod_info_addr;
      var $xrpow_max112=(($125+4764)|0);
      HEAPF32[(($xrpow_max112)>>2)]=$124;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $126=$l;
      var $inc115=((($126)+(1))|0);
      $l=$inc115;
      label = 40; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $127=$window;
      var $inc118=((($127)+(1))|0);
      $window=$inc118;
      label = 9; break;
    case 47: 
      $retval=0;
      label = 48; break;
    case 48: 
      var $128=$retval;

      return $128;
    default: assert(0, "bad label: " + label);
  }

}
_inc_subblock_gain["X"]=1;

function _amp_scalefac_bands($gfc, $cod_info, $distort, $xrpow, $bRefine) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $distort_addr;
      var $xrpow_addr;
      var $bRefine_addr;
      var $cfg;
      var $j;
      var $sfb;
      var $ifqstep34;
      var $trigger;
      var $noise_shaping_amp;
      var $width;
      var $l;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $distort_addr=$distort;
      $xrpow_addr=$xrpow;
      $bRefine_addr=$bRefine;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$cod_info_addr;
      var $scalefac_scale=(($1+4836)|0);
      var $2=HEAP32[(($scalefac_scale)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ifqstep34=1.2968395948410034;
      label = 5; break;
    case 4: 
      $ifqstep34=1.6817928552627563;
      label = 5; break;
    case 5: 
      $trigger=0;
      $sfb=0;
      label = 6; break;
    case 6: 
      var $3=$sfb;
      var $4=$cod_info_addr;
      var $sfbmax=(($4+4860)|0);
      var $5=HEAP32[(($sfbmax)>>2)];
      var $cmp2=(($3)|0) < (($5)|0);
      if ($cmp2) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $6=$trigger;
      var $7=$sfb;
      var $8=$distort_addr;
      var $arrayidx=(($8+($7<<2))|0);
      var $9=HEAPF32[(($arrayidx)>>2)];
      var $cmp3=$6 < $9;
      if ($cmp3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$sfb;
      var $11=$distort_addr;
      var $arrayidx5=(($11+($10<<2))|0);
      var $12=HEAPF32[(($arrayidx5)>>2)];
      $trigger=$12;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$sfb;
      var $inc=((($13)+(1))|0);
      $sfb=$inc;
      label = 6; break;
    case 11: 
      var $14=$cfg;
      var $noise_shaping_amp7=(($14+24)|0);
      var $15=HEAP32[(($noise_shaping_amp7)>>2)];
      $noise_shaping_amp=$15;
      var $16=$noise_shaping_amp;
      var $cmp8=(($16)|0)==3;
      if ($cmp8) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $17=$bRefine_addr;
      var $cmp10=(($17)|0)==1;
      if ($cmp10) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $noise_shaping_amp=2;
      label = 15; break;
    case 14: 
      $noise_shaping_amp=1;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $18=$noise_shaping_amp;
      if ((($18)|0)==2) {
        label = 17; break;
      }
      else if ((($18)|0)==1) {
        label = 18; break;
      }
      else if ((($18)|0)==0) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
      
    case 17: 
      label = 27; break;
    case 18: 
      var $19=$trigger;
      var $conv=$19;
      var $cmp16=$conv > 1;
      if ($cmp16) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $20=$trigger;
      var $conv19=$20;
      var $21=Math.pow($conv19, 0.5);
      var $conv20=$21;
      $trigger=$conv20;
      label = 21; break;
    case 20: 
      var $22=$trigger;
      var $conv22=$22;
      var $mul=($conv22)*(0.95);
      var $conv23=$mul;
      $trigger=$conv23;
      label = 21; break;
    case 21: 
      label = 27; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $23=$trigger;
      var $conv26=$23;
      var $cmp27=$conv26 > 1;
      if ($cmp27) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $trigger=1;
      label = 26; break;
    case 25: 
      var $24=$trigger;
      var $conv31=$24;
      var $mul32=($conv31)*(0.95);
      var $conv33=$mul32;
      $trigger=$conv33;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      $j=0;
      $sfb=0;
      label = 28; break;
    case 28: 
      var $25=$sfb;
      var $26=$cod_info_addr;
      var $sfbmax36=(($26+4860)|0);
      var $27=HEAP32[(($sfbmax36)>>2)];
      var $cmp37=(($25)|0) < (($27)|0);
      if ($cmp37) { label = 29; break; } else { label = 46; break; }
    case 29: 
      var $28=$sfb;
      var $29=$cod_info_addr;
      var $width40=(($29+4872)|0);
      var $arrayidx41=(($width40+($28<<2))|0);
      var $30=HEAP32[(($arrayidx41)>>2)];
      $width=$30;
      var $31=$width;
      var $32=$j;
      var $add=((($32)+($31))|0);
      $j=$add;
      var $33=$sfb;
      var $34=$distort_addr;
      var $arrayidx42=(($34+($33<<2))|0);
      var $35=HEAPF32[(($arrayidx42)>>2)];
      var $36=$trigger;
      var $cmp43=$35 < $36;
      if ($cmp43) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 45; break;
    case 31: 
      var $37=$gfc_addr;
      var $sv_qnt=(($37+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $38=HEAP32[(($substep_shaping)>>2)];
      var $and=$38 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $39=$sfb;
      var $40=$gfc_addr;
      var $sv_qnt48=(($40+84764)|0);
      var $pseudohalf=(($sv_qnt48+168)|0);
      var $arrayidx49=(($pseudohalf+($39<<2))|0);
      var $41=HEAP32[(($arrayidx49)>>2)];
      var $tobool50=(($41)|0)!=0;
      var $lnot=$tobool50 ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $42=$sfb;
      var $43=$gfc_addr;
      var $sv_qnt51=(($43+84764)|0);
      var $pseudohalf52=(($sv_qnt51+168)|0);
      var $arrayidx53=(($pseudohalf52+($42<<2))|0);
      HEAP32[(($arrayidx53)>>2)]=$lnot_ext;
      var $44=$sfb;
      var $45=$gfc_addr;
      var $sv_qnt54=(($45+84764)|0);
      var $pseudohalf55=(($sv_qnt54+168)|0);
      var $arrayidx56=(($pseudohalf55+($44<<2))|0);
      var $46=HEAP32[(($arrayidx56)>>2)];
      var $tobool57=(($46)|0)!=0;
      if ($tobool57) { label = 35; break; } else { label = 33; break; }
    case 33: 
      var $47=$cfg;
      var $noise_shaping_amp58=(($47+24)|0);
      var $48=HEAP32[(($noise_shaping_amp58)>>2)];
      var $cmp59=(($48)|0)==2;
      if ($cmp59) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 46; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $49=$sfb;
      var $50=$cod_info_addr;
      var $scalefac=(($50+4608)|0);
      var $arrayidx64=(($scalefac+($49<<2))|0);
      var $51=HEAP32[(($arrayidx64)>>2)];
      var $inc65=((($51)+(1))|0);
      HEAP32[(($arrayidx64)>>2)]=$inc65;
      var $52=$width;
      var $sub=(((-$52))|0);
      $l=$sub;
      label = 37; break;
    case 37: 
      var $53=$l;
      var $cmp67=(($53)|0) < 0;
      if ($cmp67) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $54=$ifqstep34;
      var $55=$j;
      var $56=$l;
      var $add70=((($55)+($56))|0);
      var $57=$xrpow_addr;
      var $arrayidx71=(($57+($add70<<2))|0);
      var $58=HEAPF32[(($arrayidx71)>>2)];
      var $mul72=($58)*($54);
      HEAPF32[(($arrayidx71)>>2)]=$mul72;
      var $59=$j;
      var $60=$l;
      var $add73=((($59)+($60))|0);
      var $61=$xrpow_addr;
      var $arrayidx74=(($61+($add73<<2))|0);
      var $62=HEAPF32[(($arrayidx74)>>2)];
      var $63=$cod_info_addr;
      var $xrpow_max=(($63+4764)|0);
      var $64=HEAPF32[(($xrpow_max)>>2)];
      var $cmp75=$62 > $64;
      if ($cmp75) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $65=$j;
      var $66=$l;
      var $add78=((($65)+($66))|0);
      var $67=$xrpow_addr;
      var $arrayidx79=(($67+($add78<<2))|0);
      var $68=HEAPF32[(($arrayidx79)>>2)];
      var $69=$cod_info_addr;
      var $xrpow_max80=(($69+4764)|0);
      HEAPF32[(($xrpow_max80)>>2)]=$68;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $70=$l;
      var $inc83=((($70)+(1))|0);
      $l=$inc83;
      label = 37; break;
    case 42: 
      var $71=$cfg;
      var $noise_shaping_amp85=(($71+24)|0);
      var $72=HEAP32[(($noise_shaping_amp85)>>2)];
      var $cmp86=(($72)|0)==2;
      if ($cmp86) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 46; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $73=$sfb;
      var $inc91=((($73)+(1))|0);
      $sfb=$inc91;
      label = 28; break;
    case 46: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_amp_scalefac_bands["X"]=1;

function _floatcompare($v1, $v2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $v1_addr;
      var $v2_addr;
      var $a;
      var $b;
      $v1_addr=$v1;
      $v2_addr=$v2;
      var $0=$v1_addr;
      var $1=$0;
      $a=$1;
      var $2=$v2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $5=HEAPF32[(($4)>>2)];
      var $6=$b;
      var $7=HEAPF32[(($6)>>2)];
      var $cmp=$5 > $7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 7; break;
    case 4: 
      var $8=$a;
      var $9=HEAPF32[(($8)>>2)];
      var $10=$b;
      var $11=HEAPF32[(($10)>>2)];
      var $cmp1=$9 < $11;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _psfb21_analogsilence($gfc, $cod_info) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $ATH;
      var $xr;
      var $gsfb;
      var $stop;
      var $start;
      var $end;
      var $j;
      var $ath21;
      var $block;
      var $gsfb34;
      var $stop35;
      var $start44;
      var $end64;
      var $j74;
      var $ath12;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      var $0=$gfc_addr;
      var $ATH1=(($0+85792)|0);
      var $1=HEAP32[(($ATH1)>>2)];
      $ATH=$1;
      var $2=$cod_info_addr;
      var $xr2=(($2)|0);
      var $arraydecay=(($xr2)|0);
      $xr=$arraydecay;
      var $3=$cod_info_addr;
      var $block_type=(($3+4788)|0);
      var $4=HEAP32[(($block_type)>>2)];
      var $cmp=(($4)|0)!=2;
      if ($cmp) { label = 3; break; } else { label = 19; break; }
    case 3: 
      $stop=0;
      $gsfb=5;
      label = 4; break;
    case 4: 
      var $5=$gsfb;
      var $cmp3=(($5)|0) >= 0;
      if ($cmp3) { label = 5; break; } else { var $7 = 0;label = 6; break; }
    case 5: 
      var $6=$stop;
      var $tobool=(($6)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $7 = $lnot;label = 6; break;
    case 6: 
      var $7;
      if ($7) { label = 7; break; } else { label = 18; break; }
    case 7: 
      var $8=$gsfb;
      var $9=$gfc_addr;
      var $scalefac_band=(($9+21360)|0);
      var $psfb21=(($scalefac_band+148)|0);
      var $arrayidx=(($psfb21+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $start=$10;
      var $11=$gsfb;
      var $add=((($11)+(1))|0);
      var $12=$gfc_addr;
      var $scalefac_band4=(($12+21360)|0);
      var $psfb215=(($scalefac_band4+148)|0);
      var $arrayidx6=(($psfb215+($add<<2))|0);
      var $13=HEAP32[(($arrayidx6)>>2)];
      $end=$13;
      var $14=$ATH;
      var $adjust_factor=(($14+8)|0);
      var $15=HEAPF32[(($adjust_factor)>>2)];
      var $16=$gsfb;
      var $17=$ATH;
      var $psfb217=(($17+164)|0);
      var $arrayidx8=(($psfb217+($16<<2))|0);
      var $18=HEAPF32[(($arrayidx8)>>2)];
      var $19=$ATH;
      var $floor=(($19+20)|0);
      var $20=HEAPF32[(($floor)>>2)];
      var $call=_athAdjust($15, $18, $20, 0);
      $ath21=$call;
      var $21=$gfc_addr;
      var $sv_qnt=(($21+84764)|0);
      var $longfact=(($sv_qnt)|0);
      var $arrayidx9=(($longfact+84)|0);
      var $22=HEAPF32[(($arrayidx9)>>2)];
      var $cmp10=$22 > 9.999999960041972e-13;
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $23=$gfc_addr;
      var $sv_qnt12=(($23+84764)|0);
      var $longfact13=(($sv_qnt12)|0);
      var $arrayidx14=(($longfact13+84)|0);
      var $24=HEAPF32[(($arrayidx14)>>2)];
      var $25=$ath21;
      var $mul=($25)*($24);
      $ath21=$mul;
      label = 9; break;
    case 9: 
      var $26=$end;
      var $sub=((($26)-(1))|0);
      $j=$sub;
      label = 10; break;
    case 10: 
      var $27=$j;
      var $28=$start;
      var $cmp16=(($27)|0) >= (($28)|0);
      if ($cmp16) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $29=$j;
      var $30=$xr;
      var $arrayidx18=(($30+($29<<2))|0);
      var $31=HEAPF32[(($arrayidx18)>>2)];
      var $conv=$31;
      var $call19=Math.abs($conv);
      var $32=$ath21;
      var $conv20=$32;
      var $cmp21=$call19 < $conv20;
      if ($cmp21) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $33=$j;
      var $34=$xr;
      var $arrayidx24=(($34+($33<<2))|0);
      HEAPF32[(($arrayidx24)>>2)]=0;
      label = 14; break;
    case 13: 
      $stop=1;
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $35=$j;
      var $dec=((($35)-(1))|0);
      $j=$dec;
      label = 10; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $36=$gsfb;
      var $dec27=((($36)-(1))|0);
      $gsfb=$dec27;
      label = 4; break;
    case 18: 
      label = 39; break;
    case 19: 
      $block=0;
      label = 20; break;
    case 20: 
      var $37=$block;
      var $cmp31=(($37)|0) < 3;
      if ($cmp31) { label = 21; break; } else { label = 38; break; }
    case 21: 
      $stop35=0;
      $gsfb34=5;
      label = 22; break;
    case 22: 
      var $38=$gsfb34;
      var $cmp37=(($38)|0) >= 0;
      if ($cmp37) { label = 23; break; } else { var $40 = 0;label = 24; break; }
    case 23: 
      var $39=$stop35;
      var $tobool40=(($39)|0)!=0;
      var $lnot41=$tobool40 ^ 1;
      var $40 = $lnot41;label = 24; break;
    case 24: 
      var $40;
      if ($40) { label = 25; break; } else { label = 36; break; }
    case 25: 
      var $41=$gfc_addr;
      var $scalefac_band45=(($41+21360)|0);
      var $s=(($scalefac_band45+92)|0);
      var $arrayidx46=(($s+48)|0);
      var $42=HEAP32[(($arrayidx46)>>2)];
      var $mul47=((($42)*(3))&-1);
      var $43=$gfc_addr;
      var $scalefac_band48=(($43+21360)|0);
      var $s49=(($scalefac_band48+92)|0);
      var $arrayidx50=(($s49+52)|0);
      var $44=HEAP32[(($arrayidx50)>>2)];
      var $45=$gfc_addr;
      var $scalefac_band51=(($45+21360)|0);
      var $s52=(($scalefac_band51+92)|0);
      var $arrayidx53=(($s52+48)|0);
      var $46=HEAP32[(($arrayidx53)>>2)];
      var $sub54=((($44)-($46))|0);
      var $47=$block;
      var $mul55=((($sub54)*($47))&-1);
      var $add56=((($mul47)+($mul55))|0);
      var $48=$gsfb34;
      var $49=$gfc_addr;
      var $scalefac_band57=(($49+21360)|0);
      var $psfb12=(($scalefac_band57+176)|0);
      var $arrayidx58=(($psfb12+($48<<2))|0);
      var $50=HEAP32[(($arrayidx58)>>2)];
      var $51=$gfc_addr;
      var $scalefac_band59=(($51+21360)|0);
      var $psfb1260=(($scalefac_band59+176)|0);
      var $arrayidx61=(($psfb1260)|0);
      var $52=HEAP32[(($arrayidx61)>>2)];
      var $sub62=((($50)-($52))|0);
      var $add63=((($add56)+($sub62))|0);
      $start44=$add63;
      var $53=$start44;
      var $54=$gsfb34;
      var $add65=((($54)+(1))|0);
      var $55=$gfc_addr;
      var $scalefac_band66=(($55+21360)|0);
      var $psfb1267=(($scalefac_band66+176)|0);
      var $arrayidx68=(($psfb1267+($add65<<2))|0);
      var $56=HEAP32[(($arrayidx68)>>2)];
      var $57=$gsfb34;
      var $58=$gfc_addr;
      var $scalefac_band69=(($58+21360)|0);
      var $psfb1270=(($scalefac_band69+176)|0);
      var $arrayidx71=(($psfb1270+($57<<2))|0);
      var $59=HEAP32[(($arrayidx71)>>2)];
      var $sub72=((($56)-($59))|0);
      var $add73=((($53)+($sub72))|0);
      $end64=$add73;
      var $60=$ATH;
      var $adjust_factor75=(($60+8)|0);
      var $61=HEAPF32[(($adjust_factor75)>>2)];
      var $62=$gsfb34;
      var $63=$ATH;
      var $psfb1276=(($63+188)|0);
      var $arrayidx77=(($psfb1276+($62<<2))|0);
      var $64=HEAPF32[(($arrayidx77)>>2)];
      var $65=$ATH;
      var $floor78=(($65+20)|0);
      var $66=HEAPF32[(($floor78)>>2)];
      var $call79=_athAdjust($61, $64, $66, 0);
      $ath12=$call79;
      var $67=$gfc_addr;
      var $sv_qnt80=(($67+84764)|0);
      var $shortfact=(($sv_qnt80+88)|0);
      var $arrayidx81=(($shortfact+48)|0);
      var $68=HEAPF32[(($arrayidx81)>>2)];
      var $cmp82=$68 > 9.999999960041972e-13;
      if ($cmp82) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $69=$gfc_addr;
      var $sv_qnt85=(($69+84764)|0);
      var $shortfact86=(($sv_qnt85+88)|0);
      var $arrayidx87=(($shortfact86+48)|0);
      var $70=HEAPF32[(($arrayidx87)>>2)];
      var $71=$ath12;
      var $mul88=($71)*($70);
      $ath12=$mul88;
      label = 27; break;
    case 27: 
      var $72=$end64;
      var $sub90=((($72)-(1))|0);
      $j74=$sub90;
      label = 28; break;
    case 28: 
      var $73=$j74;
      var $74=$start44;
      var $cmp92=(($73)|0) >= (($74)|0);
      if ($cmp92) { label = 29; break; } else { label = 34; break; }
    case 29: 
      var $75=$j74;
      var $76=$xr;
      var $arrayidx95=(($76+($75<<2))|0);
      var $77=HEAPF32[(($arrayidx95)>>2)];
      var $conv96=$77;
      var $call97=Math.abs($conv96);
      var $78=$ath12;
      var $conv98=$78;
      var $cmp99=$call97 < $conv98;
      if ($cmp99) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $79=$j74;
      var $80=$xr;
      var $arrayidx102=(($80+($79<<2))|0);
      HEAPF32[(($arrayidx102)>>2)]=0;
      label = 32; break;
    case 31: 
      $stop35=1;
      label = 34; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $81=$j74;
      var $dec106=((($81)-(1))|0);
      $j74=$dec106;
      label = 28; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $82=$gsfb34;
      var $dec109=((($82)-(1))|0);
      $gsfb34=$dec109;
      label = 22; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $83=$block;
      var $inc=((($83)+(1))|0);
      $block=$inc;
      label = 20; break;
    case 38: 
      label = 39; break;
    case 39: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_psfb21_analogsilence["X"]=1;

function _get_framebits($gfc, $frameBits) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $frameBits_addr;
      var $cfg;
      var $eov;
      var $bitsPerFrame=__stackBase__;
      var $i;
      $gfc_addr=$gfc;
      $frameBits_addr=$frameBits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ov_enc=(($1+84036)|0);
      $eov=$ov_enc;
      var $2=$cfg;
      var $vbr_min_bitrate_index=(($2+96)|0);
      var $3=HEAP32[(($vbr_min_bitrate_index)>>2)];
      var $4=$eov;
      var $bitrate_index=(($4+704)|0);
      HEAP32[(($bitrate_index)>>2)]=$3;
      var $5=$gfc_addr;
      var $call=_getframebits($5);
      HEAP32[(($bitsPerFrame)>>2)]=$call;
      var $6=$eov;
      var $bitrate_index2=(($6+704)|0);
      HEAP32[(($bitrate_index2)>>2)]=1;
      var $7=$gfc_addr;
      var $call3=_getframebits($7);
      HEAP32[(($bitsPerFrame)>>2)]=$call3;
      $i=1;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$cfg;
      var $vbr_max_bitrate_index=(($9+100)|0);
      var $10=HEAP32[(($vbr_max_bitrate_index)>>2)];
      var $cmp=(($8)|0) <= (($10)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $11=$i;
      var $12=$eov;
      var $bitrate_index4=(($12+704)|0);
      HEAP32[(($bitrate_index4)>>2)]=$11;
      var $13=$gfc_addr;
      var $call5=_ResvFrameBegin($13, $bitsPerFrame);
      var $14=$i;
      var $15=$frameBits_addr;
      var $arrayidx=(($15+($14<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$call5;
      label = 5; break;
    case 5: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_get_framebits["X"]=1;

function _iteration_init($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $l3_side;
      var $adjust;
      var $db;
      var $i;
      var $sel;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $l3_side2=(($1+304)|0);
      $l3_side=$l3_side2;
      var $2=$gfc_addr;
      var $iteration_init_init=(($2+8)|0);
      var $3=HEAP32[(($iteration_init_init)>>2)];
      var $cmp=(($3)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 52; break; }
    case 3: 
      var $4=$gfc_addr;
      var $iteration_init_init3=(($4+8)|0);
      HEAP32[(($iteration_init_init3)>>2)]=1;
      var $5=$l3_side;
      var $main_data_begin=(($5+21008)|0);
      HEAP32[(($main_data_begin)>>2)]=0;
      var $6=$gfc_addr;
      _compute_ath($6);
      HEAPF32[((((5257104)|0))>>2)]=0;
      $i=1;
      label = 4; break;
    case 4: 
      var $7=$i;
      var $cmp4=(($7)|0) < 8208;
      if ($cmp4) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $8=$i;
      var $conv=(($8)|0);
      var $conv5=$conv;
      var $9=Math.pow($conv5, 1.3333333333333333);
      var $conv6=$9;
      var $10=$i;
      var $arrayidx=((5257104+($10<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=$conv6;
      label = 6; break;
    case 6: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      HEAPF32[((((5349896)|0))>>2)]=0;
      $i=1;
      label = 8; break;
    case 8: 
      var $12=$i;
      var $cmp8=(($12)|0) < 8208;
      if ($cmp8) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $13=$i;
      var $conv11=(($13)|0);
      var $sub=($conv11)-(0.5);
      var $14=$i;
      var $sub12=((($14)-(1))|0);
      var $arrayidx13=((5257104+($sub12<<2))|0);
      var $15=HEAPF32[(($arrayidx13)>>2)];
      var $16=$i;
      var $arrayidx14=((5257104+($16<<2))|0);
      var $17=HEAPF32[(($arrayidx14)>>2)];
      var $add=($15)+($17);
      var $conv15=$add;
      var $mul=($conv15)*(0.5);
      var $18=Math.pow($mul, 0.75);
      var $sub16=($sub)-($18);
      var $conv17=$sub16;
      var $19=$i;
      var $arrayidx18=((5349896+($19<<2))|0);
      HEAPF32[(($arrayidx18)>>2)]=$conv17;
      label = 10; break;
    case 10: 
      var $20=$i;
      var $inc20=((($20)+(1))|0);
      $i=$inc20;
      label = 8; break;
    case 11: 
      $i=0;
      label = 12; break;
    case 12: 
      var $21=$i;
      var $cmp23=(($21)|0) < 257;
      if ($cmp23) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $22=$i;
      var $sub26=((($22)-(210))|0);
      var $conv27=(($sub26)|0);
      var $mul28=($conv27)*(-0.1875);
      var $23=Math.pow(2, $mul28);
      var $conv29=$23;
      var $24=$i;
      var $arrayidx30=((5326260+($24<<2))|0);
      HEAPF32[(($arrayidx30)>>2)]=$conv29;
      label = 14; break;
    case 14: 
      var $25=$i;
      var $inc32=((($25)+(1))|0);
      $i=$inc32;
      label = 12; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $26=$i;
      var $cmp35=(($26)|0) <= 373;
      if ($cmp35) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $27=$i;
      var $sub38=((($27)-(210))|0);
      var $sub39=((($sub38)-(116))|0);
      var $conv40=(($sub39)|0);
      var $mul41=($conv40)*(0.25);
      var $28=Math.pow(2, $mul41);
      var $conv42=$28;
      var $29=$i;
      var $arrayidx43=((5289936+($29<<2))|0);
      HEAPF32[(($arrayidx43)>>2)]=$conv42;
      label = 18; break;
    case 18: 
      var $30=$i;
      var $inc45=((($30)+(1))|0);
      $i=$inc45;
      label = 16; break;
    case 19: 
      var $31=$gfc_addr;
      _huffman_init($31);
      var $32=$gfc_addr;
      _init_xrpow_core_init($32);
      $sel=1;
      var $33=$cfg;
      var $adjust_bass_db=(($33+216)|0);
      var $34=HEAPF32[(($adjust_bass_db)>>2)];
      var $35=$sel;
      var $arrayidx47=((5291596+($35<<4))|0);
      var $arrayidx48=(($arrayidx47)|0);
      var $36=HEAPF32[(($arrayidx48)>>2)];
      var $add49=($34)+($36);
      $db=$add49;
      var $37=$db;
      var $mul50=($37)*(0.10000000149011612);
      var $38=Math.pow(10, $mul50);
      $adjust=$38;
      $i=0;
      label = 20; break;
    case 20: 
      var $39=$i;
      var $cmp52=(($39)|0) <= 6;
      if ($cmp52) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $40=$adjust;
      var $41=$i;
      var $42=$gfc_addr;
      var $sv_qnt=(($42+84764)|0);
      var $longfact=(($sv_qnt)|0);
      var $arrayidx55=(($longfact+($41<<2))|0);
      HEAPF32[(($arrayidx55)>>2)]=$40;
      label = 22; break;
    case 22: 
      var $43=$i;
      var $inc57=((($43)+(1))|0);
      $i=$inc57;
      label = 20; break;
    case 23: 
      var $44=$cfg;
      var $adjust_alto_db=(($44+212)|0);
      var $45=HEAPF32[(($adjust_alto_db)>>2)];
      var $46=$sel;
      var $arrayidx59=((5291596+($46<<4))|0);
      var $arrayidx60=(($arrayidx59+4)|0);
      var $47=HEAPF32[(($arrayidx60)>>2)];
      var $add61=($45)+($47);
      $db=$add61;
      var $48=$db;
      var $mul62=($48)*(0.10000000149011612);
      var $49=Math.pow(10, $mul62);
      $adjust=$49;
      label = 24; break;
    case 24: 
      var $50=$i;
      var $cmp64=(($50)|0) <= 13;
      if ($cmp64) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $51=$adjust;
      var $52=$i;
      var $53=$gfc_addr;
      var $sv_qnt67=(($53+84764)|0);
      var $longfact68=(($sv_qnt67)|0);
      var $arrayidx69=(($longfact68+($52<<2))|0);
      HEAPF32[(($arrayidx69)>>2)]=$51;
      label = 26; break;
    case 26: 
      var $54=$i;
      var $inc71=((($54)+(1))|0);
      $i=$inc71;
      label = 24; break;
    case 27: 
      var $55=$cfg;
      var $adjust_treble_db=(($55+220)|0);
      var $56=HEAPF32[(($adjust_treble_db)>>2)];
      var $57=$sel;
      var $arrayidx73=((5291596+($57<<4))|0);
      var $arrayidx74=(($arrayidx73+8)|0);
      var $58=HEAPF32[(($arrayidx74)>>2)];
      var $add75=($56)+($58);
      $db=$add75;
      var $59=$db;
      var $mul76=($59)*(0.10000000149011612);
      var $60=Math.pow(10, $mul76);
      $adjust=$60;
      label = 28; break;
    case 28: 
      var $61=$i;
      var $cmp78=(($61)|0) <= 20;
      if ($cmp78) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $62=$adjust;
      var $63=$i;
      var $64=$gfc_addr;
      var $sv_qnt81=(($64+84764)|0);
      var $longfact82=(($sv_qnt81)|0);
      var $arrayidx83=(($longfact82+($63<<2))|0);
      HEAPF32[(($arrayidx83)>>2)]=$62;
      label = 30; break;
    case 30: 
      var $65=$i;
      var $inc85=((($65)+(1))|0);
      $i=$inc85;
      label = 28; break;
    case 31: 
      var $66=$cfg;
      var $adjust_sfb21_db=(($66+224)|0);
      var $67=HEAPF32[(($adjust_sfb21_db)>>2)];
      var $68=$sel;
      var $arrayidx87=((5291596+($68<<4))|0);
      var $arrayidx88=(($arrayidx87+12)|0);
      var $69=HEAPF32[(($arrayidx88)>>2)];
      var $add89=($67)+($69);
      $db=$add89;
      var $70=$db;
      var $mul90=($70)*(0.10000000149011612);
      var $71=Math.pow(10, $mul90);
      $adjust=$71;
      label = 32; break;
    case 32: 
      var $72=$i;
      var $cmp92=(($72)|0) < 22;
      if ($cmp92) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $73=$adjust;
      var $74=$i;
      var $75=$gfc_addr;
      var $sv_qnt95=(($75+84764)|0);
      var $longfact96=(($sv_qnt95)|0);
      var $arrayidx97=(($longfact96+($74<<2))|0);
      HEAPF32[(($arrayidx97)>>2)]=$73;
      label = 34; break;
    case 34: 
      var $76=$i;
      var $inc99=((($76)+(1))|0);
      $i=$inc99;
      label = 32; break;
    case 35: 
      var $77=$cfg;
      var $adjust_bass_db101=(($77+216)|0);
      var $78=HEAPF32[(($adjust_bass_db101)>>2)];
      var $79=$sel;
      var $arrayidx102=((5291564+($79<<4))|0);
      var $arrayidx103=(($arrayidx102)|0);
      var $80=HEAPF32[(($arrayidx103)>>2)];
      var $add104=($78)+($80);
      $db=$add104;
      var $81=$db;
      var $mul105=($81)*(0.10000000149011612);
      var $82=Math.pow(10, $mul105);
      $adjust=$82;
      $i=0;
      label = 36; break;
    case 36: 
      var $83=$i;
      var $cmp107=(($83)|0) <= 2;
      if ($cmp107) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $84=$adjust;
      var $85=$i;
      var $86=$gfc_addr;
      var $sv_qnt110=(($86+84764)|0);
      var $shortfact=(($sv_qnt110+88)|0);
      var $arrayidx111=(($shortfact+($85<<2))|0);
      HEAPF32[(($arrayidx111)>>2)]=$84;
      label = 38; break;
    case 38: 
      var $87=$i;
      var $inc113=((($87)+(1))|0);
      $i=$inc113;
      label = 36; break;
    case 39: 
      var $88=$cfg;
      var $adjust_alto_db115=(($88+212)|0);
      var $89=HEAPF32[(($adjust_alto_db115)>>2)];
      var $90=$sel;
      var $arrayidx116=((5291564+($90<<4))|0);
      var $arrayidx117=(($arrayidx116+4)|0);
      var $91=HEAPF32[(($arrayidx117)>>2)];
      var $add118=($89)+($91);
      $db=$add118;
      var $92=$db;
      var $mul119=($92)*(0.10000000149011612);
      var $93=Math.pow(10, $mul119);
      $adjust=$93;
      label = 40; break;
    case 40: 
      var $94=$i;
      var $cmp121=(($94)|0) <= 6;
      if ($cmp121) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $95=$adjust;
      var $96=$i;
      var $97=$gfc_addr;
      var $sv_qnt124=(($97+84764)|0);
      var $shortfact125=(($sv_qnt124+88)|0);
      var $arrayidx126=(($shortfact125+($96<<2))|0);
      HEAPF32[(($arrayidx126)>>2)]=$95;
      label = 42; break;
    case 42: 
      var $98=$i;
      var $inc128=((($98)+(1))|0);
      $i=$inc128;
      label = 40; break;
    case 43: 
      var $99=$cfg;
      var $adjust_treble_db130=(($99+220)|0);
      var $100=HEAPF32[(($adjust_treble_db130)>>2)];
      var $101=$sel;
      var $arrayidx131=((5291564+($101<<4))|0);
      var $arrayidx132=(($arrayidx131+8)|0);
      var $102=HEAPF32[(($arrayidx132)>>2)];
      var $add133=($100)+($102);
      $db=$add133;
      var $103=$db;
      var $mul134=($103)*(0.10000000149011612);
      var $104=Math.pow(10, $mul134);
      $adjust=$104;
      label = 44; break;
    case 44: 
      var $105=$i;
      var $cmp136=(($105)|0) <= 11;
      if ($cmp136) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $106=$adjust;
      var $107=$i;
      var $108=$gfc_addr;
      var $sv_qnt139=(($108+84764)|0);
      var $shortfact140=(($sv_qnt139+88)|0);
      var $arrayidx141=(($shortfact140+($107<<2))|0);
      HEAPF32[(($arrayidx141)>>2)]=$106;
      label = 46; break;
    case 46: 
      var $109=$i;
      var $inc143=((($109)+(1))|0);
      $i=$inc143;
      label = 44; break;
    case 47: 
      var $110=$cfg;
      var $adjust_sfb21_db145=(($110+224)|0);
      var $111=HEAPF32[(($adjust_sfb21_db145)>>2)];
      var $112=$sel;
      var $arrayidx146=((5291564+($112<<4))|0);
      var $arrayidx147=(($arrayidx146+12)|0);
      var $113=HEAPF32[(($arrayidx147)>>2)];
      var $add148=($111)+($113);
      $db=$add148;
      var $114=$db;
      var $mul149=($114)*(0.10000000149011612);
      var $115=Math.pow(10, $mul149);
      $adjust=$115;
      label = 48; break;
    case 48: 
      var $116=$i;
      var $cmp151=(($116)|0) < 13;
      if ($cmp151) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $117=$adjust;
      var $118=$i;
      var $119=$gfc_addr;
      var $sv_qnt154=(($119+84764)|0);
      var $shortfact155=(($sv_qnt154+88)|0);
      var $arrayidx156=(($shortfact155+($118<<2))|0);
      HEAPF32[(($arrayidx156)>>2)]=$117;
      label = 50; break;
    case 50: 
      var $120=$i;
      var $inc158=((($120)+(1))|0);
      $i=$inc158;
      label = 48; break;
    case 51: 
      label = 52; break;
    case 52: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_iteration_init["X"]=1;

function _compute_ath($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cfg;
      var $ATH_l;
      var $ATH_psfb21;
      var $ATH_s;
      var $ATH_psfb12;
      var $sfb;
      var $i;
      var $start;
      var $end;
      var $ATH_f;
      var $samp_freq;
      var $freq;
      var $freq43;
      var $freq79;
      var $freq125;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $ATH=(($1+85792)|0);
      var $2=HEAP32[(($ATH)>>2)];
      var $l=(($2+24)|0);
      var $arraydecay=(($l)|0);
      $ATH_l=$arraydecay;
      var $3=$gfc_addr;
      var $ATH2=(($3+85792)|0);
      var $4=HEAP32[(($ATH2)>>2)];
      var $psfb21=(($4+164)|0);
      var $arraydecay3=(($psfb21)|0);
      $ATH_psfb21=$arraydecay3;
      var $5=$gfc_addr;
      var $ATH4=(($5+85792)|0);
      var $6=HEAP32[(($ATH4)>>2)];
      var $s=(($6+112)|0);
      var $arraydecay5=(($s)|0);
      $ATH_s=$arraydecay5;
      var $7=$gfc_addr;
      var $ATH6=(($7+85792)|0);
      var $8=HEAP32[(($ATH6)>>2)];
      var $psfb12=(($8+188)|0);
      var $arraydecay7=(($psfb12)|0);
      $ATH_psfb12=$arraydecay7;
      var $9=$cfg;
      var $samplerate_out=(($9+48)|0);
      var $10=HEAP32[(($samplerate_out)>>2)];
      var $conv=(($10)|0);
      $samp_freq=$conv;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $11=$sfb;
      var $cmp=(($11)|0) < 22;
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $12=$sfb;
      var $13=$gfc_addr;
      var $scalefac_band=(($13+21360)|0);
      var $l9=(($scalefac_band)|0);
      var $arrayidx=(($l9+($12<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      $start=$14;
      var $15=$sfb;
      var $add=((($15)+(1))|0);
      var $16=$gfc_addr;
      var $scalefac_band10=(($16+21360)|0);
      var $l11=(($scalefac_band10)|0);
      var $arrayidx12=(($l11+($add<<2))|0);
      var $17=HEAP32[(($arrayidx12)>>2)];
      $end=$17;
      var $18=$sfb;
      var $19=$ATH_l;
      var $arrayidx13=(($19+($18<<2))|0);
      HEAPF32[(($arrayidx13)>>2)]=9.999999933815813e+36;
      var $20=$start;
      $i=$20;
      label = 5; break;
    case 5: 
      var $21=$i;
      var $22=$end;
      var $cmp15=(($21)|0) < (($22)|0);
      if ($cmp15) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $23=$i;
      var $conv18=(($23)|0);
      var $24=$samp_freq;
      var $mul=($conv18)*($24);
      var $div=($mul)/(1152);
      $freq=$div;
      var $25=$cfg;
      var $26=$freq;
      var $call=_ATHmdct($25, $26);
      $ATH_f=$call;
      var $27=$sfb;
      var $28=$ATH_l;
      var $arrayidx19=(($28+($27<<2))|0);
      var $29=HEAPF32[(($arrayidx19)>>2)];
      var $30=$ATH_f;
      var $cmp20=$29 < $30;
      if ($cmp20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$sfb;
      var $32=$ATH_l;
      var $arrayidx22=(($32+($31<<2))|0);
      var $33=HEAPF32[(($arrayidx22)>>2)];
      var $cond = $33;label = 9; break;
    case 8: 
      var $34=$ATH_f;
      var $cond = $34;label = 9; break;
    case 9: 
      var $cond;
      var $35=$sfb;
      var $36=$ATH_l;
      var $arrayidx23=(($36+($35<<2))|0);
      HEAPF32[(($arrayidx23)>>2)]=$cond;
      label = 10; break;
    case 10: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $38=$sfb;
      var $inc25=((($38)+(1))|0);
      $sfb=$inc25;
      label = 3; break;
    case 13: 
      $sfb=0;
      label = 14; break;
    case 14: 
      var $39=$sfb;
      var $cmp28=(($39)|0) < 6;
      if ($cmp28) { label = 15; break; } else { label = 24; break; }
    case 15: 
      var $40=$sfb;
      var $41=$gfc_addr;
      var $scalefac_band31=(($41+21360)|0);
      var $psfb2132=(($scalefac_band31+148)|0);
      var $arrayidx33=(($psfb2132+($40<<2))|0);
      var $42=HEAP32[(($arrayidx33)>>2)];
      $start=$42;
      var $43=$sfb;
      var $add34=((($43)+(1))|0);
      var $44=$gfc_addr;
      var $scalefac_band35=(($44+21360)|0);
      var $psfb2136=(($scalefac_band35+148)|0);
      var $arrayidx37=(($psfb2136+($add34<<2))|0);
      var $45=HEAP32[(($arrayidx37)>>2)];
      $end=$45;
      var $46=$sfb;
      var $47=$ATH_psfb21;
      var $arrayidx38=(($47+($46<<2))|0);
      HEAPF32[(($arrayidx38)>>2)]=9.999999933815813e+36;
      var $48=$start;
      $i=$48;
      label = 16; break;
    case 16: 
      var $49=$i;
      var $50=$end;
      var $cmp40=(($49)|0) < (($50)|0);
      if ($cmp40) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $51=$i;
      var $conv44=(($51)|0);
      var $52=$samp_freq;
      var $mul45=($conv44)*($52);
      var $div46=($mul45)/(1152);
      $freq43=$div46;
      var $53=$cfg;
      var $54=$freq43;
      var $call47=_ATHmdct($53, $54);
      $ATH_f=$call47;
      var $55=$sfb;
      var $56=$ATH_psfb21;
      var $arrayidx48=(($56+($55<<2))|0);
      var $57=HEAPF32[(($arrayidx48)>>2)];
      var $58=$ATH_f;
      var $cmp49=$57 < $58;
      if ($cmp49) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $59=$sfb;
      var $60=$ATH_psfb21;
      var $arrayidx52=(($60+($59<<2))|0);
      var $61=HEAPF32[(($arrayidx52)>>2)];
      var $cond55 = $61;label = 20; break;
    case 19: 
      var $62=$ATH_f;
      var $cond55 = $62;label = 20; break;
    case 20: 
      var $cond55;
      var $63=$sfb;
      var $64=$ATH_psfb21;
      var $arrayidx56=(($64+($63<<2))|0);
      HEAPF32[(($arrayidx56)>>2)]=$cond55;
      label = 21; break;
    case 21: 
      var $65=$i;
      var $inc58=((($65)+(1))|0);
      $i=$inc58;
      label = 16; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $66=$sfb;
      var $inc61=((($66)+(1))|0);
      $sfb=$inc61;
      label = 14; break;
    case 24: 
      $sfb=0;
      label = 25; break;
    case 25: 
      var $67=$sfb;
      var $cmp64=(($67)|0) < 13;
      if ($cmp64) { label = 26; break; } else { label = 35; break; }
    case 26: 
      var $68=$sfb;
      var $69=$gfc_addr;
      var $scalefac_band67=(($69+21360)|0);
      var $s68=(($scalefac_band67+92)|0);
      var $arrayidx69=(($s68+($68<<2))|0);
      var $70=HEAP32[(($arrayidx69)>>2)];
      $start=$70;
      var $71=$sfb;
      var $add70=((($71)+(1))|0);
      var $72=$gfc_addr;
      var $scalefac_band71=(($72+21360)|0);
      var $s72=(($scalefac_band71+92)|0);
      var $arrayidx73=(($s72+($add70<<2))|0);
      var $73=HEAP32[(($arrayidx73)>>2)];
      $end=$73;
      var $74=$sfb;
      var $75=$ATH_s;
      var $arrayidx74=(($75+($74<<2))|0);
      HEAPF32[(($arrayidx74)>>2)]=9.999999933815813e+36;
      var $76=$start;
      $i=$76;
      label = 27; break;
    case 27: 
      var $77=$i;
      var $78=$end;
      var $cmp76=(($77)|0) < (($78)|0);
      if ($cmp76) { label = 28; break; } else { label = 33; break; }
    case 28: 
      var $79=$i;
      var $conv80=(($79)|0);
      var $80=$samp_freq;
      var $mul81=($conv80)*($80);
      var $div82=($mul81)/(384);
      $freq79=$div82;
      var $81=$cfg;
      var $82=$freq79;
      var $call83=_ATHmdct($81, $82);
      $ATH_f=$call83;
      var $83=$sfb;
      var $84=$ATH_s;
      var $arrayidx84=(($84+($83<<2))|0);
      var $85=HEAPF32[(($arrayidx84)>>2)];
      var $86=$ATH_f;
      var $cmp85=$85 < $86;
      if ($cmp85) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $87=$sfb;
      var $88=$ATH_s;
      var $arrayidx88=(($88+($87<<2))|0);
      var $89=HEAPF32[(($arrayidx88)>>2)];
      var $cond91 = $89;label = 31; break;
    case 30: 
      var $90=$ATH_f;
      var $cond91 = $90;label = 31; break;
    case 31: 
      var $cond91;
      var $91=$sfb;
      var $92=$ATH_s;
      var $arrayidx92=(($92+($91<<2))|0);
      HEAPF32[(($arrayidx92)>>2)]=$cond91;
      label = 32; break;
    case 32: 
      var $93=$i;
      var $inc94=((($93)+(1))|0);
      $i=$inc94;
      label = 27; break;
    case 33: 
      var $94=$sfb;
      var $add96=((($94)+(1))|0);
      var $95=$gfc_addr;
      var $scalefac_band97=(($95+21360)|0);
      var $s98=(($scalefac_band97+92)|0);
      var $arrayidx99=(($s98+($add96<<2))|0);
      var $96=HEAP32[(($arrayidx99)>>2)];
      var $97=$sfb;
      var $98=$gfc_addr;
      var $scalefac_band100=(($98+21360)|0);
      var $s101=(($scalefac_band100+92)|0);
      var $arrayidx102=(($s101+($97<<2))|0);
      var $99=HEAP32[(($arrayidx102)>>2)];
      var $sub=((($96)-($99))|0);
      var $conv103=(($sub)|0);
      var $100=$sfb;
      var $101=$ATH_s;
      var $arrayidx104=(($101+($100<<2))|0);
      var $102=HEAPF32[(($arrayidx104)>>2)];
      var $mul105=($102)*($conv103);
      HEAPF32[(($arrayidx104)>>2)]=$mul105;
      label = 34; break;
    case 34: 
      var $103=$sfb;
      var $inc107=((($103)+(1))|0);
      $sfb=$inc107;
      label = 25; break;
    case 35: 
      $sfb=0;
      label = 36; break;
    case 36: 
      var $104=$sfb;
      var $cmp110=(($104)|0) < 6;
      if ($cmp110) { label = 37; break; } else { label = 46; break; }
    case 37: 
      var $105=$sfb;
      var $106=$gfc_addr;
      var $scalefac_band113=(($106+21360)|0);
      var $psfb12114=(($scalefac_band113+176)|0);
      var $arrayidx115=(($psfb12114+($105<<2))|0);
      var $107=HEAP32[(($arrayidx115)>>2)];
      $start=$107;
      var $108=$sfb;
      var $add116=((($108)+(1))|0);
      var $109=$gfc_addr;
      var $scalefac_band117=(($109+21360)|0);
      var $psfb12118=(($scalefac_band117+176)|0);
      var $arrayidx119=(($psfb12118+($add116<<2))|0);
      var $110=HEAP32[(($arrayidx119)>>2)];
      $end=$110;
      var $111=$sfb;
      var $112=$ATH_psfb12;
      var $arrayidx120=(($112+($111<<2))|0);
      HEAPF32[(($arrayidx120)>>2)]=9.999999933815813e+36;
      var $113=$start;
      $i=$113;
      label = 38; break;
    case 38: 
      var $114=$i;
      var $115=$end;
      var $cmp122=(($114)|0) < (($115)|0);
      if ($cmp122) { label = 39; break; } else { label = 44; break; }
    case 39: 
      var $116=$i;
      var $conv126=(($116)|0);
      var $117=$samp_freq;
      var $mul127=($conv126)*($117);
      var $div128=($mul127)/(384);
      $freq125=$div128;
      var $118=$cfg;
      var $119=$freq125;
      var $call129=_ATHmdct($118, $119);
      $ATH_f=$call129;
      var $120=$sfb;
      var $121=$ATH_psfb12;
      var $arrayidx130=(($121+($120<<2))|0);
      var $122=HEAPF32[(($arrayidx130)>>2)];
      var $123=$ATH_f;
      var $cmp131=$122 < $123;
      if ($cmp131) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $124=$sfb;
      var $125=$ATH_psfb12;
      var $arrayidx134=(($125+($124<<2))|0);
      var $126=HEAPF32[(($arrayidx134)>>2)];
      var $cond137 = $126;label = 42; break;
    case 41: 
      var $127=$ATH_f;
      var $cond137 = $127;label = 42; break;
    case 42: 
      var $cond137;
      var $128=$sfb;
      var $129=$ATH_psfb12;
      var $arrayidx138=(($129+($128<<2))|0);
      HEAPF32[(($arrayidx138)>>2)]=$cond137;
      label = 43; break;
    case 43: 
      var $130=$i;
      var $inc140=((($130)+(1))|0);
      $i=$inc140;
      label = 38; break;
    case 44: 
      var $131=$gfc_addr;
      var $scalefac_band142=(($131+21360)|0);
      var $s143=(($scalefac_band142+92)|0);
      var $arrayidx144=(($s143+52)|0);
      var $132=HEAP32[(($arrayidx144)>>2)];
      var $133=$gfc_addr;
      var $scalefac_band145=(($133+21360)|0);
      var $s146=(($scalefac_band145+92)|0);
      var $arrayidx147=(($s146+48)|0);
      var $134=HEAP32[(($arrayidx147)>>2)];
      var $sub148=((($132)-($134))|0);
      var $conv149=(($sub148)|0);
      var $135=$sfb;
      var $136=$ATH_psfb12;
      var $arrayidx150=(($136+($135<<2))|0);
      var $137=HEAPF32[(($arrayidx150)>>2)];
      var $mul151=($137)*($conv149);
      HEAPF32[(($arrayidx150)>>2)]=$mul151;
      label = 45; break;
    case 45: 
      var $138=$sfb;
      var $inc153=((($138)+(1))|0);
      $sfb=$inc153;
      label = 36; break;
    case 46: 
      var $139=$cfg;
      var $noATH=(($139+204)|0);
      var $140=HEAP32[(($noATH)>>2)];
      var $tobool=(($140)|0)!=0;
      if ($tobool) { label = 47; break; } else { label = 64; break; }
    case 47: 
      $sfb=0;
      label = 48; break;
    case 48: 
      var $141=$sfb;
      var $cmp156=(($141)|0) < 22;
      if ($cmp156) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $142=$sfb;
      var $143=$ATH_l;
      var $arrayidx159=(($143+($142<<2))|0);
      HEAPF32[(($arrayidx159)>>2)]=9.999999682655225e-21;
      label = 50; break;
    case 50: 
      var $144=$sfb;
      var $inc161=((($144)+(1))|0);
      $sfb=$inc161;
      label = 48; break;
    case 51: 
      $sfb=0;
      label = 52; break;
    case 52: 
      var $145=$sfb;
      var $cmp164=(($145)|0) < 6;
      if ($cmp164) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $146=$sfb;
      var $147=$ATH_psfb21;
      var $arrayidx167=(($147+($146<<2))|0);
      HEAPF32[(($arrayidx167)>>2)]=9.999999682655225e-21;
      label = 54; break;
    case 54: 
      var $148=$sfb;
      var $inc169=((($148)+(1))|0);
      $sfb=$inc169;
      label = 52; break;
    case 55: 
      $sfb=0;
      label = 56; break;
    case 56: 
      var $149=$sfb;
      var $cmp172=(($149)|0) < 13;
      if ($cmp172) { label = 57; break; } else { label = 59; break; }
    case 57: 
      var $150=$sfb;
      var $151=$ATH_s;
      var $arrayidx175=(($151+($150<<2))|0);
      HEAPF32[(($arrayidx175)>>2)]=9.999999682655225e-21;
      label = 58; break;
    case 58: 
      var $152=$sfb;
      var $inc177=((($152)+(1))|0);
      $sfb=$inc177;
      label = 56; break;
    case 59: 
      $sfb=0;
      label = 60; break;
    case 60: 
      var $153=$sfb;
      var $cmp180=(($153)|0) < 6;
      if ($cmp180) { label = 61; break; } else { label = 63; break; }
    case 61: 
      var $154=$sfb;
      var $155=$ATH_psfb12;
      var $arrayidx183=(($155+($154<<2))|0);
      HEAPF32[(($arrayidx183)>>2)]=9.999999682655225e-21;
      label = 62; break;
    case 62: 
      var $156=$sfb;
      var $inc185=((($156)+(1))|0);
      $sfb=$inc185;
      label = 60; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $157=$cfg;
      var $call187=_ATHmdct($157, -1);
      var $conv188=$call187;
      var $call189=_log10($conv188);
      var $mul190=($call189)*(10);
      var $conv191=$mul190;
      var $158=$gfc_addr;
      var $ATH192=(($158+85792)|0);
      var $159=HEAP32[(($ATH192)>>2)];
      var $floor=(($159+20)|0);
      HEAPF32[(($floor)>>2)]=$conv191;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_compute_ath["X"]=1;

function _on_pe($gfc, $pe, $targ_bits, $mean_bits, $gr, $cbr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $pe_addr;
      var $targ_bits_addr;
      var $mean_bits_addr;
      var $gr_addr;
      var $cbr_addr;
      var $cfg;
      var $extra_bits=__stackBase__;
      var $tbits=(__stackBase__)+(4);
      var $bits;
      var $add_bits=(__stackBase__)+(8);
      var $max_bits;
      var $ch;
      var $sum;
      $gfc_addr=$gfc;
      $pe_addr=$pe;
      $targ_bits_addr=$targ_bits;
      $mean_bits_addr=$mean_bits;
      $gr_addr=$gr;
      $cbr_addr=$cbr;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      HEAP32[(($extra_bits)>>2)]=0;
      var $1=$add_bits;
      HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0;
      var $2=$gfc_addr;
      var $3=$mean_bits_addr;
      var $4=$cbr_addr;
      _ResvMaxBits($2, $3, $tbits, $extra_bits, $4);
      var $5=HEAP32[(($tbits)>>2)];
      var $6=HEAP32[(($extra_bits)>>2)];
      var $add=((($5)+($6))|0);
      $max_bits=$add;
      var $7=$max_bits;
      var $cmp=(($7)|0) > 7680;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $max_bits=7680;
      label = 4; break;
    case 4: 
      $bits=0;
      $ch=0;
      label = 5; break;
    case 5: 
      var $8=$ch;
      var $9=$cfg;
      var $channels_out=(($9+56)|0);
      var $10=HEAP32[(($channels_out)>>2)];
      var $cmp2=(($8)|0) < (($10)|0);
      if ($cmp2) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $11=HEAP32[(($tbits)>>2)];
      var $12=$cfg;
      var $channels_out3=(($12+56)|0);
      var $13=HEAP32[(($channels_out3)>>2)];
      var $div=((((($11)|0))/((($13)|0)))&-1);
      var $cmp4=4095 < (($div)|0);
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 4095;label = 9; break;
    case 8: 
      var $14=HEAP32[(($tbits)>>2)];
      var $15=$cfg;
      var $channels_out5=(($15+56)|0);
      var $16=HEAP32[(($channels_out5)>>2)];
      var $div6=((((($14)|0))/((($16)|0)))&-1);
      var $cond = $div6;label = 9; break;
    case 9: 
      var $cond;
      var $17=$ch;
      var $18=$targ_bits_addr;
      var $arrayidx=(($18+($17<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$cond;
      var $19=$ch;
      var $20=$targ_bits_addr;
      var $arrayidx7=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx7)>>2)];
      var $conv=(($21)|0);
      var $22=$ch;
      var $23=$gr_addr;
      var $24=$pe_addr;
      var $arrayidx8=(($24+($23<<3))|0);
      var $arrayidx9=(($arrayidx8+($22<<2))|0);
      var $25=HEAPF32[(($arrayidx9)>>2)];
      var $mul=($conv)*($25);
      var $conv10=$mul;
      var $div11=($conv10)/(700);
      var $26=$ch;
      var $27=$targ_bits_addr;
      var $arrayidx12=(($27+($26<<2))|0);
      var $28=HEAP32[(($arrayidx12)>>2)];
      var $conv13=(($28)|0);
      var $sub=($div11)-($conv13);
      var $conv14=(($sub)&-1);
      var $29=$ch;
      var $arrayidx15=(($add_bits+($29<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$conv14;
      var $30=$ch;
      var $arrayidx16=(($add_bits+($30<<2))|0);
      var $31=HEAP32[(($arrayidx16)>>2)];
      var $32=$mean_bits_addr;
      var $mul17=((($32)*(3))&-1);
      var $div18=((((($mul17)|0))/(4))&-1);
      var $cmp19=(($31)|0) > (($div18)|0);
      if ($cmp19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $33=$mean_bits_addr;
      var $mul22=((($33)*(3))&-1);
      var $div23=((((($mul22)|0))/(4))&-1);
      var $34=$ch;
      var $arrayidx24=(($add_bits+($34<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$div23;
      label = 11; break;
    case 11: 
      var $35=$ch;
      var $arrayidx26=(($add_bits+($35<<2))|0);
      var $36=HEAP32[(($arrayidx26)>>2)];
      var $cmp27=(($36)|0) < 0;
      if ($cmp27) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $37=$ch;
      var $arrayidx30=(($add_bits+($37<<2))|0);
      HEAP32[(($arrayidx30)>>2)]=0;
      label = 13; break;
    case 13: 
      var $38=$ch;
      var $arrayidx32=(($add_bits+($38<<2))|0);
      var $39=HEAP32[(($arrayidx32)>>2)];
      var $40=$ch;
      var $41=$targ_bits_addr;
      var $arrayidx33=(($41+($40<<2))|0);
      var $42=HEAP32[(($arrayidx33)>>2)];
      var $add34=((($39)+($42))|0);
      var $cmp35=(($add34)|0) > 4095;
      if ($cmp35) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $43=$ch;
      var $44=$targ_bits_addr;
      var $arrayidx38=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx38)>>2)];
      var $sub39=(((4095)-($45))|0);
      var $cmp40=0 > (($sub39)|0);
      if ($cmp40) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $cond47 = 0;label = 17; break;
    case 16: 
      var $46=$ch;
      var $47=$targ_bits_addr;
      var $arrayidx44=(($47+($46<<2))|0);
      var $48=HEAP32[(($arrayidx44)>>2)];
      var $sub45=(((4095)-($48))|0);
      var $cond47 = $sub45;label = 17; break;
    case 17: 
      var $cond47;
      var $49=$ch;
      var $arrayidx48=(($add_bits+($49<<2))|0);
      HEAP32[(($arrayidx48)>>2)]=$cond47;
      label = 18; break;
    case 18: 
      var $50=$ch;
      var $arrayidx50=(($add_bits+($50<<2))|0);
      var $51=HEAP32[(($arrayidx50)>>2)];
      var $52=$bits;
      var $add51=((($52)+($51))|0);
      $bits=$add51;
      label = 19; break;
    case 19: 
      var $53=$ch;
      var $inc=((($53)+(1))|0);
      $ch=$inc;
      label = 5; break;
    case 20: 
      var $54=$bits;
      var $55=HEAP32[(($extra_bits)>>2)];
      var $cmp52=(($54)|0) > (($55)|0);
      if ($cmp52) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $56=$bits;
      var $cmp54=(($56)|0) > 0;
      if ($cmp54) { label = 22; break; } else { label = 27; break; }
    case 22: 
      $ch=0;
      label = 23; break;
    case 23: 
      var $57=$ch;
      var $58=$cfg;
      var $channels_out58=(($58+56)|0);
      var $59=HEAP32[(($channels_out58)>>2)];
      var $cmp59=(($57)|0) < (($59)|0);
      if ($cmp59) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $60=HEAP32[(($extra_bits)>>2)];
      var $61=$ch;
      var $arrayidx62=(($add_bits+($61<<2))|0);
      var $62=HEAP32[(($arrayidx62)>>2)];
      var $mul63=((($60)*($62))&-1);
      var $63=$bits;
      var $div64=((((($mul63)|0))/((($63)|0)))&-1);
      var $64=$ch;
      var $arrayidx65=(($add_bits+($64<<2))|0);
      HEAP32[(($arrayidx65)>>2)]=$div64;
      label = 25; break;
    case 25: 
      var $65=$ch;
      var $inc67=((($65)+(1))|0);
      $ch=$inc67;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      $ch=0;
      label = 28; break;
    case 28: 
      var $66=$ch;
      var $67=$cfg;
      var $channels_out71=(($67+56)|0);
      var $68=HEAP32[(($channels_out71)>>2)];
      var $cmp72=(($66)|0) < (($68)|0);
      if ($cmp72) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $69=$ch;
      var $arrayidx75=(($add_bits+($69<<2))|0);
      var $70=HEAP32[(($arrayidx75)>>2)];
      var $71=$ch;
      var $72=$targ_bits_addr;
      var $arrayidx76=(($72+($71<<2))|0);
      var $73=HEAP32[(($arrayidx76)>>2)];
      var $add77=((($73)+($70))|0);
      HEAP32[(($arrayidx76)>>2)]=$add77;
      var $74=$ch;
      var $arrayidx78=(($add_bits+($74<<2))|0);
      var $75=HEAP32[(($arrayidx78)>>2)];
      var $76=HEAP32[(($extra_bits)>>2)];
      var $sub79=((($76)-($75))|0);
      HEAP32[(($extra_bits)>>2)]=$sub79;
      label = 30; break;
    case 30: 
      var $77=$ch;
      var $inc81=((($77)+(1))|0);
      $ch=$inc81;
      label = 28; break;
    case 31: 
      $bits=0;
      $ch=0;
      label = 32; break;
    case 32: 
      var $78=$ch;
      var $79=$cfg;
      var $channels_out84=(($79+56)|0);
      var $80=HEAP32[(($channels_out84)>>2)];
      var $cmp85=(($78)|0) < (($80)|0);
      if ($cmp85) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $81=$ch;
      var $82=$targ_bits_addr;
      var $arrayidx88=(($82+($81<<2))|0);
      var $83=HEAP32[(($arrayidx88)>>2)];
      var $84=$bits;
      var $add89=((($84)+($83))|0);
      $bits=$add89;
      label = 34; break;
    case 34: 
      var $85=$ch;
      var $inc91=((($85)+(1))|0);
      $ch=$inc91;
      label = 32; break;
    case 35: 
      var $86=$bits;
      var $cmp93=(($86)|0) > 7680;
      if ($cmp93) { label = 36; break; } else { label = 41; break; }
    case 36: 
      $sum=0;
      $ch=0;
      label = 37; break;
    case 37: 
      var $87=$ch;
      var $88=$cfg;
      var $channels_out97=(($88+56)|0);
      var $89=HEAP32[(($channels_out97)>>2)];
      var $cmp98=(($87)|0) < (($89)|0);
      if ($cmp98) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $90=$ch;
      var $91=$targ_bits_addr;
      var $arrayidx101=(($91+($90<<2))|0);
      var $92=HEAP32[(($arrayidx101)>>2)];
      var $mul102=((($92)*(7680))&-1);
      HEAP32[(($arrayidx101)>>2)]=$mul102;
      var $93=$bits;
      var $94=$ch;
      var $95=$targ_bits_addr;
      var $arrayidx103=(($95+($94<<2))|0);
      var $96=HEAP32[(($arrayidx103)>>2)];
      var $div104=((((($96)|0))/((($93)|0)))&-1);
      HEAP32[(($arrayidx103)>>2)]=$div104;
      var $97=$ch;
      var $98=$targ_bits_addr;
      var $arrayidx105=(($98+($97<<2))|0);
      var $99=HEAP32[(($arrayidx105)>>2)];
      var $100=$sum;
      var $add106=((($100)+($99))|0);
      $sum=$add106;
      label = 39; break;
    case 39: 
      var $101=$ch;
      var $inc108=((($101)+(1))|0);
      $ch=$inc108;
      label = 37; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $102=$max_bits;
      STACKTOP = __stackBase__;
      return $102;
    default: assert(0, "bad label: " + label);
  }

}
_on_pe["X"]=1;

function _reduce_side($targ_bits, $ms_ener_ratio, $mean_bits, $max_bits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $targ_bits_addr;
      var $ms_ener_ratio_addr;
      var $mean_bits_addr;
      var $max_bits_addr;
      var $move_bits;
      var $fac;
      $targ_bits_addr=$targ_bits;
      $ms_ener_ratio_addr=$ms_ener_ratio;
      $mean_bits_addr=$mean_bits;
      $max_bits_addr=$max_bits;
      var $0=$ms_ener_ratio_addr;
      var $conv=$0;
      var $sub=(0.5)-($conv);
      var $mul=($sub)*(0.33);
      var $div=($mul)/(0.5);
      var $conv1=$div;
      $fac=$conv1;
      var $1=$fac;
      var $cmp=$1 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $fac=0;
      label = 4; break;
    case 4: 
      var $2=$fac;
      var $conv3=$2;
      var $cmp4=$conv3 > 0.5;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $fac=0.5;
      label = 6; break;
    case 6: 
      var $3=$fac;
      var $conv8=$3;
      var $mul9=($conv8)*(0.5);
      var $4=$targ_bits_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $6=$targ_bits_addr;
      var $arrayidx10=(($6+4)|0);
      var $7=HEAP32[(($arrayidx10)>>2)];
      var $add=((($5)+($7))|0);
      var $conv11=(($add)|0);
      var $mul12=($mul9)*($conv11);
      var $conv13=(($mul12)&-1);
      $move_bits=$conv13;
      var $8=$move_bits;
      var $9=$targ_bits_addr;
      var $arrayidx14=(($9)|0);
      var $10=HEAP32[(($arrayidx14)>>2)];
      var $sub15=(((4095)-($10))|0);
      var $cmp16=(($8)|0) > (($sub15)|0);
      if ($cmp16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$targ_bits_addr;
      var $arrayidx19=(($11)|0);
      var $12=HEAP32[(($arrayidx19)>>2)];
      var $sub20=(((4095)-($12))|0);
      $move_bits=$sub20;
      label = 8; break;
    case 8: 
      var $13=$move_bits;
      var $cmp22=(($13)|0) < 0;
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $move_bits=0;
      label = 10; break;
    case 10: 
      var $14=$targ_bits_addr;
      var $arrayidx26=(($14+4)|0);
      var $15=HEAP32[(($arrayidx26)>>2)];
      var $cmp27=(($15)|0) >= 125;
      if ($cmp27) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $16=$targ_bits_addr;
      var $arrayidx30=(($16+4)|0);
      var $17=HEAP32[(($arrayidx30)>>2)];
      var $18=$move_bits;
      var $sub31=((($17)-($18))|0);
      var $cmp32=(($sub31)|0) > 125;
      if ($cmp32) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $19=$targ_bits_addr;
      var $arrayidx35=(($19)|0);
      var $20=HEAP32[(($arrayidx35)>>2)];
      var $21=$mean_bits_addr;
      var $cmp36=(($20)|0) < (($21)|0);
      if ($cmp36) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $22=$move_bits;
      var $23=$targ_bits_addr;
      var $arrayidx39=(($23)|0);
      var $24=HEAP32[(($arrayidx39)>>2)];
      var $add40=((($24)+($22))|0);
      HEAP32[(($arrayidx39)>>2)]=$add40;
      label = 14; break;
    case 14: 
      var $25=$move_bits;
      var $26=$targ_bits_addr;
      var $arrayidx42=(($26+4)|0);
      var $27=HEAP32[(($arrayidx42)>>2)];
      var $sub43=((($27)-($25))|0);
      HEAP32[(($arrayidx42)>>2)]=$sub43;
      label = 16; break;
    case 15: 
      var $28=$targ_bits_addr;
      var $arrayidx44=(($28+4)|0);
      var $29=HEAP32[(($arrayidx44)>>2)];
      var $sub45=((($29)-(125))|0);
      var $30=$targ_bits_addr;
      var $arrayidx46=(($30)|0);
      var $31=HEAP32[(($arrayidx46)>>2)];
      var $add47=((($31)+($sub45))|0);
      HEAP32[(($arrayidx46)>>2)]=$add47;
      var $32=$targ_bits_addr;
      var $arrayidx48=(($32+4)|0);
      HEAP32[(($arrayidx48)>>2)]=125;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $33=$targ_bits_addr;
      var $arrayidx51=(($33)|0);
      var $34=HEAP32[(($arrayidx51)>>2)];
      var $35=$targ_bits_addr;
      var $arrayidx52=(($35+4)|0);
      var $36=HEAP32[(($arrayidx52)>>2)];
      var $add53=((($34)+($36))|0);
      $move_bits=$add53;
      var $37=$move_bits;
      var $38=$max_bits_addr;
      var $cmp54=(($37)|0) > (($38)|0);
      if ($cmp54) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $39=$max_bits_addr;
      var $40=$targ_bits_addr;
      var $arrayidx57=(($40)|0);
      var $41=HEAP32[(($arrayidx57)>>2)];
      var $mul58=((($39)*($41))&-1);
      var $42=$move_bits;
      var $div59=((((($mul58)|0))/((($42)|0)))&-1);
      var $43=$targ_bits_addr;
      var $arrayidx60=(($43)|0);
      HEAP32[(($arrayidx60)>>2)]=$div59;
      var $44=$max_bits_addr;
      var $45=$targ_bits_addr;
      var $arrayidx61=(($45+4)|0);
      var $46=HEAP32[(($arrayidx61)>>2)];
      var $mul62=((($44)*($46))&-1);
      var $47=$move_bits;
      var $div63=((((($mul62)|0))/((($47)|0)))&-1);
      var $48=$targ_bits_addr;
      var $arrayidx64=(($48+4)|0);
      HEAP32[(($arrayidx64)>>2)]=$div63;
      label = 19; break;
    case 19: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_reduce_side["X"]=1;

function _athAdjust($a, $x, $athFloor, $ATHfixpoint) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $x_addr;
      var $athFloor_addr;
      var $ATHfixpoint_addr;
      var $o;
      var $p;
      var $u;
      var $v;
      var $w;
      $a_addr=$a;
      $x_addr=$x;
      $athFloor_addr=$athFloor;
      $ATHfixpoint_addr=$ATHfixpoint;
      $o=90.30873107910156;
      var $0=$ATHfixpoint_addr;
      var $cmp=$0 < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 94.82444763183594;label = 5; break;
    case 4: 
      var $1=$ATHfixpoint_addr;
      var $cond = $1;label = 5; break;
    case 5: 
      var $cond;
      $p=$cond;
      var $2=$x_addr;
      var $call=_fast_log2($2);
      var $conv=$call;
      var $mul=($conv)*(3.0102999566398116);
      var $conv1=$mul;
      $u=$conv1;
      var $3=$a_addr;
      var $4=$a_addr;
      var $mul2=($3)*($4);
      $v=$mul2;
      $w=0;
      var $5=$athFloor_addr;
      var $6=$u;
      var $sub=($6)-($5);
      $u=$sub;
      var $7=$v;
      var $cmp3=$7 > 9.999999682655225e-21;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$v;
      var $call5=_fast_log2($8);
      var $conv6=$call5;
      var $mul7=($conv6)*(0.03333343265598758);
      var $add=($mul7)+(1);
      var $conv8=$add;
      $w=$conv8;
      label = 7; break;
    case 7: 
      var $9=$w;
      var $cmp9=$9 < 0;
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $w=0;
      label = 9; break;
    case 9: 
      var $10=$w;
      var $11=$u;
      var $mul13=($11)*($10);
      $u=$mul13;
      var $12=$athFloor_addr;
      var $add14=($12)+(90.30873107910156);
      var $13=$p;
      var $sub15=($add14)-($13);
      var $14=$u;
      var $add16=($14)+($sub15);
      $u=$add16;
      var $15=$u;
      var $mul17=($15)*(0.10000000149011612);
      var $16=Math.pow(10, $mul17);

      return $16;
    default: assert(0, "bad label: " + label);
  }

}
_athAdjust["X"]=1;

function _calc_xmin($gfc, $ratio, $cod_info, $pxmin) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $ratio_addr;
      var $cod_info_addr;
      var $pxmin_addr;
      var $cfg;
      var $sfb;
      var $gsfb;
      var $j;
      var $ath_over;
      var $k;
      var $ATH;
      var $xr;
      var $max_nonzero;
      var $en0;
      var $xmin;
      var $rh1;
      var $rh2;
      var $rh3;
      var $width;
      var $l;
      var $xa;
      var $x2;
      var $e;
      var $x;
      var $sfb_l;
      var $sfb_s;
      var $limit;
      var $width122;
      var $b;
      var $l123;
      var $tmpATH;
      var $en0139;
      var $xmin140;
      var $rh1141;
      var $rh2142;
      var $rh3143;
      var $xa150;
      var $x2153;
      var $e181;
      var $x189;
      $gfc_addr=$gfc;
      $ratio_addr=$ratio;
      $cod_info_addr=$cod_info;
      $pxmin_addr=$pxmin;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      $j=0;
      $ath_over=0;
      var $1=$gfc_addr;
      var $ATH2=(($1+85792)|0);
      var $2=HEAP32[(($ATH2)>>2)];
      $ATH=$2;
      var $3=$cod_info_addr;
      var $xr3=(($3)|0);
      var $arraydecay=(($xr3)|0);
      $xr=$arraydecay;
      $gsfb=0;
      label = 3; break;
    case 3: 
      var $4=$gsfb;
      var $5=$cod_info_addr;
      var $psy_lmax=(($5+4856)|0);
      var $6=HEAP32[(($psy_lmax)>>2)];
      var $cmp=(($4)|0) < (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 28; break; }
    case 4: 
      var $7=$ATH;
      var $adjust_factor=(($7+8)|0);
      var $8=HEAPF32[(($adjust_factor)>>2)];
      var $9=$gsfb;
      var $10=$ATH;
      var $l4=(($10+24)|0);
      var $arrayidx=(($l4+($9<<2))|0);
      var $11=HEAPF32[(($arrayidx)>>2)];
      var $12=$ATH;
      var $floor=(($12+20)|0);
      var $13=HEAPF32[(($floor)>>2)];
      var $14=$cfg;
      var $ATHfixpoint=(($14+208)|0);
      var $15=HEAPF32[(($ATHfixpoint)>>2)];
      var $call=_athAdjust($8, $11, $13, $15);
      $xmin=$call;
      var $16=$gsfb;
      var $17=$gfc_addr;
      var $sv_qnt=(($17+84764)|0);
      var $longfact=(($sv_qnt)|0);
      var $arrayidx5=(($longfact+($16<<2))|0);
      var $18=HEAPF32[(($arrayidx5)>>2)];
      var $19=$xmin;
      var $mul=($19)*($18);
      $xmin=$mul;
      var $20=$gsfb;
      var $21=$cod_info_addr;
      var $width6=(($21+4872)|0);
      var $arrayidx7=(($width6+($20<<2))|0);
      var $22=HEAP32[(($arrayidx7)>>2)];
      $width=$22;
      var $23=$xmin;
      var $24=$width;
      var $conv=(($24)|0);
      var $div=($23)/($conv);
      $rh1=$div;
      $rh2=2.220446049250313e-16;
      $en0=0;
      $l=0;
      label = 5; break;
    case 5: 
      var $25=$l;
      var $26=$width;
      var $cmp9=(($25)|0) < (($26)|0);
      if ($cmp9) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $27=$j;
      var $inc=((($27)+(1))|0);
      $j=$inc;
      var $28=$xr;
      var $arrayidx12=(($28+($27<<2))|0);
      var $29=HEAPF32[(($arrayidx12)>>2)];
      $xa=$29;
      var $30=$xa;
      var $31=$xa;
      var $mul13=($30)*($31);
      $x2=$mul13;
      var $32=$x2;
      var $33=$en0;
      var $add=($33)+($32);
      $en0=$add;
      var $34=$x2;
      var $35=$rh1;
      var $cmp14=$34 < $35;
      if ($cmp14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $36=$x2;
      var $cond = $36;label = 9; break;
    case 8: 
      var $37=$rh1;
      var $cond = $37;label = 9; break;
    case 9: 
      var $cond;
      var $38=$rh2;
      var $add16=($38)+($cond);
      $rh2=$add16;
      label = 10; break;
    case 10: 
      var $39=$l;
      var $inc17=((($39)+(1))|0);
      $l=$inc17;
      label = 5; break;
    case 11: 
      var $40=$en0;
      var $41=$xmin;
      var $cmp18=$40 > $41;
      if ($cmp18) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $42=$ath_over;
      var $inc20=((($42)+(1))|0);
      $ath_over=$inc20;
      label = 13; break;
    case 13: 
      var $43=$en0;
      var $44=$xmin;
      var $cmp21=$43 < $44;
      if ($cmp21) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $45=$en0;
      $rh3=$45;
      label = 19; break;
    case 15: 
      var $46=$rh2;
      var $47=$xmin;
      var $cmp24=$46 < $47;
      if ($cmp24) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $48=$xmin;
      $rh3=$48;
      label = 18; break;
    case 17: 
      var $49=$rh2;
      $rh3=$49;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $50=$rh3;
      $xmin=$50;
      var $51=$gsfb;
      var $52=$ratio_addr;
      var $en=(($52+244)|0);
      var $l30=(($en)|0);
      var $arrayidx31=(($l30+($51<<2))|0);
      var $53=HEAPF32[(($arrayidx31)>>2)];
      $e=$53;
      var $54=$e;
      var $cmp32=$54 > 9.999999960041972e-13;
      if ($cmp32) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $55=$en0;
      var $56=$gsfb;
      var $57=$ratio_addr;
      var $thm=(($57)|0);
      var $l35=(($thm)|0);
      var $arrayidx36=(($l35+($56<<2))|0);
      var $58=HEAPF32[(($arrayidx36)>>2)];
      var $mul37=($55)*($58);
      var $59=$e;
      var $div38=($mul37)/($59);
      $x=$div38;
      var $60=$gsfb;
      var $61=$gfc_addr;
      var $sv_qnt39=(($61+84764)|0);
      var $longfact40=(($sv_qnt39)|0);
      var $arrayidx41=(($longfact40+($60<<2))|0);
      var $62=HEAPF32[(($arrayidx41)>>2)];
      var $63=$x;
      var $mul42=($63)*($62);
      $x=$mul42;
      var $64=$xmin;
      var $65=$x;
      var $cmp43=$64 < $65;
      if ($cmp43) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $66=$x;
      $xmin=$66;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $67=$xmin;
      var $conv48=$67;
      var $cmp49=$conv48 > 2.220446049250313e-16;
      if ($cmp49) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $68=$xmin;
      var $conv52=$68;
      var $cond55 = $conv52;label = 26; break;
    case 25: 
      var $cond55 = 2.220446049250313e-16;label = 26; break;
    case 26: 
      var $cond55;
      var $conv56=$cond55;
      $xmin=$conv56;
      var $69=$en0;
      var $70=$xmin;
      var $add57=($70)+(9.9999998245167e-15);
      var $cmp58=$69 > $add57;
      var $cond60=$cmp58 ? 1 : 0;
      var $conv61=(($cond60) & 255);
      var $71=$gsfb;
      var $72=$cod_info_addr;
      var $energy_above_cutoff=(($72+5212)|0);
      var $arrayidx62=(($energy_above_cutoff+$71)|0);
      HEAP8[($arrayidx62)]=$conv61;
      var $73=$xmin;
      var $74=$pxmin_addr;
      var $incdec_ptr=(($74+4)|0);
      $pxmin_addr=$incdec_ptr;
      HEAPF32[(($74)>>2)]=$73;
      label = 27; break;
    case 27: 
      var $75=$gsfb;
      var $inc64=((($75)+(1))|0);
      $gsfb=$inc64;
      label = 3; break;
    case 28: 
      $max_nonzero=0;
      $k=575;
      label = 29; break;
    case 29: 
      var $76=$k;
      var $cmp67=(($76)|0) > 0;
      if ($cmp67) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $77=$k;
      var $78=$xr;
      var $arrayidx70=(($78+($77<<2))|0);
      var $79=HEAPF32[(($arrayidx70)>>2)];
      var $conv71=$79;
      var $call72=Math.abs($conv71);
      var $cmp73=$call72 > 9.999999960041972e-13;
      if ($cmp73) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $80=$k;
      $max_nonzero=$80;
      label = 34; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $81=$k;
      var $dec=((($81)-(1))|0);
      $k=$dec;
      label = 29; break;
    case 34: 
      var $82=$cod_info_addr;
      var $block_type=(($82+4788)|0);
      var $83=HEAP32[(($block_type)>>2)];
      var $cmp79=(($83)|0)!=2;
      if ($cmp79) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $84=$max_nonzero;
      var $or=$84 | 1;
      $max_nonzero=$or;
      label = 37; break;
    case 36: 
      var $85=$max_nonzero;
      var $div83=((((($85)|0))/(6))&-1);
      $max_nonzero=$div83;
      var $86=$max_nonzero;
      var $mul84=((($86)*(6))&-1);
      $max_nonzero=$mul84;
      var $87=$max_nonzero;
      var $add85=((($87)+(5))|0);
      $max_nonzero=$add85;
      label = 37; break;
    case 37: 
      var $88=$gfc_addr;
      var $sv_qnt87=(($88+84764)|0);
      var $sfb21_extra=(($sv_qnt87+324)|0);
      var $89=HEAP32[(($sfb21_extra)>>2)];
      var $cmp88=(($89)|0)==0;
      if ($cmp88) { label = 38; break; } else { label = 45; break; }
    case 38: 
      var $90=$cfg;
      var $samplerate_out=(($90+48)|0);
      var $91=HEAP32[(($samplerate_out)>>2)];
      var $cmp90=(($91)|0) < 44000;
      if ($cmp90) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $92=$cfg;
      var $samplerate_out93=(($92+48)|0);
      var $93=HEAP32[(($samplerate_out93)>>2)];
      var $cmp94=(($93)|0) <= 8000;
      var $cond96=$cmp94 ? 17 : 21;
      $sfb_l=$cond96;
      var $94=$cfg;
      var $samplerate_out97=(($94+48)|0);
      var $95=HEAP32[(($samplerate_out97)>>2)];
      var $cmp98=(($95)|0) <= 8000;
      var $cond100=$cmp98 ? 9 : 12;
      $sfb_s=$cond100;
      $limit=575;
      var $96=$cod_info_addr;
      var $block_type101=(($96+4788)|0);
      var $97=HEAP32[(($block_type101)>>2)];
      var $cmp102=(($97)|0)!=2;
      if ($cmp102) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $98=$sfb_l;
      var $99=$gfc_addr;
      var $scalefac_band=(($99+21360)|0);
      var $l105=(($scalefac_band)|0);
      var $arrayidx106=(($l105+($98<<2))|0);
      var $100=HEAP32[(($arrayidx106)>>2)];
      var $sub=((($100)-(1))|0);
      $limit=$sub;
      label = 42; break;
    case 41: 
      var $101=$sfb_s;
      var $102=$gfc_addr;
      var $scalefac_band108=(($102+21360)|0);
      var $s=(($scalefac_band108+92)|0);
      var $arrayidx109=(($s+($101<<2))|0);
      var $103=HEAP32[(($arrayidx109)>>2)];
      var $mul110=((($103)*(3))&-1);
      var $sub111=((($mul110)-(1))|0);
      $limit=$sub111;
      label = 42; break;
    case 42: 
      var $104=$max_nonzero;
      var $105=$limit;
      var $cmp113=(($104)|0) > (($105)|0);
      if ($cmp113) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $106=$limit;
      $max_nonzero=$106;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $107=$max_nonzero;
      var $108=$cod_info_addr;
      var $max_nonzero_coeff=(($108+5208)|0);
      HEAP32[(($max_nonzero_coeff)>>2)]=$107;
      var $109=$cod_info_addr;
      var $sfb_smin=(($109+4852)|0);
      var $110=HEAP32[(($sfb_smin)>>2)];
      $sfb=$110;
      label = 46; break;
    case 46: 
      var $111=$gsfb;
      var $112=$cod_info_addr;
      var $psymax=(($112+4864)|0);
      var $113=HEAP32[(($psymax)>>2)];
      var $cmp119=(($111)|0) < (($113)|0);
      if ($cmp119) { label = 47; break; } else { label = 81; break; }
    case 47: 
      var $114=$ATH;
      var $adjust_factor124=(($114+8)|0);
      var $115=HEAPF32[(($adjust_factor124)>>2)];
      var $116=$sfb;
      var $117=$ATH;
      var $s125=(($117+112)|0);
      var $arrayidx126=(($s125+($116<<2))|0);
      var $118=HEAPF32[(($arrayidx126)>>2)];
      var $119=$ATH;
      var $floor127=(($119+20)|0);
      var $120=HEAPF32[(($floor127)>>2)];
      var $121=$cfg;
      var $ATHfixpoint128=(($121+208)|0);
      var $122=HEAPF32[(($ATHfixpoint128)>>2)];
      var $call129=_athAdjust($115, $118, $120, $122);
      $tmpATH=$call129;
      var $123=$sfb;
      var $124=$gfc_addr;
      var $sv_qnt130=(($124+84764)|0);
      var $shortfact=(($sv_qnt130+88)|0);
      var $arrayidx131=(($shortfact+($123<<2))|0);
      var $125=HEAPF32[(($arrayidx131)>>2)];
      var $126=$tmpATH;
      var $mul132=($126)*($125);
      $tmpATH=$mul132;
      var $127=$gsfb;
      var $128=$cod_info_addr;
      var $width133=(($128+4872)|0);
      var $arrayidx134=(($width133+($127<<2))|0);
      var $129=HEAP32[(($arrayidx134)>>2)];
      $width122=$129;
      $b=0;
      label = 48; break;
    case 48: 
      var $130=$b;
      var $cmp136=(($130)|0) < 3;
      if ($cmp136) { label = 49; break; } else { label = 73; break; }
    case 49: 
      $en0139=0;
      var $131=$tmpATH;
      $xmin140=$131;
      var $132=$tmpATH;
      var $133=$width122;
      var $conv144=(($133)|0);
      var $div145=($132)/($conv144);
      $rh1141=$div145;
      $rh2142=2.220446049250313e-16;
      $l123=0;
      label = 50; break;
    case 50: 
      var $134=$l123;
      var $135=$width122;
      var $cmp147=(($134)|0) < (($135)|0);
      if ($cmp147) { label = 51; break; } else { label = 56; break; }
    case 51: 
      var $136=$j;
      var $inc151=((($136)+(1))|0);
      $j=$inc151;
      var $137=$xr;
      var $arrayidx152=(($137+($136<<2))|0);
      var $138=HEAPF32[(($arrayidx152)>>2)];
      $xa150=$138;
      var $139=$xa150;
      var $140=$xa150;
      var $mul154=($139)*($140);
      $x2153=$mul154;
      var $141=$x2153;
      var $142=$en0139;
      var $add155=($142)+($141);
      $en0139=$add155;
      var $143=$x2153;
      var $144=$rh1141;
      var $cmp156=$143 < $144;
      if ($cmp156) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $145=$x2153;
      var $cond161 = $145;label = 54; break;
    case 53: 
      var $146=$rh1141;
      var $cond161 = $146;label = 54; break;
    case 54: 
      var $cond161;
      var $147=$rh2142;
      var $add162=($147)+($cond161);
      $rh2142=$add162;
      label = 55; break;
    case 55: 
      var $148=$l123;
      var $inc164=((($148)+(1))|0);
      $l123=$inc164;
      label = 50; break;
    case 56: 
      var $149=$en0139;
      var $150=$tmpATH;
      var $cmp166=$149 > $150;
      if ($cmp166) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $151=$ath_over;
      var $inc169=((($151)+(1))|0);
      $ath_over=$inc169;
      label = 58; break;
    case 58: 
      var $152=$en0139;
      var $153=$tmpATH;
      var $cmp171=$152 < $153;
      if ($cmp171) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $154=$en0139;
      $rh3143=$154;
      label = 64; break;
    case 60: 
      var $155=$rh2142;
      var $156=$tmpATH;
      var $cmp175=$155 < $156;
      if ($cmp175) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $157=$tmpATH;
      $rh3143=$157;
      label = 63; break;
    case 62: 
      var $158=$rh2142;
      $rh3143=$158;
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $159=$rh3143;
      $xmin140=$159;
      var $160=$b;
      var $161=$sfb;
      var $162=$ratio_addr;
      var $en182=(($162+244)|0);
      var $s183=(($en182+88)|0);
      var $arrayidx184=(($s183+($161)*(12))|0);
      var $arrayidx185=(($arrayidx184+($160<<2))|0);
      var $163=HEAPF32[(($arrayidx185)>>2)];
      $e181=$163;
      var $164=$e181;
      var $cmp186=$164 > 9.999999960041972e-13;
      if ($cmp186) { label = 65; break; } else { label = 68; break; }
    case 65: 
      var $165=$en0139;
      var $166=$b;
      var $167=$sfb;
      var $168=$ratio_addr;
      var $thm190=(($168)|0);
      var $s191=(($thm190+88)|0);
      var $arrayidx192=(($s191+($167)*(12))|0);
      var $arrayidx193=(($arrayidx192+($166<<2))|0);
      var $169=HEAPF32[(($arrayidx193)>>2)];
      var $mul194=($165)*($169);
      var $170=$e181;
      var $div195=($mul194)/($170);
      $x189=$div195;
      var $171=$sfb;
      var $172=$gfc_addr;
      var $sv_qnt196=(($172+84764)|0);
      var $shortfact197=(($sv_qnt196+88)|0);
      var $arrayidx198=(($shortfact197+($171<<2))|0);
      var $173=HEAPF32[(($arrayidx198)>>2)];
      var $174=$x189;
      var $mul199=($174)*($173);
      $x189=$mul199;
      var $175=$xmin140;
      var $176=$x189;
      var $cmp200=$175 < $176;
      if ($cmp200) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $177=$x189;
      $xmin140=$177;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $178=$xmin140;
      var $conv205=$178;
      var $cmp206=$conv205 > 2.220446049250313e-16;
      if ($cmp206) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $179=$xmin140;
      var $conv209=$179;
      var $cond212 = $conv209;label = 71; break;
    case 70: 
      var $cond212 = 2.220446049250313e-16;label = 71; break;
    case 71: 
      var $cond212;
      var $conv213=$cond212;
      $xmin140=$conv213;
      var $180=$en0139;
      var $181=$xmin140;
      var $add214=($181)+(9.9999998245167e-15);
      var $cmp215=$180 > $add214;
      var $cond217=$cmp215 ? 1 : 0;
      var $conv218=(($cond217) & 255);
      var $182=$gsfb;
      var $183=$b;
      var $add219=((($182)+($183))|0);
      var $184=$cod_info_addr;
      var $energy_above_cutoff220=(($184+5212)|0);
      var $arrayidx221=(($energy_above_cutoff220+$add219)|0);
      HEAP8[($arrayidx221)]=$conv218;
      var $185=$xmin140;
      var $186=$pxmin_addr;
      var $incdec_ptr222=(($186+4)|0);
      $pxmin_addr=$incdec_ptr222;
      HEAPF32[(($186)>>2)]=$185;
      label = 72; break;
    case 72: 
      var $187=$b;
      var $inc224=((($187)+(1))|0);
      $b=$inc224;
      label = 48; break;
    case 73: 
      var $188=$cfg;
      var $use_temporal_masking_effect=(($188+76)|0);
      var $189=HEAP32[(($use_temporal_masking_effect)>>2)];
      var $tobool=(($189)|0)!=0;
      if ($tobool) { label = 74; break; } else { label = 79; break; }
    case 74: 
      var $190=$pxmin_addr;
      var $arrayidx227=((($190)-(12))|0);
      var $191=HEAPF32[(($arrayidx227)>>2)];
      var $192=$pxmin_addr;
      var $arrayidx228=((($192)-(8))|0);
      var $193=HEAPF32[(($arrayidx228)>>2)];
      var $cmp229=$191 > $193;
      if ($cmp229) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $194=$pxmin_addr;
      var $arrayidx232=((($194)-(12))|0);
      var $195=HEAPF32[(($arrayidx232)>>2)];
      var $196=$pxmin_addr;
      var $arrayidx233=((($196)-(8))|0);
      var $197=HEAPF32[(($arrayidx233)>>2)];
      var $sub234=($195)-($197);
      var $198=$gfc_addr;
      var $cd_psy=(($198+85796)|0);
      var $199=HEAP32[(($cd_psy)>>2)];
      var $decay=(($199+6496)|0);
      var $200=HEAPF32[(($decay)>>2)];
      var $mul235=($sub234)*($200);
      var $201=$pxmin_addr;
      var $arrayidx236=((($201)-(8))|0);
      var $202=HEAPF32[(($arrayidx236)>>2)];
      var $add237=($202)+($mul235);
      HEAPF32[(($arrayidx236)>>2)]=$add237;
      label = 76; break;
    case 76: 
      var $203=$pxmin_addr;
      var $arrayidx239=((($203)-(8))|0);
      var $204=HEAPF32[(($arrayidx239)>>2)];
      var $205=$pxmin_addr;
      var $arrayidx240=((($205)-(4))|0);
      var $206=HEAPF32[(($arrayidx240)>>2)];
      var $cmp241=$204 > $206;
      if ($cmp241) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $207=$pxmin_addr;
      var $arrayidx244=((($207)-(8))|0);
      var $208=HEAPF32[(($arrayidx244)>>2)];
      var $209=$pxmin_addr;
      var $arrayidx245=((($209)-(4))|0);
      var $210=HEAPF32[(($arrayidx245)>>2)];
      var $sub246=($208)-($210);
      var $211=$gfc_addr;
      var $cd_psy247=(($211+85796)|0);
      var $212=HEAP32[(($cd_psy247)>>2)];
      var $decay248=(($212+6496)|0);
      var $213=HEAPF32[(($decay248)>>2)];
      var $mul249=($sub246)*($213);
      var $214=$pxmin_addr;
      var $arrayidx250=((($214)-(4))|0);
      var $215=HEAPF32[(($arrayidx250)>>2)];
      var $add251=($215)+($mul249);
      HEAPF32[(($arrayidx250)>>2)]=$add251;
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $216=$sfb;
      var $inc255=((($216)+(1))|0);
      $sfb=$inc255;
      var $217=$gsfb;
      var $add256=((($217)+(3))|0);
      $gsfb=$add256;
      label = 46; break;
    case 81: 
      var $218=$ath_over;

      return $218;
    default: assert(0, "bad label: " + label);
  }

}
_calc_xmin["X"]=1;

function _calc_noise($cod_info, $l3_xmin, $distort, $res, $prev_noise) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cod_info_addr;
      var $l3_xmin_addr;
      var $distort_addr;
      var $res_addr;
      var $prev_noise_addr;
      var $sfb;
      var $l;
      var $over;
      var $over_noise_db;
      var $tot_noise_db;
      var $max_noise;
      var $j=__stackBase__;
      var $scalefac;
      var $s;
      var $r_l3_xmin;
      var $distort_;
      var $noise;
      var $step16;
      var $usefullsize;
      var $tmp;
      $cod_info_addr=$cod_info;
      $l3_xmin_addr=$l3_xmin;
      $distort_addr=$distort;
      $res_addr=$res;
      $prev_noise_addr=$prev_noise;
      $over=0;
      $over_noise_db=0;
      $tot_noise_db=0;
      $max_noise=-20;
      HEAP32[(($j)>>2)]=0;
      var $0=$cod_info_addr;
      var $scalefac1=(($0+4608)|0);
      var $arraydecay=(($scalefac1)|0);
      $scalefac=$arraydecay;
      var $1=$res_addr;
      var $over_SSD=(($1+16)|0);
      HEAP32[(($over_SSD)>>2)]=0;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $2=$sfb;
      var $3=$cod_info_addr;
      var $psymax=(($3+4864)|0);
      var $4=HEAP32[(($psymax)>>2)];
      var $cmp=(($2)|0) < (($4)|0);
      if ($cmp) { label = 4; break; } else { label = 35; break; }
    case 4: 
      var $5=$cod_info_addr;
      var $global_gain=(($5+4780)|0);
      var $6=HEAP32[(($global_gain)>>2)];
      var $7=$scalefac;
      var $incdec_ptr=(($7+4)|0);
      $scalefac=$incdec_ptr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$cod_info_addr;
      var $preflag=(($9+4832)|0);
      var $10=HEAP32[(($preflag)>>2)];
      var $tobool=(($10)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$sfb;
      var $arrayidx=((5257016+($11<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $cond = $12;label = 7; break;
    case 6: 
      var $cond = 0;label = 7; break;
    case 7: 
      var $cond;
      var $add=((($8)+($cond))|0);
      var $13=$cod_info_addr;
      var $scalefac_scale=(($13+4836)|0);
      var $14=HEAP32[(($scalefac_scale)>>2)];
      var $add2=((($14)+(1))|0);
      var $shl=$add << $add2;
      var $sub=((($6)-($shl))|0);
      var $15=$sfb;
      var $16=$cod_info_addr;
      var $window=(($16+5028)|0);
      var $arrayidx3=(($window+($15<<2))|0);
      var $17=HEAP32[(($arrayidx3)>>2)];
      var $18=$cod_info_addr;
      var $subblock_gain=(($18+4808)|0);
      var $arrayidx4=(($subblock_gain+($17<<2))|0);
      var $19=HEAP32[(($arrayidx4)>>2)];
      var $mul=((($19<<3))&-1);
      var $sub5=((($sub)-($mul))|0);
      $s=$sub5;
      var $20=$l3_xmin_addr;
      var $incdec_ptr6=(($20+4)|0);
      $l3_xmin_addr=$incdec_ptr6;
      var $21=HEAPF32[(($20)>>2)];
      var $div=(1)/($21);
      $r_l3_xmin=$div;
      $distort_=0;
      $noise=0;
      var $22=$prev_noise_addr;
      var $tobool7=(($22)|0)!=0;
      if ($tobool7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $23=$sfb;
      var $24=$prev_noise_addr;
      var $step=(($24+8)|0);
      var $arrayidx8=(($step+($23<<2))|0);
      var $25=HEAP32[(($arrayidx8)>>2)];
      var $26=$s;
      var $cmp9=(($25)|0)==(($26)|0);
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$sfb;
      var $28=$cod_info_addr;
      var $width=(($28+4872)|0);
      var $arrayidx10=(($width+($27<<2))|0);
      var $29=HEAP32[(($arrayidx10)>>2)];
      var $30=HEAP32[(($j)>>2)];
      var $add11=((($30)+($29))|0);
      HEAP32[(($j)>>2)]=$add11;
      var $31=$r_l3_xmin;
      var $32=$sfb;
      var $33=$prev_noise_addr;
      var $noise12=(($33+164)|0);
      var $arrayidx13=(($noise12+($32<<2))|0);
      var $34=HEAPF32[(($arrayidx13)>>2)];
      var $mul14=($31)*($34);
      $distort_=$mul14;
      var $35=$sfb;
      var $36=$prev_noise_addr;
      var $noise_log=(($36+320)|0);
      var $arrayidx15=(($noise_log+($35<<2))|0);
      var $37=HEAPF32[(($arrayidx15)>>2)];
      $noise=$37;
      label = 23; break;
    case 10: 
      var $38=$s;
      var $add17=((($38)+(116))|0);
      var $arrayidx18=((5289936+($add17<<2))|0);
      var $39=HEAPF32[(($arrayidx18)>>2)];
      $step16=$39;
      var $40=$sfb;
      var $41=$cod_info_addr;
      var $width19=(($41+4872)|0);
      var $arrayidx20=(($width19+($40<<2))|0);
      var $42=HEAP32[(($arrayidx20)>>2)];
      var $shr=$42 >> 1;
      $l=$shr;
      var $43=HEAP32[(($j)>>2)];
      var $44=$sfb;
      var $45=$cod_info_addr;
      var $width21=(($45+4872)|0);
      var $arrayidx22=(($width21+($44<<2))|0);
      var $46=HEAP32[(($arrayidx22)>>2)];
      var $add23=((($43)+($46))|0);
      var $47=$cod_info_addr;
      var $max_nonzero_coeff=(($47+5208)|0);
      var $48=HEAP32[(($max_nonzero_coeff)>>2)];
      var $cmp24=(($add23)|0) > (($48)|0);
      if ($cmp24) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $49=$cod_info_addr;
      var $max_nonzero_coeff26=(($49+5208)|0);
      var $50=HEAP32[(($max_nonzero_coeff26)>>2)];
      var $51=HEAP32[(($j)>>2)];
      var $sub27=((($50)-($51))|0);
      var $add28=((($sub27)+(1))|0);
      $usefullsize=$add28;
      var $52=$usefullsize;
      var $cmp29=(($52)|0) > 0;
      if ($cmp29) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $53=$usefullsize;
      var $shr31=$53 >> 1;
      $l=$shr31;
      label = 14; break;
    case 13: 
      $l=0;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $54=$cod_info_addr;
      var $55=$l;
      var $56=$step16;
      var $call=_calc_noise_core_c($54, $j, $55, $56);
      $noise=$call;
      var $57=$prev_noise_addr;
      var $tobool34=(($57)|0)!=0;
      if ($tobool34) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$s;
      var $59=$sfb;
      var $60=$prev_noise_addr;
      var $step36=(($60+8)|0);
      var $arrayidx37=(($step36+($59<<2))|0);
      HEAP32[(($arrayidx37)>>2)]=$58;
      var $61=$noise;
      var $62=$sfb;
      var $63=$prev_noise_addr;
      var $noise38=(($63+164)|0);
      var $arrayidx39=(($noise38+($62<<2))|0);
      HEAPF32[(($arrayidx39)>>2)]=$61;
      label = 17; break;
    case 17: 
      var $64=$r_l3_xmin;
      var $65=$noise;
      var $mul41=($64)*($65);
      $distort_=$mul41;
      var $66=$distort_;
      var $cmp42=$66 > 9.999999682655225e-21;
      if ($cmp42) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $67=$distort_;
      var $cond46 = $67;label = 20; break;
    case 19: 
      var $cond46 = 9.999999682655225e-21;label = 20; break;
    case 20: 
      var $cond46;
      var $call47=_fast_log2($cond46);
      var $conv=$call47;
      var $mul48=($conv)*(0.30102999566398114);
      var $conv49=$mul48;
      $noise=$conv49;
      var $68=$prev_noise_addr;
      var $tobool50=(($68)|0)!=0;
      if ($tobool50) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $69=$noise;
      var $70=$sfb;
      var $71=$prev_noise_addr;
      var $noise_log52=(($71+320)|0);
      var $arrayidx53=(($noise_log52+($70<<2))|0);
      HEAPF32[(($arrayidx53)>>2)]=$69;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $72=$distort_;
      var $73=$distort_addr;
      var $incdec_ptr56=(($73+4)|0);
      $distort_addr=$incdec_ptr56;
      HEAPF32[(($73)>>2)]=$72;
      var $74=$prev_noise_addr;
      var $tobool57=(($74)|0)!=0;
      if ($tobool57) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $75=$cod_info_addr;
      var $global_gain59=(($75+4780)|0);
      var $76=HEAP32[(($global_gain59)>>2)];
      var $77=$prev_noise_addr;
      var $global_gain60=(($77)|0);
      HEAP32[(($global_gain60)>>2)]=$76;
      label = 25; break;
    case 25: 
      var $78=$noise;
      var $79=$tot_noise_db;
      var $add62=($79)+($78);
      $tot_noise_db=$add62;
      var $80=$noise;
      var $conv63=$80;
      var $cmp64=$conv63 > 0;
      if ($cmp64) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $81=$noise;
      var $mul67=($81)*(10);
      var $conv68=$mul67;
      var $add69=($conv68)+(0.5);
      var $conv70=(($add69)&-1);
      var $cmp71=(($conv70)|0) > 1;
      if ($cmp71) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $82=$noise;
      var $mul74=($82)*(10);
      var $conv75=$mul74;
      var $add76=($conv75)+(0.5);
      var $conv77=(($add76)&-1);
      var $cond80 = $conv77;label = 29; break;
    case 28: 
      var $cond80 = 1;label = 29; break;
    case 29: 
      var $cond80;
      $tmp=$cond80;
      var $83=$tmp;
      var $84=$tmp;
      var $mul81=((($83)*($84))&-1);
      var $85=$res_addr;
      var $over_SSD82=(($85+16)|0);
      var $86=HEAP32[(($over_SSD82)>>2)];
      var $add83=((($86)+($mul81))|0);
      HEAP32[(($over_SSD82)>>2)]=$add83;
      var $87=$over;
      var $inc=((($87)+(1))|0);
      $over=$inc;
      var $88=$noise;
      var $89=$over_noise_db;
      var $add84=($89)+($88);
      $over_noise_db=$add84;
      label = 30; break;
    case 30: 
      var $90=$max_noise;
      var $91=$noise;
      var $cmp86=$90 > $91;
      if ($cmp86) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $92=$max_noise;
      var $cond91 = $92;label = 33; break;
    case 32: 
      var $93=$noise;
      var $cond91 = $93;label = 33; break;
    case 33: 
      var $cond91;
      $max_noise=$cond91;
      label = 34; break;
    case 34: 
      var $94=$sfb;
      var $inc92=((($94)+(1))|0);
      $sfb=$inc92;
      label = 3; break;
    case 35: 
      var $95=$over;
      var $96=$res_addr;
      var $over_count=(($96+12)|0);
      HEAP32[(($over_count)>>2)]=$95;
      var $97=$tot_noise_db;
      var $98=$res_addr;
      var $tot_noise=(($98+4)|0);
      HEAPF32[(($tot_noise)>>2)]=$97;
      var $99=$over_noise_db;
      var $100=$res_addr;
      var $over_noise=(($100)|0);
      HEAPF32[(($over_noise)>>2)]=$99;
      var $101=$max_noise;
      var $102=$res_addr;
      var $max_noise93=(($102+8)|0);
      HEAPF32[(($max_noise93)>>2)]=$101;
      var $103=$over;
      STACKTOP = __stackBase__;
      return $103;
    default: assert(0, "bad label: " + label);
  }

}
_calc_noise["X"]=1;

function _calc_noise_core_c($cod_info, $startline, $l, $step) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cod_info_addr;
      var $startline_addr;
      var $l_addr;
      var $step_addr;
      var $noise;
      var $j;
      var $ix;
      var $temp;
      var $ix01=__stackBase__;
      var $temp14;
      var $temp42;
      $cod_info_addr=$cod_info;
      $startline_addr=$startline;
      $l_addr=$l;
      $step_addr=$step;
      $noise=0;
      var $0=$startline_addr;
      var $1=HEAP32[(($0)>>2)];
      $j=$1;
      var $2=$cod_info_addr;
      var $l3_enc=(($2+2304)|0);
      var $arraydecay=(($l3_enc)|0);
      $ix=$arraydecay;
      var $3=$j;
      var $4=$cod_info_addr;
      var $count1=(($4+4776)|0);
      var $5=HEAP32[(($count1)>>2)];
      var $cmp=(($3)|0) > (($5)|0);
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $6=$l_addr;
      var $dec=((($6)-(1))|0);
      $l_addr=$dec;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$j;
      var $8=$cod_info_addr;
      var $xr=(($8)|0);
      var $arrayidx=(($xr+($7<<2))|0);
      var $9=HEAPF32[(($arrayidx)>>2)];
      $temp=$9;
      var $10=$j;
      var $inc=((($10)+(1))|0);
      $j=$inc;
      var $11=$temp;
      var $12=$temp;
      var $mul=($11)*($12);
      var $13=$noise;
      var $add=($13)+($mul);
      $noise=$add;
      var $14=$j;
      var $15=$cod_info_addr;
      var $xr1=(($15)|0);
      var $arrayidx2=(($xr1+($14<<2))|0);
      var $16=HEAPF32[(($arrayidx2)>>2)];
      $temp=$16;
      var $17=$j;
      var $inc3=((($17)+(1))|0);
      $j=$inc3;
      var $18=$temp;
      var $19=$temp;
      var $mul4=($18)*($19);
      var $20=$noise;
      var $add5=($20)+($mul4);
      $noise=$add5;
      label = 4; break;
    case 6: 
      label = 17; break;
    case 7: 
      var $21=$j;
      var $22=$cod_info_addr;
      var $big_values=(($22+4772)|0);
      var $23=HEAP32[(($big_values)>>2)];
      var $cmp6=(($21)|0) > (($23)|0);
      if ($cmp6) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $arrayidx8=(($ix01)|0);
      HEAPF32[(($arrayidx8)>>2)]=0;
      var $24=$step_addr;
      var $arrayidx9=(($ix01+4)|0);
      HEAPF32[(($arrayidx9)>>2)]=$24;
      label = 9; break;
    case 9: 
      var $25=$l_addr;
      var $dec11=((($25)-(1))|0);
      $l_addr=$dec11;
      var $tobool12=(($25)|0)!=0;
      if ($tobool12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $26=$j;
      var $27=$cod_info_addr;
      var $xr15=(($27)|0);
      var $arrayidx16=(($xr15+($26<<2))|0);
      var $28=HEAPF32[(($arrayidx16)>>2)];
      var $conv=$28;
      var $call=Math.abs($conv);
      var $29=$j;
      var $30=$ix;
      var $arrayidx17=(($30+($29<<2))|0);
      var $31=HEAP32[(($arrayidx17)>>2)];
      var $arrayidx18=(($ix01+($31<<2))|0);
      var $32=HEAPF32[(($arrayidx18)>>2)];
      var $conv19=$32;
      var $sub=($call)-($conv19);
      var $conv20=$sub;
      $temp14=$conv20;
      var $33=$j;
      var $inc21=((($33)+(1))|0);
      $j=$inc21;
      var $34=$temp14;
      var $35=$temp14;
      var $mul22=($34)*($35);
      var $36=$noise;
      var $add23=($36)+($mul22);
      $noise=$add23;
      var $37=$j;
      var $38=$cod_info_addr;
      var $xr24=(($38)|0);
      var $arrayidx25=(($xr24+($37<<2))|0);
      var $39=HEAPF32[(($arrayidx25)>>2)];
      var $conv26=$39;
      var $call27=Math.abs($conv26);
      var $40=$j;
      var $41=$ix;
      var $arrayidx28=(($41+($40<<2))|0);
      var $42=HEAP32[(($arrayidx28)>>2)];
      var $arrayidx29=(($ix01+($42<<2))|0);
      var $43=HEAPF32[(($arrayidx29)>>2)];
      var $conv30=$43;
      var $sub31=($call27)-($conv30);
      var $conv32=$sub31;
      $temp14=$conv32;
      var $44=$j;
      var $inc33=((($44)+(1))|0);
      $j=$inc33;
      var $45=$temp14;
      var $46=$temp14;
      var $mul34=($45)*($46);
      var $47=$noise;
      var $add35=($47)+($mul34);
      $noise=$add35;
      label = 9; break;
    case 11: 
      label = 16; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $48=$l_addr;
      var $dec39=((($48)-(1))|0);
      $l_addr=$dec39;
      var $tobool40=(($48)|0)!=0;
      if ($tobool40) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $49=$j;
      var $50=$cod_info_addr;
      var $xr43=(($50)|0);
      var $arrayidx44=(($xr43+($49<<2))|0);
      var $51=HEAPF32[(($arrayidx44)>>2)];
      var $conv45=$51;
      var $call46=Math.abs($conv45);
      var $52=$j;
      var $53=$ix;
      var $arrayidx47=(($53+($52<<2))|0);
      var $54=HEAP32[(($arrayidx47)>>2)];
      var $arrayidx48=((5257104+($54<<2))|0);
      var $55=HEAPF32[(($arrayidx48)>>2)];
      var $56=$step_addr;
      var $mul49=($55)*($56);
      var $conv50=$mul49;
      var $sub51=($call46)-($conv50);
      var $conv52=$sub51;
      $temp42=$conv52;
      var $57=$j;
      var $inc53=((($57)+(1))|0);
      $j=$inc53;
      var $58=$temp42;
      var $59=$temp42;
      var $mul54=($58)*($59);
      var $60=$noise;
      var $add55=($60)+($mul54);
      $noise=$add55;
      var $61=$j;
      var $62=$cod_info_addr;
      var $xr56=(($62)|0);
      var $arrayidx57=(($xr56+($61<<2))|0);
      var $63=HEAPF32[(($arrayidx57)>>2)];
      var $conv58=$63;
      var $call59=Math.abs($conv58);
      var $64=$j;
      var $65=$ix;
      var $arrayidx60=(($65+($64<<2))|0);
      var $66=HEAP32[(($arrayidx60)>>2)];
      var $arrayidx61=((5257104+($66<<2))|0);
      var $67=HEAPF32[(($arrayidx61)>>2)];
      var $68=$step_addr;
      var $mul62=($67)*($68);
      var $conv63=$mul62;
      var $sub64=($call59)-($conv63);
      var $conv65=$sub64;
      $temp42=$conv65;
      var $69=$j;
      var $inc66=((($69)+(1))|0);
      $j=$inc66;
      var $70=$temp42;
      var $71=$temp42;
      var $mul67=($70)*($71);
      var $72=$noise;
      var $add68=($72)+($mul67);
      $noise=$add68;
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $73=$j;
      var $74=$startline_addr;
      HEAP32[(($74)>>2)]=$73;
      var $75=$noise;
      STACKTOP = __stackBase__;
      return $75;
    default: assert(0, "bad label: " + label);
  }

}
_calc_noise_core_c["X"]=1;

function _set_frame_pinfo($gfc, $ratio) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 156)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $ratio_addr;
      var $cfg;
      var $ch;
      var $gr;
      var $cod_info;
      var $scalefac_sav=__stackBase__;
      var $sfb;
      $gfc_addr=$gfc;
      $ratio_addr=$ratio;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      $gr=0;
      label = 3; break;
    case 3: 
      var $1=$gr;
      var $2=$cfg;
      var $mode_gr=(($2+60)|0);
      var $3=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($1)|0) < (($3)|0);
      if ($cmp) { label = 4; break; } else { label = 18; break; }
    case 4: 
      $ch=0;
      label = 5; break;
    case 5: 
      var $4=$ch;
      var $5=$cfg;
      var $channels_out=(($5+56)|0);
      var $6=HEAP32[(($channels_out)>>2)];
      var $cmp3=(($4)|0) < (($6)|0);
      if ($cmp3) { label = 6; break; } else { label = 16; break; }
    case 6: 
      var $7=$ch;
      var $8=$gr;
      var $9=$gfc_addr;
      var $l3_side=(($9+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx=(($tt+($8)*(10504))|0);
      var $arrayidx5=(($arrayidx+($7)*(5252))|0);
      $cod_info=$arrayidx5;
      var $10=$scalefac_sav;
      var $11=$cod_info;
      var $scalefac=(($11+4608)|0);
      var $12=$scalefac;
      assert(156 % 1 === 0);for (var $$src = $12>>2, $$dest = $10>>2, $$stop = $$src + 39; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $13=$gr;
      var $cmp6=(($13)|0)==1;
      if ($cmp6) { label = 7; break; } else { label = 14; break; }
    case 7: 
      $sfb=0;
      label = 8; break;
    case 8: 
      var $14=$sfb;
      var $15=$cod_info;
      var $sfb_lmax=(($15+4848)|0);
      var $16=HEAP32[(($sfb_lmax)>>2)];
      var $cmp8=(($14)|0) < (($16)|0);
      if ($cmp8) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $17=$sfb;
      var $18=$cod_info;
      var $scalefac10=(($18+4608)|0);
      var $arrayidx11=(($scalefac10+($17<<2))|0);
      var $19=HEAP32[(($arrayidx11)>>2)];
      var $cmp12=(($19)|0) < 0;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $20=$sfb;
      var $21=$ch;
      var $22=$gfc_addr;
      var $l3_side14=(($22+304)|0);
      var $tt15=(($l3_side14)|0);
      var $arrayidx16=(($tt15)|0);
      var $arrayidx17=(($arrayidx16+($21)*(5252))|0);
      var $scalefac18=(($arrayidx17+4608)|0);
      var $arrayidx19=(($scalefac18+($20<<2))|0);
      var $23=HEAP32[(($arrayidx19)>>2)];
      var $24=$sfb;
      var $25=$cod_info;
      var $scalefac20=(($25+4608)|0);
      var $arrayidx21=(($scalefac20+($24<<2))|0);
      HEAP32[(($arrayidx21)>>2)]=$23;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $26=$sfb;
      var $inc=((($26)+(1))|0);
      $sfb=$inc;
      label = 8; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $27=$gfc_addr;
      var $28=$cod_info;
      var $29=$ch;
      var $30=$gr;
      var $31=$ratio_addr;
      var $arrayidx23=(($31+($30)*(976))|0);
      var $arrayidx24=(($arrayidx23+($29)*(488))|0);
      var $32=$gr;
      var $33=$ch;
      _set_pinfo($27, $28, $arrayidx24, $32, $33);
      var $34=$cod_info;
      var $scalefac25=(($34+4608)|0);
      var $35=$scalefac25;
      var $36=$scalefac_sav;
      assert(156 % 1 === 0);for (var $$src = $36>>2, $$dest = $35>>2, $$stop = $$src + 39; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 15; break;
    case 15: 
      var $37=$ch;
      var $inc27=((($37)+(1))|0);
      $ch=$inc27;
      label = 5; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $38=$gr;
      var $inc30=((($38)+(1))|0);
      $gr=$inc30;
      label = 3; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_set_frame_pinfo["X"]=1;

function _set_pinfo($gfc, $cod_info, $ratio, $gr, $ch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 336)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $ratio_addr;
      var $gr_addr;
      var $ch_addr;
      var $cfg;
      var $sfb;
      var $sfb2;
      var $j;
      var $i;
      var $l;
      var $start;
      var $end;
      var $bw;
      var $en0;
      var $en1;
      var $ifqstep;
      var $scalefac;
      var $l3_xmin=__stackBase__;
      var $xfsf=(__stackBase__)+(156);
      var $noise=(__stackBase__)+(312);
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $ratio_addr=$ratio;
      $gr_addr=$gr;
      $ch_addr=$ch;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$cod_info_addr;
      var $scalefac_scale=(($1+4836)|0);
      var $2=HEAP32[(($scalefac_scale)>>2)];
      var $cmp=(($2)|0)==0;
      var $cond=$cmp ? 0.5 : 1;
      var $conv=$cond;
      $ifqstep=$conv;
      var $3=$cod_info_addr;
      var $scalefac2=(($3+4608)|0);
      var $arraydecay=(($scalefac2)|0);
      $scalefac=$arraydecay;
      var $4=$gfc_addr;
      var $5=$ratio_addr;
      var $6=$cod_info_addr;
      var $arraydecay3=(($l3_xmin)|0);
      var $call=_calc_xmin($4, $5, $6, $arraydecay3);
      var $7=$cod_info_addr;
      var $arraydecay4=(($l3_xmin)|0);
      var $arraydecay5=(($xfsf)|0);
      var $call6=_calc_noise($7, $arraydecay4, $arraydecay5, $noise, 0);
      $j=0;
      var $8=$cod_info_addr;
      var $sfb_lmax=(($8+4848)|0);
      var $9=HEAP32[(($sfb_lmax)>>2)];
      $sfb2=$9;
      var $10=$cod_info_addr;
      var $block_type=(($10+4788)|0);
      var $11=HEAP32[(($block_type)>>2)];
      var $cmp7=(($11)|0)!=2;
      if ($cmp7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $12=$cod_info_addr;
      var $mixed_block_flag=(($12+4792)|0);
      var $13=HEAP32[(($mixed_block_flag)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $sfb2=22;
      label = 5; break;
    case 5: 
      $sfb=0;
      label = 6; break;
    case 6: 
      var $14=$sfb;
      var $15=$sfb2;
      var $cmp9=(($14)|0) < (($15)|0);
      if ($cmp9) { label = 7; break; } else { label = 25; break; }
    case 7: 
      var $16=$sfb;
      var $17=$gfc_addr;
      var $scalefac_band=(($17+21360)|0);
      var $l11=(($scalefac_band)|0);
      var $arrayidx=(($l11+($16<<2))|0);
      var $18=HEAP32[(($arrayidx)>>2)];
      $start=$18;
      var $19=$sfb;
      var $add=((($19)+(1))|0);
      var $20=$gfc_addr;
      var $scalefac_band12=(($20+21360)|0);
      var $l13=(($scalefac_band12)|0);
      var $arrayidx14=(($l13+($add<<2))|0);
      var $21=HEAP32[(($arrayidx14)>>2)];
      $end=$21;
      var $22=$end;
      var $23=$start;
      var $sub=((($22)-($23))|0);
      $bw=$sub;
      $en0=0;
      label = 8; break;
    case 8: 
      var $24=$j;
      var $25=$end;
      var $cmp16=(($24)|0) < (($25)|0);
      if ($cmp16) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $26=$j;
      var $27=$cod_info_addr;
      var $xr=(($27)|0);
      var $arrayidx19=(($xr+($26<<2))|0);
      var $28=HEAPF32[(($arrayidx19)>>2)];
      var $29=$j;
      var $30=$cod_info_addr;
      var $xr20=(($30)|0);
      var $arrayidx21=(($xr20+($29<<2))|0);
      var $31=HEAPF32[(($arrayidx21)>>2)];
      var $mul=($28)*($31);
      var $32=$en0;
      var $add22=($32)+($mul);
      $en0=$add22;
      label = 10; break;
    case 10: 
      var $33=$j;
      var $inc=((($33)+(1))|0);
      $j=$inc;
      label = 8; break;
    case 11: 
      var $34=$bw;
      var $conv23=(($34)|0);
      var $35=$en0;
      var $div=($35)/($conv23);
      $en0=$div;
      $en1=999999986991104;
      var $36=$en1;
      var $37=$en0;
      var $mul24=($36)*($37);
      var $conv25=$mul24;
      var $38=$sfb;
      var $39=$ch_addr;
      var $40=$gr_addr;
      var $41=$gfc_addr;
      var $pinfo=(($41+85800)|0);
      var $42=HEAP32[(($pinfo)>>2)];
      var $en=(($42+190708)|0);
      var $arrayidx26=(($en+($40)*(704))|0);
      var $arrayidx27=(($arrayidx26+($39)*(176))|0);
      var $arrayidx28=(($arrayidx27+($38<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv25,HEAP32[(($arrayidx28)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx28)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $43=$en1;
      var $44=$sfb;
      var $arrayidx29=(($l3_xmin+($44<<2))|0);
      var $45=HEAPF32[(($arrayidx29)>>2)];
      var $mul30=($43)*($45);
      var $46=$sfb;
      var $arrayidx31=(($xfsf+($46<<2))|0);
      var $47=HEAPF32[(($arrayidx31)>>2)];
      var $mul32=($mul30)*($47);
      var $48=$bw;
      var $conv33=(($48)|0);
      var $div34=($mul32)/($conv33);
      var $conv35=$div34;
      var $49=$sfb;
      var $50=$ch_addr;
      var $51=$gr_addr;
      var $52=$gfc_addr;
      var $pinfo36=(($52+85800)|0);
      var $53=HEAP32[(($pinfo36)>>2)];
      var $xfsf37=(($53+201204)|0);
      var $arrayidx38=(($xfsf37+($51)*(352))|0);
      var $arrayidx39=(($arrayidx38+($50)*(176))|0);
      var $arrayidx40=(($arrayidx39+($49<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv35,HEAP32[(($arrayidx40)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx40)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $54=$sfb;
      var $55=$ratio_addr;
      var $en41=(($55+244)|0);
      var $l42=(($en41)|0);
      var $arrayidx43=(($l42+($54<<2))|0);
      var $56=HEAPF32[(($arrayidx43)>>2)];
      var $cmp44=$56 > 0;
      if ($cmp44) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $57=$cfg;
      var $ATHonly=(($57+196)|0);
      var $58=HEAP32[(($ATHonly)>>2)];
      var $tobool47=(($58)|0)!=0;
      if ($tobool47) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $59=$en0;
      var $60=$sfb;
      var $61=$ratio_addr;
      var $en49=(($61+244)|0);
      var $l50=(($en49)|0);
      var $arrayidx51=(($l50+($60<<2))|0);
      var $62=HEAPF32[(($arrayidx51)>>2)];
      var $div52=($59)/($62);
      $en0=$div52;
      label = 15; break;
    case 14: 
      $en0=0;
      label = 15; break;
    case 15: 
      var $63=$en1;
      var $64=$en0;
      var $65=$sfb;
      var $66=$ratio_addr;
      var $thm=(($66)|0);
      var $l54=(($thm)|0);
      var $arrayidx55=(($l54+($65<<2))|0);
      var $67=HEAPF32[(($arrayidx55)>>2)];
      var $mul56=($64)*($67);
      var $68=$sfb;
      var $69=$gfc_addr;
      var $ATH=(($69+85792)|0);
      var $70=HEAP32[(($ATH)>>2)];
      var $l57=(($70+24)|0);
      var $arrayidx58=(($l57+($68<<2))|0);
      var $71=HEAPF32[(($arrayidx58)>>2)];
      var $cmp59=$mul56 > $71;
      if ($cmp59) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $72=$en0;
      var $73=$sfb;
      var $74=$ratio_addr;
      var $thm61=(($74)|0);
      var $l62=(($thm61)|0);
      var $arrayidx63=(($l62+($73<<2))|0);
      var $75=HEAPF32[(($arrayidx63)>>2)];
      var $mul64=($72)*($75);
      var $cond68 = $mul64;label = 18; break;
    case 17: 
      var $76=$sfb;
      var $77=$gfc_addr;
      var $ATH65=(($77+85792)|0);
      var $78=HEAP32[(($ATH65)>>2)];
      var $l66=(($78+24)|0);
      var $arrayidx67=(($l66+($76<<2))|0);
      var $79=HEAPF32[(($arrayidx67)>>2)];
      var $cond68 = $79;label = 18; break;
    case 18: 
      var $cond68;
      var $mul69=($63)*($cond68);
      var $conv70=$mul69;
      var $80=$sfb;
      var $81=$ch_addr;
      var $82=$gr_addr;
      var $83=$gfc_addr;
      var $pinfo71=(($83+85800)|0);
      var $84=HEAP32[(($pinfo71)>>2)];
      var $thr=(($84+189300)|0);
      var $arrayidx72=(($thr+($82)*(704))|0);
      var $arrayidx73=(($arrayidx72+($81)*(176))|0);
      var $arrayidx74=(($arrayidx73+($80<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv70,HEAP32[(($arrayidx74)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx74)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $85=$sfb;
      var $86=$ch_addr;
      var $87=$gr_addr;
      var $88=$gfc_addr;
      var $pinfo75=(($88+85800)|0);
      var $89=HEAP32[(($pinfo75)>>2)];
      var $LAMEsfb=(($89+199156)|0);
      var $arrayidx76=(($LAMEsfb+($87)*(352))|0);
      var $arrayidx77=(($arrayidx76+($86)*(176))|0);
      var $arrayidx78=(($arrayidx77+($85<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx78)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx78)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $90=$cod_info_addr;
      var $preflag=(($90+4832)|0);
      var $91=HEAP32[(($preflag)>>2)];
      var $tobool79=(($91)|0)!=0;
      if ($tobool79) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $92=$sfb;
      var $cmp81=(($92)|0) >= 11;
      if ($cmp81) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $93=$ifqstep;
      var $sub84=(-$93);
      var $94=$sfb;
      var $arrayidx85=((5257016+($94<<2))|0);
      var $95=HEAP32[(($arrayidx85)>>2)];
      var $conv86=(($95)|0);
      var $mul87=($sub84)*($conv86);
      var $conv88=$mul87;
      var $96=$sfb;
      var $97=$ch_addr;
      var $98=$gr_addr;
      var $99=$gfc_addr;
      var $pinfo89=(($99+85800)|0);
      var $100=HEAP32[(($pinfo89)>>2)];
      var $LAMEsfb90=(($100+199156)|0);
      var $arrayidx91=(($LAMEsfb90+($98)*(352))|0);
      var $arrayidx92=(($arrayidx91+($97)*(176))|0);
      var $arrayidx93=(($arrayidx92+($96<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv88,HEAP32[(($arrayidx93)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx93)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 21; break;
    case 21: 
      var $101=$sfb;
      var $cmp95=(($101)|0) < 21;
      if ($cmp95) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $102=$ifqstep;
      var $103=$sfb;
      var $104=$scalefac;
      var $arrayidx98=(($104+($103<<2))|0);
      var $105=HEAP32[(($arrayidx98)>>2)];
      var $conv99=(($105)|0);
      var $mul100=($102)*($conv99);
      var $conv101=$mul100;
      var $106=$sfb;
      var $107=$ch_addr;
      var $108=$gr_addr;
      var $109=$gfc_addr;
      var $pinfo102=(($109+85800)|0);
      var $110=HEAP32[(($pinfo102)>>2)];
      var $LAMEsfb103=(($110+199156)|0);
      var $arrayidx104=(($LAMEsfb103+($108)*(352))|0);
      var $arrayidx105=(($arrayidx104+($107)*(176))|0);
      var $arrayidx106=(($arrayidx105+($106<<3))|0);
      var $111=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx106)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx106)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub107=($111)-($conv101);
      (HEAPF64[(tempDoublePtr)>>3]=$sub107,HEAP32[(($arrayidx106)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx106)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $112=$sfb;
      var $inc110=((($112)+(1))|0);
      $sfb=$inc110;
      label = 6; break;
    case 25: 
      var $113=$cod_info_addr;
      var $block_type112=(($113+4788)|0);
      var $114=HEAP32[(($block_type112)>>2)];
      var $cmp113=(($114)|0)==2;
      if ($cmp113) { label = 26; break; } else { label = 53; break; }
    case 26: 
      var $115=$sfb;
      $sfb2=$115;
      var $116=$cod_info_addr;
      var $sfb_smin=(($116+4852)|0);
      var $117=HEAP32[(($sfb_smin)>>2)];
      $sfb=$117;
      label = 27; break;
    case 27: 
      var $118=$sfb;
      var $cmp117=(($118)|0) < 13;
      if ($cmp117) { label = 28; break; } else { label = 52; break; }
    case 28: 
      var $119=$sfb;
      var $120=$gfc_addr;
      var $scalefac_band120=(($120+21360)|0);
      var $s=(($scalefac_band120+92)|0);
      var $arrayidx121=(($s+($119<<2))|0);
      var $121=HEAP32[(($arrayidx121)>>2)];
      $start=$121;
      var $122=$sfb;
      var $add122=((($122)+(1))|0);
      var $123=$gfc_addr;
      var $scalefac_band123=(($123+21360)|0);
      var $s124=(($scalefac_band123+92)|0);
      var $arrayidx125=(($s124+($add122<<2))|0);
      var $124=HEAP32[(($arrayidx125)>>2)];
      $end=$124;
      var $125=$end;
      var $126=$start;
      var $sub126=((($125)-($126))|0);
      $bw=$sub126;
      $i=0;
      label = 29; break;
    case 29: 
      var $127=$i;
      var $cmp128=(($127)|0) < 3;
      if ($cmp128) { label = 30; break; } else { label = 50; break; }
    case 30: 
      $en0=0;
      var $128=$start;
      $l=$128;
      label = 31; break;
    case 31: 
      var $129=$l;
      var $130=$end;
      var $cmp132=(($129)|0) < (($130)|0);
      if ($cmp132) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $131=$j;
      var $132=$cod_info_addr;
      var $xr135=(($132)|0);
      var $arrayidx136=(($xr135+($131<<2))|0);
      var $133=HEAPF32[(($arrayidx136)>>2)];
      var $134=$j;
      var $135=$cod_info_addr;
      var $xr137=(($135)|0);
      var $arrayidx138=(($xr137+($134<<2))|0);
      var $136=HEAPF32[(($arrayidx138)>>2)];
      var $mul139=($133)*($136);
      var $137=$en0;
      var $add140=($137)+($mul139);
      $en0=$add140;
      var $138=$j;
      var $inc141=((($138)+(1))|0);
      $j=$inc141;
      label = 33; break;
    case 33: 
      var $139=$l;
      var $inc143=((($139)+(1))|0);
      $l=$inc143;
      label = 31; break;
    case 34: 
      var $140=$en0;
      var $141=$bw;
      var $conv145=(($141)|0);
      var $div146=($140)/($conv145);
      var $conv147=$div146;
      var $cmp148=$conv147 > 1e-20;
      if ($cmp148) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $142=$en0;
      var $143=$bw;
      var $conv151=(($143)|0);
      var $div152=($142)/($conv151);
      var $conv153=$div152;
      var $cond156 = $conv153;label = 37; break;
    case 36: 
      var $cond156 = 1e-20;label = 37; break;
    case 37: 
      var $cond156;
      var $conv157=$cond156;
      $en0=$conv157;
      $en1=999999986991104;
      var $144=$en1;
      var $145=$en0;
      var $mul158=($144)*($145);
      var $conv159=$mul158;
      var $146=$sfb;
      var $mul160=((($146)*(3))&-1);
      var $147=$i;
      var $add161=((($mul160)+($147))|0);
      var $148=$ch_addr;
      var $149=$gr_addr;
      var $150=$gfc_addr;
      var $pinfo162=(($150+85800)|0);
      var $151=HEAP32[(($pinfo162)>>2)];
      var $en_s=(($151+194612)|0);
      var $arrayidx163=(($en_s+($149)*(1248))|0);
      var $arrayidx164=(($arrayidx163+($148)*(312))|0);
      var $arrayidx165=(($arrayidx164+($add161<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv159,HEAP32[(($arrayidx165)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx165)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $152=$en1;
      var $153=$sfb2;
      var $arrayidx166=(($l3_xmin+($153<<2))|0);
      var $154=HEAPF32[(($arrayidx166)>>2)];
      var $mul167=($152)*($154);
      var $155=$sfb2;
      var $arrayidx168=(($xfsf+($155<<2))|0);
      var $156=HEAPF32[(($arrayidx168)>>2)];
      var $mul169=($mul167)*($156);
      var $157=$bw;
      var $conv170=(($157)|0);
      var $div171=($mul169)/($conv170);
      var $conv172=$div171;
      var $158=$sfb;
      var $mul173=((($158)*(3))&-1);
      var $159=$i;
      var $add174=((($mul173)+($159))|0);
      var $160=$ch_addr;
      var $161=$gr_addr;
      var $162=$gfc_addr;
      var $pinfo175=(($162+85800)|0);
      var $163=HEAP32[(($pinfo175)>>2)];
      var $xfsf_s=(($163+201908)|0);
      var $arrayidx176=(($xfsf_s+($161)*(624))|0);
      var $arrayidx177=(($arrayidx176+($160)*(312))|0);
      var $arrayidx178=(($arrayidx177+($add174<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv172,HEAP32[(($arrayidx178)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx178)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $164=$i;
      var $165=$sfb;
      var $166=$ratio_addr;
      var $en179=(($166+244)|0);
      var $s180=(($en179+88)|0);
      var $arrayidx181=(($s180+($165)*(12))|0);
      var $arrayidx182=(($arrayidx181+($164<<2))|0);
      var $167=HEAPF32[(($arrayidx182)>>2)];
      var $cmp183=$167 > 0;
      if ($cmp183) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $168=$en0;
      var $169=$i;
      var $170=$sfb;
      var $171=$ratio_addr;
      var $en186=(($171+244)|0);
      var $s187=(($en186+88)|0);
      var $arrayidx188=(($s187+($170)*(12))|0);
      var $arrayidx189=(($arrayidx188+($169<<2))|0);
      var $172=HEAPF32[(($arrayidx189)>>2)];
      var $div190=($168)/($172);
      $en0=$div190;
      label = 40; break;
    case 39: 
      $en0=0;
      label = 40; break;
    case 40: 
      var $173=$cfg;
      var $ATHonly193=(($173+196)|0);
      var $174=HEAP32[(($ATHonly193)>>2)];
      var $tobool194=(($174)|0)!=0;
      if ($tobool194) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $175=$cfg;
      var $ATHshort=(($175+200)|0);
      var $176=HEAP32[(($ATHshort)>>2)];
      var $tobool195=(($176)|0)!=0;
      if ($tobool195) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $en0=0;
      label = 43; break;
    case 43: 
      var $177=$en1;
      var $178=$en0;
      var $179=$i;
      var $180=$sfb;
      var $181=$ratio_addr;
      var $thm198=(($181)|0);
      var $s199=(($thm198+88)|0);
      var $arrayidx200=(($s199+($180)*(12))|0);
      var $arrayidx201=(($arrayidx200+($179<<2))|0);
      var $182=HEAPF32[(($arrayidx201)>>2)];
      var $mul202=($178)*($182);
      var $183=$sfb;
      var $184=$gfc_addr;
      var $ATH203=(($184+85792)|0);
      var $185=HEAP32[(($ATH203)>>2)];
      var $s204=(($185+112)|0);
      var $arrayidx205=(($s204+($183<<2))|0);
      var $186=HEAPF32[(($arrayidx205)>>2)];
      var $cmp206=$mul202 > $186;
      if ($cmp206) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $187=$en0;
      var $188=$i;
      var $189=$sfb;
      var $190=$ratio_addr;
      var $thm209=(($190)|0);
      var $s210=(($thm209+88)|0);
      var $arrayidx211=(($s210+($189)*(12))|0);
      var $arrayidx212=(($arrayidx211+($188<<2))|0);
      var $191=HEAPF32[(($arrayidx212)>>2)];
      var $mul213=($187)*($191);
      var $cond219 = $mul213;label = 46; break;
    case 45: 
      var $192=$sfb;
      var $193=$gfc_addr;
      var $ATH215=(($193+85792)|0);
      var $194=HEAP32[(($ATH215)>>2)];
      var $s216=(($194+112)|0);
      var $arrayidx217=(($s216+($192<<2))|0);
      var $195=HEAPF32[(($arrayidx217)>>2)];
      var $cond219 = $195;label = 46; break;
    case 46: 
      var $cond219;
      var $mul220=($177)*($cond219);
      var $conv221=$mul220;
      var $196=$sfb;
      var $mul222=((($196)*(3))&-1);
      var $197=$i;
      var $add223=((($mul222)+($197))|0);
      var $198=$ch_addr;
      var $199=$gr_addr;
      var $200=$gfc_addr;
      var $pinfo224=(($200+85800)|0);
      var $201=HEAP32[(($pinfo224)>>2)];
      var $thr_s=(($201+192116)|0);
      var $arrayidx225=(($thr_s+($199)*(1248))|0);
      var $arrayidx226=(($arrayidx225+($198)*(312))|0);
      var $arrayidx227=(($arrayidx226+($add223<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv221,HEAP32[(($arrayidx227)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx227)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $202=$i;
      var $203=$cod_info_addr;
      var $subblock_gain=(($203+4808)|0);
      var $arrayidx228=(($subblock_gain+($202<<2))|0);
      var $204=HEAP32[(($arrayidx228)>>2)];
      var $conv229=(($204)|0);
      var $mul230=($conv229)*(-2);
      var $205=$sfb;
      var $mul231=((($205)*(3))&-1);
      var $206=$i;
      var $add232=((($mul231)+($206))|0);
      var $207=$ch_addr;
      var $208=$gr_addr;
      var $209=$gfc_addr;
      var $pinfo233=(($209+85800)|0);
      var $210=HEAP32[(($pinfo233)>>2)];
      var $LAMEsfb_s=(($210+199860)|0);
      var $arrayidx234=(($LAMEsfb_s+($208)*(624))|0);
      var $arrayidx235=(($arrayidx234+($207)*(312))|0);
      var $arrayidx236=(($arrayidx235+($add232<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul230,HEAP32[(($arrayidx236)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx236)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $211=$sfb;
      var $cmp237=(($211)|0) < 12;
      if ($cmp237) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $212=$ifqstep;
      var $213=$sfb2;
      var $214=$scalefac;
      var $arrayidx240=(($214+($213<<2))|0);
      var $215=HEAP32[(($arrayidx240)>>2)];
      var $conv241=(($215)|0);
      var $mul242=($212)*($conv241);
      var $conv243=$mul242;
      var $216=$sfb;
      var $mul244=((($216)*(3))&-1);
      var $217=$i;
      var $add245=((($mul244)+($217))|0);
      var $218=$ch_addr;
      var $219=$gr_addr;
      var $220=$gfc_addr;
      var $pinfo246=(($220+85800)|0);
      var $221=HEAP32[(($pinfo246)>>2)];
      var $LAMEsfb_s247=(($221+199860)|0);
      var $arrayidx248=(($LAMEsfb_s247+($219)*(624))|0);
      var $arrayidx249=(($arrayidx248+($218)*(312))|0);
      var $arrayidx250=(($arrayidx249+($add245<<3))|0);
      var $222=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx250)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx250)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub251=($222)-($conv243);
      (HEAPF64[(tempDoublePtr)>>3]=$sub251,HEAP32[(($arrayidx250)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx250)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 48; break;
    case 48: 
      var $223=$sfb2;
      var $inc253=((($223)+(1))|0);
      $sfb2=$inc253;
      label = 49; break;
    case 49: 
      var $224=$i;
      var $inc255=((($224)+(1))|0);
      $i=$inc255;
      label = 29; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $225=$sfb;
      var $inc258=((($225)+(1))|0);
      $sfb=$inc258;
      label = 27; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $226=$cod_info_addr;
      var $global_gain=(($226+4780)|0);
      var $227=HEAP32[(($global_gain)>>2)];
      var $228=$ch_addr;
      var $229=$gr_addr;
      var $230=$gfc_addr;
      var $pinfo261=(($230+85800)|0);
      var $231=HEAP32[(($pinfo261)>>2)];
      var $LAMEqss=(($231+201108)|0);
      var $arrayidx262=(($LAMEqss+($229<<3))|0);
      var $arrayidx263=(($arrayidx262+($228<<2))|0);
      HEAP32[(($arrayidx263)>>2)]=$227;
      var $232=$cod_info_addr;
      var $part2_3_length=(($232+4768)|0);
      var $233=HEAP32[(($part2_3_length)>>2)];
      var $234=$cod_info_addr;
      var $part2_length=(($234+4844)|0);
      var $235=HEAP32[(($part2_length)>>2)];
      var $add264=((($233)+($235))|0);
      var $236=$ch_addr;
      var $237=$gr_addr;
      var $238=$gfc_addr;
      var $pinfo265=(($238+85800)|0);
      var $239=HEAP32[(($pinfo265)>>2)];
      var $LAMEmainbits=(($239+203396)|0);
      var $arrayidx266=(($LAMEmainbits+($237<<3))|0);
      var $arrayidx267=(($arrayidx266+($236<<2))|0);
      HEAP32[(($arrayidx267)>>2)]=$add264;
      var $240=$cod_info_addr;
      var $part2_length268=(($240+4844)|0);
      var $241=HEAP32[(($part2_length268)>>2)];
      var $242=$ch_addr;
      var $243=$gr_addr;
      var $244=$gfc_addr;
      var $pinfo269=(($244+85800)|0);
      var $245=HEAP32[(($pinfo269)>>2)];
      var $LAMEsfbits=(($245+203412)|0);
      var $arrayidx270=(($LAMEsfbits+($243<<3))|0);
      var $arrayidx271=(($arrayidx270+($242<<2))|0);
      HEAP32[(($arrayidx271)>>2)]=$241;
      var $over_count=(($noise+12)|0);
      var $246=HEAP32[(($over_count)>>2)];
      var $247=$ch_addr;
      var $248=$gr_addr;
      var $249=$gfc_addr;
      var $pinfo272=(($249+85800)|0);
      var $250=HEAP32[(($pinfo272)>>2)];
      var $over=(($250+203156)|0);
      var $arrayidx273=(($over+($248<<3))|0);
      var $arrayidx274=(($arrayidx273+($247<<2))|0);
      HEAP32[(($arrayidx274)>>2)]=$246;
      var $max_noise=(($noise+8)|0);
      var $251=HEAPF32[(($max_noise)>>2)];
      var $conv275=$251;
      var $mul276=($conv275)*(10);
      var $252=$ch_addr;
      var $253=$gr_addr;
      var $254=$gfc_addr;
      var $pinfo277=(($254+85800)|0);
      var $255=HEAP32[(($pinfo277)>>2)];
      var $max_noise278=(($255+203204)|0);
      var $arrayidx279=(($max_noise278+($253<<4))|0);
      var $arrayidx280=(($arrayidx279+($252<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul276,HEAP32[(($arrayidx280)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx280)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $over_noise=(($noise)|0);
      var $256=HEAPF32[(($over_noise)>>2)];
      var $conv281=$256;
      var $mul282=($conv281)*(10);
      var $257=$ch_addr;
      var $258=$gr_addr;
      var $259=$gfc_addr;
      var $pinfo283=(($259+85800)|0);
      var $260=HEAP32[(($pinfo283)>>2)];
      var $over_noise284=(($260+203236)|0);
      var $arrayidx285=(($over_noise284+($258<<4))|0);
      var $arrayidx286=(($arrayidx285+($257<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul282,HEAP32[(($arrayidx286)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx286)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $tot_noise=(($noise+4)|0);
      var $261=HEAPF32[(($tot_noise)>>2)];
      var $conv287=$261;
      var $mul288=($conv287)*(10);
      var $262=$ch_addr;
      var $263=$gr_addr;
      var $264=$gfc_addr;
      var $pinfo289=(($264+85800)|0);
      var $265=HEAP32[(($pinfo289)>>2)];
      var $tot_noise290=(($265+203172)|0);
      var $arrayidx291=(($tot_noise290+($263<<4))|0);
      var $arrayidx292=(($arrayidx291+($262<<3))|0);
      (HEAPF64[(tempDoublePtr)>>3]=$mul288,HEAP32[(($arrayidx292)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx292)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $over_SSD=(($noise+16)|0);
      var $266=HEAP32[(($over_SSD)>>2)];
      var $267=$ch_addr;
      var $268=$gr_addr;
      var $269=$gfc_addr;
      var $pinfo293=(($269+85800)|0);
      var $270=HEAP32[(($pinfo293)>>2)];
      var $over_SSD294=(($270+203268)|0);
      var $arrayidx295=(($over_SSD294+($268<<3))|0);
      var $arrayidx296=(($arrayidx295+($267<<2))|0);
      HEAP32[(($arrayidx296)>>2)]=$266;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_set_pinfo["X"]=1;

function _ATHmdct($cfg, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cfg_addr;
      var $f_addr;
      var $ath;
      $cfg_addr=$cfg;
      $f_addr=$f;
      var $0=$cfg_addr;
      var $1=$f_addr;
      var $call=_ATHformula($0, $1);
      $ath=$call;
      var $2=$cfg_addr;
      var $ATHfixpoint=(($2+208)|0);
      var $3=HEAPF32[(($ATHfixpoint)>>2)];
      var $cmp=$3 > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$cfg_addr;
      var $ATHfixpoint1=(($4+208)|0);
      var $5=HEAPF32[(($ATHfixpoint1)>>2)];
      var $6=$ath;
      var $sub=($6)-($5);
      $ath=$sub;
      label = 5; break;
    case 4: 
      var $7=$ath;
      var $sub2=($7)-(100);
      $ath=$sub2;
      label = 5; break;
    case 5: 
      var $8=$cfg_addr;
      var $ATH_offset_db=(($8+180)|0);
      var $9=HEAPF32[(($ATH_offset_db)>>2)];
      var $10=$ath;
      var $add=($10)+($9);
      $ath=$add;
      var $11=$ath;
      var $mul=($11)*(0.10000000149011612);
      var $12=Math.pow(10, $mul);
      $ath=$12;
      var $13=$ath;

      return $13;
    default: assert(0, "bad label: " + label);
  }

}


function _ResvMaxBits($gfc, $mean_bits, $targ_bits, $extra_bits, $cbr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $mean_bits_addr;
      var $targ_bits_addr;
      var $extra_bits_addr;
      var $cbr_addr;
      var $cfg;
      var $esv;
      var $add_bits;
      var $targBits;
      var $extraBits;
      var $ResvSize;
      var $ResvMax;
      $gfc_addr=$gfc;
      $mean_bits_addr=$mean_bits;
      $targ_bits_addr=$targ_bits;
      $extra_bits_addr=$extra_bits;
      $cbr_addr=$cbr;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$esv;
      var $ResvSize2=(($2+24316)|0);
      var $3=HEAP32[(($ResvSize2)>>2)];
      $ResvSize=$3;
      var $4=$esv;
      var $ResvMax3=(($4+24320)|0);
      var $5=HEAP32[(($ResvMax3)>>2)];
      $ResvMax=$5;
      var $6=$cbr_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$mean_bits_addr;
      var $8=$ResvSize;
      var $add=((($8)+($7))|0);
      $ResvSize=$add;
      label = 4; break;
    case 4: 
      var $9=$gfc_addr;
      var $sv_qnt=(($9+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $10=HEAP32[(($substep_shaping)>>2)];
      var $and=$10 & 1;
      var $tobool4=(($and)|0)!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$ResvMax;
      var $conv=(($11)|0);
      var $mul=($conv)*(0.9);
      var $conv6=(($mul)&-1);
      $ResvMax=$conv6;
      label = 6; break;
    case 6: 
      var $12=$mean_bits_addr;
      $targBits=$12;
      var $13=$ResvSize;
      var $mul8=((($13)*(10))&-1);
      var $14=$ResvMax;
      var $mul9=((($14)*(9))&-1);
      var $cmp=(($mul8)|0) > (($mul9)|0);
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$ResvSize;
      var $16=$ResvMax;
      var $mul12=((($16)*(9))&-1);
      var $div=((((($mul12)|0))/(10))&-1);
      var $sub=((($15)-($div))|0);
      $add_bits=$sub;
      var $17=$add_bits;
      var $18=$targBits;
      var $add13=((($18)+($17))|0);
      $targBits=$add13;
      var $19=$gfc_addr;
      var $sv_qnt14=(($19+84764)|0);
      var $substep_shaping15=(($sv_qnt14+328)|0);
      var $20=HEAP32[(($substep_shaping15)>>2)];
      var $or=$20 | 128;
      HEAP32[(($substep_shaping15)>>2)]=$or;
      label = 12; break;
    case 8: 
      $add_bits=0;
      var $21=$gfc_addr;
      var $sv_qnt16=(($21+84764)|0);
      var $substep_shaping17=(($sv_qnt16+328)|0);
      var $22=HEAP32[(($substep_shaping17)>>2)];
      var $and18=$22 & 127;
      HEAP32[(($substep_shaping17)>>2)]=$and18;
      var $23=$cfg;
      var $disable_reservoir=(($23+128)|0);
      var $24=HEAP32[(($disable_reservoir)>>2)];
      var $tobool19=(($24)|0)!=0;
      if ($tobool19) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $25=$gfc_addr;
      var $sv_qnt20=(($25+84764)|0);
      var $substep_shaping21=(($sv_qnt20+328)|0);
      var $26=HEAP32[(($substep_shaping21)>>2)];
      var $and22=$26 & 1;
      var $tobool23=(($and22)|0)!=0;
      if ($tobool23) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $27=$mean_bits_addr;
      var $conv25=(($27)|0);
      var $mul26=($conv25)*(0.1);
      var $28=$targBits;
      var $conv27=(($28)|0);
      var $sub28=($conv27)-($mul26);
      var $conv29=(($sub28)&-1);
      $targBits=$conv29;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $29=$ResvSize;
      var $30=$esv;
      var $ResvMax32=(($30+24320)|0);
      var $31=HEAP32[(($ResvMax32)>>2)];
      var $mul33=((($31)*(6))&-1);
      var $div34=((((($mul33)|0))/(10))&-1);
      var $cmp35=(($29)|0) < (($div34)|0);
      if ($cmp35) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $32=$ResvSize;
      var $cond = $32;label = 15; break;
    case 14: 
      var $33=$esv;
      var $ResvMax37=(($33+24320)|0);
      var $34=HEAP32[(($ResvMax37)>>2)];
      var $mul38=((($34)*(6))&-1);
      var $div39=((((($mul38)|0))/(10))&-1);
      var $cond = $div39;label = 15; break;
    case 15: 
      var $cond;
      $extraBits=$cond;
      var $35=$add_bits;
      var $36=$extraBits;
      var $sub40=((($36)-($35))|0);
      $extraBits=$sub40;
      var $37=$extraBits;
      var $cmp41=(($37)|0) < 0;
      if ($cmp41) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $extraBits=0;
      label = 17; break;
    case 17: 
      var $38=$targBits;
      var $39=$targ_bits_addr;
      HEAP32[(($39)>>2)]=$38;
      var $40=$extraBits;
      var $41=$extra_bits_addr;
      HEAP32[(($41)>>2)]=$40;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_ResvMaxBits["X"]=1;

function _ResvAdjust($gfc, $gi) {
  var label = 0;


  var $gfc_addr;
  var $gi_addr;
  $gfc_addr=$gfc;
  $gi_addr=$gi;
  var $0=$gi_addr;
  var $part2_3_length=(($0+4768)|0);
  var $1=HEAP32[(($part2_3_length)>>2)];
  var $2=$gi_addr;
  var $part2_length=(($2+4844)|0);
  var $3=HEAP32[(($part2_length)>>2)];
  var $add=((($1)+($3))|0);
  var $4=$gfc_addr;
  var $sv_enc=(($4+27820)|0);
  var $ResvSize=(($sv_enc+24316)|0);
  var $5=HEAP32[(($ResvSize)>>2)];
  var $sub=((($5)-($add))|0);
  HEAP32[(($ResvSize)>>2)]=$sub;

  return;
}


function _ResvFrameEnd($gfc, $mean_bits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $mean_bits_addr;
      var $cfg;
      var $esv;
      var $l3_side;
      var $stuffingBits;
      var $over_bits;
      var $mdb_bytes;
      $gfc_addr=$gfc;
      $mean_bits_addr=$mean_bits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      var $3=$mean_bits_addr;
      var $4=$cfg;
      var $mode_gr=(($4+60)|0);
      var $5=HEAP32[(($mode_gr)>>2)];
      var $mul=((($3)*($5))&-1);
      var $6=$esv;
      var $ResvSize=(($6+24316)|0);
      var $7=HEAP32[(($ResvSize)>>2)];
      var $add=((($7)+($mul))|0);
      HEAP32[(($ResvSize)>>2)]=$add;
      $stuffingBits=0;
      var $8=$l3_side;
      var $resvDrain_post=(($8+21020)|0);
      HEAP32[(($resvDrain_post)>>2)]=0;
      var $9=$l3_side;
      var $resvDrain_pre=(($9+21016)|0);
      HEAP32[(($resvDrain_pre)>>2)]=0;
      var $10=$esv;
      var $ResvSize3=(($10+24316)|0);
      var $11=HEAP32[(($ResvSize3)>>2)];
      var $rem=((($11)|0))%(8);
      $over_bits=$rem;
      var $cmp=(($rem)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$over_bits;
      var $13=$stuffingBits;
      var $add4=((($13)+($12))|0);
      $stuffingBits=$add4;
      label = 4; break;
    case 4: 
      var $14=$esv;
      var $ResvSize5=(($14+24316)|0);
      var $15=HEAP32[(($ResvSize5)>>2)];
      var $16=$stuffingBits;
      var $sub=((($15)-($16))|0);
      var $17=$esv;
      var $ResvMax=(($17+24320)|0);
      var $18=HEAP32[(($ResvMax)>>2)];
      var $sub6=((($sub)-($18))|0);
      $over_bits=$sub6;
      var $19=$over_bits;
      var $cmp7=(($19)|0) > 0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$over_bits;
      var $21=$stuffingBits;
      var $add9=((($21)+($20))|0);
      $stuffingBits=$add9;
      label = 6; break;
    case 6: 
      var $22=$l3_side;
      var $main_data_begin=(($22+21008)|0);
      var $23=HEAP32[(($main_data_begin)>>2)];
      var $mul11=((($23<<3))&-1);
      var $24=$stuffingBits;
      var $cmp12=(($mul11)|0) < (($24)|0);
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $25=$l3_side;
      var $main_data_begin13=(($25+21008)|0);
      var $26=HEAP32[(($main_data_begin13)>>2)];
      var $mul14=((($26<<3))&-1);
      var $cond = $mul14;label = 9; break;
    case 8: 
      var $27=$stuffingBits;
      var $cond = $27;label = 9; break;
    case 9: 
      var $cond;
      var $div=((((($cond)|0))/(8))&-1);
      $mdb_bytes=$div;
      var $28=$mdb_bytes;
      var $mul15=((($28<<3))&-1);
      var $29=$l3_side;
      var $resvDrain_pre16=(($29+21016)|0);
      var $30=HEAP32[(($resvDrain_pre16)>>2)];
      var $add17=((($30)+($mul15))|0);
      HEAP32[(($resvDrain_pre16)>>2)]=$add17;
      var $31=$mdb_bytes;
      var $mul18=((($31<<3))&-1);
      var $32=$stuffingBits;
      var $sub19=((($32)-($mul18))|0);
      $stuffingBits=$sub19;
      var $33=$mdb_bytes;
      var $mul20=((($33<<3))&-1);
      var $34=$esv;
      var $ResvSize21=(($34+24316)|0);
      var $35=HEAP32[(($ResvSize21)>>2)];
      var $sub22=((($35)-($mul20))|0);
      HEAP32[(($ResvSize21)>>2)]=$sub22;
      var $36=$mdb_bytes;
      var $37=$l3_side;
      var $main_data_begin23=(($37+21008)|0);
      var $38=HEAP32[(($main_data_begin23)>>2)];
      var $sub24=((($38)-($36))|0);
      HEAP32[(($main_data_begin23)>>2)]=$sub24;
      var $39=$stuffingBits;
      var $40=$l3_side;
      var $resvDrain_post25=(($40+21020)|0);
      var $41=HEAP32[(($resvDrain_post25)>>2)];
      var $add26=((($41)+($39))|0);
      HEAP32[(($resvDrain_post25)>>2)]=$add26;
      var $42=$stuffingBits;
      var $43=$esv;
      var $ResvSize27=(($43+24316)|0);
      var $44=HEAP32[(($ResvSize27)>>2)];
      var $sub28=((($44)-($42))|0);
      HEAP32[(($ResvSize27)>>2)]=$sub28;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_ResvFrameEnd["X"]=1;

function _ResvFrameBegin($gfc, $mean_bits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $mean_bits_addr;
      var $cfg;
      var $esv;
      var $fullFrameBits;
      var $resvLimit;
      var $maxmp3buf;
      var $l3_side;
      var $frameLength;
      var $meanBits;
      $gfc_addr=$gfc;
      $mean_bits_addr=$mean_bits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$gfc_addr;
      var $l3_side2=(($2+304)|0);
      $l3_side=$l3_side2;
      var $3=$gfc_addr;
      var $call=_getframebits($3);
      $frameLength=$call;
      var $4=$frameLength;
      var $5=$cfg;
      var $sideinfo_len=(($5+8)|0);
      var $6=HEAP32[(($sideinfo_len)>>2)];
      var $mul=((($6<<3))&-1);
      var $sub=((($4)-($mul))|0);
      var $7=$cfg;
      var $mode_gr=(($7+60)|0);
      var $8=HEAP32[(($mode_gr)>>2)];
      var $div=((((($sub)|0))/((($8)|0)))&-1);
      $meanBits=$div;
      var $9=$cfg;
      var $mode_gr3=(($9+60)|0);
      var $10=HEAP32[(($mode_gr3)>>2)];
      var $mul4=((($10<<11))&-1);
      var $sub5=((($mul4)-(8))|0);
      $resvLimit=$sub5;
      var $11=$cfg;
      var $buffer_constraint=(($11+132)|0);
      var $12=HEAP32[(($buffer_constraint)>>2)];
      $maxmp3buf=$12;
      var $13=$maxmp3buf;
      var $14=$frameLength;
      var $sub6=((($13)-($14))|0);
      var $15=$esv;
      var $ResvMax=(($15+24320)|0);
      HEAP32[(($ResvMax)>>2)]=$sub6;
      var $16=$esv;
      var $ResvMax7=(($16+24320)|0);
      var $17=HEAP32[(($ResvMax7)>>2)];
      var $18=$resvLimit;
      var $cmp=(($17)|0) > (($18)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$resvLimit;
      var $20=$esv;
      var $ResvMax8=(($20+24320)|0);
      HEAP32[(($ResvMax8)>>2)]=$19;
      label = 4; break;
    case 4: 
      var $21=$esv;
      var $ResvMax9=(($21+24320)|0);
      var $22=HEAP32[(($ResvMax9)>>2)];
      var $cmp10=(($22)|0) < 0;
      if ($cmp10) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $23=$cfg;
      var $disable_reservoir=(($23+128)|0);
      var $24=HEAP32[(($disable_reservoir)>>2)];
      var $tobool=(($24)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$esv;
      var $ResvMax12=(($25+24320)|0);
      HEAP32[(($ResvMax12)>>2)]=0;
      label = 7; break;
    case 7: 
      var $26=$meanBits;
      var $27=$cfg;
      var $mode_gr14=(($27+60)|0);
      var $28=HEAP32[(($mode_gr14)>>2)];
      var $mul15=((($26)*($28))&-1);
      var $29=$esv;
      var $ResvSize=(($29+24316)|0);
      var $30=HEAP32[(($ResvSize)>>2)];
      var $31=$esv;
      var $ResvMax16=(($31+24320)|0);
      var $32=HEAP32[(($ResvMax16)>>2)];
      var $cmp17=(($30)|0) < (($32)|0);
      if ($cmp17) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=$esv;
      var $ResvSize18=(($33+24316)|0);
      var $34=HEAP32[(($ResvSize18)>>2)];
      var $cond = $34;label = 10; break;
    case 9: 
      var $35=$esv;
      var $ResvMax19=(($35+24320)|0);
      var $36=HEAP32[(($ResvMax19)>>2)];
      var $cond = $36;label = 10; break;
    case 10: 
      var $cond;
      var $add=((($mul15)+($cond))|0);
      $fullFrameBits=$add;
      var $37=$fullFrameBits;
      var $38=$maxmp3buf;
      var $cmp20=(($37)|0) > (($38)|0);
      if ($cmp20) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$maxmp3buf;
      $fullFrameBits=$39;
      label = 12; break;
    case 12: 
      var $40=$l3_side;
      var $resvDrain_pre=(($40+21016)|0);
      HEAP32[(($resvDrain_pre)>>2)]=0;
      var $41=$gfc_addr;
      var $pinfo=(($41+85800)|0);
      var $42=HEAP32[(($pinfo)>>2)];
      var $cmp23=(($42)|0)!=0;
      if ($cmp23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$meanBits;
      var $div25=((((($43)|0))/(2))&-1);
      var $44=$gfc_addr;
      var $pinfo26=(($44+85800)|0);
      var $45=HEAP32[(($pinfo26)>>2)];
      var $mean_bits27=(($45+203480)|0);
      HEAP32[(($mean_bits27)>>2)]=$div25;
      var $46=$esv;
      var $ResvSize28=(($46+24316)|0);
      var $47=HEAP32[(($ResvSize28)>>2)];
      var $48=$gfc_addr;
      var $pinfo29=(($48+85800)|0);
      var $49=HEAP32[(($pinfo29)>>2)];
      var $resvsize=(($49+203484)|0);
      HEAP32[(($resvsize)>>2)]=$47;
      label = 14; break;
    case 14: 
      var $50=$meanBits;
      var $51=$mean_bits_addr;
      HEAP32[(($51)>>2)]=$50;
      var $52=$fullFrameBits;

      return $52;
    default: assert(0, "bad label: " + label);
  }

}
_ResvFrameBegin["X"]=1;

function _lame_set_num_samples($gfp, $num_samples) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $num_samples_addr;
      $gfp_addr=$gfp;
      $num_samples_addr=$num_samples;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$num_samples_addr;
      var $2=$gfp_addr;
      var $num_samples1=(($2+4)|0);
      HEAP32[(($num_samples1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_num_samples($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $num_samples=(($1+4)|0);
      var $2=HEAP32[(($num_samples)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_in_samplerate($gfp, $in_samplerate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $in_samplerate_addr;
      $gfp_addr=$gfp;
      $in_samplerate_addr=$in_samplerate;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$in_samplerate_addr;
      var $2=$gfp_addr;
      var $samplerate_in=(($2+12)|0);
      HEAP32[(($samplerate_in)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_in_samplerate($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $samplerate_in=(($1+12)|0);
      var $2=HEAP32[(($samplerate_in)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_num_channels($gfp, $num_channels) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $num_channels_addr;
      $gfp_addr=$gfp;
      $num_channels_addr=$num_channels;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$num_channels_addr;
      var $cmp=2 < (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$num_channels_addr;
      var $cmp1=0==(($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$num_channels_addr;
      var $4=$gfp_addr;
      var $num_channels3=(($4+8)|0);
      HEAP32[(($num_channels3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_num_channels($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $num_channels=(($1+8)|0);
      var $2=HEAP32[(($num_channels)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_scale($gfp, $scale) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $scale_addr;
      $gfp_addr=$gfp;
      $scale_addr=$scale;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$scale_addr;
      var $2=$gfp_addr;
      var $scale1=(($2+20)|0);
      HEAPF32[(($scale1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_scale($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $scale=(($1+20)|0);
      var $2=HEAPF32[(($scale)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_scale_left($gfp, $scale) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $scale_addr;
      $gfp_addr=$gfp;
      $scale_addr=$scale;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$scale_addr;
      var $2=$gfp_addr;
      var $scale_left=(($2+24)|0);
      HEAPF32[(($scale_left)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_scale_left($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $scale_left=(($1+24)|0);
      var $2=HEAPF32[(($scale_left)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_scale_right($gfp, $scale) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $scale_addr;
      $gfp_addr=$gfp;
      $scale_addr=$scale;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$scale_addr;
      var $2=$gfp_addr;
      var $scale_right=(($2+28)|0);
      HEAPF32[(($scale_right)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_scale_right($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $scale_right=(($1+28)|0);
      var $2=HEAPF32[(($scale_right)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_out_samplerate($gfp, $out_samplerate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $out_samplerate_addr;
      $gfp_addr=$gfp;
      $out_samplerate_addr=$out_samplerate;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$out_samplerate_addr;
      var $2=$gfp_addr;
      var $samplerate_out=(($2+16)|0);
      HEAP32[(($samplerate_out)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_out_samplerate($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $samplerate_out=(($1+16)|0);
      var $2=HEAP32[(($samplerate_out)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_analysis($gfp, $analysis) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $analysis_addr;
      $gfp_addr=$gfp;
      $analysis_addr=$analysis;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$analysis_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$analysis_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$analysis_addr;
      var $4=$gfp_addr;
      var $analysis3=(($4+32)|0);
      HEAP32[(($analysis3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_analysis($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $analysis=(($1+32)|0);
      var $2=HEAP32[(($analysis)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_bWriteVbrTag($gfp, $bWriteVbrTag) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $bWriteVbrTag_addr;
      $gfp_addr=$gfp;
      $bWriteVbrTag_addr=$bWriteVbrTag;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$bWriteVbrTag_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$bWriteVbrTag_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$bWriteVbrTag_addr;
      var $4=$gfp_addr;
      var $write_lame_tag=(($4+36)|0);
      HEAP32[(($write_lame_tag)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_ogg($gfp, $ogg) {
  var label = 0;


  var $gfp_addr;
  var $ogg_addr;
  $gfp_addr=$gfp;
  $ogg_addr=$ogg;
  var $0=$gfp_addr;
  var $1=$ogg_addr;

  return -1;
}


function _lame_get_ogg($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;

  return 0;
}


function _lame_get_mode_automs($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;

  return 1;
}


function _lame_get_bWriteVbrTag($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $write_lame_tag=(($1+36)|0);
      var $2=HEAP32[(($write_lame_tag)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_decode_only($gfp, $decode_only) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $decode_only_addr;
      $gfp_addr=$gfp;
      $decode_only_addr=$decode_only;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$decode_only_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$decode_only_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$decode_only_addr;
      var $4=$gfp_addr;
      var $decode_only3=(($4+40)|0);
      HEAP32[(($decode_only3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_decode_only($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $decode_only=(($1+40)|0);
      var $2=HEAP32[(($decode_only)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_quality($gfp, $quality) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $quality_addr;
      $gfp_addr=$gfp;
      $quality_addr=$quality;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $1=$quality_addr;
      var $cmp=(($1)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$gfp_addr;
      var $quality2=(($2+44)|0);
      HEAP32[(($quality2)>>2)]=0;
      label = 9; break;
    case 5: 
      var $3=$quality_addr;
      var $cmp3=(($3)|0) > 9;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$gfp_addr;
      var $quality5=(($4+44)|0);
      HEAP32[(($quality5)>>2)]=9;
      label = 8; break;
    case 7: 
      var $5=$quality_addr;
      var $6=$gfp_addr;
      var $quality7=(($6+44)|0);
      HEAP32[(($quality7)>>2)]=$5;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $retval=0;
      label = 11; break;
    case 10: 
      $retval=-1;
      label = 11; break;
    case 11: 
      var $7=$retval;

      return $7;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_quality($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $quality=(($1+44)|0);
      var $2=HEAP32[(($quality)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_mode($gfp, $mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $mode_addr;
      var $mpg_mode;
      $gfp_addr=$gfp;
      $mode_addr=$mode;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$mode_addr;
      $mpg_mode=$1;
      var $2=$mpg_mode;
      var $cmp=(($2)|0) < 0;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$mpg_mode;
      var $cmp1=5 <= (($3)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $4=$mode_addr;
      var $5=$gfp_addr;
      var $mode3=(($5+48)|0);
      HEAP32[(($mode3)>>2)]=$4;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_mode($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $mode=(($1+48)|0);
      var $2=HEAP32[(($mode)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=4;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_mode_automs($gfp, $mode_automs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $mode_automs_addr;
      $gfp_addr=$gfp;
      $mode_automs_addr=$mode_automs;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$mode_automs_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$mode_automs_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$gfp_addr;
      var $call3=_lame_set_mode($3, 1);
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $4=$retval;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_force_ms($gfp, $force_ms) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $force_ms_addr;
      $gfp_addr=$gfp;
      $force_ms_addr=$force_ms;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$force_ms_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$force_ms_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$force_ms_addr;
      var $4=$gfp_addr;
      var $force_ms3=(($4+52)|0);
      HEAP32[(($force_ms3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_force_ms($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $force_ms=(($1+52)|0);
      var $2=HEAP32[(($force_ms)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_free_format($gfp, $free_format) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $free_format_addr;
      $gfp_addr=$gfp;
      $free_format_addr=$free_format;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$free_format_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$free_format_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$free_format_addr;
      var $4=$gfp_addr;
      var $free_format3=(($4+56)|0);
      HEAP32[(($free_format3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_free_format($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $free_format=(($1+56)|0);
      var $2=HEAP32[(($free_format)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_findReplayGain($gfp, $findReplayGain) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $findReplayGain_addr;
      $gfp_addr=$gfp;
      $findReplayGain_addr=$findReplayGain;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$findReplayGain_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$findReplayGain_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$findReplayGain_addr;
      var $4=$gfp_addr;
      var $findReplayGain3=(($4+60)|0);
      HEAP32[(($findReplayGain3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_findReplayGain($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $findReplayGain=(($1+60)|0);
      var $2=HEAP32[(($findReplayGain)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_decode_on_the_fly($gfp, $decode_on_the_fly) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $decode_on_the_fly_addr;
      $gfp_addr=$gfp;
      $decode_on_the_fly_addr=$decode_on_the_fly;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$decode_on_the_fly_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$decode_on_the_fly_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$decode_on_the_fly_addr;
      var $4=$gfp_addr;
      var $decode_on_the_fly3=(($4+64)|0);
      HEAP32[(($decode_on_the_fly3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_decode_on_the_fly($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $decode_on_the_fly=(($1+64)|0);
      var $2=HEAP32[(($decode_on_the_fly)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_findPeakSample($gfp, $arg) {
  var label = 0;


  var $gfp_addr;
  var $arg_addr;
  $gfp_addr=$gfp;
  $arg_addr=$arg;
  var $0=$gfp_addr;
  var $1=$arg_addr;
  var $call=_lame_set_decode_on_the_fly($0, $1);

  return $call;
}


function _lame_get_findPeakSample($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $call=_lame_get_decode_on_the_fly($0);

  return $call;
}


function _lame_set_ReplayGain_input($gfp, $arg) {
  var label = 0;


  var $gfp_addr;
  var $arg_addr;
  $gfp_addr=$gfp;
  $arg_addr=$arg;
  var $0=$gfp_addr;
  var $1=$arg_addr;
  var $call=_lame_set_findReplayGain($0, $1);

  return $call;
}


function _lame_get_ReplayGain_input($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $call=_lame_get_findReplayGain($0);

  return $call;
}


function _lame_set_ReplayGain_decode($gfp, $arg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $arg_addr;
      $gfp_addr=$gfp;
      $arg_addr=$arg;
      var $0=$gfp_addr;
      var $1=$arg_addr;
      var $call=_lame_set_decode_on_the_fly($0, $1);
      var $cmp=(($call)|0) < 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$gfp_addr;
      var $3=$arg_addr;
      var $call1=_lame_set_findReplayGain($2, $3);
      var $cmp2=(($call1)|0) < 0;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=-1;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $4=$retval;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_ReplayGain_decode($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_lame_get_decode_on_the_fly($0);
      var $cmp=(($call)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$gfp_addr;
      var $call1=_lame_get_findReplayGain($1);
      var $cmp2=(($call1)|0) > 0;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=1;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $2=$retval;

      return $2;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_nogap_total($gfp, $the_nogap_total) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $the_nogap_total_addr;
      $gfp_addr=$gfp;
      $the_nogap_total_addr=$the_nogap_total;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$the_nogap_total_addr;
      var $2=$gfp_addr;
      var $nogap_total=(($2+72)|0);
      HEAP32[(($nogap_total)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_nogap_total($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $nogap_total=(($1+72)|0);
      var $2=HEAP32[(($nogap_total)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_nogap_currentindex($gfp, $the_nogap_index) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $the_nogap_index_addr;
      $gfp_addr=$gfp;
      $the_nogap_index_addr=$the_nogap_index;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$the_nogap_index_addr;
      var $2=$gfp_addr;
      var $nogap_current=(($2+76)|0);
      HEAP32[(($nogap_current)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_nogap_currentindex($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $nogap_current=(($1+76)|0);
      var $2=HEAP32[(($nogap_current)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_errorf($gfp, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $func_addr;
      $gfp_addr=$gfp;
      $func_addr=$func;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$func_addr;
      var $2=$gfp_addr;
      var $report=(($2+272)|0);
      var $errorf=(($report+8)|0);
      HEAP32[(($errorf)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_debugf($gfp, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $func_addr;
      $gfp_addr=$gfp;
      $func_addr=$func;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$func_addr;
      var $2=$gfp_addr;
      var $report=(($2+272)|0);
      var $debugf=(($report+4)|0);
      HEAP32[(($debugf)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_msgf($gfp, $func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $func_addr;
      $gfp_addr=$gfp;
      $func_addr=$func;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$func_addr;
      var $2=$gfp_addr;
      var $report=(($2+272)|0);
      var $msgf=(($report)|0);
      HEAP32[(($msgf)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_brate($gfp, $brate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $brate_addr;
      $gfp_addr=$gfp;
      $brate_addr=$brate;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$brate_addr;
      var $2=$gfp_addr;
      var $brate1=(($2+96)|0);
      HEAP32[(($brate1)>>2)]=$1;
      var $3=$brate_addr;
      var $cmp=(($3)|0) > 320;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfp_addr;
      var $disable_reservoir=(($4+128)|0);
      HEAP32[(($disable_reservoir)>>2)]=1;
      label = 5; break;
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      $retval=-1;
      label = 7; break;
    case 7: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_brate($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $brate=(($1+96)|0);
      var $2=HEAP32[(($brate)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_compression_ratio($gfp, $compression_ratio) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $compression_ratio_addr;
      $gfp_addr=$gfp;
      $compression_ratio_addr=$compression_ratio;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$compression_ratio_addr;
      var $2=$gfp_addr;
      var $compression_ratio1=(($2+100)|0);
      HEAPF32[(($compression_ratio1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_compression_ratio($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $compression_ratio=(($1+100)|0);
      var $2=HEAPF32[(($compression_ratio)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_padding_type($gfp, $padding_type) {
  var label = 0;


  var $gfp_addr;
  var $padding_type_addr;
  $gfp_addr=$gfp;
  $padding_type_addr=$padding_type;
  var $0=$gfp_addr;
  var $1=$padding_type_addr;

  return 0;
}


function _lame_get_padding_type($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;

  return 2;
}


function _lame_set_copyright($gfp, $copyright) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $copyright_addr;
      $gfp_addr=$gfp;
      $copyright_addr=$copyright;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$copyright_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$copyright_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$copyright_addr;
      var $4=$gfp_addr;
      var $copyright3=(($4+104)|0);
      HEAP32[(($copyright3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_copyright($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $copyright=(($1+104)|0);
      var $2=HEAP32[(($copyright)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_original($gfp, $original) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $original_addr;
      $gfp_addr=$gfp;
      $original_addr=$original;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$original_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$original_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$original_addr;
      var $4=$gfp_addr;
      var $original3=(($4+108)|0);
      HEAP32[(($original3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_original($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $original=(($1+108)|0);
      var $2=HEAP32[(($original)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_error_protection($gfp, $error_protection) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $error_protection_addr;
      $gfp_addr=$gfp;
      $error_protection_addr=$error_protection;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$error_protection_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$error_protection_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$error_protection_addr;
      var $4=$gfp_addr;
      var $error_protection3=(($4+120)|0);
      HEAP32[(($error_protection3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_error_protection($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $error_protection=(($1+120)|0);
      var $2=HEAP32[(($error_protection)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_extension($gfp, $extension) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $extension_addr;
      $gfp_addr=$gfp;
      $extension_addr=$extension;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$extension_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$extension_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$extension_addr;
      var $4=$gfp_addr;
      var $extension3=(($4+112)|0);
      HEAP32[(($extension3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_extension($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $extension=(($1+112)|0);
      var $2=HEAP32[(($extension)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_strict_ISO($gfp, $val) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $val_addr;
      $gfp_addr=$gfp;
      $val_addr=$val;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$val_addr;
      var $cmp=(($1)|0) < 0;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$val_addr;
      var $cmp1=2 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$val_addr;
      var $4=$gfp_addr;
      var $strict_ISO=(($4+124)|0);
      HEAP32[(($strict_ISO)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_strict_ISO($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $strict_ISO=(($1+124)|0);
      var $2=HEAP32[(($strict_ISO)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_disable_reservoir($gfp, $disable_reservoir) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $disable_reservoir_addr;
      $gfp_addr=$gfp;
      $disable_reservoir_addr=$disable_reservoir;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$disable_reservoir_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$disable_reservoir_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$disable_reservoir_addr;
      var $4=$gfp_addr;
      var $disable_reservoir3=(($4+128)|0);
      HEAP32[(($disable_reservoir3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_disable_reservoir($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $disable_reservoir=(($1+128)|0);
      var $2=HEAP32[(($disable_reservoir)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_experimentalX($gfp, $experimentalX) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $experimentalX_addr;
      $gfp_addr=$gfp;
      $experimentalX_addr=$experimentalX;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $2=$experimentalX_addr;
      var $call1=_lame_set_quant_comp($1, $2);
      var $3=$gfp_addr;
      var $4=$experimentalX_addr;
      var $call2=_lame_set_quant_comp_short($3, $4);
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_quant_comp($gfp, $quant_type) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $quant_type_addr;
      $gfp_addr=$gfp;
      $quant_type_addr=$quant_type;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$quant_type_addr;
      var $2=$gfp_addr;
      var $quant_comp=(($2+132)|0);
      HEAP32[(($quant_comp)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_quant_comp_short($gfp, $quant_type) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $quant_type_addr;
      $gfp_addr=$gfp;
      $quant_type_addr=$quant_type;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$quant_type_addr;
      var $2=$gfp_addr;
      var $quant_comp_short=(($2+136)|0);
      HEAP32[(($quant_comp_short)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_experimentalX($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;
  var $call=_lame_get_quant_comp($0);

  return $call;
}


function _lame_get_quant_comp($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $quant_comp=(($1+132)|0);
      var $2=HEAP32[(($quant_comp)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_quant_comp_short($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $quant_comp_short=(($1+136)|0);
      var $2=HEAP32[(($quant_comp_short)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_experimentalY($gfp, $experimentalY) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $experimentalY_addr;
      $gfp_addr=$gfp;
      $experimentalY_addr=$experimentalY;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$experimentalY_addr;
      var $2=$gfp_addr;
      var $experimentalY1=(($2+140)|0);
      HEAP32[(($experimentalY1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_experimentalY($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $experimentalY=(($1+140)|0);
      var $2=HEAP32[(($experimentalY)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_experimentalZ($gfp, $experimentalZ) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $experimentalZ_addr;
      $gfp_addr=$gfp;
      $experimentalZ_addr=$experimentalZ;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$experimentalZ_addr;
      var $2=$gfp_addr;
      var $experimentalZ1=(($2+144)|0);
      HEAP32[(($experimentalZ1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_experimentalZ($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $experimentalZ=(($1+144)|0);
      var $2=HEAP32[(($experimentalZ)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_exp_nspsytune($gfp, $exp_nspsytune) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $exp_nspsytune_addr;
      $gfp_addr=$gfp;
      $exp_nspsytune_addr=$exp_nspsytune;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$exp_nspsytune_addr;
      var $2=$gfp_addr;
      var $exp_nspsytune1=(($2+148)|0);
      HEAP32[(($exp_nspsytune1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_exp_nspsytune($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $exp_nspsytune=(($1+148)|0);
      var $2=HEAP32[(($exp_nspsytune)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR($gfp, $VBR) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_addr;
      var $vbr_q;
      $gfp_addr=$gfp;
      $VBR_addr=$VBR;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$VBR_addr;
      $vbr_q=$1;
      var $2=$vbr_q;
      var $cmp=0 > (($2)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$vbr_q;
      var $cmp1=5 <= (($3)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $4=$VBR_addr;
      var $5=$gfp_addr;
      var $VBR3=(($5+156)|0);
      HEAP32[(($VBR3)>>2)]=$4;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_VBR($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR=(($1+156)|0);
      var $2=HEAP32[(($VBR)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR_q($gfp, $VBR_q) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_q_addr;
      var $ret;
      $gfp_addr=$gfp;
      $VBR_q_addr=$VBR_q;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      $ret=0;
      var $1=$VBR_q_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $ret=-1;
      $VBR_q_addr=0;
      label = 5; break;
    case 5: 
      var $2=$VBR_q_addr;
      var $cmp2=9 < (($2)|0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $ret=-1;
      $VBR_q_addr=9;
      label = 7; break;
    case 7: 
      var $3=$VBR_q_addr;
      var $4=$gfp_addr;
      var $VBR_q5=(($4+164)|0);
      HEAP32[(($VBR_q5)>>2)]=$3;
      var $5=$gfp_addr;
      var $VBR_q_frac=(($5+160)|0);
      HEAPF32[(($VBR_q_frac)>>2)]=0;
      var $6=$ret;
      $retval=$6;
      label = 9; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $7=$retval;

      return $7;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_VBR_q($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR_q=(($1+164)|0);
      var $2=HEAP32[(($VBR_q)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR_quality($gfp, $VBR_q) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_q_addr;
      var $ret;
      $gfp_addr=$gfp;
      $VBR_q_addr=$VBR_q;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      $ret=0;
      var $1=$VBR_q_addr;
      var $cmp=0 > $1;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $ret=-1;
      $VBR_q_addr=0;
      label = 5; break;
    case 5: 
      var $2=$VBR_q_addr;
      var $conv=$2;
      var $cmp2=9.999 < $conv;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $ret=-1;
      $VBR_q_addr=9.99899959564209;
      label = 7; break;
    case 7: 
      var $3=$VBR_q_addr;
      var $conv6=(($3)&-1);
      var $4=$gfp_addr;
      var $VBR_q7=(($4+164)|0);
      HEAP32[(($VBR_q7)>>2)]=$conv6;
      var $5=$VBR_q_addr;
      var $6=$gfp_addr;
      var $VBR_q8=(($6+164)|0);
      var $7=HEAP32[(($VBR_q8)>>2)];
      var $conv9=(($7)|0);
      var $sub=($5)-($conv9);
      var $8=$gfp_addr;
      var $VBR_q_frac=(($8+160)|0);
      HEAPF32[(($VBR_q_frac)>>2)]=$sub;
      var $9=$ret;
      $retval=$9;
      label = 9; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $10=$retval;

      return $10;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_VBR_quality($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR_q=(($1+164)|0);
      var $2=HEAP32[(($VBR_q)>>2)];
      var $conv=(($2)|0);
      var $3=$gfp_addr;
      var $VBR_q_frac=(($3+160)|0);
      var $4=HEAPF32[(($VBR_q_frac)>>2)];
      var $add=($conv)+($4);
      $retval=$add;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR_mean_bitrate_kbps($gfp, $VBR_mean_bitrate_kbps) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_mean_bitrate_kbps_addr;
      $gfp_addr=$gfp;
      $VBR_mean_bitrate_kbps_addr=$VBR_mean_bitrate_kbps;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$VBR_mean_bitrate_kbps_addr;
      var $2=$gfp_addr;
      var $VBR_mean_bitrate_kbps1=(($2+168)|0);
      HEAP32[(($VBR_mean_bitrate_kbps1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_athaa_loudapprox($gfp, $athaa_loudapprox) {
  var label = 0;


  var $gfp_addr;
  var $athaa_loudapprox_addr;
  $gfp_addr=$gfp;
  $athaa_loudapprox_addr=$athaa_loudapprox;
  var $0=$gfp_addr;
  var $1=$athaa_loudapprox_addr;

  return 0;
}


function _lame_get_athaa_loudapprox($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;

  return 2;
}


function _lame_set_cwlimit($gfp, $cwlimit) {
  var label = 0;


  var $gfp_addr;
  var $cwlimit_addr;
  $gfp_addr=$gfp;
  $cwlimit_addr=$cwlimit;
  var $0=$gfp_addr;
  var $1=$cwlimit_addr;

  return 0;
}


function _lame_get_cwlimit($gfp) {
  var label = 0;


  var $gfp_addr;
  $gfp_addr=$gfp;
  var $0=$gfp_addr;

  return 0;
}


function _lame_get_VBR_mean_bitrate_kbps($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR_mean_bitrate_kbps=(($1+168)|0);
      var $2=HEAP32[(($VBR_mean_bitrate_kbps)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR_min_bitrate_kbps($gfp, $VBR_min_bitrate_kbps) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_min_bitrate_kbps_addr;
      $gfp_addr=$gfp;
      $VBR_min_bitrate_kbps_addr=$VBR_min_bitrate_kbps;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$VBR_min_bitrate_kbps_addr;
      var $2=$gfp_addr;
      var $VBR_min_bitrate_kbps1=(($2+172)|0);
      HEAP32[(($VBR_min_bitrate_kbps1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_VBR_min_bitrate_kbps($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR_min_bitrate_kbps=(($1+172)|0);
      var $2=HEAP32[(($VBR_min_bitrate_kbps)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR_max_bitrate_kbps($gfp, $VBR_max_bitrate_kbps) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_max_bitrate_kbps_addr;
      $gfp_addr=$gfp;
      $VBR_max_bitrate_kbps_addr=$VBR_max_bitrate_kbps;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$VBR_max_bitrate_kbps_addr;
      var $2=$gfp_addr;
      var $VBR_max_bitrate_kbps1=(($2+176)|0);
      HEAP32[(($VBR_max_bitrate_kbps1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_VBR_max_bitrate_kbps($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR_max_bitrate_kbps=(($1+176)|0);
      var $2=HEAP32[(($VBR_max_bitrate_kbps)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_VBR_hard_min($gfp, $VBR_hard_min) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $VBR_hard_min_addr;
      $gfp_addr=$gfp;
      $VBR_hard_min_addr=$VBR_hard_min;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$VBR_hard_min_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$VBR_hard_min_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 8; break;
    case 6: 
      var $3=$VBR_hard_min_addr;
      var $4=$gfp_addr;
      var $VBR_hard_min3=(($4+180)|0);
      HEAP32[(($VBR_hard_min3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_VBR_hard_min($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $VBR_hard_min=(($1+180)|0);
      var $2=HEAP32[(($VBR_hard_min)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_lowpassfreq($gfp, $lowpassfreq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $lowpassfreq_addr;
      $gfp_addr=$gfp;
      $lowpassfreq_addr=$lowpassfreq;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$lowpassfreq_addr;
      var $2=$gfp_addr;
      var $lowpassfreq1=(($2+184)|0);
      HEAP32[(($lowpassfreq1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_lowpassfreq($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $lowpassfreq=(($1+184)|0);
      var $2=HEAP32[(($lowpassfreq)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_lowpasswidth($gfp, $lowpasswidth) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $lowpasswidth_addr;
      $gfp_addr=$gfp;
      $lowpasswidth_addr=$lowpasswidth;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$lowpasswidth_addr;
      var $2=$gfp_addr;
      var $lowpasswidth1=(($2+192)|0);
      HEAP32[(($lowpasswidth1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_lowpasswidth($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $lowpasswidth=(($1+192)|0);
      var $2=HEAP32[(($lowpasswidth)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_highpassfreq($gfp, $highpassfreq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $highpassfreq_addr;
      $gfp_addr=$gfp;
      $highpassfreq_addr=$highpassfreq;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$highpassfreq_addr;
      var $2=$gfp_addr;
      var $highpassfreq1=(($2+188)|0);
      HEAP32[(($highpassfreq1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_highpassfreq($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $highpassfreq=(($1+188)|0);
      var $2=HEAP32[(($highpassfreq)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_highpasswidth($gfp, $highpasswidth) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $highpasswidth_addr;
      $gfp_addr=$gfp;
      $highpasswidth_addr=$highpasswidth;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$highpasswidth_addr;
      var $2=$gfp_addr;
      var $highpasswidth1=(($2+196)|0);
      HEAP32[(($highpasswidth1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_highpasswidth($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $highpasswidth=(($1+196)|0);
      var $2=HEAP32[(($highpasswidth)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_maskingadjust($gfp, $adjust) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $adjust_addr;
      $gfp_addr=$gfp;
      $adjust_addr=$adjust;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$adjust_addr;
      var $2=$gfp_addr;
      var $maskingadjust=(($2+200)|0);
      HEAPF32[(($maskingadjust)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_maskingadjust($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $maskingadjust=(($1+200)|0);
      var $2=HEAPF32[(($maskingadjust)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_maskingadjust_short($gfp, $adjust) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $adjust_addr;
      $gfp_addr=$gfp;
      $adjust_addr=$adjust;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$adjust_addr;
      var $2=$gfp_addr;
      var $maskingadjust_short=(($2+204)|0);
      HEAPF32[(($maskingadjust_short)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_maskingadjust_short($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $maskingadjust_short=(($1+204)|0);
      var $2=HEAPF32[(($maskingadjust_short)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_ATHonly($gfp, $ATHonly) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $ATHonly_addr;
      $gfp_addr=$gfp;
      $ATHonly_addr=$ATHonly;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ATHonly_addr;
      var $2=$gfp_addr;
      var $ATHonly1=(($2+208)|0);
      HEAP32[(($ATHonly1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_ATHonly($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $ATHonly=(($1+208)|0);
      var $2=HEAP32[(($ATHonly)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_ATHshort($gfp, $ATHshort) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $ATHshort_addr;
      $gfp_addr=$gfp;
      $ATHshort_addr=$ATHshort;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ATHshort_addr;
      var $2=$gfp_addr;
      var $ATHshort1=(($2+212)|0);
      HEAP32[(($ATHshort1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_ATHshort($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $ATHshort=(($1+212)|0);
      var $2=HEAP32[(($ATHshort)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_noATH($gfp, $noATH) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $noATH_addr;
      $gfp_addr=$gfp;
      $noATH_addr=$noATH;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$noATH_addr;
      var $2=$gfp_addr;
      var $noATH1=(($2+216)|0);
      HEAP32[(($noATH1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_noATH($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $noATH=(($1+216)|0);
      var $2=HEAP32[(($noATH)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_ATHtype($gfp, $ATHtype) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $ATHtype_addr;
      $gfp_addr=$gfp;
      $ATHtype_addr=$ATHtype;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ATHtype_addr;
      var $2=$gfp_addr;
      var $ATHtype1=(($2+220)|0);
      HEAP32[(($ATHtype1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_ATHtype($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $ATHtype=(($1+220)|0);
      var $2=HEAP32[(($ATHtype)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_ATHcurve($gfp, $ATHcurve) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $ATHcurve_addr;
      $gfp_addr=$gfp;
      $ATHcurve_addr=$ATHcurve;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ATHcurve_addr;
      var $2=$gfp_addr;
      var $ATHcurve1=(($2+224)|0);
      HEAPF32[(($ATHcurve1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_ATHcurve($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $ATHcurve=(($1+224)|0);
      var $2=HEAPF32[(($ATHcurve)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_ATHlower($gfp, $ATHlower) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $ATHlower_addr;
      $gfp_addr=$gfp;
      $ATHlower_addr=$ATHlower;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ATHlower_addr;
      var $2=$gfp_addr;
      var $ATH_lower_db=(($2+228)|0);
      HEAPF32[(($ATH_lower_db)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_ATHlower($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $ATH_lower_db=(($1+228)|0);
      var $2=HEAPF32[(($ATH_lower_db)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_athaa_type($gfp, $athaa_type) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $athaa_type_addr;
      $gfp_addr=$gfp;
      $athaa_type_addr=$athaa_type;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$athaa_type_addr;
      var $2=$gfp_addr;
      var $athaa_type1=(($2+232)|0);
      HEAP32[(($athaa_type1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_athaa_type($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $athaa_type=(($1+232)|0);
      var $2=HEAP32[(($athaa_type)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_athaa_sensitivity($gfp, $athaa_sensitivity) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $athaa_sensitivity_addr;
      $gfp_addr=$gfp;
      $athaa_sensitivity_addr=$athaa_sensitivity;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$athaa_sensitivity_addr;
      var $2=$gfp_addr;
      var $athaa_sensitivity1=(($2+236)|0);
      HEAPF32[(($athaa_sensitivity1)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_athaa_sensitivity($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $athaa_sensitivity=(($1+236)|0);
      var $2=HEAPF32[(($athaa_sensitivity)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_allow_diff_short($gfp, $allow_diff_short) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $allow_diff_short_addr;
      $gfp_addr=$gfp;
      $allow_diff_short_addr=$allow_diff_short;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$allow_diff_short_addr;
      var $tobool1=(($1)|0)!=0;
      var $cond=$tobool1 ? 0 : 1;
      var $2=$gfp_addr;
      var $short_blocks=(($2+240)|0);
      HEAP32[(($short_blocks)>>2)]=$cond;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_allow_diff_short($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $short_blocks=(($1+240)|0);
      var $2=HEAP32[(($short_blocks)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=1;
      label = 7; break;
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_useTemporal($gfp, $useTemporal) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $useTemporal_addr;
      $gfp_addr=$gfp;
      $useTemporal_addr=$useTemporal;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$useTemporal_addr;
      var $cmp=0 <= (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$useTemporal_addr;
      var $cmp1=(($2)|0) <= 1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$useTemporal_addr;
      var $4=$gfp_addr;
      var $useTemporal3=(($4+244)|0);
      HEAP32[(($useTemporal3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_useTemporal($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $useTemporal=(($1+244)|0);
      var $2=HEAP32[(($useTemporal)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_interChRatio($gfp, $ratio) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $ratio_addr;
      $gfp_addr=$gfp;
      $ratio_addr=$ratio;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$ratio_addr;
      var $cmp=0 <= $1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$ratio_addr;
      var $conv=$2;
      var $cmp1=$conv <= 1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$ratio_addr;
      var $4=$gfp_addr;
      var $interChRatio=(($4+248)|0);
      HEAPF32[(($interChRatio)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_interChRatio($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $interChRatio=(($1+248)|0);
      var $2=HEAPF32[(($interChRatio)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_substep($gfp, $method) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $method_addr;
      $gfp_addr=$gfp;
      $method_addr=$method;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$method_addr;
      var $cmp=0 <= (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$method_addr;
      var $cmp1=(($2)|0) <= 7;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$method_addr;
      var $4=$gfp_addr;
      var $substep_shaping=(($4+80)|0);
      HEAP32[(($substep_shaping)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_substep($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $substep_shaping=(($1+80)|0);
      var $2=HEAP32[(($substep_shaping)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_sfscale($gfp, $val) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $val_addr;
      $gfp_addr=$gfp;
      $val_addr=$val;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$val_addr;
      var $cmp=(($1)|0)!=0;
      var $cond=$cmp ? 2 : 1;
      var $2=$gfp_addr;
      var $noise_shaping=(($2+84)|0);
      HEAP32[(($noise_shaping)>>2)]=$cond;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_sfscale($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $noise_shaping=(($1+84)|0);
      var $2=HEAP32[(($noise_shaping)>>2)];
      var $cmp=(($2)|0)==2;
      var $cond=$cmp ? 1 : 0;
      $retval=$cond;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_subblock_gain($gfp, $sbgain) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $sbgain_addr;
      $gfp_addr=$gfp;
      $sbgain_addr=$sbgain;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$sbgain_addr;
      var $2=$gfp_addr;
      var $subblock_gain=(($2+88)|0);
      HEAP32[(($subblock_gain)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_subblock_gain($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $subblock_gain=(($1+88)|0);
      var $2=HEAP32[(($subblock_gain)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_no_short_blocks($gfp, $no_short_blocks) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $no_short_blocks_addr;
      $gfp_addr=$gfp;
      $no_short_blocks_addr=$no_short_blocks;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$no_short_blocks_addr;
      var $cmp=0 <= (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$no_short_blocks_addr;
      var $cmp1=(($2)|0) <= 1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$no_short_blocks_addr;
      var $tobool3=(($3)|0)!=0;
      var $cond=$tobool3 ? 2 : 0;
      var $4=$gfp_addr;
      var $short_blocks=(($4+240)|0);
      HEAP32[(($short_blocks)>>2)]=$cond;
      $retval=0;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_no_short_blocks($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$gfp_addr;
      var $short_blocks=(($1+240)|0);
      var $2=HEAP32[(($short_blocks)>>2)];
      if ((($2)|0)==-1) {
        label = 5; break;
      }
      else if ((($2)|0)==2) {
        label = 6; break;
      }
      else if ((($2)|0)==0 | (($2)|0)==1 | (($2)|0)==3) {
        label = 7; break;
      }
      else {
      label = 4; break;
      }
      
    case 4: 
      label = 5; break;
    case 5: 
      $retval=-1;
      label = 9; break;
    case 6: 
      $retval=1;
      label = 9; break;
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_force_short_blocks($gfp, $short_blocks) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $short_blocks_addr;
      $gfp_addr=$gfp;
      $short_blocks_addr=$short_blocks;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $1=$short_blocks_addr;
      var $cmp=0 > (($1)|0);
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$short_blocks_addr;
      var $cmp1=1 < (($2)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 13; break;
    case 6: 
      var $3=$short_blocks_addr;
      var $cmp3=(($3)|0)==1;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $4=$gfp_addr;
      var $short_blocks5=(($4+240)|0);
      HEAP32[(($short_blocks5)>>2)]=3;
      label = 11; break;
    case 8: 
      var $5=$gfp_addr;
      var $short_blocks6=(($5+240)|0);
      var $6=HEAP32[(($short_blocks6)>>2)];
      var $cmp7=(($6)|0)==3;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $7=$gfp_addr;
      var $short_blocks9=(($7+240)|0);
      HEAP32[(($short_blocks9)>>2)]=0;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $retval=0;
      label = 13; break;
    case 12: 
      $retval=-1;
      label = 13; break;
    case 13: 
      var $8=$retval;

      return $8;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_force_short_blocks($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$gfp_addr;
      var $short_blocks=(($1+240)|0);
      var $2=HEAP32[(($short_blocks)>>2)];
      if ((($2)|0)==-1) {
        label = 5; break;
      }
      else if ((($2)|0)==2 | (($2)|0)==0 | (($2)|0)==1) {
        label = 6; break;
      }
      else if ((($2)|0)==3) {
        label = 7; break;
      }
      else {
      label = 4; break;
      }
      
    case 4: 
      label = 5; break;
    case 5: 
      $retval=-1;
      label = 9; break;
    case 6: 
      $retval=0;
      label = 9; break;
    case 7: 
      $retval=1;
      label = 9; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_short_threshold_lrm($gfp, $lrm) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $lrm_addr;
      $gfp_addr=$gfp;
      $lrm_addr=$lrm;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$lrm_addr;
      var $2=$gfp_addr;
      var $attackthre=(($2+264)|0);
      HEAPF32[(($attackthre)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_short_threshold_lrm($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $attackthre=(($1+264)|0);
      var $2=HEAPF32[(($attackthre)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_short_threshold_s($gfp, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $s_addr;
      $gfp_addr=$gfp;
      $s_addr=$s;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$s_addr;
      var $2=$gfp_addr;
      var $attackthre_s=(($2+268)|0);
      HEAPF32[(($attackthre_s)>>2)]=$1;
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_short_threshold_s($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $attackthre_s=(($1+268)|0);
      var $2=HEAPF32[(($attackthre_s)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_short_threshold($gfp, $lrm, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $lrm_addr;
      var $s_addr;
      $gfp_addr=$gfp;
      $lrm_addr=$lrm;
      $s_addr=$s;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $2=$lrm_addr;
      var $call1=_lame_set_short_threshold_lrm($1, $2);
      var $3=$gfp_addr;
      var $4=$s_addr;
      var $call2=_lame_set_short_threshold_s($3, $4);
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_emphasis($gfp, $emphasis) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $emphasis_addr;
      $gfp_addr=$gfp;
      $emphasis_addr=$emphasis;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$emphasis_addr;
      var $cmp=0 <= (($1)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$emphasis_addr;
      var $cmp1=(($2)|0) < 4;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$emphasis_addr;
      var $4=$gfp_addr;
      var $emphasis3=(($4+116)|0);
      HEAP32[(($emphasis3)>>2)]=$3;
      $retval=0;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=-1;
      label = 8; break;
    case 8: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_emphasis($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $emphasis=(($1+116)|0);
      var $2=HEAP32[(($emphasis)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_version($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $cfg=(($4+16)|0);
      var $version=(($cfg)|0);
      var $5=HEAP32[(($version)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_encoder_delay($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_enc=(($4+84036)|0);
      var $encoder_delay=(($ov_enc+720)|0);
      var $5=HEAP32[(($encoder_delay)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_encoder_padding($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_enc=(($4+84036)|0);
      var $encoder_padding=(($ov_enc+724)|0);
      var $5=HEAP32[(($encoder_padding)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_framesize($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $cfg;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$cfg;
      var $mode_gr=(($5+60)|0);
      var $6=HEAP32[(($mode_gr)>>2)];
      var $mul=((($6)*(576))&-1);
      $retval=$mul;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $7=$retval;

      return $7;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_frameNum($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_enc=(($4+84036)|0);
      var $frame_number=(($ov_enc+708)|0);
      var $5=HEAP32[(($frame_number)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_preset_expopts($gfp, $preset_expopts) {
  var label = 0;


  var $gfp_addr;
  var $preset_expopts_addr;
  $gfp_addr=$gfp;
  $preset_expopts_addr=$preset_expopts;
  var $0=$gfp_addr;
  var $1=$preset_expopts_addr;

  return 0;
}


function _lame_set_preset_notune($gfp, $preset_notune) {
  var label = 0;


  var $gfp_addr;
  var $preset_notune_addr;
  $gfp_addr=$gfp;
  $preset_notune_addr=$preset_notune;
  var $0=$gfp_addr;
  var $1=$preset_notune_addr;

  return 0;
}


function _lame_get_bitrate($mpeg_version, $table_index) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mpeg_version_addr;
      var $table_index_addr;
      $mpeg_version_addr=$mpeg_version;
      $table_index_addr=$table_index;
      var $0=$mpeg_version_addr;
      var $cmp=0 <= (($0)|0);
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$mpeg_version_addr;
      var $cmp1=(($1)|0) <= 2;
      if ($cmp1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$table_index_addr;
      var $cmp2=0 <= (($2)|0);
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $3=$table_index_addr;
      var $cmp4=(($3)|0) <= 15;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$table_index_addr;
      var $5=$mpeg_version_addr;
      var $arrayidx=((5348820+($5<<6))|0);
      var $arrayidx6=(($arrayidx+($4<<2))|0);
      var $6=HEAP32[(($arrayidx6)>>2)];
      $retval=$6;
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $7=$retval;

      return $7;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_samplerate($mpeg_version, $table_index) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mpeg_version_addr;
      var $table_index_addr;
      $mpeg_version_addr=$mpeg_version;
      $table_index_addr=$table_index;
      var $0=$mpeg_version_addr;
      var $cmp=0 <= (($0)|0);
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$mpeg_version_addr;
      var $cmp1=(($1)|0) <= 2;
      if ($cmp1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$table_index_addr;
      var $cmp2=0 <= (($2)|0);
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $3=$table_index_addr;
      var $cmp4=(($3)|0) <= 3;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$table_index_addr;
      var $5=$mpeg_version_addr;
      var $arrayidx=((5256796+($5<<4))|0);
      var $arrayidx6=(($arrayidx+($4<<2))|0);
      var $6=HEAP32[(($arrayidx6)>>2)];
      $retval=$6;
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $7=$retval;

      return $7;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_mf_samples_to_encode($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $sv_enc=(($4+27820)|0);
      var $mf_samples_to_encode=(($sv_enc+56208)|0);
      var $5=HEAP32[(($mf_samples_to_encode)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_size_mp3buffer($gfp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $size=__stackBase__;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $call4=_compute_flushbits($4, $size);
      var $5=HEAP32[(($size)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;
      STACKTOP = __stackBase__;
      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_RadioGain($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_rpg=(($4+85676)|0);
      var $RadioGain=(($ov_rpg+8)|0);
      var $5=HEAP32[(($RadioGain)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_AudiophileGain($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=0;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $4=$retval;

      return $4;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_PeakSample($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_rpg=(($4+85676)|0);
      var $PeakSample=(($ov_rpg+4)|0);
      var $5=HEAPF32[(($PeakSample)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_noclipGainChange($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_rpg=(($4+85676)|0);
      var $noclipGainChange=(($ov_rpg+12)|0);
      var $5=HEAP32[(($noclipGainChange)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_noclipScale($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$gfc;
      var $ov_rpg=(($4+85676)|0);
      var $noclipScale=(($ov_rpg)|0);
      var $5=HEAPF32[(($noclipScale)>>2)];
      $retval=$5;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_totalframes($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $gfc;
      var $cfg;
      var $pcm_samples_per_frame;
      var $pcm_samples_to_encode;
      var $end_padding;
      var $q;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $1=$gfp_addr;
      var $internal_flags=(($1+288)|0);
      var $2=HEAP32[(($internal_flags)>>2)];
      $gfc=$2;
      var $3=$gfc;
      var $call1=_is_lame_internal_flags_valid($3);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $4=$gfc;
      var $cfg4=(($4+16)|0);
      $cfg=$cfg4;
      var $5=$cfg;
      var $mode_gr=(($5+60)|0);
      var $6=HEAP32[(($mode_gr)>>2)];
      var $mul=((($6)*(576))&-1);
      $pcm_samples_per_frame=$mul;
      var $7=$gfp_addr;
      var $num_samples=(($7+4)|0);
      var $8=HEAP32[(($num_samples)>>2)];
      $pcm_samples_to_encode=$8;
      $end_padding=0;
      var $9=$pcm_samples_to_encode;
      var $cmp=(($9)|0)==-1;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 14; break;
    case 6: 
      var $10=$gfp_addr;
      var $samplerate_in=(($10+12)|0);
      var $11=HEAP32[(($samplerate_in)>>2)];
      var $12=$gfp_addr;
      var $samplerate_out=(($12+16)|0);
      var $13=HEAP32[(($samplerate_out)>>2)];
      var $cmp6=(($11)|0)!=(($13)|0);
      if ($cmp6) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $14=$gfp_addr;
      var $samplerate_in7=(($14+12)|0);
      var $15=HEAP32[(($samplerate_in7)>>2)];
      var $cmp8=(($15)|0) > 0;
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $16=$gfp_addr;
      var $samplerate_out10=(($16+16)|0);
      var $17=HEAP32[(($samplerate_out10)>>2)];
      var $conv=(($17)|0);
      var $18=$gfp_addr;
      var $samplerate_in11=(($18+12)|0);
      var $19=HEAP32[(($samplerate_in11)>>2)];
      var $conv12=(($19)|0);
      var $div=($conv)/($conv12);
      $q=$div;
      var $20=$q;
      var $21=$pcm_samples_to_encode;
      var $conv13=(($21)>>>0);
      var $mul14=($conv13)*($20);
      var $conv15=($mul14>=0 ? Math.floor($mul14) : Math.ceil($mul14));
      $pcm_samples_to_encode=$conv15;
      label = 9; break;
    case 9: 
      var $22=$pcm_samples_to_encode;
      var $add=((($22)+(576))|0);
      $pcm_samples_to_encode=$add;
      var $23=$pcm_samples_per_frame;
      var $24=$pcm_samples_to_encode;
      var $25=$pcm_samples_per_frame;
      var $rem=((($24)>>>0))%((($25)>>>0));
      var $sub=((($23)-($rem))|0);
      $end_padding=$sub;
      var $26=$end_padding;
      var $cmp17=(($26)>>>0) < 576;
      if ($cmp17) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=$pcm_samples_per_frame;
      var $28=$end_padding;
      var $add20=((($28)+($27))|0);
      $end_padding=$add20;
      label = 11; break;
    case 11: 
      var $29=$end_padding;
      var $30=$pcm_samples_to_encode;
      var $add22=((($30)+($29))|0);
      $pcm_samples_to_encode=$add22;
      var $31=$pcm_samples_to_encode;
      var $32=$pcm_samples_per_frame;
      var $div23=Math.floor(((($31)>>>0))/((($32)>>>0)));
      $retval=$div23;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      $retval=0;
      label = 14; break;
    case 14: 
      var $33=$retval;

      return $33;
    default: assert(0, "bad label: " + label);
  }

}
_lame_get_totalframes["X"]=1;

function _lame_set_preset($gfp, $preset) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $preset_addr;
      $gfp_addr=$gfp;
      $preset_addr=$preset;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$preset_addr;
      var $2=$gfp_addr;
      var $preset1=(($2+152)|0);
      HEAP32[(($preset1)>>2)]=$1;
      var $3=$gfp_addr;
      var $4=$preset_addr;
      var $call2=_apply_preset($3, $4, 1);
      $retval=$call2;
      label = 5; break;
    case 4: 
      $retval=-1;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_asm_optimizations($gfp, $optim, $mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      var $optim_addr;
      var $mode_addr;
      $gfp_addr=$gfp;
      $optim_addr=$optim;
      $mode_addr=$mode;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$mode_addr;
      var $cmp=(($1)|0)==1;
      var $cond=$cmp ? 1 : 0;
      $mode_addr=$cond;
      var $2=$optim_addr;
      if ((($2)|0)==1) {
        label = 4; break;
      }
      else if ((($2)|0)==2) {
        label = 5; break;
      }
      else if ((($2)|0)==3) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
      
    case 4: 
      var $3=$mode_addr;
      var $4=$gfp_addr;
      var $asm_optimizations=(($4+292)|0);
      var $mmx=(($asm_optimizations)|0);
      HEAP32[(($mmx)>>2)]=$3;
      var $5=$optim_addr;
      $retval=$5;
      label = 9; break;
    case 5: 
      var $6=$mode_addr;
      var $7=$gfp_addr;
      var $asm_optimizations2=(($7+292)|0);
      var $amd3dnow=(($asm_optimizations2+4)|0);
      HEAP32[(($amd3dnow)>>2)]=$6;
      var $8=$optim_addr;
      $retval=$8;
      label = 9; break;
    case 6: 
      var $9=$mode_addr;
      var $10=$gfp_addr;
      var $asm_optimizations4=(($10+292)|0);
      var $sse=(($asm_optimizations4+8)|0);
      HEAP32[(($sse)>>2)]=$9;
      var $11=$optim_addr;
      $retval=$11;
      label = 9; break;
    case 7: 
      var $12=$optim_addr;
      $retval=$12;
      label = 9; break;
    case 8: 
      $retval=-1;
      label = 9; break;
    case 9: 
      var $13=$retval;

      return $13;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_write_id3tag_automatic($gfp, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $v_addr;
      $gfp_addr=$gfp;
      $v_addr=$v;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$v_addr;
      var $2=$gfp_addr;
      var $write_id3tag_automatic=(($2+68)|0);
      HEAP32[(($write_id3tag_automatic)>>2)]=$1;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_write_id3tag_automatic($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $write_id3tag_automatic=(($1+68)|0);
      var $2=HEAP32[(($write_id3tag_automatic)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=1;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_tune($gfp, $val) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $val_addr;
      $gfp_addr=$gfp;
      $val_addr=$val;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$val_addr;
      var $2=$gfp_addr;
      var $tune_value_a=(($2+260)|0);
      HEAPF32[(($tune_value_a)>>2)]=$1;
      var $3=$gfp_addr;
      var $tune=(($3+256)|0);
      HEAP32[(($tune)>>2)]=1;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_set_msfix($gfp, $msfix) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfp_addr;
      var $msfix_addr;
      $gfp_addr=$gfp;
      $msfix_addr=$msfix;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$msfix_addr;
      var $conv=$1;
      var $2=$gfp_addr;
      var $msfix1=(($2+252)|0);
      HEAPF32[(($msfix1)>>2)]=$conv;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_get_msfix($gfp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfp_addr;
      $gfp_addr=$gfp;
      var $0=$gfp_addr;
      var $call=_is_lame_global_flags_valid($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$gfp_addr;
      var $msfix=(($1+252)|0);
      var $2=HEAPF32[(($msfix)>>2)];
      $retval=$2;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $3=$retval;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _noquant_count_bits($gfc, $gi, $prev_noise) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $gi_addr;
      var $prev_noise_addr;
      var $cfg;
      var $bits=__stackBase__;
      var $i;
      var $a1;
      var $a2;
      var $ix;
      var $x4;
      var $x3;
      var $x2;
      var $x1;
      var $p;
      var $sfb;
      $gfc_addr=$gfc;
      $gi_addr=$gi;
      $prev_noise_addr=$prev_noise;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      HEAP32[(($bits)>>2)]=0;
      var $1=$gi_addr;
      var $l3_enc=(($1+2304)|0);
      var $arraydecay=(($l3_enc)|0);
      $ix=$arraydecay;
      var $2=$gi_addr;
      var $max_nonzero_coeff=(($2+5208)|0);
      var $3=HEAP32[(($max_nonzero_coeff)>>2)];
      var $add=((($3)+(2))|0);
      var $shr=$add >> 1;
      var $shl=$shr << 1;
      var $cmp=576 < (($shl)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 576;label = 5; break;
    case 4: 
      var $4=$gi_addr;
      var $max_nonzero_coeff2=(($4+5208)|0);
      var $5=HEAP32[(($max_nonzero_coeff2)>>2)];
      var $add3=((($5)+(2))|0);
      var $shr4=$add3 >> 1;
      var $shl5=$shr4 << 1;
      var $cond = $shl5;label = 5; break;
    case 5: 
      var $cond;
      $i=$cond;
      var $6=$prev_noise_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$prev_noise_addr;
      var $sfb_count1=(($7+4)|0);
      HEAP32[(($sfb_count1)>>2)]=0;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $8=$i;
      var $cmp6=(($8)|0) > 1;
      if ($cmp6) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $9=$i;
      var $sub=((($9)-(1))|0);
      var $10=$ix;
      var $arrayidx=(($10+($sub<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $12=$i;
      var $sub7=((($12)-(2))|0);
      var $13=$ix;
      var $arrayidx8=(($13+($sub7<<2))|0);
      var $14=HEAP32[(($arrayidx8)>>2)];
      var $or=$11 | $14;
      var $tobool9=(($or)|0)!=0;
      if ($tobool9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=$i;
      var $sub12=((($15)-(2))|0);
      $i=$sub12;
      label = 8; break;
    case 13: 
      var $16=$i;
      var $17=$gi_addr;
      var $count1=(($17+4776)|0);
      HEAP32[(($count1)>>2)]=$16;
      $a2=0;
      $a1=0;
      label = 14; break;
    case 14: 
      var $18=$i;
      var $cmp14=(($18)|0) > 3;
      if ($cmp14) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $19=$i;
      var $sub16=((($19)-(4))|0);
      var $20=$ix;
      var $arrayidx17=(($20+($sub16<<2))|0);
      var $21=HEAP32[(($arrayidx17)>>2)];
      $x4=$21;
      var $22=$i;
      var $sub18=((($22)-(3))|0);
      var $23=$ix;
      var $arrayidx19=(($23+($sub18<<2))|0);
      var $24=HEAP32[(($arrayidx19)>>2)];
      $x3=$24;
      var $25=$i;
      var $sub20=((($25)-(2))|0);
      var $26=$ix;
      var $arrayidx21=(($26+($sub20<<2))|0);
      var $27=HEAP32[(($arrayidx21)>>2)];
      $x2=$27;
      var $28=$i;
      var $sub22=((($28)-(1))|0);
      var $29=$ix;
      var $arrayidx23=(($29+($sub22<<2))|0);
      var $30=HEAP32[(($arrayidx23)>>2)];
      $x1=$30;
      var $31=$x4;
      var $32=$x3;
      var $or24=$31 | $32;
      var $33=$x2;
      var $or25=$or24 | $33;
      var $34=$x1;
      var $or26=$or25 | $34;
      var $cmp27=(($or26)>>>0) > 1;
      if ($cmp27) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 19; break;
    case 17: 
      var $35=$x4;
      var $mul=((($35<<1))&-1);
      var $36=$x3;
      var $add30=((($mul)+($36))|0);
      var $mul31=((($add30<<1))&-1);
      var $37=$x2;
      var $add32=((($mul31)+($37))|0);
      var $mul33=((($add32<<1))&-1);
      var $38=$x1;
      var $add34=((($mul33)+($38))|0);
      $p=$add34;
      var $39=$p;
      var $arrayidx35=((5250312+$39)|0);
      var $40=HEAP8[($arrayidx35)];
      var $conv=(($40)&255);
      var $41=$a1;
      var $add36=((($41)+($conv))|0);
      $a1=$add36;
      var $42=$p;
      var $arrayidx37=((5250264+$42)|0);
      var $43=HEAP8[($arrayidx37)];
      var $conv38=(($43)&255);
      var $44=$a2;
      var $add39=((($44)+($conv38))|0);
      $a2=$add39;
      label = 18; break;
    case 18: 
      var $45=$i;
      var $sub41=((($45)-(4))|0);
      $i=$sub41;
      label = 14; break;
    case 19: 
      var $46=$a1;
      HEAP32[(($bits)>>2)]=$46;
      var $47=$gi_addr;
      var $count1table_select=(($47+4840)|0);
      HEAP32[(($count1table_select)>>2)]=0;
      var $48=$a1;
      var $49=$a2;
      var $cmp43=(($48)|0) > (($49)|0);
      if ($cmp43) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $50=$a2;
      HEAP32[(($bits)>>2)]=$50;
      var $51=$gi_addr;
      var $count1table_select46=(($51+4840)|0);
      HEAP32[(($count1table_select46)>>2)]=1;
      label = 21; break;
    case 21: 
      var $52=HEAP32[(($bits)>>2)];
      var $53=$gi_addr;
      var $count1bits=(($53+5184)|0);
      HEAP32[(($count1bits)>>2)]=$52;
      var $54=$i;
      var $55=$gi_addr;
      var $big_values=(($55+4772)|0);
      HEAP32[(($big_values)>>2)]=$54;
      var $56=$i;
      var $cmp48=(($56)|0)==0;
      if ($cmp48) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $57=HEAP32[(($bits)>>2)];
      $retval=$57;
      label = 55; break;
    case 23: 
      var $58=$gi_addr;
      var $block_type=(($58+4788)|0);
      var $59=HEAP32[(($block_type)>>2)];
      var $cmp52=(($59)|0)==2;
      if ($cmp52) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $60=$gfc_addr;
      var $scalefac_band=(($60+21360)|0);
      var $s=(($scalefac_band+92)|0);
      var $arrayidx55=(($s+12)|0);
      var $61=HEAP32[(($arrayidx55)>>2)];
      var $mul56=((($61)*(3))&-1);
      $a1=$mul56;
      var $62=$a1;
      var $63=$gi_addr;
      var $big_values57=(($63+4772)|0);
      var $64=HEAP32[(($big_values57)>>2)];
      var $cmp58=(($62)|0) > (($64)|0);
      if ($cmp58) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $65=$gi_addr;
      var $big_values61=(($65+4772)|0);
      var $66=HEAP32[(($big_values61)>>2)];
      $a1=$66;
      label = 26; break;
    case 26: 
      var $67=$gi_addr;
      var $big_values63=(($67+4772)|0);
      var $68=HEAP32[(($big_values63)>>2)];
      $a2=$68;
      label = 35; break;
    case 27: 
      var $69=$gi_addr;
      var $block_type64=(($69+4788)|0);
      var $70=HEAP32[(($block_type64)>>2)];
      var $cmp65=(($70)|0)==0;
      if ($cmp65) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $71=$i;
      var $sub68=((($71)-(2))|0);
      var $72=$gfc_addr;
      var $sv_qnt=(($72+84764)|0);
      var $bv_scf=(($sv_qnt+332)|0);
      var $arrayidx69=(($bv_scf+$sub68)|0);
      var $73=HEAP8[($arrayidx69)];
      var $conv70=(($73 << 24) >> 24);
      var $74=$gi_addr;
      var $region0_count=(($74+4824)|0);
      HEAP32[(($region0_count)>>2)]=$conv70;
      $a1=$conv70;
      var $75=$i;
      var $sub71=((($75)-(1))|0);
      var $76=$gfc_addr;
      var $sv_qnt72=(($76+84764)|0);
      var $bv_scf73=(($sv_qnt72+332)|0);
      var $arrayidx74=(($bv_scf73+$sub71)|0);
      var $77=HEAP8[($arrayidx74)];
      var $conv75=(($77 << 24) >> 24);
      var $78=$gi_addr;
      var $region1_count=(($78+4828)|0);
      HEAP32[(($region1_count)>>2)]=$conv75;
      $a2=$conv75;
      var $79=$a1;
      var $80=$a2;
      var $add76=((($79)+($80))|0);
      var $add77=((($add76)+(2))|0);
      var $81=$gfc_addr;
      var $scalefac_band78=(($81+21360)|0);
      var $l=(($scalefac_band78)|0);
      var $arrayidx79=(($l+($add77<<2))|0);
      var $82=HEAP32[(($arrayidx79)>>2)];
      $a2=$82;
      var $83=$a1;
      var $add80=((($83)+(1))|0);
      var $84=$gfc_addr;
      var $scalefac_band81=(($84+21360)|0);
      var $l82=(($scalefac_band81)|0);
      var $arrayidx83=(($l82+($add80<<2))|0);
      var $85=HEAP32[(($arrayidx83)>>2)];
      $a1=$85;
      var $86=$a2;
      var $87=$i;
      var $cmp84=(($86)|0) < (($87)|0);
      if ($cmp84) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $88=$gfc_addr;
      var $choose_table=(($88+85812)|0);
      var $89=HEAP32[(($choose_table)>>2)];
      var $90=$ix;
      var $91=$a2;
      var $add_ptr=(($90+($91<<2))|0);
      var $92=$ix;
      var $93=$i;
      var $add_ptr87=(($92+($93<<2))|0);
      var $call=FUNCTION_TABLE[$89]($add_ptr, $add_ptr87, $bits);
      var $94=$gi_addr;
      var $table_select=(($94+4796)|0);
      var $arrayidx88=(($table_select+8)|0);
      HEAP32[(($arrayidx88)>>2)]=$call;
      label = 30; break;
    case 30: 
      label = 34; break;
    case 31: 
      var $95=$gi_addr;
      var $region0_count91=(($95+4824)|0);
      HEAP32[(($region0_count91)>>2)]=7;
      var $96=$gi_addr;
      var $region1_count92=(($96+4828)|0);
      HEAP32[(($region1_count92)>>2)]=13;
      var $97=$gfc_addr;
      var $scalefac_band93=(($97+21360)|0);
      var $l94=(($scalefac_band93)|0);
      var $arrayidx95=(($l94+32)|0);
      var $98=HEAP32[(($arrayidx95)>>2)];
      $a1=$98;
      var $99=$i;
      $a2=$99;
      var $100=$a1;
      var $101=$a2;
      var $cmp96=(($100)|0) > (($101)|0);
      if ($cmp96) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $102=$a2;
      $a1=$102;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $103=$a1;
      var $104=$i;
      var $cmp102=(($103)|0) < (($104)|0);
      if ($cmp102) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $105=$a1;
      var $cond107 = $105;label = 38; break;
    case 37: 
      var $106=$i;
      var $cond107 = $106;label = 38; break;
    case 38: 
      var $cond107;
      $a1=$cond107;
      var $107=$a2;
      var $108=$i;
      var $cmp108=(($107)|0) < (($108)|0);
      if ($cmp108) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $109=$a2;
      var $cond113 = $109;label = 41; break;
    case 40: 
      var $110=$i;
      var $cond113 = $110;label = 41; break;
    case 41: 
      var $cond113;
      $a2=$cond113;
      var $111=$a1;
      var $cmp114=0 < (($111)|0);
      if ($cmp114) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $112=$gfc_addr;
      var $choose_table117=(($112+85812)|0);
      var $113=HEAP32[(($choose_table117)>>2)];
      var $114=$ix;
      var $115=$ix;
      var $116=$a1;
      var $add_ptr118=(($115+($116<<2))|0);
      var $call119=FUNCTION_TABLE[$113]($114, $add_ptr118, $bits);
      var $117=$gi_addr;
      var $table_select120=(($117+4796)|0);
      var $arrayidx121=(($table_select120)|0);
      HEAP32[(($arrayidx121)>>2)]=$call119;
      label = 43; break;
    case 43: 
      var $118=$a1;
      var $119=$a2;
      var $cmp123=(($118)|0) < (($119)|0);
      if ($cmp123) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $120=$gfc_addr;
      var $choose_table126=(($120+85812)|0);
      var $121=HEAP32[(($choose_table126)>>2)];
      var $122=$ix;
      var $123=$a1;
      var $add_ptr127=(($122+($123<<2))|0);
      var $124=$ix;
      var $125=$a2;
      var $add_ptr128=(($124+($125<<2))|0);
      var $call129=FUNCTION_TABLE[$121]($add_ptr127, $add_ptr128, $bits);
      var $126=$gi_addr;
      var $table_select130=(($126+4796)|0);
      var $arrayidx131=(($table_select130+4)|0);
      HEAP32[(($arrayidx131)>>2)]=$call129;
      label = 45; break;
    case 45: 
      var $127=$cfg;
      var $use_best_huffman=(($127+20)|0);
      var $128=HEAP32[(($use_best_huffman)>>2)];
      var $cmp133=(($128)|0)==2;
      if ($cmp133) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $129=HEAP32[(($bits)>>2)];
      var $130=$gi_addr;
      var $part2_3_length=(($130+4768)|0);
      HEAP32[(($part2_3_length)>>2)]=$129;
      var $131=$gfc_addr;
      var $132=$gi_addr;
      _best_huffman_divide($131, $132);
      var $133=$gi_addr;
      var $part2_3_length136=(($133+4768)|0);
      var $134=HEAP32[(($part2_3_length136)>>2)];
      HEAP32[(($bits)>>2)]=$134;
      label = 47; break;
    case 47: 
      var $135=$prev_noise_addr;
      var $tobool138=(($135)|0)!=0;
      if ($tobool138) { label = 48; break; } else { label = 54; break; }
    case 48: 
      var $136=$gi_addr;
      var $block_type140=(($136+4788)|0);
      var $137=HEAP32[(($block_type140)>>2)];
      var $cmp141=(($137)|0)==0;
      if ($cmp141) { label = 49; break; } else { label = 53; break; }
    case 49: 
      $sfb=0;
      label = 50; break;
    case 50: 
      var $138=$sfb;
      var $139=$gfc_addr;
      var $scalefac_band144=(($139+21360)|0);
      var $l145=(($scalefac_band144)|0);
      var $arrayidx146=(($l145+($138<<2))|0);
      var $140=HEAP32[(($arrayidx146)>>2)];
      var $141=$gi_addr;
      var $big_values147=(($141+4772)|0);
      var $142=HEAP32[(($big_values147)>>2)];
      var $cmp148=(($140)|0) < (($142)|0);
      if ($cmp148) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $143=$sfb;
      var $inc=((($143)+(1))|0);
      $sfb=$inc;
      label = 50; break;
    case 52: 
      var $144=$sfb;
      var $145=$prev_noise_addr;
      var $sfb_count1150=(($145+4)|0);
      HEAP32[(($sfb_count1150)>>2)]=$144;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $146=HEAP32[(($bits)>>2)];
      $retval=$146;
      label = 55; break;
    case 55: 
      var $147=$retval;
      STACKTOP = __stackBase__;
      return $147;
    default: assert(0, "bad label: " + label);
  }

}
_noquant_count_bits["X"]=1;

function _best_huffman_divide($gfc, $gi) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 5620)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gi_addr;
      var $cfg;
      var $i;
      var $a1;
      var $a2;
      var $cod_info2=__stackBase__;
      var $ix;
      var $r01_bits=(__stackBase__)+(5252);
      var $r01_div=(__stackBase__)+(5344);
      var $r0_tbl=(__stackBase__)+(5436);
      var $r1_tbl=(__stackBase__)+(5528);
      var $p;
      $gfc_addr=$gfc;
      $gi_addr=$gi;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gi_addr;
      var $l3_enc=(($1+2304)|0);
      var $arraydecay=(($l3_enc)|0);
      $ix=$arraydecay;
      var $2=$gi_addr;
      var $block_type=(($2+4788)|0);
      var $3=HEAP32[(($block_type)>>2)];
      var $cmp=(($3)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$cfg;
      var $mode_gr=(($4+60)|0);
      var $5=HEAP32[(($mode_gr)>>2)];
      var $cmp2=(($5)|0)==1;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 29; break;
    case 5: 
      var $6=$cod_info2;
      var $7=$gi_addr;
      var $8=$7;
      assert(5252 % 1 === 0);for (var $$src = $8>>2, $$dest = $6>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $9=$gi_addr;
      var $block_type3=(($9+4788)|0);
      var $10=HEAP32[(($block_type3)>>2)];
      var $cmp4=(($10)|0)==0;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$gfc_addr;
      var $12=$gi_addr;
      var $13=$ix;
      var $arraydecay6=(($r01_bits)|0);
      var $arraydecay7=(($r01_div)|0);
      var $arraydecay8=(($r0_tbl)|0);
      var $arraydecay9=(($r1_tbl)|0);
      _recalc_divide_init($11, $12, $13, $arraydecay6, $arraydecay7, $arraydecay8, $arraydecay9);
      var $14=$gfc_addr;
      var $15=$gi_addr;
      var $16=$ix;
      var $arraydecay10=(($r01_bits)|0);
      var $arraydecay11=(($r01_div)|0);
      var $arraydecay12=(($r0_tbl)|0);
      var $arraydecay13=(($r1_tbl)|0);
      _recalc_divide_sub($14, $cod_info2, $15, $16, $arraydecay10, $arraydecay11, $arraydecay12, $arraydecay13);
      label = 7; break;
    case 7: 
      var $big_values=(($cod_info2+4772)|0);
      var $17=HEAP32[(($big_values)>>2)];
      $i=$17;
      var $18=$i;
      var $cmp15=(($18)|0)==0;
      if ($cmp15) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $19=$i;
      var $sub=((($19)-(2))|0);
      var $20=$ix;
      var $arrayidx=(($20+($sub<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      var $22=$i;
      var $sub16=((($22)-(1))|0);
      var $23=$ix;
      var $arrayidx17=(($23+($sub16<<2))|0);
      var $24=HEAP32[(($arrayidx17)>>2)];
      var $or=$21 | $24;
      var $cmp18=(($or)>>>0) > 1;
      if ($cmp18) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 29; break;
    case 10: 
      var $25=$gi_addr;
      var $count1=(($25+4776)|0);
      var $26=HEAP32[(($count1)>>2)];
      var $add=((($26)+(2))|0);
      $i=$add;
      var $27=$i;
      var $cmp21=(($27)|0) > 576;
      if ($cmp21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 29; break;
    case 12: 
      var $28=$cod_info2;
      var $29=$gi_addr;
      var $30=$29;
      assert(5252 % 1 === 0);for (var $$src = $30>>2, $$dest = $28>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $31=$i;
      var $count124=(($cod_info2+4776)|0);
      HEAP32[(($count124)>>2)]=$31;
      $a2=0;
      $a1=0;
      label = 13; break;
    case 13: 
      var $32=$i;
      var $big_values25=(($cod_info2+4772)|0);
      var $33=HEAP32[(($big_values25)>>2)];
      var $cmp26=(($32)|0) > (($33)|0);
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $34=$i;
      var $sub27=((($34)-(4))|0);
      var $35=$ix;
      var $arrayidx28=(($35+($sub27<<2))|0);
      var $36=HEAP32[(($arrayidx28)>>2)];
      var $mul=((($36<<1))&-1);
      var $37=$i;
      var $sub29=((($37)-(3))|0);
      var $38=$ix;
      var $arrayidx30=(($38+($sub29<<2))|0);
      var $39=HEAP32[(($arrayidx30)>>2)];
      var $add31=((($mul)+($39))|0);
      var $mul32=((($add31<<1))&-1);
      var $40=$i;
      var $sub33=((($40)-(2))|0);
      var $41=$ix;
      var $arrayidx34=(($41+($sub33<<2))|0);
      var $42=HEAP32[(($arrayidx34)>>2)];
      var $add35=((($mul32)+($42))|0);
      var $mul36=((($add35<<1))&-1);
      var $43=$i;
      var $sub37=((($43)-(1))|0);
      var $44=$ix;
      var $arrayidx38=(($44+($sub37<<2))|0);
      var $45=HEAP32[(($arrayidx38)>>2)];
      var $add39=((($mul36)+($45))|0);
      $p=$add39;
      var $46=$p;
      var $arrayidx40=((5250312+$46)|0);
      var $47=HEAP8[($arrayidx40)];
      var $conv=(($47)&255);
      var $48=$a1;
      var $add41=((($48)+($conv))|0);
      $a1=$add41;
      var $49=$p;
      var $arrayidx42=((5250264+$49)|0);
      var $50=HEAP8[($arrayidx42)];
      var $conv43=(($50)&255);
      var $51=$a2;
      var $add44=((($51)+($conv43))|0);
      $a2=$add44;
      label = 15; break;
    case 15: 
      var $52=$i;
      var $sub45=((($52)-(4))|0);
      $i=$sub45;
      label = 13; break;
    case 16: 
      var $53=$i;
      var $big_values46=(($cod_info2+4772)|0);
      HEAP32[(($big_values46)>>2)]=$53;
      var $count1table_select=(($cod_info2+4840)|0);
      HEAP32[(($count1table_select)>>2)]=0;
      var $54=$a1;
      var $55=$a2;
      var $cmp47=(($54)|0) > (($55)|0);
      if ($cmp47) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $56=$a2;
      $a1=$56;
      var $count1table_select50=(($cod_info2+4840)|0);
      HEAP32[(($count1table_select50)>>2)]=1;
      label = 18; break;
    case 18: 
      var $57=$a1;
      var $count1bits=(($cod_info2+5184)|0);
      HEAP32[(($count1bits)>>2)]=$57;
      var $block_type52=(($cod_info2+4788)|0);
      var $58=HEAP32[(($block_type52)>>2)];
      var $cmp53=(($58)|0)==0;
      if ($cmp53) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $59=$gfc_addr;
      var $60=$gi_addr;
      var $61=$ix;
      var $arraydecay56=(($r01_bits)|0);
      var $arraydecay57=(($r01_div)|0);
      var $arraydecay58=(($r0_tbl)|0);
      var $arraydecay59=(($r1_tbl)|0);
      _recalc_divide_sub($59, $cod_info2, $60, $61, $arraydecay56, $arraydecay57, $arraydecay58, $arraydecay59);
      label = 29; break;
    case 20: 
      var $62=$a1;
      var $part2_3_length=(($cod_info2+4768)|0);
      HEAP32[(($part2_3_length)>>2)]=$62;
      var $63=$gfc_addr;
      var $scalefac_band=(($63+21360)|0);
      var $l=(($scalefac_band)|0);
      var $arrayidx60=(($l+32)|0);
      var $64=HEAP32[(($arrayidx60)>>2)];
      $a1=$64;
      var $65=$a1;
      var $66=$i;
      var $cmp61=(($65)|0) > (($66)|0);
      if ($cmp61) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $67=$i;
      $a1=$67;
      label = 22; break;
    case 22: 
      var $68=$a1;
      var $cmp65=(($68)|0) > 0;
      if ($cmp65) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $69=$gfc_addr;
      var $choose_table=(($69+85812)|0);
      var $70=HEAP32[(($choose_table)>>2)];
      var $71=$ix;
      var $72=$ix;
      var $73=$a1;
      var $add_ptr=(($72+($73<<2))|0);
      var $part2_3_length68=(($cod_info2+4768)|0);
      var $call=FUNCTION_TABLE[$70]($71, $add_ptr, $part2_3_length68);
      var $table_select=(($cod_info2+4796)|0);
      var $arrayidx69=(($table_select)|0);
      HEAP32[(($arrayidx69)>>2)]=$call;
      label = 24; break;
    case 24: 
      var $74=$i;
      var $75=$a1;
      var $cmp71=(($74)|0) > (($75)|0);
      if ($cmp71) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $76=$gfc_addr;
      var $choose_table74=(($76+85812)|0);
      var $77=HEAP32[(($choose_table74)>>2)];
      var $78=$ix;
      var $79=$a1;
      var $add_ptr75=(($78+($79<<2))|0);
      var $80=$ix;
      var $81=$i;
      var $add_ptr76=(($80+($81<<2))|0);
      var $part2_3_length77=(($cod_info2+4768)|0);
      var $call78=FUNCTION_TABLE[$77]($add_ptr75, $add_ptr76, $part2_3_length77);
      var $table_select79=(($cod_info2+4796)|0);
      var $arrayidx80=(($table_select79+4)|0);
      HEAP32[(($arrayidx80)>>2)]=$call78;
      label = 26; break;
    case 26: 
      var $82=$gi_addr;
      var $part2_3_length82=(($82+4768)|0);
      var $83=HEAP32[(($part2_3_length82)>>2)];
      var $part2_3_length83=(($cod_info2+4768)|0);
      var $84=HEAP32[(($part2_3_length83)>>2)];
      var $cmp84=(($83)|0) > (($84)|0);
      if ($cmp84) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $85=$gi_addr;
      var $86=$85;
      var $87=$cod_info2;
      assert(5252 % 1 === 0);for (var $$src = $87>>2, $$dest = $86>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_best_huffman_divide["X"]=1;

function _count_bits($gfc, $xr, $gi, $prev_noise) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $xr_addr;
      var $gi_addr;
      var $prev_noise_addr;
      var $ix;
      var $w;
      var $sfb;
      var $j;
      var $gain;
      var $roundfac;
      var $width;
      var $k;
      $gfc_addr=$gfc;
      $xr_addr=$xr;
      $gi_addr=$gi;
      $prev_noise_addr=$prev_noise;
      var $0=$gi_addr;
      var $l3_enc=(($0+2304)|0);
      var $arraydecay=(($l3_enc)|0);
      $ix=$arraydecay;
      var $1=$gi_addr;
      var $global_gain=(($1+4780)|0);
      var $2=HEAP32[(($global_gain)>>2)];
      var $arrayidx=((5326260+($2<<2))|0);
      var $3=HEAPF32[(($arrayidx)>>2)];
      var $div=(8206)/($3);
      $w=$div;
      var $4=$gi_addr;
      var $xrpow_max=(($4+4764)|0);
      var $5=HEAPF32[(($xrpow_max)>>2)];
      var $6=$w;
      var $cmp=$5 > $6;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=100000;
      label = 21; break;
    case 4: 
      var $7=$xr_addr;
      var $8=$ix;
      var $9=$gi_addr;
      var $global_gain1=(($9+4780)|0);
      var $10=HEAP32[(($global_gain1)>>2)];
      var $arrayidx2=((5326260+($10<<2))|0);
      var $11=HEAPF32[(($arrayidx2)>>2)];
      var $12=$gi_addr;
      var $13=$prev_noise_addr;
      _quantize_xrpow($7, $8, $11, $12, $13);
      var $14=$gfc_addr;
      var $sv_qnt=(($14+84764)|0);
      var $substep_shaping=(($sv_qnt+328)|0);
      var $15=HEAP32[(($substep_shaping)>>2)];
      var $and=$15 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 20; break; }
    case 5: 
      $j=0;
      var $16=$gi_addr;
      var $global_gain4=(($16+4780)|0);
      var $17=HEAP32[(($global_gain4)>>2)];
      var $18=$gi_addr;
      var $scalefac_scale=(($18+4836)|0);
      var $19=HEAP32[(($scalefac_scale)>>2)];
      var $add=((($17)+($19))|0);
      $gain=$add;
      var $20=$gain;
      var $arrayidx5=((5326260+($20<<2))|0);
      var $21=HEAPF32[(($arrayidx5)>>2)];
      var $conv=$21;
      var $div6=(0.634521682242439)/($conv);
      var $conv7=$div6;
      $roundfac=$conv7;
      $sfb=0;
      label = 6; break;
    case 6: 
      var $22=$sfb;
      var $23=$gi_addr;
      var $sfbmax=(($23+4860)|0);
      var $24=HEAP32[(($sfbmax)>>2)];
      var $cmp8=(($22)|0) < (($24)|0);
      if ($cmp8) { label = 7; break; } else { label = 19; break; }
    case 7: 
      var $25=$sfb;
      var $26=$gi_addr;
      var $width10=(($26+4872)|0);
      var $arrayidx11=(($width10+($25<<2))|0);
      var $27=HEAP32[(($arrayidx11)>>2)];
      $width=$27;
      var $28=$sfb;
      var $29=$gfc_addr;
      var $sv_qnt12=(($29+84764)|0);
      var $pseudohalf=(($sv_qnt12+168)|0);
      var $arrayidx13=(($pseudohalf+($28<<2))|0);
      var $30=HEAP32[(($arrayidx13)>>2)];
      var $tobool14=(($30)|0)!=0;
      if ($tobool14) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $31=$width;
      var $32=$j;
      var $add16=((($32)+($31))|0);
      $j=$add16;
      label = 17; break;
    case 9: 
      var $33=$j;
      $k=$33;
      var $34=$width;
      var $35=$j;
      var $add17=((($35)+($34))|0);
      $j=$add17;
      label = 10; break;
    case 10: 
      var $36=$k;
      var $37=$j;
      var $cmp19=(($36)|0) < (($37)|0);
      if ($cmp19) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $38=$k;
      var $39=$xr_addr;
      var $arrayidx22=(($39+($38<<2))|0);
      var $40=HEAPF32[(($arrayidx22)>>2)];
      var $41=$roundfac;
      var $cmp23=$40 >= $41;
      if ($cmp23) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $42=$k;
      var $43=$ix;
      var $arrayidx25=(($43+($42<<2))|0);
      var $44=HEAP32[(($arrayidx25)>>2)];
      var $cond = $44;label = 14; break;
    case 13: 
      var $cond = 0;label = 14; break;
    case 14: 
      var $cond;
      var $45=$k;
      var $46=$ix;
      var $arrayidx26=(($46+($45<<2))|0);
      HEAP32[(($arrayidx26)>>2)]=$cond;
      label = 15; break;
    case 15: 
      var $47=$k;
      var $inc=((($47)+(1))|0);
      $k=$inc;
      label = 10; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $48=$sfb;
      var $inc29=((($48)+(1))|0);
      $sfb=$inc29;
      label = 6; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $49=$gfc_addr;
      var $50=$gi_addr;
      var $51=$prev_noise_addr;
      var $call=_noquant_count_bits($49, $50, $51);
      $retval=$call;
      label = 21; break;
    case 21: 
      var $52=$retval;

      return $52;
    default: assert(0, "bad label: " + label);
  }

}
_count_bits["X"]=1;

function _quantize_xrpow($xp, $pi, $istep, $cod_info, $prev_noise) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xp_addr;
      var $pi_addr;
      var $istep_addr;
      var $cod_info_addr;
      var $prev_noise_addr;
      var $sfb;
      var $sfbmax;
      var $j;
      var $prev_data_use;
      var $iData;
      var $accumulate;
      var $accumulate01;
      var $acc_iData;
      var $acc_xp;
      var $step;
      var $l;
      var $usefullsize;
      $xp_addr=$xp;
      $pi_addr=$pi;
      $istep_addr=$istep;
      $cod_info_addr=$cod_info;
      $prev_noise_addr=$prev_noise;
      $j=0;
      $accumulate=0;
      $accumulate01=0;
      var $0=$pi_addr;
      $iData=$0;
      var $1=$xp_addr;
      $acc_xp=$1;
      var $2=$iData;
      $acc_iData=$2;
      var $3=$prev_noise_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { label = 3; break; } else { var $8 = 0;label = 4; break; }
    case 3: 
      var $4=$cod_info_addr;
      var $global_gain=(($4+4780)|0);
      var $5=HEAP32[(($global_gain)>>2)];
      var $6=$prev_noise_addr;
      var $global_gain1=(($6)|0);
      var $7=HEAP32[(($global_gain1)>>2)];
      var $cmp=(($5)|0)==(($7)|0);
      var $8 = $cmp;label = 4; break;
    case 4: 
      var $8;
      var $land_ext=(($8)&1);
      $prev_data_use=$land_ext;
      var $9=$cod_info_addr;
      var $block_type=(($9+4788)|0);
      var $10=HEAP32[(($block_type)>>2)];
      var $cmp2=(($10)|0)==2;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $sfbmax=38;
      label = 7; break;
    case 6: 
      $sfbmax=21;
      label = 7; break;
    case 7: 
      $sfb=0;
      label = 8; break;
    case 8: 
      var $11=$sfb;
      var $12=$sfbmax;
      var $cmp3=(($11)|0) <= (($12)|0);
      if ($cmp3) { label = 9; break; } else { label = 51; break; }
    case 9: 
      $step=-1;
      var $13=$prev_data_use;
      var $tobool4=(($13)|0)!=0;
      if ($tobool4) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $14=$cod_info_addr;
      var $block_type5=(($14+4788)|0);
      var $15=HEAP32[(($block_type5)>>2)];
      var $cmp6=(($15)|0)==0;
      if ($cmp6) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $16=$cod_info_addr;
      var $global_gain8=(($16+4780)|0);
      var $17=HEAP32[(($global_gain8)>>2)];
      var $18=$sfb;
      var $19=$cod_info_addr;
      var $scalefac=(($19+4608)|0);
      var $arrayidx=(($scalefac+($18<<2))|0);
      var $20=HEAP32[(($arrayidx)>>2)];
      var $21=$cod_info_addr;
      var $preflag=(($21+4832)|0);
      var $22=HEAP32[(($preflag)>>2)];
      var $tobool9=(($22)|0)!=0;
      if ($tobool9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $23=$sfb;
      var $arrayidx10=((5257016+($23<<2))|0);
      var $24=HEAP32[(($arrayidx10)>>2)];
      var $cond = $24;label = 14; break;
    case 13: 
      var $cond = 0;label = 14; break;
    case 14: 
      var $cond;
      var $add=((($20)+($cond))|0);
      var $25=$cod_info_addr;
      var $scalefac_scale=(($25+4836)|0);
      var $26=HEAP32[(($scalefac_scale)>>2)];
      var $add11=((($26)+(1))|0);
      var $shl=$add << $add11;
      var $sub=((($17)-($shl))|0);
      var $27=$sfb;
      var $28=$cod_info_addr;
      var $window=(($28+5028)|0);
      var $arrayidx12=(($window+($27<<2))|0);
      var $29=HEAP32[(($arrayidx12)>>2)];
      var $30=$cod_info_addr;
      var $subblock_gain=(($30+4808)|0);
      var $arrayidx13=(($subblock_gain+($29<<2))|0);
      var $31=HEAP32[(($arrayidx13)>>2)];
      var $mul=((($31<<3))&-1);
      var $sub14=((($sub)-($mul))|0);
      $step=$sub14;
      label = 15; break;
    case 15: 
      var $32=$prev_data_use;
      var $tobool16=(($32)|0)!=0;
      if ($tobool16) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $33=$sfb;
      var $34=$prev_noise_addr;
      var $step17=(($34+8)|0);
      var $arrayidx18=(($step17+($33<<2))|0);
      var $35=HEAP32[(($arrayidx18)>>2)];
      var $36=$step;
      var $cmp19=(($35)|0)==(($36)|0);
      if ($cmp19) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $37=$accumulate;
      var $tobool21=(($37)|0)!=0;
      if ($tobool21) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $38=$accumulate;
      var $39=$istep_addr;
      var $40=$acc_xp;
      var $41=$acc_iData;
      _quantize_lines_xrpow($38, $39, $40, $41);
      $accumulate=0;
      label = 19; break;
    case 19: 
      var $42=$accumulate01;
      var $tobool24=(($42)|0)!=0;
      if ($tobool24) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $43=$accumulate01;
      var $44=$istep_addr;
      var $45=$acc_xp;
      var $46=$acc_iData;
      _quantize_lines_xrpow_01($43, $44, $45, $46);
      $accumulate01=0;
      label = 21; break;
    case 21: 
      label = 47; break;
    case 22: 
      var $47=$sfb;
      var $48=$cod_info_addr;
      var $width=(($48+4872)|0);
      var $arrayidx28=(($width+($47<<2))|0);
      var $49=HEAP32[(($arrayidx28)>>2)];
      $l=$49;
      var $50=$j;
      var $51=$sfb;
      var $52=$cod_info_addr;
      var $width29=(($52+4872)|0);
      var $arrayidx30=(($width29+($51<<2))|0);
      var $53=HEAP32[(($arrayidx30)>>2)];
      var $add31=((($50)+($53))|0);
      var $54=$cod_info_addr;
      var $max_nonzero_coeff=(($54+5208)|0);
      var $55=HEAP32[(($max_nonzero_coeff)>>2)];
      var $cmp32=(($add31)|0) > (($55)|0);
      if ($cmp32) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $56=$cod_info_addr;
      var $max_nonzero_coeff34=(($56+5208)|0);
      var $57=HEAP32[(($max_nonzero_coeff34)>>2)];
      var $58=$j;
      var $sub35=((($57)-($58))|0);
      var $add36=((($sub35)+(1))|0);
      $usefullsize=$add36;
      var $59=$cod_info_addr;
      var $max_nonzero_coeff37=(($59+5208)|0);
      var $60=HEAP32[(($max_nonzero_coeff37)>>2)];
      var $61=$pi_addr;
      var $arrayidx38=(($61+($60<<2))|0);
      var $62=$arrayidx38;
      var $63=$cod_info_addr;
      var $max_nonzero_coeff39=(($63+5208)|0);
      var $64=HEAP32[(($max_nonzero_coeff39)>>2)];
      var $sub40=(((576)-($64))|0);
      var $mul41=((($sub40<<2))&-1);
      _memset($62, 0, $mul41);
      var $65=$usefullsize;
      $l=$65;
      var $66=$l;
      var $cmp42=(($66)|0) < 0;
      if ($cmp42) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $l=0;
      label = 25; break;
    case 25: 
      var $67=$sfbmax;
      var $add45=((($67)+(1))|0);
      $sfb=$add45;
      label = 26; break;
    case 26: 
      var $68=$accumulate;
      var $tobool47=(($68)|0)!=0;
      if ($tobool47) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $69=$accumulate01;
      var $tobool49=(($69)|0)!=0;
      if ($tobool49) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $70=$iData;
      $acc_iData=$70;
      var $71=$xp_addr;
      $acc_xp=$71;
      label = 29; break;
    case 29: 
      var $72=$prev_noise_addr;
      var $tobool52=(($72)|0)!=0;
      if ($tobool52) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $73=$prev_noise_addr;
      var $sfb_count1=(($73+4)|0);
      var $74=HEAP32[(($sfb_count1)>>2)];
      var $cmp54=(($74)|0) > 0;
      if ($cmp54) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $75=$sfb;
      var $76=$prev_noise_addr;
      var $sfb_count156=(($76+4)|0);
      var $77=HEAP32[(($sfb_count156)>>2)];
      var $cmp57=(($75)|0) >= (($77)|0);
      if ($cmp57) { label = 32; break; } else { label = 37; break; }
    case 32: 
      var $78=$sfb;
      var $79=$prev_noise_addr;
      var $step59=(($79+8)|0);
      var $arrayidx60=(($step59+($78<<2))|0);
      var $80=HEAP32[(($arrayidx60)>>2)];
      var $cmp61=(($80)|0) > 0;
      if ($cmp61) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $81=$step;
      var $82=$sfb;
      var $83=$prev_noise_addr;
      var $step63=(($83+8)|0);
      var $arrayidx64=(($step63+($82<<2))|0);
      var $84=HEAP32[(($arrayidx64)>>2)];
      var $cmp65=(($81)|0) >= (($84)|0);
      if ($cmp65) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $85=$accumulate;
      var $tobool67=(($85)|0)!=0;
      if ($tobool67) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $86=$accumulate;
      var $87=$istep_addr;
      var $88=$acc_xp;
      var $89=$acc_iData;
      _quantize_lines_xrpow($86, $87, $88, $89);
      $accumulate=0;
      var $90=$iData;
      $acc_iData=$90;
      var $91=$xp_addr;
      $acc_xp=$91;
      label = 36; break;
    case 36: 
      var $92=$l;
      var $93=$accumulate01;
      var $add70=((($93)+($92))|0);
      $accumulate01=$add70;
      label = 40; break;
    case 37: 
      var $94=$accumulate01;
      var $tobool72=(($94)|0)!=0;
      if ($tobool72) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $95=$accumulate01;
      var $96=$istep_addr;
      var $97=$acc_xp;
      var $98=$acc_iData;
      _quantize_lines_xrpow_01($95, $96, $97, $98);
      $accumulate01=0;
      var $99=$iData;
      $acc_iData=$99;
      var $100=$xp_addr;
      $acc_xp=$100;
      label = 39; break;
    case 39: 
      var $101=$l;
      var $102=$accumulate;
      var $add75=((($102)+($101))|0);
      $accumulate=$add75;
      label = 40; break;
    case 40: 
      var $103=$l;
      var $cmp77=(($103)|0) <= 0;
      if ($cmp77) { label = 41; break; } else { label = 46; break; }
    case 41: 
      var $104=$accumulate01;
      var $tobool79=(($104)|0)!=0;
      if ($tobool79) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $105=$accumulate01;
      var $106=$istep_addr;
      var $107=$acc_xp;
      var $108=$acc_iData;
      _quantize_lines_xrpow_01($105, $106, $107, $108);
      $accumulate01=0;
      label = 43; break;
    case 43: 
      var $109=$accumulate;
      var $tobool82=(($109)|0)!=0;
      if ($tobool82) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $110=$accumulate;
      var $111=$istep_addr;
      var $112=$acc_xp;
      var $113=$acc_iData;
      _quantize_lines_xrpow($110, $111, $112, $113);
      $accumulate=0;
      label = 45; break;
    case 45: 
      label = 51; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $114=$sfb;
      var $115=$sfbmax;
      var $cmp87=(($114)|0) <= (($115)|0);
      if ($cmp87) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $116=$sfb;
      var $117=$cod_info_addr;
      var $width89=(($117+4872)|0);
      var $arrayidx90=(($width89+($116<<2))|0);
      var $118=HEAP32[(($arrayidx90)>>2)];
      var $119=$iData;
      var $add_ptr=(($119+($118<<2))|0);
      $iData=$add_ptr;
      var $120=$sfb;
      var $121=$cod_info_addr;
      var $width91=(($121+4872)|0);
      var $arrayidx92=(($width91+($120<<2))|0);
      var $122=HEAP32[(($arrayidx92)>>2)];
      var $123=$xp_addr;
      var $add_ptr93=(($123+($122<<2))|0);
      $xp_addr=$add_ptr93;
      var $124=$sfb;
      var $125=$cod_info_addr;
      var $width94=(($125+4872)|0);
      var $arrayidx95=(($width94+($124<<2))|0);
      var $126=HEAP32[(($arrayidx95)>>2)];
      var $127=$j;
      var $add96=((($127)+($126))|0);
      $j=$add96;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $128=$sfb;
      var $inc=((($128)+(1))|0);
      $sfb=$inc;
      label = 8; break;
    case 51: 
      var $129=$accumulate;
      var $tobool98=(($129)|0)!=0;
      if ($tobool98) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $130=$accumulate;
      var $131=$istep_addr;
      var $132=$acc_xp;
      var $133=$acc_iData;
      _quantize_lines_xrpow($130, $131, $132, $133);
      $accumulate=0;
      label = 53; break;
    case 53: 
      var $134=$accumulate01;
      var $tobool101=(($134)|0)!=0;
      if ($tobool101) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $135=$accumulate01;
      var $136=$istep_addr;
      var $137=$acc_xp;
      var $138=$acc_iData;
      _quantize_lines_xrpow_01($135, $136, $137, $138);
      $accumulate01=0;
      label = 55; break;
    case 55: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_quantize_xrpow["X"]=1;

function _recalc_divide_init($gfc, $cod_info, $ix, $r01_bits, $r01_div, $r0_tbl, $r1_tbl) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $ix_addr;
      var $r01_bits_addr;
      var $r01_div_addr;
      var $r0_tbl_addr;
      var $r1_tbl_addr;
      var $r0;
      var $r1;
      var $bigv;
      var $r0t;
      var $r1t;
      var $bits=__stackBase__;
      var $a1;
      var $r0bits=(__stackBase__)+(4);
      var $a2;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $ix_addr=$ix;
      $r01_bits_addr=$r01_bits;
      $r01_div_addr=$r01_div;
      $r0_tbl_addr=$r0_tbl;
      $r1_tbl_addr=$r1_tbl;
      var $0=$cod_info_addr;
      var $big_values=(($0+4772)|0);
      var $1=HEAP32[(($big_values)>>2)];
      $bigv=$1;
      $r0=0;
      label = 3; break;
    case 3: 
      var $2=$r0;
      var $cmp=(($2)|0) <= 22;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$r0;
      var $4=$r01_bits_addr;
      var $arrayidx=(($4+($3<<2))|0);
      HEAP32[(($arrayidx)>>2)]=100000;
      label = 5; break;
    case 5: 
      var $5=$r0;
      var $inc=((($5)+(1))|0);
      $r0=$inc;
      label = 3; break;
    case 6: 
      $r0=0;
      label = 7; break;
    case 7: 
      var $6=$r0;
      var $cmp2=(($6)|0) < 16;
      if ($cmp2) { label = 8; break; } else { label = 20; break; }
    case 8: 
      var $7=$r0;
      var $add=((($7)+(1))|0);
      var $8=$gfc_addr;
      var $scalefac_band=(($8+21360)|0);
      var $l=(($scalefac_band)|0);
      var $arrayidx4=(($l+($add<<2))|0);
      var $9=HEAP32[(($arrayidx4)>>2)];
      $a1=$9;
      var $10=$a1;
      var $11=$bigv;
      var $cmp5=(($10)|0) >= (($11)|0);
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 20; break;
    case 10: 
      HEAP32[(($r0bits)>>2)]=0;
      var $12=$gfc_addr;
      var $choose_table=(($12+85812)|0);
      var $13=HEAP32[(($choose_table)>>2)];
      var $14=$ix_addr;
      var $15=$ix_addr;
      var $16=$a1;
      var $add_ptr=(($15+($16<<2))|0);
      var $call=FUNCTION_TABLE[$13]($14, $add_ptr, $r0bits);
      $r0t=$call;
      $r1=0;
      label = 11; break;
    case 11: 
      var $17=$r1;
      var $cmp7=(($17)|0) < 8;
      if ($cmp7) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $18=$r0;
      var $19=$r1;
      var $add9=((($18)+($19))|0);
      var $add10=((($add9)+(2))|0);
      var $20=$gfc_addr;
      var $scalefac_band11=(($20+21360)|0);
      var $l12=(($scalefac_band11)|0);
      var $arrayidx13=(($l12+($add10<<2))|0);
      var $21=HEAP32[(($arrayidx13)>>2)];
      $a2=$21;
      var $22=$a2;
      var $23=$bigv;
      var $cmp14=(($22)|0) >= (($23)|0);
      if ($cmp14) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 18; break;
    case 14: 
      var $24=HEAP32[(($r0bits)>>2)];
      HEAP32[(($bits)>>2)]=$24;
      var $25=$gfc_addr;
      var $choose_table17=(($25+85812)|0);
      var $26=HEAP32[(($choose_table17)>>2)];
      var $27=$ix_addr;
      var $28=$a1;
      var $add_ptr18=(($27+($28<<2))|0);
      var $29=$ix_addr;
      var $30=$a2;
      var $add_ptr19=(($29+($30<<2))|0);
      var $call20=FUNCTION_TABLE[$26]($add_ptr18, $add_ptr19, $bits);
      $r1t=$call20;
      var $31=$r0;
      var $32=$r1;
      var $add21=((($31)+($32))|0);
      var $33=$r01_bits_addr;
      var $arrayidx22=(($33+($add21<<2))|0);
      var $34=HEAP32[(($arrayidx22)>>2)];
      var $35=HEAP32[(($bits)>>2)];
      var $cmp23=(($34)|0) > (($35)|0);
      if ($cmp23) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $36=HEAP32[(($bits)>>2)];
      var $37=$r0;
      var $38=$r1;
      var $add25=((($37)+($38))|0);
      var $39=$r01_bits_addr;
      var $arrayidx26=(($39+($add25<<2))|0);
      HEAP32[(($arrayidx26)>>2)]=$36;
      var $40=$r0;
      var $41=$r0;
      var $42=$r1;
      var $add27=((($41)+($42))|0);
      var $43=$r01_div_addr;
      var $arrayidx28=(($43+($add27<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=$40;
      var $44=$r0t;
      var $45=$r0;
      var $46=$r1;
      var $add29=((($45)+($46))|0);
      var $47=$r0_tbl_addr;
      var $arrayidx30=(($47+($add29<<2))|0);
      HEAP32[(($arrayidx30)>>2)]=$44;
      var $48=$r1t;
      var $49=$r0;
      var $50=$r1;
      var $add31=((($49)+($50))|0);
      var $51=$r1_tbl_addr;
      var $arrayidx32=(($51+($add31<<2))|0);
      HEAP32[(($arrayidx32)>>2)]=$48;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $52=$r1;
      var $inc35=((($52)+(1))|0);
      $r1=$inc35;
      label = 11; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $53=$r0;
      var $inc38=((($53)+(1))|0);
      $r0=$inc38;
      label = 7; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_recalc_divide_init["X"]=1;

function _recalc_divide_sub($gfc, $cod_info2, $gi, $ix, $r01_bits, $r01_div, $r0_tbl, $r1_tbl) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info2_addr;
      var $gi_addr;
      var $ix_addr;
      var $r01_bits_addr;
      var $r01_div_addr;
      var $r0_tbl_addr;
      var $r1_tbl_addr;
      var $bits=__stackBase__;
      var $r2;
      var $a2;
      var $bigv;
      var $r2t;
      $gfc_addr=$gfc;
      $cod_info2_addr=$cod_info2;
      $gi_addr=$gi;
      $ix_addr=$ix;
      $r01_bits_addr=$r01_bits;
      $r01_div_addr=$r01_div;
      $r0_tbl_addr=$r0_tbl;
      $r1_tbl_addr=$r1_tbl;
      var $0=$cod_info2_addr;
      var $big_values=(($0+4772)|0);
      var $1=HEAP32[(($big_values)>>2)];
      $bigv=$1;
      $r2=2;
      label = 3; break;
    case 3: 
      var $2=$r2;
      var $cmp=(($2)|0) < 23;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $3=$r2;
      var $4=$gfc_addr;
      var $scalefac_band=(($4+21360)|0);
      var $l=(($scalefac_band)|0);
      var $arrayidx=(($l+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $a2=$5;
      var $6=$a2;
      var $7=$bigv;
      var $cmp1=(($6)|0) >= (($7)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 12; break;
    case 6: 
      var $8=$r2;
      var $sub=((($8)-(2))|0);
      var $9=$r01_bits_addr;
      var $arrayidx2=(($9+($sub<<2))|0);
      var $10=HEAP32[(($arrayidx2)>>2)];
      var $11=$cod_info2_addr;
      var $count1bits=(($11+5184)|0);
      var $12=HEAP32[(($count1bits)>>2)];
      var $add=((($10)+($12))|0);
      HEAP32[(($bits)>>2)]=$add;
      var $13=$gi_addr;
      var $part2_3_length=(($13+4768)|0);
      var $14=HEAP32[(($part2_3_length)>>2)];
      var $15=HEAP32[(($bits)>>2)];
      var $cmp3=(($14)|0) <= (($15)|0);
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 12; break;
    case 8: 
      var $16=$gfc_addr;
      var $choose_table=(($16+85812)|0);
      var $17=HEAP32[(($choose_table)>>2)];
      var $18=$ix_addr;
      var $19=$a2;
      var $add_ptr=(($18+($19<<2))|0);
      var $20=$ix_addr;
      var $21=$bigv;
      var $add_ptr6=(($20+($21<<2))|0);
      var $call=FUNCTION_TABLE[$17]($add_ptr, $add_ptr6, $bits);
      $r2t=$call;
      var $22=$gi_addr;
      var $part2_3_length7=(($22+4768)|0);
      var $23=HEAP32[(($part2_3_length7)>>2)];
      var $24=HEAP32[(($bits)>>2)];
      var $cmp8=(($23)|0) <= (($24)|0);
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $25=$gi_addr;
      var $26=$25;
      var $27=$cod_info2_addr;
      var $28=$27;
      assert(5252 % 1 === 0);for (var $$src = $28>>2, $$dest = $26>>2, $$stop = $$src + 1313; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      var $29=HEAP32[(($bits)>>2)];
      var $30=$gi_addr;
      var $part2_3_length11=(($30+4768)|0);
      HEAP32[(($part2_3_length11)>>2)]=$29;
      var $31=$r2;
      var $sub12=((($31)-(2))|0);
      var $32=$r01_div_addr;
      var $arrayidx13=(($32+($sub12<<2))|0);
      var $33=HEAP32[(($arrayidx13)>>2)];
      var $34=$gi_addr;
      var $region0_count=(($34+4824)|0);
      HEAP32[(($region0_count)>>2)]=$33;
      var $35=$r2;
      var $sub14=((($35)-(2))|0);
      var $36=$r2;
      var $sub15=((($36)-(2))|0);
      var $37=$r01_div_addr;
      var $arrayidx16=(($37+($sub15<<2))|0);
      var $38=HEAP32[(($arrayidx16)>>2)];
      var $sub17=((($sub14)-($38))|0);
      var $39=$gi_addr;
      var $region1_count=(($39+4828)|0);
      HEAP32[(($region1_count)>>2)]=$sub17;
      var $40=$r2;
      var $sub18=((($40)-(2))|0);
      var $41=$r0_tbl_addr;
      var $arrayidx19=(($41+($sub18<<2))|0);
      var $42=HEAP32[(($arrayidx19)>>2)];
      var $43=$gi_addr;
      var $table_select=(($43+4796)|0);
      var $arrayidx20=(($table_select)|0);
      HEAP32[(($arrayidx20)>>2)]=$42;
      var $44=$r2;
      var $sub21=((($44)-(2))|0);
      var $45=$r1_tbl_addr;
      var $arrayidx22=(($45+($sub21<<2))|0);
      var $46=HEAP32[(($arrayidx22)>>2)];
      var $47=$gi_addr;
      var $table_select23=(($47+4796)|0);
      var $arrayidx24=(($table_select23+4)|0);
      HEAP32[(($arrayidx24)>>2)]=$46;
      var $48=$r2t;
      var $49=$gi_addr;
      var $table_select25=(($49+4796)|0);
      var $arrayidx26=(($table_select25+8)|0);
      HEAP32[(($arrayidx26)>>2)]=$48;
      label = 11; break;
    case 11: 
      var $50=$r2;
      var $inc=((($50)+(1))|0);
      $r2=$inc;
      label = 3; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_recalc_divide_sub["X"]=1;

function _scfsi_calc($ch, $l3_side) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ch_addr;
      var $l3_side_addr;
      var $i;
      var $s1;
      var $s2;
      var $c1;
      var $c2;
      var $sfb;
      var $gi;
      var $g0;
      var $c;
      $ch_addr=$ch;
      $l3_side_addr=$l3_side;
      var $0=$ch_addr;
      var $1=$l3_side_addr;
      var $tt=(($1)|0);
      var $arrayidx=(($tt+10504)|0);
      var $arrayidx1=(($arrayidx+($0)*(5252))|0);
      $gi=$arrayidx1;
      var $2=$ch_addr;
      var $3=$l3_side_addr;
      var $tt2=(($3)|0);
      var $arrayidx3=(($tt2)|0);
      var $arrayidx4=(($arrayidx3+($2)*(5252))|0);
      $g0=$arrayidx4;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $cmp=(($4)>>>0) < 4;
      if ($cmp) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $5=$i;
      var $arrayidx5=((5256584+($5<<2))|0);
      var $6=HEAP32[(($arrayidx5)>>2)];
      $sfb=$6;
      label = 5; break;
    case 5: 
      var $7=$sfb;
      var $8=$i;
      var $add=((($8)+(1))|0);
      var $arrayidx7=((5256584+($add<<2))|0);
      var $9=HEAP32[(($arrayidx7)>>2)];
      var $cmp8=(($7)|0) < (($9)|0);
      if ($cmp8) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $10=$sfb;
      var $11=$g0;
      var $scalefac=(($11+4608)|0);
      var $arrayidx10=(($scalefac+($10<<2))|0);
      var $12=HEAP32[(($arrayidx10)>>2)];
      var $13=$sfb;
      var $14=$gi;
      var $scalefac11=(($14+4608)|0);
      var $arrayidx12=(($scalefac11+($13<<2))|0);
      var $15=HEAP32[(($arrayidx12)>>2)];
      var $cmp13=(($12)|0)!=(($15)|0);
      if ($cmp13) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $16=$sfb;
      var $17=$gi;
      var $scalefac14=(($17+4608)|0);
      var $arrayidx15=(($scalefac14+($16<<2))|0);
      var $18=HEAP32[(($arrayidx15)>>2)];
      var $cmp16=(($18)|0) >= 0;
      if ($cmp16) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $19=$sfb;
      var $inc=((($19)+(1))|0);
      $sfb=$inc;
      label = 5; break;
    case 11: 
      var $20=$sfb;
      var $21=$i;
      var $add17=((($21)+(1))|0);
      var $arrayidx18=((5256584+($add17<<2))|0);
      var $22=HEAP32[(($arrayidx18)>>2)];
      var $cmp19=(($20)|0)==(($22)|0);
      if ($cmp19) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $23=$i;
      var $arrayidx21=((5256584+($23<<2))|0);
      var $24=HEAP32[(($arrayidx21)>>2)];
      $sfb=$24;
      label = 13; break;
    case 13: 
      var $25=$sfb;
      var $26=$i;
      var $add23=((($26)+(1))|0);
      var $arrayidx24=((5256584+($add23<<2))|0);
      var $27=HEAP32[(($arrayidx24)>>2)];
      var $cmp25=(($25)|0) < (($27)|0);
      if ($cmp25) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $28=$sfb;
      var $29=$gi;
      var $scalefac27=(($29+4608)|0);
      var $arrayidx28=(($scalefac27+($28<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=-1;
      label = 15; break;
    case 15: 
      var $30=$sfb;
      var $inc30=((($30)+(1))|0);
      $sfb=$inc30;
      label = 13; break;
    case 16: 
      var $31=$i;
      var $32=$ch_addr;
      var $33=$l3_side_addr;
      var $scfsi=(($33+21024)|0);
      var $arrayidx32=(($scfsi+($32<<4))|0);
      var $arrayidx33=(($arrayidx32+($31<<2))|0);
      HEAP32[(($arrayidx33)>>2)]=1;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $34=$i;
      var $inc36=((($34)+(1))|0);
      $i=$inc36;
      label = 3; break;
    case 19: 
      $c1=0;
      $s1=0;
      $sfb=0;
      label = 20; break;
    case 20: 
      var $35=$sfb;
      var $cmp39=(($35)|0) < 11;
      if ($cmp39) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $36=$sfb;
      var $37=$gi;
      var $scalefac41=(($37+4608)|0);
      var $arrayidx42=(($scalefac41+($36<<2))|0);
      var $38=HEAP32[(($arrayidx42)>>2)];
      var $cmp43=(($38)|0)==-1;
      if ($cmp43) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 26; break;
    case 23: 
      var $39=$c1;
      var $inc46=((($39)+(1))|0);
      $c1=$inc46;
      var $40=$s1;
      var $41=$sfb;
      var $42=$gi;
      var $scalefac47=(($42+4608)|0);
      var $arrayidx48=(($scalefac47+($41<<2))|0);
      var $43=HEAP32[(($arrayidx48)>>2)];
      var $cmp49=(($40)|0) < (($43)|0);
      if ($cmp49) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $44=$sfb;
      var $45=$gi;
      var $scalefac51=(($45+4608)|0);
      var $arrayidx52=(($scalefac51+($44<<2))|0);
      var $46=HEAP32[(($arrayidx52)>>2)];
      $s1=$46;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $47=$sfb;
      var $inc55=((($47)+(1))|0);
      $sfb=$inc55;
      label = 20; break;
    case 27: 
      $c2=0;
      $s2=0;
      label = 28; break;
    case 28: 
      var $48=$sfb;
      var $cmp58=(($48)|0) < 21;
      if ($cmp58) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $49=$sfb;
      var $50=$gi;
      var $scalefac60=(($50+4608)|0);
      var $arrayidx61=(($scalefac60+($49<<2))|0);
      var $51=HEAP32[(($arrayidx61)>>2)];
      var $cmp62=(($51)|0)==-1;
      if ($cmp62) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 34; break;
    case 31: 
      var $52=$c2;
      var $inc65=((($52)+(1))|0);
      $c2=$inc65;
      var $53=$s2;
      var $54=$sfb;
      var $55=$gi;
      var $scalefac66=(($55+4608)|0);
      var $arrayidx67=(($scalefac66+($54<<2))|0);
      var $56=HEAP32[(($arrayidx67)>>2)];
      var $cmp68=(($53)|0) < (($56)|0);
      if ($cmp68) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $57=$sfb;
      var $58=$gi;
      var $scalefac70=(($58+4608)|0);
      var $arrayidx71=(($scalefac70+($57<<2))|0);
      var $59=HEAP32[(($arrayidx71)>>2)];
      $s2=$59;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $60=$sfb;
      var $inc74=((($60)+(1))|0);
      $sfb=$inc74;
      label = 28; break;
    case 35: 
      $i=0;
      label = 36; break;
    case 36: 
      var $61=$i;
      var $cmp77=(($61)>>>0) < 16;
      if ($cmp77) { label = 37; break; } else { label = 44; break; }
    case 37: 
      var $62=$s1;
      var $63=$i;
      var $arrayidx79=((5254684+($63<<2))|0);
      var $64=HEAP32[(($arrayidx79)>>2)];
      var $cmp80=(($62)|0) < (($64)|0);
      if ($cmp80) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $65=$s2;
      var $66=$i;
      var $arrayidx82=((5254556+($66<<2))|0);
      var $67=HEAP32[(($arrayidx82)>>2)];
      var $cmp83=(($65)|0) < (($67)|0);
      if ($cmp83) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $68=$i;
      var $arrayidx85=((5254620+($68<<2))|0);
      var $69=HEAP32[(($arrayidx85)>>2)];
      var $70=$c1;
      var $mul=((($69)*($70))&-1);
      var $71=$i;
      var $arrayidx86=((5254492+($71<<2))|0);
      var $72=HEAP32[(($arrayidx86)>>2)];
      var $73=$c2;
      var $mul87=((($72)*($73))&-1);
      var $add88=((($mul)+($mul87))|0);
      $c=$add88;
      var $74=$gi;
      var $part2_length=(($74+4844)|0);
      var $75=HEAP32[(($part2_length)>>2)];
      var $76=$c;
      var $cmp89=(($75)|0) > (($76)|0);
      if ($cmp89) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $77=$c;
      var $78=$gi;
      var $part2_length91=(($78+4844)|0);
      HEAP32[(($part2_length91)>>2)]=$77;
      var $79=$i;
      var $80=$gi;
      var $scalefac_compress=(($80+4784)|0);
      HEAP32[(($scalefac_compress)>>2)]=$79;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $81=$i;
      var $inc95=((($81)+(1))|0);
      $i=$inc95;
      label = 36; break;
    case 44: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_scfsi_calc["X"]=1;

function _best_scalefac_store($gfc, $gr, $ch, $l3_side) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gr_addr;
      var $ch_addr;
      var $l3_side_addr;
      var $cfg;
      var $gi;
      var $sfb;
      var $i;
      var $j;
      var $l;
      var $recalc;
      var $width;
      var $s;
      $gfc_addr=$gfc;
      $gr_addr=$gr;
      $ch_addr=$ch;
      $l3_side_addr=$l3_side;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$ch_addr;
      var $2=$gr_addr;
      var $3=$l3_side_addr;
      var $tt=(($3)|0);
      var $arrayidx=(($tt+($2)*(10504))|0);
      var $arrayidx2=(($arrayidx+($1)*(5252))|0);
      $gi=$arrayidx2;
      $recalc=0;
      $j=0;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $4=$sfb;
      var $5=$gi;
      var $sfbmax=(($5+4860)|0);
      var $6=HEAP32[(($sfbmax)>>2)];
      var $cmp=(($4)|0) < (($6)|0);
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $7=$sfb;
      var $8=$gi;
      var $width3=(($8+4872)|0);
      var $arrayidx4=(($width3+($7<<2))|0);
      var $9=HEAP32[(($arrayidx4)>>2)];
      $width=$9;
      var $10=$j;
      $l=$10;
      var $11=$width;
      var $12=$j;
      var $add=((($12)+($11))|0);
      $j=$add;
      label = 5; break;
    case 5: 
      var $13=$l;
      var $14=$j;
      var $cmp6=(($13)|0) < (($14)|0);
      if ($cmp6) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $15=$l;
      var $16=$gi;
      var $l3_enc=(($16+2304)|0);
      var $arrayidx8=(($l3_enc+($15<<2))|0);
      var $17=HEAP32[(($arrayidx8)>>2)];
      var $cmp9=(($17)|0)!=0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $18=$l;
      var $inc=((($18)+(1))|0);
      $l=$inc;
      label = 5; break;
    case 10: 
      var $19=$l;
      var $20=$j;
      var $cmp10=(($19)|0)==(($20)|0);
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $recalc=-2;
      var $21=$sfb;
      var $22=$gi;
      var $scalefac=(($22+4608)|0);
      var $arrayidx12=(($scalefac+($21<<2))|0);
      HEAP32[(($arrayidx12)>>2)]=-2;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $23=$sfb;
      var $inc15=((($23)+(1))|0);
      $sfb=$inc15;
      label = 3; break;
    case 14: 
      var $24=$gi;
      var $scalefac_scale=(($24+4836)|0);
      var $25=HEAP32[(($scalefac_scale)>>2)];
      var $tobool=(($25)|0)!=0;
      if ($tobool) { label = 32; break; } else { label = 15; break; }
    case 15: 
      var $26=$gi;
      var $preflag=(($26+4832)|0);
      var $27=HEAP32[(($preflag)>>2)];
      var $tobool17=(($27)|0)!=0;
      if ($tobool17) { label = 32; break; } else { label = 16; break; }
    case 16: 
      $s=0;
      $sfb=0;
      label = 17; break;
    case 17: 
      var $28=$sfb;
      var $29=$gi;
      var $sfbmax20=(($29+4860)|0);
      var $30=HEAP32[(($sfbmax20)>>2)];
      var $cmp21=(($28)|0) < (($30)|0);
      if ($cmp21) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $31=$sfb;
      var $32=$gi;
      var $scalefac23=(($32+4608)|0);
      var $arrayidx24=(($scalefac23+($31<<2))|0);
      var $33=HEAP32[(($arrayidx24)>>2)];
      var $cmp25=(($33)|0) > 0;
      if ($cmp25) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $34=$sfb;
      var $35=$gi;
      var $scalefac27=(($35+4608)|0);
      var $arrayidx28=(($scalefac27+($34<<2))|0);
      var $36=HEAP32[(($arrayidx28)>>2)];
      var $37=$s;
      var $or=$37 | $36;
      $s=$or;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $38=$sfb;
      var $inc31=((($38)+(1))|0);
      $sfb=$inc31;
      label = 17; break;
    case 22: 
      var $39=$s;
      var $and=$39 & 1;
      var $tobool33=(($and)|0)!=0;
      if ($tobool33) { label = 31; break; } else { label = 23; break; }
    case 23: 
      var $40=$s;
      var $cmp35=(($40)|0)!=0;
      if ($cmp35) { label = 24; break; } else { label = 31; break; }
    case 24: 
      $sfb=0;
      label = 25; break;
    case 25: 
      var $41=$sfb;
      var $42=$gi;
      var $sfbmax38=(($42+4860)|0);
      var $43=HEAP32[(($sfbmax38)>>2)];
      var $cmp39=(($41)|0) < (($43)|0);
      if ($cmp39) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $44=$sfb;
      var $45=$gi;
      var $scalefac41=(($45+4608)|0);
      var $arrayidx42=(($scalefac41+($44<<2))|0);
      var $46=HEAP32[(($arrayidx42)>>2)];
      var $cmp43=(($46)|0) > 0;
      if ($cmp43) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $47=$sfb;
      var $48=$gi;
      var $scalefac45=(($48+4608)|0);
      var $arrayidx46=(($scalefac45+($47<<2))|0);
      var $49=HEAP32[(($arrayidx46)>>2)];
      var $shr=$49 >> 1;
      HEAP32[(($arrayidx46)>>2)]=$shr;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $50=$sfb;
      var $inc49=((($50)+(1))|0);
      $sfb=$inc49;
      label = 25; break;
    case 30: 
      $recalc=1;
      var $51=$gi;
      var $scalefac_scale51=(($51+4836)|0);
      HEAP32[(($scalefac_scale51)>>2)]=1;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $52=$gi;
      var $preflag54=(($52+4832)|0);
      var $53=HEAP32[(($preflag54)>>2)];
      var $tobool55=(($53)|0)!=0;
      if ($tobool55) { label = 51; break; } else { label = 33; break; }
    case 33: 
      var $54=$gi;
      var $block_type=(($54+4788)|0);
      var $55=HEAP32[(($block_type)>>2)];
      var $cmp57=(($55)|0)!=2;
      if ($cmp57) { label = 34; break; } else { label = 51; break; }
    case 34: 
      var $56=$cfg;
      var $mode_gr=(($56+60)|0);
      var $57=HEAP32[(($mode_gr)>>2)];
      var $cmp59=(($57)|0)==2;
      if ($cmp59) { label = 35; break; } else { label = 51; break; }
    case 35: 
      $sfb=11;
      label = 36; break;
    case 36: 
      var $58=$sfb;
      var $cmp62=(($58)|0) < 21;
      if ($cmp62) { label = 37; break; } else { label = 42; break; }
    case 37: 
      var $59=$sfb;
      var $60=$gi;
      var $scalefac64=(($60+4608)|0);
      var $arrayidx65=(($scalefac64+($59<<2))|0);
      var $61=HEAP32[(($arrayidx65)>>2)];
      var $62=$sfb;
      var $arrayidx66=((5257016+($62<<2))|0);
      var $63=HEAP32[(($arrayidx66)>>2)];
      var $cmp67=(($61)|0) < (($63)|0);
      if ($cmp67) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $64=$sfb;
      var $65=$gi;
      var $scalefac69=(($65+4608)|0);
      var $arrayidx70=(($scalefac69+($64<<2))|0);
      var $66=HEAP32[(($arrayidx70)>>2)];
      var $cmp71=(($66)|0)!=-2;
      if ($cmp71) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 42; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $67=$sfb;
      var $inc75=((($67)+(1))|0);
      $sfb=$inc75;
      label = 36; break;
    case 42: 
      var $68=$sfb;
      var $cmp77=(($68)|0)==21;
      if ($cmp77) { label = 43; break; } else { label = 50; break; }
    case 43: 
      $sfb=11;
      label = 44; break;
    case 44: 
      var $69=$sfb;
      var $cmp80=(($69)|0) < 21;
      if ($cmp80) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $70=$sfb;
      var $71=$gi;
      var $scalefac82=(($71+4608)|0);
      var $arrayidx83=(($scalefac82+($70<<2))|0);
      var $72=HEAP32[(($arrayidx83)>>2)];
      var $cmp84=(($72)|0) > 0;
      if ($cmp84) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $73=$sfb;
      var $arrayidx86=((5257016+($73<<2))|0);
      var $74=HEAP32[(($arrayidx86)>>2)];
      var $75=$sfb;
      var $76=$gi;
      var $scalefac87=(($76+4608)|0);
      var $arrayidx88=(($scalefac87+($75<<2))|0);
      var $77=HEAP32[(($arrayidx88)>>2)];
      var $sub=((($77)-($74))|0);
      HEAP32[(($arrayidx88)>>2)]=$sub;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $78=$sfb;
      var $inc91=((($78)+(1))|0);
      $sfb=$inc91;
      label = 44; break;
    case 49: 
      $recalc=1;
      var $79=$gi;
      var $preflag93=(($79+4832)|0);
      HEAP32[(($preflag93)>>2)]=1;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      $i=0;
      label = 52; break;
    case 52: 
      var $80=$i;
      var $cmp97=(($80)|0) < 4;
      if ($cmp97) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $81=$i;
      var $82=$ch_addr;
      var $83=$l3_side_addr;
      var $scfsi=(($83+21024)|0);
      var $arrayidx99=(($scfsi+($82<<4))|0);
      var $arrayidx100=(($arrayidx99+($81<<2))|0);
      HEAP32[(($arrayidx100)>>2)]=0;
      label = 54; break;
    case 54: 
      var $84=$i;
      var $inc102=((($84)+(1))|0);
      $i=$inc102;
      label = 52; break;
    case 55: 
      var $85=$cfg;
      var $mode_gr104=(($85+60)|0);
      var $86=HEAP32[(($mode_gr104)>>2)];
      var $cmp105=(($86)|0)==2;
      if ($cmp105) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $87=$gr_addr;
      var $cmp107=(($87)|0)==1;
      if ($cmp107) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $88=$ch_addr;
      var $89=$l3_side_addr;
      var $tt109=(($89)|0);
      var $arrayidx110=(($tt109)|0);
      var $arrayidx111=(($arrayidx110+($88)*(5252))|0);
      var $block_type112=(($arrayidx111+4788)|0);
      var $90=HEAP32[(($block_type112)>>2)];
      var $cmp113=(($90)|0)!=2;
      if ($cmp113) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $91=$ch_addr;
      var $92=$l3_side_addr;
      var $tt115=(($92)|0);
      var $arrayidx116=(($tt115+10504)|0);
      var $arrayidx117=(($arrayidx116+($91)*(5252))|0);
      var $block_type118=(($arrayidx117+4788)|0);
      var $93=HEAP32[(($block_type118)>>2)];
      var $cmp119=(($93)|0)!=2;
      if ($cmp119) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $94=$ch_addr;
      var $95=$l3_side_addr;
      _scfsi_calc($94, $95);
      $recalc=0;
      label = 60; break;
    case 60: 
      $sfb=0;
      label = 61; break;
    case 61: 
      var $96=$sfb;
      var $97=$gi;
      var $sfbmax123=(($97+4860)|0);
      var $98=HEAP32[(($sfbmax123)>>2)];
      var $cmp124=(($96)|0) < (($98)|0);
      if ($cmp124) { label = 62; break; } else { label = 66; break; }
    case 62: 
      var $99=$sfb;
      var $100=$gi;
      var $scalefac126=(($100+4608)|0);
      var $arrayidx127=(($scalefac126+($99<<2))|0);
      var $101=HEAP32[(($arrayidx127)>>2)];
      var $cmp128=(($101)|0)==-2;
      if ($cmp128) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $102=$sfb;
      var $103=$gi;
      var $scalefac130=(($103+4608)|0);
      var $arrayidx131=(($scalefac130+($102<<2))|0);
      HEAP32[(($arrayidx131)>>2)]=0;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $104=$sfb;
      var $inc134=((($104)+(1))|0);
      $sfb=$inc134;
      label = 61; break;
    case 66: 
      var $105=$recalc;
      var $tobool136=(($105)|0)!=0;
      if ($tobool136) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $106=$gfc_addr;
      var $107=$gi;
      var $call=_scale_bitcount($106, $107);
      label = 68; break;
    case 68: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_best_scalefac_store["X"]=1;

function _scale_bitcount($gfc, $cod_info) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $cod_info_addr;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      var $0=$gfc_addr;
      var $cfg=(($0+16)|0);
      var $mode_gr=(($cfg+60)|0);
      var $1=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($1)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$gfc_addr;
      var $3=$cod_info_addr;
      var $call=_mpeg1_scale_bitcount($2, $3);
      $retval=$call;
      label = 5; break;
    case 4: 
      var $4=$gfc_addr;
      var $5=$cod_info_addr;
      var $call1=_mpeg2_scale_bitcount($4, $5);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $6=$retval;

      return $6;
    default: assert(0, "bad label: " + label);
  }

}


function _mpeg1_scale_bitcount($gfc, $cod_info) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $k;
      var $sfb;
      var $max_slen1;
      var $max_slen2;
      var $tab;
      var $scalefac;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      $max_slen1=0;
      $max_slen2=0;
      var $0=$cod_info_addr;
      var $scalefac1=(($0+4608)|0);
      var $arraydecay=(($scalefac1)|0);
      $scalefac=$arraydecay;
      var $1=$gfc_addr;
      var $2=$cod_info_addr;
      var $block_type=(($2+4788)|0);
      var $3=HEAP32[(($block_type)>>2)];
      var $cmp=(($3)|0)==2;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      $tab=((5256604)|0);
      var $4=$cod_info_addr;
      var $mixed_block_flag=(($4+4792)|0);
      var $5=HEAP32[(($mixed_block_flag)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $tab=((5256668)|0);
      label = 5; break;
    case 5: 
      label = 21; break;
    case 6: 
      $tab=((5256732)|0);
      var $6=$cod_info_addr;
      var $preflag=(($6+4832)|0);
      var $7=HEAP32[(($preflag)>>2)];
      var $tobool3=(($7)|0)!=0;
      if ($tobool3) { label = 20; break; } else { label = 7; break; }
    case 7: 
      $sfb=11;
      label = 8; break;
    case 8: 
      var $8=$sfb;
      var $cmp5=(($8)|0) < 21;
      if ($cmp5) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $9=$sfb;
      var $10=$scalefac;
      var $arrayidx=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $12=$sfb;
      var $arrayidx6=((5257016+($12<<2))|0);
      var $13=HEAP32[(($arrayidx6)>>2)];
      var $cmp7=(($11)|0) < (($13)|0);
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $14=$sfb;
      var $inc=((($14)+(1))|0);
      $sfb=$inc;
      label = 8; break;
    case 13: 
      var $15=$sfb;
      var $cmp10=(($15)|0)==21;
      if ($cmp10) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $16=$cod_info_addr;
      var $preflag12=(($16+4832)|0);
      HEAP32[(($preflag12)>>2)]=1;
      $sfb=11;
      label = 15; break;
    case 15: 
      var $17=$sfb;
      var $cmp14=(($17)|0) < 21;
      if ($cmp14) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $18=$sfb;
      var $arrayidx16=((5257016+($18<<2))|0);
      var $19=HEAP32[(($arrayidx16)>>2)];
      var $20=$sfb;
      var $21=$scalefac;
      var $arrayidx17=(($21+($20<<2))|0);
      var $22=HEAP32[(($arrayidx17)>>2)];
      var $sub=((($22)-($19))|0);
      HEAP32[(($arrayidx17)>>2)]=$sub;
      label = 17; break;
    case 17: 
      var $23=$sfb;
      var $inc19=((($23)+(1))|0);
      $sfb=$inc19;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      $sfb=0;
      label = 22; break;
    case 22: 
      var $24=$sfb;
      var $25=$cod_info_addr;
      var $sfbdivide=(($25+4868)|0);
      var $26=HEAP32[(($sfbdivide)>>2)];
      var $cmp25=(($24)|0) < (($26)|0);
      if ($cmp25) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $27=$max_slen1;
      var $28=$sfb;
      var $29=$scalefac;
      var $arrayidx27=(($29+($28<<2))|0);
      var $30=HEAP32[(($arrayidx27)>>2)];
      var $cmp28=(($27)|0) < (($30)|0);
      if ($cmp28) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $31=$sfb;
      var $32=$scalefac;
      var $arrayidx30=(($32+($31<<2))|0);
      var $33=HEAP32[(($arrayidx30)>>2)];
      $max_slen1=$33;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $34=$sfb;
      var $inc33=((($34)+(1))|0);
      $sfb=$inc33;
      label = 22; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $35=$sfb;
      var $36=$cod_info_addr;
      var $sfbmax=(($36+4860)|0);
      var $37=HEAP32[(($sfbmax)>>2)];
      var $cmp36=(($35)|0) < (($37)|0);
      if ($cmp36) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $38=$max_slen2;
      var $39=$sfb;
      var $40=$scalefac;
      var $arrayidx38=(($40+($39<<2))|0);
      var $41=HEAP32[(($arrayidx38)>>2)];
      var $cmp39=(($38)|0) < (($41)|0);
      if ($cmp39) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $42=$sfb;
      var $43=$scalefac;
      var $arrayidx41=(($43+($42<<2))|0);
      var $44=HEAP32[(($arrayidx41)>>2)];
      $max_slen2=$44;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $45=$sfb;
      var $inc44=((($45)+(1))|0);
      $sfb=$inc44;
      label = 28; break;
    case 33: 
      var $46=$cod_info_addr;
      var $part2_length=(($46+4844)|0);
      HEAP32[(($part2_length)>>2)]=100000;
      $k=0;
      label = 34; break;
    case 34: 
      var $47=$k;
      var $cmp47=(($47)|0) < 16;
      if ($cmp47) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $48=$max_slen1;
      var $49=$k;
      var $arrayidx49=((5254684+($49<<2))|0);
      var $50=HEAP32[(($arrayidx49)>>2)];
      var $cmp50=(($48)|0) < (($50)|0);
      if ($cmp50) { label = 36; break; } else { label = 39; break; }
    case 36: 
      var $51=$max_slen2;
      var $52=$k;
      var $arrayidx51=((5254556+($52<<2))|0);
      var $53=HEAP32[(($arrayidx51)>>2)];
      var $cmp52=(($51)|0) < (($53)|0);
      if ($cmp52) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $54=$cod_info_addr;
      var $part2_length54=(($54+4844)|0);
      var $55=HEAP32[(($part2_length54)>>2)];
      var $56=$k;
      var $57=$tab;
      var $arrayidx55=(($57+($56<<2))|0);
      var $58=HEAP32[(($arrayidx55)>>2)];
      var $cmp56=(($55)|0) > (($58)|0);
      if ($cmp56) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $59=$k;
      var $60=$tab;
      var $arrayidx58=(($60+($59<<2))|0);
      var $61=HEAP32[(($arrayidx58)>>2)];
      var $62=$cod_info_addr;
      var $part2_length59=(($62+4844)|0);
      HEAP32[(($part2_length59)>>2)]=$61;
      var $63=$k;
      var $64=$cod_info_addr;
      var $scalefac_compress=(($64+4784)|0);
      HEAP32[(($scalefac_compress)>>2)]=$63;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $65=$k;
      var $inc62=((($65)+(1))|0);
      $k=$inc62;
      label = 34; break;
    case 41: 
      var $66=$cod_info_addr;
      var $part2_length64=(($66+4844)|0);
      var $67=HEAP32[(($part2_length64)>>2)];
      var $cmp65=(($67)|0)==100000;
      var $conv=(($cmp65)&1);

      return $conv;
    default: assert(0, "bad label: " + label);
  }

}
_mpeg1_scale_bitcount["X"]=1;

function _huffman_init($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $i;
      var $scfb_anz;
      var $bv_index;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $choose_table=(($0+85812)|0);
      HEAP32[(($choose_table)>>2)]=36;
      $i=2;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)|0) <= 576;
      if ($cmp) { label = 4; break; } else { label = 19; break; }
    case 4: 
      $scfb_anz=0;
      label = 5; break;
    case 5: 
      var $2=$scfb_anz;
      var $inc=((($2)+(1))|0);
      $scfb_anz=$inc;
      var $3=$gfc_addr;
      var $scalefac_band=(($3+21360)|0);
      var $l=(($scalefac_band)|0);
      var $arrayidx=(($l+($inc<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$i;
      var $cmp1=(($4)|0) < (($5)|0);
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      var $6=$scfb_anz;
      var $arrayidx2=((5254308+($6<<3))|0);
      var $region0_count=(($arrayidx2)|0);
      var $7=HEAP32[(($region0_count)>>2)];
      $bv_index=$7;
      label = 8; break;
    case 8: 
      var $8=$bv_index;
      var $add=((($8)+(1))|0);
      var $9=$gfc_addr;
      var $scalefac_band4=(($9+21360)|0);
      var $l5=(($scalefac_band4)|0);
      var $arrayidx6=(($l5+($add<<2))|0);
      var $10=HEAP32[(($arrayidx6)>>2)];
      var $11=$i;
      var $cmp7=(($10)|0) > (($11)|0);
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$bv_index;
      var $dec=((($12)-(1))|0);
      $bv_index=$dec;
      label = 8; break;
    case 10: 
      var $13=$bv_index;
      var $cmp10=(($13)|0) < 0;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $14=$scfb_anz;
      var $arrayidx11=((5254308+($14<<3))|0);
      var $region0_count12=(($arrayidx11)|0);
      var $15=HEAP32[(($region0_count12)>>2)];
      $bv_index=$15;
      label = 12; break;
    case 12: 
      var $16=$bv_index;
      var $conv=(($16) & 255);
      var $17=$i;
      var $sub=((($17)-(2))|0);
      var $18=$gfc_addr;
      var $sv_qnt=(($18+84764)|0);
      var $bv_scf=(($sv_qnt+332)|0);
      var $arrayidx13=(($bv_scf+$sub)|0);
      HEAP8[($arrayidx13)]=$conv;
      var $19=$scfb_anz;
      var $arrayidx14=((5254308+($19<<3))|0);
      var $region1_count=(($arrayidx14+4)|0);
      var $20=HEAP32[(($region1_count)>>2)];
      $bv_index=$20;
      label = 13; break;
    case 13: 
      var $21=$bv_index;
      var $22=$i;
      var $sub16=((($22)-(2))|0);
      var $23=$gfc_addr;
      var $sv_qnt17=(($23+84764)|0);
      var $bv_scf18=(($sv_qnt17+332)|0);
      var $arrayidx19=(($bv_scf18+$sub16)|0);
      var $24=HEAP8[($arrayidx19)];
      var $conv20=(($24 << 24) >> 24);
      var $add21=((($21)+($conv20))|0);
      var $add22=((($add21)+(2))|0);
      var $25=$gfc_addr;
      var $scalefac_band23=(($25+21360)|0);
      var $l24=(($scalefac_band23)|0);
      var $arrayidx25=(($l24+($add22<<2))|0);
      var $26=HEAP32[(($arrayidx25)>>2)];
      var $27=$i;
      var $cmp26=(($26)|0) > (($27)|0);
      if ($cmp26) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=$bv_index;
      var $dec29=((($28)-(1))|0);
      $bv_index=$dec29;
      label = 13; break;
    case 15: 
      var $29=$bv_index;
      var $cmp31=(($29)|0) < 0;
      if ($cmp31) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $30=$scfb_anz;
      var $arrayidx34=((5254308+($30<<3))|0);
      var $region1_count35=(($arrayidx34+4)|0);
      var $31=HEAP32[(($region1_count35)>>2)];
      $bv_index=$31;
      label = 17; break;
    case 17: 
      var $32=$bv_index;
      var $conv37=(($32) & 255);
      var $33=$i;
      var $sub38=((($33)-(1))|0);
      var $34=$gfc_addr;
      var $sv_qnt39=(($34+84764)|0);
      var $bv_scf40=(($sv_qnt39+332)|0);
      var $arrayidx41=(($bv_scf40+$sub38)|0);
      HEAP8[($arrayidx41)]=$conv37;
      label = 18; break;
    case 18: 
      var $35=$i;
      var $add42=((($35)+(2))|0);
      $i=$add42;
      label = 3; break;
    case 19: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_huffman_init["X"]=1;

function _mpeg2_scale_bitcount($gfc, $cod_info) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $cod_info_addr;
      var $table_number;
      var $row_in_table;
      var $partition;
      var $nr_sfb;
      var $window;
      var $over;
      var $i;
      var $sfb;
      var $max_sfac=__stackBase__;
      var $partition_table;
      var $scalefac;
      var $slen1;
      var $slen2;
      var $slen3;
      var $slen4;
      $gfc_addr=$gfc;
      $cod_info_addr=$cod_info;
      var $0=$cod_info_addr;
      var $scalefac1=(($0+4608)|0);
      var $arraydecay=(($scalefac1)|0);
      $scalefac=$arraydecay;
      var $1=$cod_info_addr;
      var $preflag=(($1+4832)|0);
      var $2=HEAP32[(($preflag)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $table_number=2;
      label = 5; break;
    case 4: 
      $table_number=0;
      label = 5; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $3=$i;
      var $cmp=(($3)|0) < 4;
      if ($cmp) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $4=$i;
      var $arrayidx=(($max_sfac+($4<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 8; break;
    case 8: 
      var $5=$i;
      var $inc=((($5)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $6=$cod_info_addr;
      var $block_type=(($6+4788)|0);
      var $7=HEAP32[(($block_type)>>2)];
      var $cmp2=(($7)|0)==2;
      if ($cmp2) { label = 10; break; } else { label = 25; break; }
    case 10: 
      $row_in_table=1;
      var $8=$row_in_table;
      var $9=$table_number;
      var $arrayidx4=((5291892+($9)*(48))|0);
      var $arrayidx5=(($arrayidx4+($8<<4))|0);
      var $arrayidx6=(($arrayidx5)|0);
      $partition_table=$arrayidx6;
      $sfb=0;
      $partition=0;
      label = 11; break;
    case 11: 
      var $10=$partition;
      var $cmp8=(($10)|0) < 4;
      if ($cmp8) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $11=$partition;
      var $12=$partition_table;
      var $arrayidx10=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx10)>>2)];
      var $div=((((($13)|0))/(3))&-1);
      $nr_sfb=$div;
      $i=0;
      label = 13; break;
    case 13: 
      var $14=$i;
      var $15=$nr_sfb;
      var $cmp12=(($14)|0) < (($15)|0);
      if ($cmp12) { label = 14; break; } else { label = 22; break; }
    case 14: 
      $window=0;
      label = 15; break;
    case 15: 
      var $16=$window;
      var $cmp15=(($16)|0) < 3;
      if ($cmp15) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $17=$sfb;
      var $mul=((($17)*(3))&-1);
      var $18=$window;
      var $add=((($mul)+($18))|0);
      var $19=$scalefac;
      var $arrayidx17=(($19+($add<<2))|0);
      var $20=HEAP32[(($arrayidx17)>>2)];
      var $21=$partition;
      var $arrayidx18=(($max_sfac+($21<<2))|0);
      var $22=HEAP32[(($arrayidx18)>>2)];
      var $cmp19=(($20)|0) > (($22)|0);
      if ($cmp19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $23=$sfb;
      var $mul21=((($23)*(3))&-1);
      var $24=$window;
      var $add22=((($mul21)+($24))|0);
      var $25=$scalefac;
      var $arrayidx23=(($25+($add22<<2))|0);
      var $26=HEAP32[(($arrayidx23)>>2)];
      var $27=$partition;
      var $arrayidx24=(($max_sfac+($27<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$26;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $28=$window;
      var $inc27=((($28)+(1))|0);
      $window=$inc27;
      label = 15; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $29=$i;
      var $inc30=((($29)+(1))|0);
      $i=$inc30;
      var $30=$sfb;
      var $inc31=((($30)+(1))|0);
      $sfb=$inc31;
      label = 13; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $31=$partition;
      var $inc34=((($31)+(1))|0);
      $partition=$inc34;
      label = 11; break;
    case 24: 
      label = 36; break;
    case 25: 
      $row_in_table=0;
      var $32=$row_in_table;
      var $33=$table_number;
      var $arrayidx37=((5291892+($33)*(48))|0);
      var $arrayidx38=(($arrayidx37+($32<<4))|0);
      var $arrayidx39=(($arrayidx38)|0);
      $partition_table=$arrayidx39;
      $sfb=0;
      $partition=0;
      label = 26; break;
    case 26: 
      var $34=$partition;
      var $cmp41=(($34)|0) < 4;
      if ($cmp41) { label = 27; break; } else { label = 35; break; }
    case 27: 
      var $35=$partition;
      var $36=$partition_table;
      var $arrayidx43=(($36+($35<<2))|0);
      var $37=HEAP32[(($arrayidx43)>>2)];
      $nr_sfb=$37;
      $i=0;
      label = 28; break;
    case 28: 
      var $38=$i;
      var $39=$nr_sfb;
      var $cmp45=(($38)|0) < (($39)|0);
      if ($cmp45) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $40=$sfb;
      var $41=$scalefac;
      var $arrayidx47=(($41+($40<<2))|0);
      var $42=HEAP32[(($arrayidx47)>>2)];
      var $43=$partition;
      var $arrayidx48=(($max_sfac+($43<<2))|0);
      var $44=HEAP32[(($arrayidx48)>>2)];
      var $cmp49=(($42)|0) > (($44)|0);
      if ($cmp49) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $45=$sfb;
      var $46=$scalefac;
      var $arrayidx51=(($46+($45<<2))|0);
      var $47=HEAP32[(($arrayidx51)>>2)];
      var $48=$partition;
      var $arrayidx52=(($max_sfac+($48<<2))|0);
      HEAP32[(($arrayidx52)>>2)]=$47;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $49=$i;
      var $inc55=((($49)+(1))|0);
      $i=$inc55;
      var $50=$sfb;
      var $inc56=((($50)+(1))|0);
      $sfb=$inc56;
      label = 28; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $51=$partition;
      var $inc59=((($51)+(1))|0);
      $partition=$inc59;
      label = 26; break;
    case 35: 
      label = 36; break;
    case 36: 
      $over=0;
      $partition=0;
      label = 37; break;
    case 37: 
      var $52=$partition;
      var $cmp63=(($52)|0) < 4;
      if ($cmp63) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $53=$partition;
      var $arrayidx65=(($max_sfac+($53<<2))|0);
      var $54=HEAP32[(($arrayidx65)>>2)];
      var $55=$partition;
      var $56=$table_number;
      var $arrayidx66=((5314376+($56<<4))|0);
      var $arrayidx67=(($arrayidx66+($55<<2))|0);
      var $57=HEAP32[(($arrayidx67)>>2)];
      var $cmp68=(($54)|0) > (($57)|0);
      if ($cmp68) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $58=$over;
      var $inc70=((($58)+(1))|0);
      $over=$inc70;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $59=$partition;
      var $inc73=((($59)+(1))|0);
      $partition=$inc73;
      label = 37; break;
    case 42: 
      var $60=$over;
      var $tobool75=(($60)|0)!=0;
      if ($tobool75) { label = 53; break; } else { label = 43; break; }
    case 43: 
      var $61=$row_in_table;
      var $62=$table_number;
      var $arrayidx77=((5291892+($62)*(48))|0);
      var $arrayidx78=(($arrayidx77+($61<<4))|0);
      var $arraydecay79=(($arrayidx78)|0);
      var $63=$cod_info_addr;
      var $sfb_partition_table=(($63+5188)|0);
      HEAP32[(($sfb_partition_table)>>2)]=$arraydecay79;
      $partition=0;
      label = 44; break;
    case 44: 
      var $64=$partition;
      var $cmp81=(($64)|0) < 4;
      if ($cmp81) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $65=$partition;
      var $arrayidx83=(($max_sfac+($65<<2))|0);
      var $66=HEAP32[(($arrayidx83)>>2)];
      var $arrayidx84=((5292248+($66<<2))|0);
      var $67=HEAP32[(($arrayidx84)>>2)];
      var $68=$partition;
      var $69=$cod_info_addr;
      var $slen=(($69+5192)|0);
      var $arrayidx85=(($slen+($68<<2))|0);
      HEAP32[(($arrayidx85)>>2)]=$67;
      label = 46; break;
    case 46: 
      var $70=$partition;
      var $inc87=((($70)+(1))|0);
      $partition=$inc87;
      label = 44; break;
    case 47: 
      var $71=$cod_info_addr;
      var $slen89=(($71+5192)|0);
      var $arrayidx90=(($slen89)|0);
      var $72=HEAP32[(($arrayidx90)>>2)];
      $slen1=$72;
      var $73=$cod_info_addr;
      var $slen91=(($73+5192)|0);
      var $arrayidx92=(($slen91+4)|0);
      var $74=HEAP32[(($arrayidx92)>>2)];
      $slen2=$74;
      var $75=$cod_info_addr;
      var $slen93=(($75+5192)|0);
      var $arrayidx94=(($slen93+8)|0);
      var $76=HEAP32[(($arrayidx94)>>2)];
      $slen3=$76;
      var $77=$cod_info_addr;
      var $slen95=(($77+5192)|0);
      var $arrayidx96=(($slen95+12)|0);
      var $78=HEAP32[(($arrayidx96)>>2)];
      $slen4=$78;
      var $79=$table_number;
      if ((($79)|0)==0) {
        label = 48; break;
      }
      else if ((($79)|0)==1) {
        label = 49; break;
      }
      else if ((($79)|0)==2) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
      
    case 48: 
      var $80=$slen1;
      var $mul97=((($80)*(5))&-1);
      var $81=$slen2;
      var $add98=((($mul97)+($81))|0);
      var $shl=$add98 << 4;
      var $82=$slen3;
      var $shl99=$82 << 2;
      var $add100=((($shl)+($shl99))|0);
      var $83=$slen4;
      var $add101=((($add100)+($83))|0);
      var $84=$cod_info_addr;
      var $scalefac_compress=(($84+4784)|0);
      HEAP32[(($scalefac_compress)>>2)]=$add101;
      label = 52; break;
    case 49: 
      var $85=$slen1;
      var $mul103=((($85)*(5))&-1);
      var $86=$slen2;
      var $add104=((($mul103)+($86))|0);
      var $shl105=$add104 << 2;
      var $add106=((($shl105)+(400))|0);
      var $87=$slen3;
      var $add107=((($add106)+($87))|0);
      var $88=$cod_info_addr;
      var $scalefac_compress108=(($88+4784)|0);
      HEAP32[(($scalefac_compress108)>>2)]=$add107;
      label = 52; break;
    case 50: 
      var $89=$slen1;
      var $mul110=((($89)*(3))&-1);
      var $add111=((($mul110)+(500))|0);
      var $90=$slen2;
      var $add112=((($add111)+($90))|0);
      var $91=$cod_info_addr;
      var $scalefac_compress113=(($91+4784)|0);
      HEAP32[(($scalefac_compress113)>>2)]=$add112;
      label = 52; break;
    case 51: 
      var $92=$gfc_addr;
      _lame_errorf($92, ((5385188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $93=$over;
      var $tobool115=(($93)|0)!=0;
      if ($tobool115) { label = 59; break; } else { label = 54; break; }
    case 54: 
      var $94=$cod_info_addr;
      var $part2_length=(($94+4844)|0);
      HEAP32[(($part2_length)>>2)]=0;
      $partition=0;
      label = 55; break;
    case 55: 
      var $95=$partition;
      var $cmp118=(($95)|0) < 4;
      if ($cmp118) { label = 56; break; } else { label = 58; break; }
    case 56: 
      var $96=$partition;
      var $97=$cod_info_addr;
      var $slen120=(($97+5192)|0);
      var $arrayidx121=(($slen120+($96<<2))|0);
      var $98=HEAP32[(($arrayidx121)>>2)];
      var $99=$partition;
      var $100=$cod_info_addr;
      var $sfb_partition_table122=(($100+5188)|0);
      var $101=HEAP32[(($sfb_partition_table122)>>2)];
      var $arrayidx123=(($101+($99<<2))|0);
      var $102=HEAP32[(($arrayidx123)>>2)];
      var $mul124=((($98)*($102))&-1);
      var $103=$cod_info_addr;
      var $part2_length125=(($103+4844)|0);
      var $104=HEAP32[(($part2_length125)>>2)];
      var $add126=((($104)+($mul124))|0);
      HEAP32[(($part2_length125)>>2)]=$add126;
      label = 57; break;
    case 57: 
      var $105=$partition;
      var $inc128=((($105)+(1))|0);
      $partition=$inc128;
      label = 55; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $106=$over;
      STACKTOP = __stackBase__;
      return $106;
    default: assert(0, "bad label: " + label);
  }

}
_mpeg2_scale_bitcount["X"]=1;

function _choose_table_nonMMX($ix, $end, $_s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $ix_addr;
      var $end_addr;
      var $_s_addr;
      var $s;
      var $max;
      var $choice;
      var $choice2;
      $ix_addr=$ix;
      $end_addr=$end;
      $_s_addr=$_s;
      var $0=$_s_addr;
      $s=$0;
      var $1=$ix_addr;
      var $2=$end_addr;
      var $call=_ix_max($1, $2);
      $max=$call;
      var $3=$max;
      var $cmp=(($3)>>>0) <= 15;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$max;
      var $arrayidx=((5348724+($4<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $6=$ix_addr;
      var $7=$end_addr;
      var $8=$max;
      var $9=$s;
      var $call1=FUNCTION_TABLE[$5]($6, $7, $8, $9);
      $retval=$call1;
      label = 19; break;
    case 4: 
      var $10=$max;
      var $cmp2=(($10)>>>0) > 8206;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$s;
      HEAP32[(($11)>>2)]=100000;
      $retval=-1;
      label = 19; break;
    case 6: 
      var $12=$max;
      var $sub=((($12)-(15))|0);
      $max=$sub;
      $choice2=24;
      label = 7; break;
    case 7: 
      var $13=$choice2;
      var $cmp5=(($13)|0) < 32;
      if ($cmp5) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $14=$choice2;
      var $arrayidx6=((5327352+($14<<4))|0);
      var $linmax=(($arrayidx6+4)|0);
      var $15=HEAP32[(($linmax)>>2)];
      var $16=$max;
      var $cmp7=(($15)>>>0) >= (($16)>>>0);
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$choice2;
      var $inc=((($17)+(1))|0);
      $choice2=$inc;
      label = 7; break;
    case 12: 
      var $18=$choice2;
      var $sub10=((($18)-(8))|0);
      $choice=$sub10;
      label = 13; break;
    case 13: 
      var $19=$choice;
      var $cmp12=(($19)|0) < 24;
      if ($cmp12) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $20=$choice;
      var $arrayidx14=((5327352+($20<<4))|0);
      var $linmax15=(($arrayidx14+4)|0);
      var $21=HEAP32[(($linmax15)>>2)];
      var $22=$max;
      var $cmp16=(($21)>>>0) >= (($22)>>>0);
      if ($cmp16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $23=$choice;
      var $inc20=((($23)+(1))|0);
      $choice=$inc20;
      label = 13; break;
    case 18: 
      var $24=$ix_addr;
      var $25=$end_addr;
      var $26=$choice;
      var $27=$choice2;
      var $28=$s;
      var $call22=_count_bit_ESC($24, $25, $26, $27, $28);
      $retval=$call22;
      label = 19; break;
    case 19: 
      var $29=$retval;

      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_choose_table_nonMMX["X"]=1;

function _count_bit_null($ix, $end, $max, $s) {
  var label = 0;


  var $ix_addr;
  var $end_addr;
  var $max_addr;
  var $s_addr;
  $ix_addr=$ix;
  $end_addr=$end;
  $max_addr=$max;
  $s_addr=$s;
  var $0=$ix_addr;
  var $1=$end_addr;
  var $2=$max_addr;
  var $3=$s_addr;

  return 0;
}


function _ix_max($ix, $end) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ix_addr;
      var $end_addr;
      var $max1;
      var $max2;
      var $x1;
      var $x2;
      $ix_addr=$ix;
      $end_addr=$end;
      $max1=0;
      $max2=0;
      label = 3; break;
    case 3: 
      var $0=$ix_addr;
      var $incdec_ptr=(($0+4)|0);
      $ix_addr=$incdec_ptr;
      var $1=HEAP32[(($0)>>2)];
      $x1=$1;
      var $2=$ix_addr;
      var $incdec_ptr1=(($2+4)|0);
      $ix_addr=$incdec_ptr1;
      var $3=HEAP32[(($2)>>2)];
      $x2=$3;
      var $4=$max1;
      var $5=$x1;
      var $cmp=(($4)|0) < (($5)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$x1;
      $max1=$6;
      label = 5; break;
    case 5: 
      var $7=$max2;
      var $8=$x2;
      var $cmp2=(($7)|0) < (($8)|0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$x2;
      $max2=$9;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $10=$ix_addr;
      var $11=$end_addr;
      var $cmp5=(($10)>>>0) < (($11)>>>0);
      if ($cmp5) { label = 3; break; } else { label = 9; break; }
    case 9: 
      var $12=$max1;
      var $13=$max2;
      var $cmp6=(($12)|0) < (($13)|0);
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $14=$max2;
      $max1=$14;
      label = 11; break;
    case 11: 
      var $15=$max1;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}


function _count_bit_ESC($ix, $end, $t1, $t2, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ix_addr;
      var $end_addr;
      var $t1_addr;
      var $t2_addr;
      var $s_addr;
      var $linbits;
      var $sum;
      var $sum2;
      var $x;
      var $y;
      $ix_addr=$ix;
      $end_addr=$end;
      $t1_addr=$t1;
      $t2_addr=$t2;
      $s_addr=$s;
      var $0=$t1_addr;
      var $arrayidx=((5327352+($0<<4))|0);
      var $xlen=(($arrayidx)|0);
      var $1=HEAP32[(($xlen)>>2)];
      var $mul=((($1<<16))&-1);
      var $2=$t2_addr;
      var $arrayidx1=((5327352+($2<<4))|0);
      var $xlen2=(($arrayidx1)|0);
      var $3=HEAP32[(($xlen2)>>2)];
      var $add=((($mul)+($3))|0);
      $linbits=$add;
      $sum=0;
      label = 3; break;
    case 3: 
      var $4=$ix_addr;
      var $incdec_ptr=(($4+4)|0);
      $ix_addr=$incdec_ptr;
      var $5=HEAP32[(($4)>>2)];
      $x=$5;
      var $6=$ix_addr;
      var $incdec_ptr3=(($6+4)|0);
      $ix_addr=$incdec_ptr3;
      var $7=HEAP32[(($6)>>2)];
      $y=$7;
      var $8=$x;
      var $cmp=(($8)>>>0) >= 15;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $x=15;
      var $9=$linbits;
      var $10=$sum;
      var $add4=((($10)+($9))|0);
      $sum=$add4;
      label = 5; break;
    case 5: 
      var $11=$y;
      var $cmp5=(($11)>>>0) >= 15;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $y=15;
      var $12=$linbits;
      var $13=$sum;
      var $add7=((($13)+($12))|0);
      $sum=$add7;
      label = 7; break;
    case 7: 
      var $14=$x;
      var $shl=$14 << 4;
      $x=$shl;
      var $15=$y;
      var $16=$x;
      var $add9=((($16)+($15))|0);
      $x=$add9;
      var $17=$x;
      var $arrayidx10=((5316584+($17<<2))|0);
      var $18=HEAP32[(($arrayidx10)>>2)];
      var $19=$sum;
      var $add11=((($19)+($18))|0);
      $sum=$add11;
      label = 8; break;
    case 8: 
      var $20=$ix_addr;
      var $21=$end_addr;
      var $cmp12=(($20)>>>0) < (($21)>>>0);
      if ($cmp12) { label = 3; break; } else { label = 9; break; }
    case 9: 
      var $22=$sum;
      var $and=$22 & 65535;
      $sum2=$and;
      var $23=$sum;
      var $shr=$23 >>> 16;
      $sum=$shr;
      var $24=$sum;
      var $25=$sum2;
      var $cmp13=(($24)>>>0) > (($25)>>>0);
      if ($cmp13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $26=$sum2;
      $sum=$26;
      var $27=$t2_addr;
      $t1_addr=$27;
      label = 11; break;
    case 11: 
      var $28=$sum;
      var $29=$s_addr;
      var $30=HEAP32[(($29)>>2)];
      var $add16=((($30)+($28))|0);
      HEAP32[(($29)>>2)]=$add16;
      var $31=$t1_addr;

      return $31;
    default: assert(0, "bad label: " + label);
  }

}
_count_bit_ESC["X"]=1;

function _count_bit_noESC($ix, $end, $mx, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ix_addr;
      var $end_addr;
      var $mx_addr;
      var $s_addr;
      var $sum1;
      var $hlen1;
      var $x0;
      var $x1;
      $ix_addr=$ix;
      $end_addr=$end;
      $mx_addr=$mx;
      $s_addr=$s;
      $sum1=0;
      var $0=HEAP32[((((5327380)|0))>>2)];
      $hlen1=$0;
      var $1=$mx_addr;
      label = 3; break;
    case 3: 
      var $2=$ix_addr;
      var $incdec_ptr=(($2+4)|0);
      $ix_addr=$incdec_ptr;
      var $3=HEAP32[(($2)>>2)];
      $x0=$3;
      var $4=$ix_addr;
      var $incdec_ptr1=(($4+4)|0);
      $ix_addr=$incdec_ptr1;
      var $5=HEAP32[(($4)>>2)];
      $x1=$5;
      var $6=$x0;
      var $7=$x0;
      var $add=((($6)+($7))|0);
      var $8=$x1;
      var $add2=((($add)+($8))|0);
      var $9=$hlen1;
      var $arrayidx=(($9+$add2)|0);
      var $10=HEAP8[($arrayidx)];
      var $conv=(($10)&255);
      var $11=$sum1;
      var $add3=((($11)+($conv))|0);
      $sum1=$add3;
      label = 4; break;
    case 4: 
      var $12=$ix_addr;
      var $13=$end_addr;
      var $cmp=(($12)>>>0) < (($13)>>>0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $14=$sum1;
      var $15=$s_addr;
      var $16=HEAP32[(($15)>>2)];
      var $add5=((($16)+($14))|0);
      HEAP32[(($15)>>2)]=$add5;

      return 1;
    default: assert(0, "bad label: " + label);
  }

}
_count_bit_noESC["X"]=1;

function _count_bit_noESC_from2($ix, $end, $max, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ix_addr;
      var $end_addr;
      var $max_addr;
      var $s_addr;
      var $t1;
      var $xlen;
      var $table;
      var $sum;
      var $sum2;
      var $x0;
      var $x1;
      $ix_addr=$ix;
      $end_addr=$end;
      $max_addr=$max;
      $s_addr=$s;
      var $0=$max_addr;
      var $sub=((($0)-(1))|0);
      var $arrayidx=((5327292+($sub<<2))|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      $t1=$1;
      var $2=$t1;
      var $arrayidx1=((5327352+($2<<4))|0);
      var $xlen2=(($arrayidx1)|0);
      var $3=HEAP32[(($xlen2)>>2)];
      $xlen=$3;
      var $4=$t1;
      var $cmp=(($4)|0)==2;
      var $cond=$cmp ? (((5249704)|0)) : (((5249640)|0));
      $table=$cond;
      $sum=0;
      label = 3; break;
    case 3: 
      var $5=$ix_addr;
      var $incdec_ptr=(($5+4)|0);
      $ix_addr=$incdec_ptr;
      var $6=HEAP32[(($5)>>2)];
      $x0=$6;
      var $7=$ix_addr;
      var $incdec_ptr3=(($7+4)|0);
      $ix_addr=$incdec_ptr3;
      var $8=HEAP32[(($7)>>2)];
      $x1=$8;
      var $9=$x0;
      var $10=$xlen;
      var $mul=((($9)*($10))&-1);
      var $11=$x1;
      var $add=((($mul)+($11))|0);
      var $12=$table;
      var $arrayidx4=(($12+($add<<2))|0);
      var $13=HEAP32[(($arrayidx4)>>2)];
      var $14=$sum;
      var $add5=((($14)+($13))|0);
      $sum=$add5;
      label = 4; break;
    case 4: 
      var $15=$ix_addr;
      var $16=$end_addr;
      var $cmp6=(($15)>>>0) < (($16)>>>0);
      if ($cmp6) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $17=$sum;
      var $and=$17 & 65535;
      $sum2=$and;
      var $18=$sum;
      var $shr=$18 >>> 16;
      $sum=$shr;
      var $19=$sum;
      var $20=$sum2;
      var $cmp7=(($19)>>>0) > (($20)>>>0);
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$sum2;
      $sum=$21;
      var $22=$t1;
      var $inc=((($22)+(1))|0);
      $t1=$inc;
      label = 7; break;
    case 7: 
      var $23=$sum;
      var $24=$s_addr;
      var $25=HEAP32[(($24)>>2)];
      var $add8=((($25)+($23))|0);
      HEAP32[(($24)>>2)]=$add8;
      var $26=$t1;

      return $26;
    default: assert(0, "bad label: " + label);
  }

}
_count_bit_noESC_from2["X"]=1;

function _count_bit_noESC_from3($ix, $end, $max, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ix_addr;
      var $end_addr;
      var $max_addr;
      var $s_addr;
      var $t1;
      var $sum1;
      var $sum2;
      var $sum3;
      var $xlen;
      var $hlen1;
      var $hlen2;
      var $hlen3;
      var $t;
      var $x0;
      var $x1;
      var $x;
      $ix_addr=$ix;
      $end_addr=$end;
      $max_addr=$max;
      $s_addr=$s;
      var $0=$max_addr;
      var $sub=((($0)-(1))|0);
      var $arrayidx=((5327292+($sub<<2))|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      $t1=$1;
      $sum1=0;
      $sum2=0;
      $sum3=0;
      var $2=$t1;
      var $arrayidx1=((5327352+($2<<4))|0);
      var $xlen2=(($arrayidx1)|0);
      var $3=HEAP32[(($xlen2)>>2)];
      $xlen=$3;
      var $4=$t1;
      var $arrayidx3=((5327352+($4<<4))|0);
      var $hlen=(($arrayidx3+12)|0);
      var $5=HEAP32[(($hlen)>>2)];
      $hlen1=$5;
      var $6=$t1;
      var $add=((($6)+(1))|0);
      var $arrayidx4=((5327352+($add<<4))|0);
      var $hlen5=(($arrayidx4+12)|0);
      var $7=HEAP32[(($hlen5)>>2)];
      $hlen2=$7;
      var $8=$t1;
      var $add6=((($8)+(2))|0);
      var $arrayidx7=((5327352+($add6<<4))|0);
      var $hlen8=(($arrayidx7+12)|0);
      var $9=HEAP32[(($hlen8)>>2)];
      $hlen3=$9;
      label = 3; break;
    case 3: 
      var $10=$ix_addr;
      var $incdec_ptr=(($10+4)|0);
      $ix_addr=$incdec_ptr;
      var $11=HEAP32[(($10)>>2)];
      $x0=$11;
      var $12=$ix_addr;
      var $incdec_ptr9=(($12+4)|0);
      $ix_addr=$incdec_ptr9;
      var $13=HEAP32[(($12)>>2)];
      $x1=$13;
      var $14=$x0;
      var $15=$xlen;
      var $mul=((($14)*($15))&-1);
      var $16=$x1;
      var $add10=((($mul)+($16))|0);
      $x=$add10;
      var $17=$x;
      var $18=$hlen1;
      var $arrayidx11=(($18+$17)|0);
      var $19=HEAP8[($arrayidx11)];
      var $conv=(($19)&255);
      var $20=$sum1;
      var $add12=((($20)+($conv))|0);
      $sum1=$add12;
      var $21=$x;
      var $22=$hlen2;
      var $arrayidx13=(($22+$21)|0);
      var $23=HEAP8[($arrayidx13)];
      var $conv14=(($23)&255);
      var $24=$sum2;
      var $add15=((($24)+($conv14))|0);
      $sum2=$add15;
      var $25=$x;
      var $26=$hlen3;
      var $arrayidx16=(($26+$25)|0);
      var $27=HEAP8[($arrayidx16)];
      var $conv17=(($27)&255);
      var $28=$sum3;
      var $add18=((($28)+($conv17))|0);
      $sum3=$add18;
      label = 4; break;
    case 4: 
      var $29=$ix_addr;
      var $30=$end_addr;
      var $cmp=(($29)>>>0) < (($30)>>>0);
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $31=$t1;
      $t=$31;
      var $32=$sum1;
      var $33=$sum2;
      var $cmp20=(($32)>>>0) > (($33)>>>0);
      if ($cmp20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $34=$sum2;
      $sum1=$34;
      var $35=$t;
      var $inc=((($35)+(1))|0);
      $t=$inc;
      label = 7; break;
    case 7: 
      var $36=$sum1;
      var $37=$sum3;
      var $cmp22=(($36)>>>0) > (($37)>>>0);
      if ($cmp22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $38=$sum3;
      $sum1=$38;
      var $39=$t1;
      var $add25=((($39)+(2))|0);
      $t=$add25;
      label = 9; break;
    case 9: 
      var $40=$sum1;
      var $41=$s_addr;
      var $42=HEAP32[(($41)>>2)];
      var $add27=((($42)+($40))|0);
      HEAP32[(($41)>>2)]=$add27;
      var $43=$t;

      return $43;
    default: assert(0, "bad label: " + label);
  }

}
_count_bit_noESC_from3["X"]=1;

function _quantize_lines_xrpow($l, $istep, $xp, $pi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $l_addr;
      var $istep_addr;
      var $xp_addr;
      var $pi_addr;
      var $fi;
      var $remaining;
      var $x0;
      var $x1;
      var $x2;
      var $x3;
      var $x073;
      var $x177;
      $l_addr=$l;
      $istep_addr=$istep;
      $xp_addr=$xp;
      $pi_addr=$pi;
      var $0=$pi_addr;
      var $1=$0;
      $fi=$1;
      var $2=$l_addr;
      var $shr=$2 >>> 1;
      $l_addr=$shr;
      var $3=$l_addr;
      var $rem=((($3)>>>0))%(2);
      $remaining=$rem;
      var $4=$l_addr;
      var $shr1=$4 >>> 1;
      $l_addr=$shr1;
      label = 3; break;
    case 3: 
      var $5=$l_addr;
      var $dec=((($5)-(1))|0);
      $l_addr=$dec;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$istep_addr;
      var $7=$xp_addr;
      var $arrayidx=(($7)|0);
      var $8=HEAPF32[(($arrayidx)>>2)];
      var $mul=($6)*($8);
      var $conv=$mul;
      $x0=$conv;
      var $9=$istep_addr;
      var $10=$xp_addr;
      var $arrayidx2=(($10+4)|0);
      var $11=HEAPF32[(($arrayidx2)>>2)];
      var $mul3=($9)*($11);
      var $conv4=$mul3;
      $x1=$conv4;
      var $12=$istep_addr;
      var $13=$xp_addr;
      var $arrayidx5=(($13+8)|0);
      var $14=HEAPF32[(($arrayidx5)>>2)];
      var $mul6=($12)*($14);
      var $conv7=$mul6;
      $x2=$conv7;
      var $15=$istep_addr;
      var $16=$xp_addr;
      var $arrayidx8=(($16+12)|0);
      var $17=HEAPF32[(($arrayidx8)>>2)];
      var $mul9=($15)*($17);
      var $conv10=$mul9;
      $x3=$conv10;
      var $18=$x0;
      var $add=($18)+(8388608);
      $x0=$add;
      var $19=$x0;
      var $conv11=$19;
      var $20=$fi;
      var $arrayidx12=(($20)|0);
      var $f=$arrayidx12;
      HEAPF32[(($f)>>2)]=$conv11;
      var $21=$x1;
      var $add13=($21)+(8388608);
      $x1=$add13;
      var $22=$x1;
      var $conv14=$22;
      var $23=$fi;
      var $arrayidx15=(($23+4)|0);
      var $f16=$arrayidx15;
      HEAPF32[(($f16)>>2)]=$conv14;
      var $24=$x2;
      var $add17=($24)+(8388608);
      $x2=$add17;
      var $25=$x2;
      var $conv18=$25;
      var $26=$fi;
      var $arrayidx19=(($26+8)|0);
      var $f20=$arrayidx19;
      HEAPF32[(($f20)>>2)]=$conv18;
      var $27=$x3;
      var $add21=($27)+(8388608);
      $x3=$add21;
      var $28=$x3;
      var $conv22=$28;
      var $29=$fi;
      var $arrayidx23=(($29+12)|0);
      var $f24=$arrayidx23;
      HEAPF32[(($f24)>>2)]=$conv22;
      var $30=$x0;
      var $31=$fi;
      var $arrayidx25=(($31)|0);
      var $i=$arrayidx25;
      var $32=HEAP32[(($i)>>2)];
      var $sub=((($32)-(1258291200))|0);
      var $arrayidx26=((5349896+($sub<<2))|0);
      var $33=HEAPF32[(($arrayidx26)>>2)];
      var $conv27=$33;
      var $add28=($30)+($conv27);
      var $conv29=$add28;
      var $34=$fi;
      var $arrayidx30=(($34)|0);
      var $f31=$arrayidx30;
      HEAPF32[(($f31)>>2)]=$conv29;
      var $35=$x1;
      var $36=$fi;
      var $arrayidx32=(($36+4)|0);
      var $i33=$arrayidx32;
      var $37=HEAP32[(($i33)>>2)];
      var $sub34=((($37)-(1258291200))|0);
      var $arrayidx35=((5349896+($sub34<<2))|0);
      var $38=HEAPF32[(($arrayidx35)>>2)];
      var $conv36=$38;
      var $add37=($35)+($conv36);
      var $conv38=$add37;
      var $39=$fi;
      var $arrayidx39=(($39+4)|0);
      var $f40=$arrayidx39;
      HEAPF32[(($f40)>>2)]=$conv38;
      var $40=$x2;
      var $41=$fi;
      var $arrayidx41=(($41+8)|0);
      var $i42=$arrayidx41;
      var $42=HEAP32[(($i42)>>2)];
      var $sub43=((($42)-(1258291200))|0);
      var $arrayidx44=((5349896+($sub43<<2))|0);
      var $43=HEAPF32[(($arrayidx44)>>2)];
      var $conv45=$43;
      var $add46=($40)+($conv45);
      var $conv47=$add46;
      var $44=$fi;
      var $arrayidx48=(($44+8)|0);
      var $f49=$arrayidx48;
      HEAPF32[(($f49)>>2)]=$conv47;
      var $45=$x3;
      var $46=$fi;
      var $arrayidx50=(($46+12)|0);
      var $i51=$arrayidx50;
      var $47=HEAP32[(($i51)>>2)];
      var $sub52=((($47)-(1258291200))|0);
      var $arrayidx53=((5349896+($sub52<<2))|0);
      var $48=HEAPF32[(($arrayidx53)>>2)];
      var $conv54=$48;
      var $add55=($45)+($conv54);
      var $conv56=$add55;
      var $49=$fi;
      var $arrayidx57=(($49+12)|0);
      var $f58=$arrayidx57;
      HEAPF32[(($f58)>>2)]=$conv56;
      var $50=$fi;
      var $arrayidx59=(($50)|0);
      var $i60=$arrayidx59;
      var $51=HEAP32[(($i60)>>2)];
      var $sub61=((($51)-(1258291200))|0);
      HEAP32[(($i60)>>2)]=$sub61;
      var $52=$fi;
      var $arrayidx62=(($52+4)|0);
      var $i63=$arrayidx62;
      var $53=HEAP32[(($i63)>>2)];
      var $sub64=((($53)-(1258291200))|0);
      HEAP32[(($i63)>>2)]=$sub64;
      var $54=$fi;
      var $arrayidx65=(($54+8)|0);
      var $i66=$arrayidx65;
      var $55=HEAP32[(($i66)>>2)];
      var $sub67=((($55)-(1258291200))|0);
      HEAP32[(($i66)>>2)]=$sub67;
      var $56=$fi;
      var $arrayidx68=(($56+12)|0);
      var $i69=$arrayidx68;
      var $57=HEAP32[(($i69)>>2)];
      var $sub70=((($57)-(1258291200))|0);
      HEAP32[(($i69)>>2)]=$sub70;
      var $58=$fi;
      var $add_ptr=(($58+16)|0);
      $fi=$add_ptr;
      var $59=$xp_addr;
      var $add_ptr71=(($59+16)|0);
      $xp_addr=$add_ptr71;
      label = 3; break;
    case 5: 
      var $60=$remaining;
      var $tobool72=(($60)|0)!=0;
      if ($tobool72) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $61=$istep_addr;
      var $62=$xp_addr;
      var $arrayidx74=(($62)|0);
      var $63=HEAPF32[(($arrayidx74)>>2)];
      var $mul75=($61)*($63);
      var $conv76=$mul75;
      $x073=$conv76;
      var $64=$istep_addr;
      var $65=$xp_addr;
      var $arrayidx78=(($65+4)|0);
      var $66=HEAPF32[(($arrayidx78)>>2)];
      var $mul79=($64)*($66);
      var $conv80=$mul79;
      $x177=$conv80;
      var $67=$x073;
      var $add81=($67)+(8388608);
      $x073=$add81;
      var $68=$x073;
      var $conv82=$68;
      var $69=$fi;
      var $arrayidx83=(($69)|0);
      var $f84=$arrayidx83;
      HEAPF32[(($f84)>>2)]=$conv82;
      var $70=$x177;
      var $add85=($70)+(8388608);
      $x177=$add85;
      var $71=$x177;
      var $conv86=$71;
      var $72=$fi;
      var $arrayidx87=(($72+4)|0);
      var $f88=$arrayidx87;
      HEAPF32[(($f88)>>2)]=$conv86;
      var $73=$x073;
      var $74=$fi;
      var $arrayidx89=(($74)|0);
      var $i90=$arrayidx89;
      var $75=HEAP32[(($i90)>>2)];
      var $sub91=((($75)-(1258291200))|0);
      var $arrayidx92=((5349896+($sub91<<2))|0);
      var $76=HEAPF32[(($arrayidx92)>>2)];
      var $conv93=$76;
      var $add94=($73)+($conv93);
      var $conv95=$add94;
      var $77=$fi;
      var $arrayidx96=(($77)|0);
      var $f97=$arrayidx96;
      HEAPF32[(($f97)>>2)]=$conv95;
      var $78=$x177;
      var $79=$fi;
      var $arrayidx98=(($79+4)|0);
      var $i99=$arrayidx98;
      var $80=HEAP32[(($i99)>>2)];
      var $sub100=((($80)-(1258291200))|0);
      var $arrayidx101=((5349896+($sub100<<2))|0);
      var $81=HEAPF32[(($arrayidx101)>>2)];
      var $conv102=$81;
      var $add103=($78)+($conv102);
      var $conv104=$add103;
      var $82=$fi;
      var $arrayidx105=(($82+4)|0);
      var $f106=$arrayidx105;
      HEAPF32[(($f106)>>2)]=$conv104;
      var $83=$fi;
      var $arrayidx107=(($83)|0);
      var $i108=$arrayidx107;
      var $84=HEAP32[(($i108)>>2)];
      var $sub109=((($84)-(1258291200))|0);
      HEAP32[(($i108)>>2)]=$sub109;
      var $85=$fi;
      var $arrayidx110=(($85+4)|0);
      var $i111=$arrayidx110;
      var $86=HEAP32[(($i111)>>2)];
      var $sub112=((($86)-(1258291200))|0);
      HEAP32[(($i111)>>2)]=$sub112;
      label = 7; break;
    case 7: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_quantize_lines_xrpow["X"]=1;

function _quantize_lines_xrpow_01($l, $istep, $xr, $ix) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $l_addr;
      var $istep_addr;
      var $xr_addr;
      var $ix_addr;
      var $compareval0;
      var $i;
      var $xr_0;
      var $xr_1;
      var $ix_0;
      var $ix_1;
      $l_addr=$l;
      $istep_addr=$istep;
      $xr_addr=$xr;
      $ix_addr=$ix;
      var $0=$istep_addr;
      var $div=(0.5945999622344971)/($0);
      $compareval0=$div;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$l_addr;
      var $cmp=(($1)>>>0) < (($2)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$i;
      var $add=(($3)|0);
      var $4=$xr_addr;
      var $arrayidx=(($4+($add<<2))|0);
      var $5=HEAPF32[(($arrayidx)>>2)];
      $xr_0=$5;
      var $6=$i;
      var $add1=((($6)+(1))|0);
      var $7=$xr_addr;
      var $arrayidx2=(($7+($add1<<2))|0);
      var $8=HEAPF32[(($arrayidx2)>>2)];
      $xr_1=$8;
      var $9=$compareval0;
      var $10=$xr_0;
      var $cmp3=$9 > $10;
      var $cond=$cmp3 ? 0 : 1;
      $ix_0=$cond;
      var $11=$compareval0;
      var $12=$xr_1;
      var $cmp4=$11 > $12;
      var $cond5=$cmp4 ? 0 : 1;
      $ix_1=$cond5;
      var $13=$ix_0;
      var $14=$i;
      var $add6=(($14)|0);
      var $15=$ix_addr;
      var $arrayidx7=(($15+($add6<<2))|0);
      HEAP32[(($arrayidx7)>>2)]=$13;
      var $16=$ix_1;
      var $17=$i;
      var $add8=((($17)+(1))|0);
      var $18=$ix_addr;
      var $arrayidx9=(($18+($add8<<2))|0);
      HEAP32[(($arrayidx9)>>2)]=$16;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $add10=((($19)+(2))|0);
      $i=$add10;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_quantize_lines_xrpow_01["X"]=1;

function _FindNearestBitrate($bRate, $version, $samplerate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bRate_addr;
      var $version_addr;
      var $samplerate_addr;
      var $bitrate;
      var $i;
      $bRate_addr=$bRate;
      $version_addr=$version;
      $samplerate_addr=$samplerate;
      var $0=$samplerate_addr;
      var $cmp=(($0)|0) < 16000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $version_addr=2;
      label = 4; break;
    case 4: 
      var $1=$version_addr;
      var $arrayidx=((5348820+($1<<6))|0);
      var $arrayidx1=(($arrayidx+4)|0);
      var $2=HEAP32[(($arrayidx1)>>2)];
      $bitrate=$2;
      $i=2;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp2=(($3)|0) <= 14;
      if ($cmp2) { label = 6; break; } else { label = 18; break; }
    case 6: 
      var $4=$i;
      var $5=$version_addr;
      var $arrayidx3=((5348820+($5<<6))|0);
      var $arrayidx4=(($arrayidx3+($4<<2))|0);
      var $6=HEAP32[(($arrayidx4)>>2)];
      var $cmp5=(($6)|0) > 0;
      if ($cmp5) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $7=$i;
      var $8=$version_addr;
      var $arrayidx7=((5348820+($8<<6))|0);
      var $arrayidx8=(($arrayidx7+($7<<2))|0);
      var $9=HEAP32[(($arrayidx8)>>2)];
      var $10=$bRate_addr;
      var $sub=((($9)-($10))|0);
      var $cmp9=(($sub)|0) > 0;
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$i;
      var $12=$version_addr;
      var $arrayidx10=((5348820+($12<<6))|0);
      var $arrayidx11=(($arrayidx10+($11<<2))|0);
      var $13=HEAP32[(($arrayidx11)>>2)];
      var $14=$bRate_addr;
      var $sub12=((($13)-($14))|0);
      var $cond = $sub12;label = 10; break;
    case 9: 
      var $15=$i;
      var $16=$version_addr;
      var $arrayidx13=((5348820+($16<<6))|0);
      var $arrayidx14=(($arrayidx13+($15<<2))|0);
      var $17=HEAP32[(($arrayidx14)>>2)];
      var $18=$bRate_addr;
      var $sub15=((($17)-($18))|0);
      var $sub16=(((-$sub15))|0);
      var $cond = $sub16;label = 10; break;
    case 10: 
      var $cond;
      var $19=$bitrate;
      var $20=$bRate_addr;
      var $sub17=((($19)-($20))|0);
      var $cmp18=(($sub17)|0) > 0;
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=$bitrate;
      var $22=$bRate_addr;
      var $sub20=((($21)-($22))|0);
      var $cond25 = $sub20;label = 13; break;
    case 12: 
      var $23=$bitrate;
      var $24=$bRate_addr;
      var $sub22=((($23)-($24))|0);
      var $sub23=(((-$sub22))|0);
      var $cond25 = $sub23;label = 13; break;
    case 13: 
      var $cond25;
      var $cmp26=(($cond)|0) < (($cond25)|0);
      if ($cmp26) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $25=$i;
      var $26=$version_addr;
      var $arrayidx28=((5348820+($26<<6))|0);
      var $arrayidx29=(($arrayidx28+($25<<2))|0);
      var $27=HEAP32[(($arrayidx29)>>2)];
      $bitrate=$27;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 18: 
      var $29=$bitrate;

      return $29;
    default: assert(0, "bad label: " + label);
  }

}
_FindNearestBitrate["X"]=1;

function _free_id3tag($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $node;
      var $p;
      var $q;
      var $r;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $tag_spec=(($0+85692)|0);
      var $title=(($tag_spec+8)|0);
      var $1=HEAP32[(($title)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$gfc_addr;
      var $tag_spec1=(($2+85692)|0);
      var $title2=(($tag_spec1+8)|0);
      var $3=HEAP32[(($title2)>>2)];
      _free($3);
      var $4=$gfc_addr;
      var $tag_spec3=(($4+85692)|0);
      var $title4=(($tag_spec3+8)|0);
      HEAP32[(($title4)>>2)]=0;
      label = 4; break;
    case 4: 
      var $5=$gfc_addr;
      var $tag_spec5=(($5+85692)|0);
      var $artist=(($tag_spec5+12)|0);
      var $6=HEAP32[(($artist)>>2)];
      var $cmp6=(($6)|0)!=0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$gfc_addr;
      var $tag_spec8=(($7+85692)|0);
      var $artist9=(($tag_spec8+12)|0);
      var $8=HEAP32[(($artist9)>>2)];
      _free($8);
      var $9=$gfc_addr;
      var $tag_spec10=(($9+85692)|0);
      var $artist11=(($tag_spec10+12)|0);
      HEAP32[(($artist11)>>2)]=0;
      label = 6; break;
    case 6: 
      var $10=$gfc_addr;
      var $tag_spec13=(($10+85692)|0);
      var $album=(($tag_spec13+16)|0);
      var $11=HEAP32[(($album)>>2)];
      var $cmp14=(($11)|0)!=0;
      if ($cmp14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$gfc_addr;
      var $tag_spec16=(($12+85692)|0);
      var $album17=(($tag_spec16+16)|0);
      var $13=HEAP32[(($album17)>>2)];
      _free($13);
      var $14=$gfc_addr;
      var $tag_spec18=(($14+85692)|0);
      var $album19=(($tag_spec18+16)|0);
      HEAP32[(($album19)>>2)]=0;
      label = 8; break;
    case 8: 
      var $15=$gfc_addr;
      var $tag_spec21=(($15+85692)|0);
      var $comment=(($tag_spec21+20)|0);
      var $16=HEAP32[(($comment)>>2)];
      var $cmp22=(($16)|0)!=0;
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$gfc_addr;
      var $tag_spec24=(($17+85692)|0);
      var $comment25=(($tag_spec24+20)|0);
      var $18=HEAP32[(($comment25)>>2)];
      _free($18);
      var $19=$gfc_addr;
      var $tag_spec26=(($19+85692)|0);
      var $comment27=(($tag_spec26+20)|0);
      HEAP32[(($comment27)>>2)]=0;
      label = 10; break;
    case 10: 
      var $20=$gfc_addr;
      var $tag_spec29=(($20+85692)|0);
      var $albumart=(($tag_spec29+32)|0);
      var $21=HEAP32[(($albumart)>>2)];
      var $cmp30=(($21)|0)!=0;
      if ($cmp30) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $22=$gfc_addr;
      var $tag_spec32=(($22+85692)|0);
      var $albumart33=(($tag_spec32+32)|0);
      var $23=HEAP32[(($albumart33)>>2)];
      _free($23);
      var $24=$gfc_addr;
      var $tag_spec34=(($24+85692)|0);
      var $albumart35=(($tag_spec34+32)|0);
      HEAP32[(($albumart35)>>2)]=0;
      var $25=$gfc_addr;
      var $tag_spec36=(($25+85692)|0);
      var $albumart_size=(($tag_spec36+36)|0);
      HEAP32[(($albumart_size)>>2)]=0;
      var $26=$gfc_addr;
      var $tag_spec37=(($26+85692)|0);
      var $albumart_mimetype=(($tag_spec37+44)|0);
      HEAP32[(($albumart_mimetype)>>2)]=0;
      label = 12; break;
    case 12: 
      var $27=$gfc_addr;
      var $tag_spec39=(($27+85692)|0);
      var $v2_head=(($tag_spec39+48)|0);
      var $28=HEAP32[(($v2_head)>>2)];
      var $cmp40=(($28)|0)!=0;
      if ($cmp40) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $29=$gfc_addr;
      var $tag_spec42=(($29+85692)|0);
      var $v2_head43=(($tag_spec42+48)|0);
      var $30=HEAP32[(($v2_head43)>>2)];
      $node=$30;
      label = 14; break;
    case 14: 
      var $31=$node;
      var $dsc=(($31+12)|0);
      var $ptr=(($dsc)|0);
      var $b=$ptr;
      var $32=HEAP32[(($b)>>2)];
      $p=$32;
      var $33=$node;
      var $txt=(($33+24)|0);
      var $ptr44=(($txt)|0);
      var $b45=$ptr44;
      var $34=HEAP32[(($b45)>>2)];
      $q=$34;
      var $35=$node;
      var $36=$35;
      $r=$36;
      var $37=$node;
      var $nxt=(($37)|0);
      var $38=HEAP32[(($nxt)>>2)];
      $node=$38;
      var $39=$p;
      _free($39);
      var $40=$q;
      _free($40);
      var $41=$r;
      _free($41);
      label = 15; break;
    case 15: 
      var $42=$node;
      var $cmp46=(($42)|0)!=0;
      if ($cmp46) { label = 14; break; } else { label = 16; break; }
    case 16: 
      var $43=$gfc_addr;
      var $tag_spec47=(($43+85692)|0);
      var $v2_head48=(($tag_spec47+48)|0);
      HEAP32[(($v2_head48)>>2)]=0;
      var $44=$gfc_addr;
      var $tag_spec49=(($44+85692)|0);
      var $v2_tail=(($tag_spec49+52)|0);
      HEAP32[(($v2_tail)>>2)]=0;
      label = 17; break;
    case 17: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free_id3tag["X"]=1;

function _freegfc($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $i;
      $gfc_addr=$gfc;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|0) <= 640;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$i;
      var $2=$gfc_addr;
      var $sv_enc=(($2+27820)|0);
      var $blackfilt=(($sv_enc+9368)|0);
      var $arrayidx=(($blackfilt+($1<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$i;
      var $5=$gfc_addr;
      var $sv_enc2=(($5+27820)|0);
      var $blackfilt3=(($sv_enc2+9368)|0);
      var $arrayidx4=(($blackfilt3+($4<<2))|0);
      var $6=HEAP32[(($arrayidx4)>>2)];
      var $7=$6;
      _free($7);
      var $8=$i;
      var $9=$gfc_addr;
      var $sv_enc5=(($9+27820)|0);
      var $blackfilt6=(($sv_enc5+9368)|0);
      var $arrayidx7=(($blackfilt6+($8<<2))|0);
      HEAP32[(($arrayidx7)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $11=$gfc_addr;
      var $sv_enc8=(($11+27820)|0);
      var $inbuf_old=(($sv_enc8+9360)|0);
      var $arrayidx9=(($inbuf_old)|0);
      var $12=HEAP32[(($arrayidx9)>>2)];
      var $tobool=(($12)|0)!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=$gfc_addr;
      var $sv_enc11=(($13+27820)|0);
      var $inbuf_old12=(($sv_enc11+9360)|0);
      var $arrayidx13=(($inbuf_old12)|0);
      var $14=HEAP32[(($arrayidx13)>>2)];
      var $15=$14;
      _free($15);
      var $16=$gfc_addr;
      var $sv_enc14=(($16+27820)|0);
      var $inbuf_old15=(($sv_enc14+9360)|0);
      var $arrayidx16=(($inbuf_old15)|0);
      HEAP32[(($arrayidx16)>>2)]=0;
      label = 10; break;
    case 10: 
      var $17=$gfc_addr;
      var $sv_enc18=(($17+27820)|0);
      var $inbuf_old19=(($sv_enc18+9360)|0);
      var $arrayidx20=(($inbuf_old19+4)|0);
      var $18=HEAP32[(($arrayidx20)>>2)];
      var $tobool21=(($18)|0)!=0;
      if ($tobool21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $19=$gfc_addr;
      var $sv_enc23=(($19+27820)|0);
      var $inbuf_old24=(($sv_enc23+9360)|0);
      var $arrayidx25=(($inbuf_old24+4)|0);
      var $20=HEAP32[(($arrayidx25)>>2)];
      var $21=$20;
      _free($21);
      var $22=$gfc_addr;
      var $sv_enc26=(($22+27820)|0);
      var $inbuf_old27=(($sv_enc26+9360)|0);
      var $arrayidx28=(($inbuf_old27+4)|0);
      HEAP32[(($arrayidx28)>>2)]=0;
      label = 12; break;
    case 12: 
      var $23=$gfc_addr;
      var $bs=(($23+284)|0);
      var $buf=(($bs)|0);
      var $24=HEAP32[(($buf)>>2)];
      var $cmp30=(($24)|0)!=0;
      if ($cmp30) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $25=$gfc_addr;
      var $bs32=(($25+284)|0);
      var $buf33=(($bs32)|0);
      var $26=HEAP32[(($buf33)>>2)];
      _free($26);
      var $27=$gfc_addr;
      var $bs34=(($27+284)|0);
      var $buf35=(($bs34)|0);
      HEAP32[(($buf35)>>2)]=0;
      label = 14; break;
    case 14: 
      var $28=$gfc_addr;
      var $VBR_seek_table=(($28+85756)|0);
      var $bag=(($VBR_seek_table+20)|0);
      var $29=HEAP32[(($bag)>>2)];
      var $tobool37=(($29)|0)!=0;
      if ($tobool37) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$gfc_addr;
      var $VBR_seek_table39=(($30+85756)|0);
      var $bag40=(($VBR_seek_table39+20)|0);
      var $31=HEAP32[(($bag40)>>2)];
      var $32=$31;
      _free($32);
      var $33=$gfc_addr;
      var $VBR_seek_table41=(($33+85756)|0);
      var $bag42=(($VBR_seek_table41+20)|0);
      HEAP32[(($bag42)>>2)]=0;
      var $34=$gfc_addr;
      var $VBR_seek_table43=(($34+85756)|0);
      var $size=(($VBR_seek_table43+16)|0);
      HEAP32[(($size)>>2)]=0;
      label = 16; break;
    case 16: 
      var $35=$gfc_addr;
      var $ATH=(($35+85792)|0);
      var $36=HEAP32[(($ATH)>>2)];
      var $tobool45=(($36)|0)!=0;
      if ($tobool45) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $37=$gfc_addr;
      var $ATH47=(($37+85792)|0);
      var $38=HEAP32[(($ATH47)>>2)];
      var $39=$38;
      _free($39);
      label = 18; break;
    case 18: 
      var $40=$gfc_addr;
      var $sv_rpg=(($40+85672)|0);
      var $rgdata=(($sv_rpg)|0);
      var $41=HEAP32[(($rgdata)>>2)];
      var $tobool49=(($41)|0)!=0;
      if ($tobool49) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $42=$gfc_addr;
      var $sv_rpg51=(($42+85672)|0);
      var $rgdata52=(($sv_rpg51)|0);
      var $43=HEAP32[(($rgdata52)>>2)];
      var $44=$43;
      _free($44);
      label = 20; break;
    case 20: 
      var $45=$gfc_addr;
      var $sv_enc54=(($45+27820)|0);
      var $in_buffer_0=(($sv_enc54+24328)|0);
      var $46=HEAP32[(($in_buffer_0)>>2)];
      var $tobool55=(($46)|0)!=0;
      if ($tobool55) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $47=$gfc_addr;
      var $sv_enc57=(($47+27820)|0);
      var $in_buffer_058=(($sv_enc57+24328)|0);
      var $48=HEAP32[(($in_buffer_058)>>2)];
      var $49=$48;
      _free($49);
      label = 22; break;
    case 22: 
      var $50=$gfc_addr;
      var $sv_enc60=(($50+27820)|0);
      var $in_buffer_1=(($sv_enc60+24332)|0);
      var $51=HEAP32[(($in_buffer_1)>>2)];
      var $tobool61=(($51)|0)!=0;
      if ($tobool61) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $52=$gfc_addr;
      var $sv_enc63=(($52+27820)|0);
      var $in_buffer_164=(($sv_enc63+24332)|0);
      var $53=HEAP32[(($in_buffer_164)>>2)];
      var $54=$53;
      _free($54);
      label = 24; break;
    case 24: 
      var $55=$gfc_addr;
      _free_id3tag($55);
      var $56=$gfc_addr;
      var $hip=(($56+85804)|0);
      var $57=HEAP32[(($hip)>>2)];
      var $tobool66=(($57)|0)!=0;
      if ($tobool66) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $58=$gfc_addr;
      var $hip68=(($58+85804)|0);
      var $59=HEAP32[(($hip68)>>2)];
      var $call=_hip_decode_exit($59);
      var $60=$gfc_addr;
      var $hip69=(($60+85804)|0);
      HEAP32[(($hip69)>>2)]=0;
      label = 26; break;
    case 26: 
      var $61=$gfc_addr;
      _free_global_data($61);
      var $62=$gfc_addr;
      var $63=$62;
      _free($63);

      return;
    default: assert(0, "bad label: " + label);
  }

}
_freegfc["X"]=1;

function _free_global_data($gfc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      $gfc_addr=$gfc;
      var $0=$gfc_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$gfc_addr;
      var $cd_psy=(($1+85796)|0);
      var $2=HEAP32[(($cd_psy)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $3=$gfc_addr;
      var $cd_psy2=(($3+85796)|0);
      var $4=HEAP32[(($cd_psy2)>>2)];
      var $l=(($4)|0);
      var $s3=(($l+2156)|0);
      var $5=HEAP32[(($s3)>>2)];
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$gfc_addr;
      var $cd_psy5=(($6+85796)|0);
      var $7=HEAP32[(($cd_psy5)>>2)];
      var $l6=(($7)|0);
      var $s37=(($l6+2156)|0);
      var $8=HEAP32[(($s37)>>2)];
      var $9=$8;
      _free($9);
      label = 6; break;
    case 6: 
      var $10=$gfc_addr;
      var $cd_psy8=(($10+85796)|0);
      var $11=HEAP32[(($cd_psy8)>>2)];
      var $s=(($11+2160)|0);
      var $s39=(($s+2156)|0);
      var $12=HEAP32[(($s39)>>2)];
      var $tobool10=(($12)|0)!=0;
      if ($tobool10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$gfc_addr;
      var $cd_psy12=(($13+85796)|0);
      var $14=HEAP32[(($cd_psy12)>>2)];
      var $s13=(($14+2160)|0);
      var $s314=(($s13+2156)|0);
      var $15=HEAP32[(($s314)>>2)];
      var $16=$15;
      _free($16);
      label = 8; break;
    case 8: 
      var $17=$gfc_addr;
      var $cd_psy16=(($17+85796)|0);
      var $18=HEAP32[(($cd_psy16)>>2)];
      var $19=$18;
      _free($19);
      var $20=$gfc_addr;
      var $cd_psy17=(($20+85796)|0);
      HEAP32[(($cd_psy17)>>2)]=0;
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free_global_data["X"]=1;

function _malloc_aligned($ptr, $size, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ptr_addr;
      var $size_addr;
      var $bytes_addr;
      $ptr_addr=$ptr;
      $size_addr=$size;
      $bytes_addr=$bytes;
      var $0=$ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $1=$ptr_addr;
      var $pointer=(($1+4)|0);
      var $2=HEAP32[(($pointer)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 8; break; } else { label = 4; break; }
    case 4: 
      var $3=$size_addr;
      var $4=$bytes_addr;
      var $add=((($3)+($4))|0);
      var $call=_malloc($add);
      var $5=$ptr_addr;
      var $pointer3=(($5+4)|0);
      HEAP32[(($pointer3)>>2)]=$call;
      var $6=$bytes_addr;
      var $cmp=(($6)>>>0) > 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$ptr_addr;
      var $pointer5=(($7+4)|0);
      var $8=HEAP32[(($pointer5)>>2)];
      var $9=$8;
      var $10=$bytes_addr;
      var $add6=((($9)+($10))|0);
      var $sub=((($add6)-(1))|0);
      var $11=$bytes_addr;
      var $div=Math.floor(((($sub)>>>0))/((($11)>>>0)));
      var $12=$bytes_addr;
      var $mul=((($div)*($12))&-1);
      var $13=$mul;
      var $14=$ptr_addr;
      var $aligned=(($14)|0);
      HEAP32[(($aligned)>>2)]=$13;
      label = 7; break;
    case 6: 
      var $15=$ptr_addr;
      var $pointer7=(($15+4)|0);
      var $16=HEAP32[(($pointer7)>>2)];
      var $17=$ptr_addr;
      var $aligned8=(($17)|0);
      HEAP32[(($aligned8)>>2)]=$16;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_malloc_aligned["X"]=1;

function _free_aligned($ptr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ptr_addr;
      $ptr_addr=$ptr;
      var $0=$ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$ptr_addr;
      var $pointer=(($1+4)|0);
      var $2=HEAP32[(($pointer)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$ptr_addr;
      var $pointer3=(($3+4)|0);
      var $4=HEAP32[(($pointer3)>>2)];
      _free($4);
      var $5=$ptr_addr;
      var $pointer4=(($5+4)|0);
      HEAP32[(($pointer4)>>2)]=0;
      var $6=$ptr_addr;
      var $aligned=(($6)|0);
      HEAP32[(($aligned)>>2)]=0;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _ATHformula($cfg, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cfg_addr;
      var $f_addr;
      var $ath;
      $cfg_addr=$cfg;
      $f_addr=$f;
      var $0=$cfg_addr;
      var $ATHtype=(($0+192)|0);
      var $1=HEAP32[(($ATHtype)>>2)];
      if ((($1)|0)==0) {
        label = 3; break;
      }
      else if ((($1)|0)==1) {
        label = 4; break;
      }
      else if ((($1)|0)==2) {
        label = 5; break;
      }
      else if ((($1)|0)==3) {
        label = 6; break;
      }
      else if ((($1)|0)==4) {
        label = 7; break;
      }
      else if ((($1)|0)==5) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 3: 
      var $2=$f_addr;
      var $call=_ATHformula_GB($2, 9, 0.10000000149011612, 24);
      $ath=$call;
      label = 10; break;
    case 4: 
      var $3=$f_addr;
      var $call2=_ATHformula_GB($3, -1, 0.10000000149011612, 24);
      $ath=$call2;
      label = 10; break;
    case 5: 
      var $4=$f_addr;
      var $call4=_ATHformula_GB($4, 0, 0.10000000149011612, 24);
      $ath=$call4;
      label = 10; break;
    case 6: 
      var $5=$f_addr;
      var $call6=_ATHformula_GB($5, 1, 0.10000000149011612, 24);
      var $add=($call6)+(6);
      $ath=$add;
      label = 10; break;
    case 7: 
      var $6=$f_addr;
      var $7=$cfg_addr;
      var $ATHcurve=(($7+188)|0);
      var $8=HEAPF32[(($ATHcurve)>>2)];
      var $call8=_ATHformula_GB($6, $8, 0.10000000149011612, 24);
      $ath=$call8;
      label = 10; break;
    case 8: 
      var $9=$f_addr;
      var $10=$cfg_addr;
      var $ATHcurve10=(($10+188)|0);
      var $11=HEAPF32[(($ATHcurve10)>>2)];
      var $call11=_ATHformula_GB($9, $11, 3.4100000858306885, 16.100000381469727);
      $ath=$call11;
      label = 10; break;
    case 9: 
      var $12=$f_addr;
      var $call12=_ATHformula_GB($12, 0, 0.10000000149011612, 24);
      $ath=$call12;
      label = 10; break;
    case 10: 
      var $13=$ath;

      return $13;
    default: assert(0, "bad label: " + label);
  }

}


function _ATHformula_GB($f, $value, $f_min, $f_max) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $value_addr;
      var $f_min_addr;
      var $f_max_addr;
      var $ath;
      $f_addr=$f;
      $value_addr=$value;
      $f_min_addr=$f_min;
      $f_max_addr=$f_max;
      var $0=$f_addr;
      var $conv=$0;
      var $cmp=$conv < -0.3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $f_addr=3410;
      label = 4; break;
    case 4: 
      var $1=$f_addr;
      var $div=($1)/(1000);
      $f_addr=$div;
      var $2=$f_min_addr;
      var $3=$f_addr;
      var $cmp2=$2 > $3;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$f_min_addr;
      var $cond = $4;label = 7; break;
    case 6: 
      var $5=$f_addr;
      var $cond = $5;label = 7; break;
    case 7: 
      var $cond;
      $f_addr=$cond;
      var $6=$f_max_addr;
      var $7=$f_addr;
      var $cmp4=$6 < $7;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$f_max_addr;
      var $cond9 = $8;label = 10; break;
    case 9: 
      var $9=$f_addr;
      var $cond9 = $9;label = 10; break;
    case 10: 
      var $cond9;
      $f_addr=$cond9;
      var $10=$f_addr;
      var $conv10=$10;
      var $11=Math.pow($conv10, -0.8);
      var $mul=($11)*(3.64);
      var $12=$f_addr;
      var $conv11=$12;
      var $sub=($conv11)-(3.4);
      var $13=Math.pow($sub, 2);
      var $mul12=($13)*(-0.6);
      var $call=Math.exp($mul12);
      var $mul13=($call)*(6.8);
      var $sub14=($mul)-($mul13);
      var $14=$f_addr;
      var $conv15=$14;
      var $sub16=($conv15)-(8.7);
      var $15=Math.pow($sub16, 2);
      var $mul17=($15)*(-0.15);
      var $call18=Math.exp($mul17);
      var $mul19=($call18)*(6);
      var $add=($sub14)+($mul19);
      var $16=$value_addr;
      var $conv20=$16;
      var $mul21=($conv20)*(0.04);
      var $add22=($mul21)+(0.6);
      var $mul23=($add22)*(0.001);
      var $17=$f_addr;
      var $conv24=$17;
      var $18=Math.pow($conv24, 4);
      var $mul25=($mul23)*($18);
      var $add26=($add)+($mul25);
      var $conv27=$add26;
      $ath=$conv27;
      var $19=$ath;

      return $19;
    default: assert(0, "bad label: " + label);
  }

}
_ATHformula_GB["X"]=1;

function _freq2bark($freq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $freq_addr;
      $freq_addr=$freq;
      var $0=$freq_addr;
      var $cmp=$0 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $freq_addr=0;
      label = 4; break;
    case 4: 
      var $1=$freq_addr;
      var $conv=$1;
      var $mul=($conv)*(0.001);
      var $conv1=$mul;
      $freq_addr=$conv1;
      var $2=$freq_addr;
      var $conv2=$2;
      var $mul3=($conv2)*(0.76);
      var $call=Math.atan($mul3);
      var $mul4=($call)*(13);
      var $3=$freq_addr;
      var $4=$freq_addr;
      var $mul5=($3)*($4);
      var $conv6=$mul5;
      var $div=($conv6)/(56.25);
      var $call7=Math.atan($div);
      var $mul8=($call7)*(3.5);
      var $add=($mul4)+($mul8);
      var $conv9=$add;

      return $conv9;
    default: assert(0, "bad label: " + label);
  }

}


function _SmpFrqIndex($sample_freq, $version) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $sample_freq_addr;
      var $version_addr;
      $sample_freq_addr=$sample_freq;
      $version_addr=$version;
      var $0=$sample_freq_addr;
      if ((($0)|0)==44100) {
        label = 3; break;
      }
      else if ((($0)|0)==48000) {
        label = 4; break;
      }
      else if ((($0)|0)==32000) {
        label = 5; break;
      }
      else if ((($0)|0)==22050) {
        label = 6; break;
      }
      else if ((($0)|0)==24000) {
        label = 7; break;
      }
      else if ((($0)|0)==16000) {
        label = 8; break;
      }
      else if ((($0)|0)==11025) {
        label = 9; break;
      }
      else if ((($0)|0)==12000) {
        label = 10; break;
      }
      else if ((($0)|0)==8000) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 3: 
      var $1=$version_addr;
      HEAP32[(($1)>>2)]=1;
      $retval=0;
      label = 13; break;
    case 4: 
      var $2=$version_addr;
      HEAP32[(($2)>>2)]=1;
      $retval=1;
      label = 13; break;
    case 5: 
      var $3=$version_addr;
      HEAP32[(($3)>>2)]=1;
      $retval=2;
      label = 13; break;
    case 6: 
      var $4=$version_addr;
      HEAP32[(($4)>>2)]=0;
      $retval=0;
      label = 13; break;
    case 7: 
      var $5=$version_addr;
      HEAP32[(($5)>>2)]=0;
      $retval=1;
      label = 13; break;
    case 8: 
      var $6=$version_addr;
      HEAP32[(($6)>>2)]=0;
      $retval=2;
      label = 13; break;
    case 9: 
      var $7=$version_addr;
      HEAP32[(($7)>>2)]=0;
      $retval=0;
      label = 13; break;
    case 10: 
      var $8=$version_addr;
      HEAP32[(($8)>>2)]=0;
      $retval=1;
      label = 13; break;
    case 11: 
      var $9=$version_addr;
      HEAP32[(($9)>>2)]=0;
      $retval=2;
      label = 13; break;
    case 12: 
      var $10=$version_addr;
      HEAP32[(($10)>>2)]=0;
      $retval=-1;
      label = 13; break;
    case 13: 
      var $11=$retval;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _map2MP3Frequency($freq) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $freq_addr;
      $freq_addr=$freq;
      var $0=$freq_addr;
      var $cmp=(($0)|0) <= 8000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=8000;
      label = 19; break;
    case 4: 
      var $1=$freq_addr;
      var $cmp1=(($1)|0) <= 11025;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=11025;
      label = 19; break;
    case 6: 
      var $2=$freq_addr;
      var $cmp4=(($2)|0) <= 12000;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=12000;
      label = 19; break;
    case 8: 
      var $3=$freq_addr;
      var $cmp7=(($3)|0) <= 16000;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=16000;
      label = 19; break;
    case 10: 
      var $4=$freq_addr;
      var $cmp10=(($4)|0) <= 22050;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=22050;
      label = 19; break;
    case 12: 
      var $5=$freq_addr;
      var $cmp13=(($5)|0) <= 24000;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=24000;
      label = 19; break;
    case 14: 
      var $6=$freq_addr;
      var $cmp16=(($6)|0) <= 32000;
      if ($cmp16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=32000;
      label = 19; break;
    case 16: 
      var $7=$freq_addr;
      var $cmp19=(($7)|0) <= 44100;
      if ($cmp19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=44100;
      label = 19; break;
    case 18: 
      $retval=48000;
      label = 19; break;
    case 19: 
      var $8=$retval;

      return $8;
    default: assert(0, "bad label: " + label);
  }

}


function _nearestBitrateFullIndex($bitrate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $bitrate_addr;
      var $lower_range;
      var $lower_range_kbps;
      var $upper_range;
      var $upper_range_kbps;
      var $b;
      $bitrate_addr=$bitrate;
      $lower_range=0;
      $lower_range_kbps=0;
      $upper_range=0;
      $upper_range_kbps=0;
      var $0=HEAP32[((((5292244)|0))>>2)];
      $upper_range_kbps=$0;
      $upper_range=16;
      var $1=HEAP32[((((5292244)|0))>>2)];
      $lower_range_kbps=$1;
      $lower_range=16;
      $b=0;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $cmp=(($2)|0) < 16;
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $3=$bitrate_addr;
      var $conv=(($3)&65535);
      var $4=$b;
      var $add=((($4)+(1))|0);
      var $arrayidx=((5292180+($add<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $cmp1=(($conv)|0) > (($5)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$bitrate_addr;
      var $conv3=(($6)&65535);
      var $cond = $conv3;label = 7; break;
    case 6: 
      var $7=$b;
      var $add4=((($7)+(1))|0);
      var $arrayidx5=((5292180+($add4<<2))|0);
      var $8=HEAP32[(($arrayidx5)>>2)];
      var $cond = $8;label = 7; break;
    case 7: 
      var $cond;
      var $9=$bitrate_addr;
      var $conv6=(($9)&65535);
      var $cmp7=(($cond)|0)!=(($conv6)|0);
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$b;
      var $add9=((($10)+(1))|0);
      var $arrayidx10=((5292180+($add9<<2))|0);
      var $11=HEAP32[(($arrayidx10)>>2)];
      $upper_range_kbps=$11;
      var $12=$b;
      var $add11=((($12)+(1))|0);
      $upper_range=$add11;
      var $13=$b;
      var $arrayidx12=((5292180+($13<<2))|0);
      var $14=HEAP32[(($arrayidx12)>>2)];
      $lower_range_kbps=$14;
      var $15=$b;
      $lower_range=$15;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $16=$b;
      var $inc=((($16)+(1))|0);
      $b=$inc;
      label = 3; break;
    case 11: 
      var $17=$upper_range_kbps;
      var $18=$bitrate_addr;
      var $conv13=(($18)&65535);
      var $sub=((($17)-($conv13))|0);
      var $19=$bitrate_addr;
      var $conv14=(($19)&65535);
      var $20=$lower_range_kbps;
      var $sub15=((($conv14)-($20))|0);
      var $cmp16=(($sub)|0) > (($sub15)|0);
      if ($cmp16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$lower_range;
      $retval=$21;
      label = 14; break;
    case 13: 
      var $22=$upper_range;
      $retval=$22;
      label = 14; break;
    case 14: 
      var $23=$retval;

      return $23;
    default: assert(0, "bad label: " + label);
  }

}
_nearestBitrateFullIndex["X"]=1;

function _BitrateIndex($bRate, $version, $samplerate) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $bRate_addr;
      var $version_addr;
      var $samplerate_addr;
      var $i;
      $bRate_addr=$bRate;
      $version_addr=$version;
      $samplerate_addr=$samplerate;
      var $0=$samplerate_addr;
      var $cmp=(($0)|0) < 16000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $version_addr=2;
      label = 4; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $1=$i;
      var $cmp1=(($1)|0) <= 14;
      if ($cmp1) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $2=$i;
      var $3=$version_addr;
      var $arrayidx=((5348820+($3<<6))|0);
      var $arrayidx2=(($arrayidx+($2<<2))|0);
      var $4=HEAP32[(($arrayidx2)>>2)];
      var $cmp3=(($4)|0) > 0;
      if ($cmp3) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $5=$i;
      var $6=$version_addr;
      var $arrayidx5=((5348820+($6<<6))|0);
      var $arrayidx6=(($arrayidx5+($5<<2))|0);
      var $7=HEAP32[(($arrayidx6)>>2)];
      var $8=$bRate_addr;
      var $cmp7=(($7)|0)==(($8)|0);
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$i;
      $retval=$9;
      label = 13; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 12: 
      $retval=-1;
      label = 13; break;
    case 13: 
      var $11=$retval;

      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _isResamplingNecessary($cfg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cfg_addr;
      var $l;
      var $h;
      $cfg_addr=$cfg;
      var $0=$cfg_addr;
      var $samplerate_out=(($0+48)|0);
      var $1=HEAP32[(($samplerate_out)>>2)];
      var $conv=(($1)|0);
      var $mul=($conv)*(0.9994999766349792);
      var $conv1=(($mul)&-1);
      $l=$conv1;
      var $2=$cfg_addr;
      var $samplerate_out2=(($2+48)|0);
      var $3=HEAP32[(($samplerate_out2)>>2)];
      var $conv3=(($3)|0);
      var $mul4=($conv3)*(1.000499963760376);
      var $conv5=(($mul4)&-1);
      $h=$conv5;
      var $4=$cfg_addr;
      var $samplerate_in=(($4+44)|0);
      var $5=HEAP32[(($samplerate_in)>>2)];
      var $6=$l;
      var $cmp=(($5)|0) < (($6)|0);
      if ($cmp) { var $10 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$h;
      var $8=$cfg_addr;
      var $samplerate_in7=(($8+44)|0);
      var $9=HEAP32[(($samplerate_in7)>>2)];
      var $cmp8=(($7)|0) < (($9)|0);
      var $10 = $cmp8;label = 4; break;
    case 4: 
      var $10;
      var $cond=$10 ? 1 : 0;

      return $cond;
    default: assert(0, "bad label: " + label);
  }

}


function _fill_buffer($gfc, $mfbuf, $in_buffer, $nsamples, $n_in, $n_out) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $mfbuf_addr;
      var $in_buffer_addr;
      var $nsamples_addr;
      var $n_in_addr;
      var $n_out_addr;
      var $cfg;
      var $mf_size;
      var $framesize;
      var $nout;
      var $ch;
      var $nch;
      $gfc_addr=$gfc;
      $mfbuf_addr=$mfbuf;
      $in_buffer_addr=$in_buffer;
      $nsamples_addr=$nsamples;
      $n_in_addr=$n_in;
      $n_out_addr=$n_out;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      var $mf_size2=(($sv_enc+56212)|0);
      var $2=HEAP32[(($mf_size2)>>2)];
      $mf_size=$2;
      var $3=$cfg;
      var $mode_gr=(($3+60)|0);
      var $4=HEAP32[(($mode_gr)>>2)];
      var $mul=((($4)*(576))&-1);
      $framesize=$mul;
      $ch=0;
      var $5=$cfg;
      var $channels_out=(($5+56)|0);
      var $6=HEAP32[(($channels_out)>>2)];
      $nch=$6;
      var $7=$cfg;
      var $call=_isResamplingNecessary($7);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$gfc_addr;
      var $9=$mf_size;
      var $10=$ch;
      var $11=$mfbuf_addr;
      var $arrayidx=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $arrayidx3=(($12+($9<<2))|0);
      var $13=$framesize;
      var $14=$ch;
      var $15=$in_buffer_addr;
      var $arrayidx4=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx4)>>2)];
      var $17=$nsamples_addr;
      var $18=$n_in_addr;
      var $19=$ch;
      var $call5=_fill_buffer_resample($8, $arrayidx3, $13, $16, $17, $18, $19);
      $nout=$call5;
      label = 5; break;
    case 5: 
      var $20=$ch;
      var $inc=((($20)+(1))|0);
      $ch=$inc;
      var $21=$nch;
      var $cmp=(($inc)|0) < (($21)|0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 6: 
      var $22=$nout;
      var $23=$n_out_addr;
      HEAP32[(($23)>>2)]=$22;
      label = 14; break;
    case 7: 
      var $24=$framesize;
      var $25=$nsamples_addr;
      var $cmp6=(($24)|0) < (($25)|0);
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $26=$framesize;
      var $cond = $26;label = 10; break;
    case 9: 
      var $27=$nsamples_addr;
      var $cond = $27;label = 10; break;
    case 10: 
      var $cond;
      $nout=$cond;
      label = 11; break;
    case 11: 
      var $28=$mf_size;
      var $29=$ch;
      var $30=$mfbuf_addr;
      var $arrayidx8=(($30+($29<<2))|0);
      var $31=HEAP32[(($arrayidx8)>>2)];
      var $arrayidx9=(($31+($28<<2))|0);
      var $32=$arrayidx9;
      var $33=$ch;
      var $34=$in_buffer_addr;
      var $arrayidx10=(($34+($33<<2))|0);
      var $35=HEAP32[(($arrayidx10)>>2)];
      var $arrayidx11=(($35)|0);
      var $36=$arrayidx11;
      var $37=$nout;
      var $mul12=((($37<<2))&-1);
      assert($mul12 % 1 === 0);_memcpy($32, $36, $mul12);
      label = 12; break;
    case 12: 
      var $38=$ch;
      var $inc14=((($38)+(1))|0);
      $ch=$inc14;
      var $39=$nch;
      var $cmp15=(($inc14)|0) < (($39)|0);
      if ($cmp15) { label = 11; break; } else { label = 13; break; }
    case 13: 
      var $40=$nout;
      var $41=$n_out_addr;
      HEAP32[(($41)>>2)]=$40;
      var $42=$nout;
      var $43=$n_in_addr;
      HEAP32[(($43)>>2)]=$42;
      label = 14; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_fill_buffer["X"]=1;

function _has_MMX() {
  var label = 0;



  return 0;
}


function _has_3DNow() {
  var label = 0;



  return 0;
}


function _has_SSE() {
  var label = 0;



  return 0;
}


function _has_SSE2() {
  var label = 0;



  return 0;
}


function _disable_FPE() {
  var label = 0;



  return;
}


function _fast_log2($x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $x_addr;
  var $log2val;
  var $partial;
  var $fi=__stackBase__;
  var $mantisse;
  $x_addr=$x;
  var $0=$x_addr;
  var $f=$fi;
  HEAPF32[(($f)>>2)]=$0;
  var $i=$fi;
  var $1=HEAP32[(($i)>>2)];
  var $and=$1 & 8388607;
  $mantisse=$and;
  var $i1=$fi;
  var $2=HEAP32[(($i1)>>2)];
  var $shr=$2 >> 23;
  var $and2=$shr & 255;
  var $sub=((($and2)-(127))|0);
  var $conv=(($sub)|0);
  $log2val=$conv;
  var $3=$mantisse;
  var $and3=$3 & 16383;
  var $conv4=(($and3)|0);
  $partial=$conv4;
  var $4=$partial;
  var $mul=($4)*(0.00006103515625);
  $partial=$mul;
  var $5=$mantisse;
  var $shr5=$5 >> 14;
  $mantisse=$shr5;
  var $6=$mantisse;
  var $arrayidx=((5314532+($6<<2))|0);
  var $7=HEAPF32[(($arrayidx)>>2)];
  var $8=$partial;
  var $sub6=(1)-($8);
  var $mul7=($7)*($sub6);
  var $9=$mantisse;
  var $add=((($9)+(1))|0);
  var $arrayidx8=((5314532+($add<<2))|0);
  var $10=HEAPF32[(($arrayidx8)>>2)];
  var $11=$partial;
  var $mul9=($10)*($11);
  var $add10=($mul7)+($mul9);
  var $12=$log2val;
  var $add11=($12)+($add10);
  $log2val=$add11;
  var $13=$log2val;
  STACKTOP = __stackBase__;
  return $13;
}


function _fill_buffer_resample($gfc, $outbuf, $desired_len, $inbuf, $len, $num_used, $ch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $outbuf_addr;
      var $desired_len_addr;
      var $inbuf_addr;
      var $len_addr;
      var $num_used_addr;
      var $ch_addr;
      var $cfg;
      var $esv;
      var $resample_ratio;
      var $BLACKSIZE;
      var $offset;
      var $xvalue;
      var $i;
      var $j;
      var $k;
      var $filter_l;
      var $fcn;
      var $intratio;
      var $inbuf_old;
      var $bpc;
      var $sum;
      var $time0;
      var $joff;
      var $j2;
      var $y;
      var $n_shift;
      $gfc_addr=$gfc;
      $outbuf_addr=$outbuf;
      $desired_len_addr=$desired_len;
      $inbuf_addr=$inbuf;
      $len_addr=$len;
      $num_used_addr=$num_used;
      $ch_addr=$ch;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$gfc_addr;
      var $sv_enc=(($1+27820)|0);
      $esv=$sv_enc;
      var $2=$cfg;
      var $samplerate_in=(($2+44)|0);
      var $3=HEAP32[(($samplerate_in)>>2)];
      var $conv=(($3)|0);
      var $4=$cfg;
      var $samplerate_out=(($4+48)|0);
      var $5=HEAP32[(($samplerate_out)>>2)];
      var $conv2=(($5)|0);
      var $div=($conv)/($conv2);
      $resample_ratio=$div;
      $j=0;
      var $6=$cfg;
      var $samplerate_out3=(($6+48)|0);
      var $7=HEAP32[(($samplerate_out3)>>2)];
      var $8=$cfg;
      var $samplerate_out4=(($8+48)|0);
      var $9=HEAP32[(($samplerate_out4)>>2)];
      var $10=$cfg;
      var $samplerate_in5=(($10+44)|0);
      var $11=HEAP32[(($samplerate_in5)>>2)];
      var $call=_gcd($9, $11);
      var $div6=((((($7)|0))/((($call)|0)))&-1);
      $bpc=$div6;
      var $12=$bpc;
      var $cmp=(($12)|0) > 320;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $bpc=320;
      label = 4; break;
    case 4: 
      var $13=$resample_ratio;
      var $14=$resample_ratio;
      var $add=($14)+(0.5);
      var $call8=Math.floor($add);
      var $sub=($13)-($call8);
      var $call9=Math.abs($sub);
      var $cmp10=$call9 < 0.0001;
      var $conv11=(($cmp10)&1);
      var $conv12=(($conv11)|0);
      $intratio=$conv12;
      var $15=$resample_ratio;
      var $div13=(1)/($15);
      var $conv14=$div13;
      $fcn=$conv14;
      var $16=$fcn;
      var $conv15=$16;
      var $cmp16=$conv15 > 1;
      if ($cmp16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $fcn=1;
      label = 6; break;
    case 6: 
      $filter_l=31;
      var $17=$intratio;
      var $18=$filter_l;
      var $conv20=(($18)|0);
      var $add21=($conv20)+($17);
      var $conv22=(($add21)&-1);
      $filter_l=$conv22;
      var $19=$filter_l;
      var $add23=((($19)+(1))|0);
      $BLACKSIZE=$add23;
      var $20=$gfc_addr;
      var $fill_buffer_resample_init=(($20+12)|0);
      var $21=HEAP32[(($fill_buffer_resample_init)>>2)];
      var $cmp24=(($21)|0)==0;
      if ($cmp24) { label = 7; break; } else { label = 24; break; }
    case 7: 
      var $22=$BLACKSIZE;
      var $call27=_calloc($22, 4);
      var $23=$call27;
      var $24=$esv;
      var $inbuf_old28=(($24+9360)|0);
      var $arrayidx=(($inbuf_old28)|0);
      HEAP32[(($arrayidx)>>2)]=$23;
      var $25=$BLACKSIZE;
      var $call29=_calloc($25, 4);
      var $26=$call29;
      var $27=$esv;
      var $inbuf_old30=(($27+9360)|0);
      var $arrayidx31=(($inbuf_old30+4)|0);
      HEAP32[(($arrayidx31)>>2)]=$26;
      $i=0;
      label = 8; break;
    case 8: 
      var $28=$i;
      var $29=$bpc;
      var $mul=((($29<<1))&-1);
      var $cmp32=(($28)|0) <= (($mul)|0);
      if ($cmp32) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $30=$BLACKSIZE;
      var $call34=_calloc($30, 4);
      var $31=$call34;
      var $32=$i;
      var $33=$esv;
      var $blackfilt=(($33+9368)|0);
      var $arrayidx35=(($blackfilt+($32<<2))|0);
      HEAP32[(($arrayidx35)>>2)]=$31;
      label = 10; break;
    case 10: 
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      var $35=$esv;
      var $itime=(($35+9344)|0);
      var $arrayidx36=(($itime)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx36)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx36)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $36=$esv;
      var $itime37=(($36+9344)|0);
      var $arrayidx38=(($itime37+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx38)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx38)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $j=0;
      label = 12; break;
    case 12: 
      var $37=$j;
      var $38=$bpc;
      var $mul40=((($38<<1))&-1);
      var $cmp41=(($37)|0) <= (($mul40)|0);
      if ($cmp41) { label = 13; break; } else { label = 23; break; }
    case 13: 
      $sum=0;
      var $39=$j;
      var $40=$bpc;
      var $sub44=((($39)-($40))|0);
      var $conv45=(($sub44)|0);
      var $41=$bpc;
      var $conv46=(($41)|0);
      var $mul47=($conv46)*(2);
      var $div48=($conv45)/($mul47);
      var $conv49=$div48;
      $offset=$conv49;
      $i=0;
      label = 14; break;
    case 14: 
      var $42=$i;
      var $43=$filter_l;
      var $cmp51=(($42)|0) <= (($43)|0);
      if ($cmp51) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $44=$i;
      var $conv54=(($44)|0);
      var $45=$offset;
      var $sub55=($conv54)-($45);
      var $46=$fcn;
      var $47=$filter_l;
      var $call56=_blackman($sub55, $46, $47);
      var $48=$i;
      var $49=$j;
      var $50=$esv;
      var $blackfilt57=(($50+9368)|0);
      var $arrayidx58=(($blackfilt57+($49<<2))|0);
      var $51=HEAP32[(($arrayidx58)>>2)];
      var $arrayidx59=(($51+($48<<2))|0);
      HEAPF32[(($arrayidx59)>>2)]=$call56;
      var $52=$sum;
      var $add60=($52)+($call56);
      $sum=$add60;
      label = 16; break;
    case 16: 
      var $53=$i;
      var $inc62=((($53)+(1))|0);
      $i=$inc62;
      label = 14; break;
    case 17: 
      $i=0;
      label = 18; break;
    case 18: 
      var $54=$i;
      var $55=$filter_l;
      var $cmp65=(($54)|0) <= (($55)|0);
      if ($cmp65) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $56=$sum;
      var $57=$i;
      var $58=$j;
      var $59=$esv;
      var $blackfilt68=(($59+9368)|0);
      var $arrayidx69=(($blackfilt68+($58<<2))|0);
      var $60=HEAP32[(($arrayidx69)>>2)];
      var $arrayidx70=(($60+($57<<2))|0);
      var $61=HEAPF32[(($arrayidx70)>>2)];
      var $div71=($61)/($56);
      HEAPF32[(($arrayidx70)>>2)]=$div71;
      label = 20; break;
    case 20: 
      var $62=$i;
      var $inc73=((($62)+(1))|0);
      $i=$inc73;
      label = 18; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $63=$j;
      var $inc76=((($63)+(1))|0);
      $j=$inc76;
      label = 12; break;
    case 23: 
      var $64=$gfc_addr;
      var $fill_buffer_resample_init78=(($64+12)|0);
      HEAP32[(($fill_buffer_resample_init78)>>2)]=1;
      label = 24; break;
    case 24: 
      var $65=$ch_addr;
      var $66=$esv;
      var $inbuf_old80=(($66+9360)|0);
      var $arrayidx81=(($inbuf_old80+($65<<2))|0);
      var $67=HEAP32[(($arrayidx81)>>2)];
      $inbuf_old=$67;
      $k=0;
      label = 25; break;
    case 25: 
      var $68=$k;
      var $69=$desired_len_addr;
      var $cmp83=(($68)|0) < (($69)|0);
      if ($cmp83) { label = 26; break; } else { label = 37; break; }
    case 26: 
      var $70=$k;
      var $conv86=(($70)|0);
      var $71=$resample_ratio;
      var $mul87=($conv86)*($71);
      $time0=$mul87;
      var $72=$time0;
      var $73=$ch_addr;
      var $74=$esv;
      var $itime88=(($74+9344)|0);
      var $arrayidx89=(($itime88+($73<<3))|0);
      var $75=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx89)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx89)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub90=($72)-($75);
      var $call91=Math.floor($sub90);
      var $conv92=(($call91)&-1);
      $j=$conv92;
      var $76=$filter_l;
      var $77=$j;
      var $add93=((($76)+($77))|0);
      var $78=$filter_l;
      var $div94=((((($78)|0))/(2))&-1);
      var $sub95=((($add93)-($div94))|0);
      var $79=$len_addr;
      var $cmp96=(($sub95)|0) >= (($79)|0);
      if ($cmp96) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 37; break;
    case 28: 
      var $80=$time0;
      var $81=$ch_addr;
      var $82=$esv;
      var $itime100=(($82+9344)|0);
      var $arrayidx101=(($itime100+($81<<3))|0);
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx101)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx101)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub102=($80)-($83);
      var $84=$j;
      var $conv103=(($84)|0);
      var $85=$filter_l;
      var $rem=((($85)|0))%(2);
      var $conv104=(($rem)|0);
      var $mul105=($conv104)*(0.5);
      var $add106=($conv103)+($mul105);
      var $sub107=($sub102)-($add106);
      var $conv108=$sub107;
      $offset=$conv108;
      var $86=$offset;
      var $mul109=($86)*(2);
      var $87=$bpc;
      var $conv110=(($87)|0);
      var $mul111=($mul109)*($conv110);
      var $88=$bpc;
      var $conv112=(($88)|0);
      var $add113=($mul111)+($conv112);
      var $conv114=$add113;
      var $add115=($conv114)+(0.5);
      var $call116=Math.floor($add115);
      var $conv117=(($call116)&-1);
      $joff=$conv117;
      $xvalue=0;
      $i=0;
      label = 29; break;
    case 29: 
      var $89=$i;
      var $90=$filter_l;
      var $cmp119=(($89)|0) <= (($90)|0);
      if ($cmp119) { label = 30; break; } else { label = 35; break; }
    case 30: 
      var $91=$i;
      var $92=$j;
      var $add122=((($91)+($92))|0);
      var $93=$filter_l;
      var $div123=((((($93)|0))/(2))&-1);
      var $sub124=((($add122)-($div123))|0);
      $j2=$sub124;
      var $94=$j2;
      var $cmp125=(($94)|0) < 0;
      if ($cmp125) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $95=$BLACKSIZE;
      var $96=$j2;
      var $add127=((($95)+($96))|0);
      var $97=$inbuf_old;
      var $arrayidx128=(($97+($add127<<2))|0);
      var $98=HEAPF32[(($arrayidx128)>>2)];
      var $cond = $98;label = 33; break;
    case 32: 
      var $99=$j2;
      var $100=$inbuf_addr;
      var $arrayidx129=(($100+($99<<2))|0);
      var $101=HEAPF32[(($arrayidx129)>>2)];
      var $cond = $101;label = 33; break;
    case 33: 
      var $cond;
      $y=$cond;
      var $102=$y;
      var $103=$i;
      var $104=$joff;
      var $105=$esv;
      var $blackfilt130=(($105+9368)|0);
      var $arrayidx131=(($blackfilt130+($104<<2))|0);
      var $106=HEAP32[(($arrayidx131)>>2)];
      var $arrayidx132=(($106+($103<<2))|0);
      var $107=HEAPF32[(($arrayidx132)>>2)];
      var $mul133=($102)*($107);
      var $108=$xvalue;
      var $add134=($108)+($mul133);
      $xvalue=$add134;
      label = 34; break;
    case 34: 
      var $109=$i;
      var $inc136=((($109)+(1))|0);
      $i=$inc136;
      label = 29; break;
    case 35: 
      var $110=$xvalue;
      var $111=$k;
      var $112=$outbuf_addr;
      var $arrayidx138=(($112+($111<<2))|0);
      HEAPF32[(($arrayidx138)>>2)]=$110;
      label = 36; break;
    case 36: 
      var $113=$k;
      var $inc140=((($113)+(1))|0);
      $k=$inc140;
      label = 25; break;
    case 37: 
      var $114=$len_addr;
      var $115=$filter_l;
      var $116=$j;
      var $add142=((($115)+($116))|0);
      var $117=$filter_l;
      var $div143=((((($117)|0))/(2))&-1);
      var $sub144=((($add142)-($div143))|0);
      var $cmp145=(($114)|0) < (($sub144)|0);
      if ($cmp145) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $118=$len_addr;
      var $cond153 = $118;label = 40; break;
    case 39: 
      var $119=$filter_l;
      var $120=$j;
      var $add149=((($119)+($120))|0);
      var $121=$filter_l;
      var $div150=((((($121)|0))/(2))&-1);
      var $sub151=((($add149)-($div150))|0);
      var $cond153 = $sub151;label = 40; break;
    case 40: 
      var $cond153;
      var $122=$num_used_addr;
      HEAP32[(($122)>>2)]=$cond153;
      var $123=$num_used_addr;
      var $124=HEAP32[(($123)>>2)];
      var $conv154=(($124)|0);
      var $125=$k;
      var $conv155=(($125)|0);
      var $126=$resample_ratio;
      var $mul156=($conv155)*($126);
      var $sub157=($conv154)-($mul156);
      var $127=$ch_addr;
      var $128=$esv;
      var $itime158=(($128+9344)|0);
      var $arrayidx159=(($itime158+($127<<3))|0);
      var $129=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx159)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx159)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add160=($129)+($sub157);
      (HEAPF64[(tempDoublePtr)>>3]=$add160,HEAP32[(($arrayidx159)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx159)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $130=$num_used_addr;
      var $131=HEAP32[(($130)>>2)];
      var $132=$BLACKSIZE;
      var $cmp161=(($131)|0) >= (($132)|0);
      if ($cmp161) { label = 41; break; } else { label = 46; break; }
    case 41: 
      $i=0;
      label = 42; break;
    case 42: 
      var $133=$i;
      var $134=$BLACKSIZE;
      var $cmp165=(($133)|0) < (($134)|0);
      if ($cmp165) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $135=$num_used_addr;
      var $136=HEAP32[(($135)>>2)];
      var $137=$i;
      var $add168=((($136)+($137))|0);
      var $138=$BLACKSIZE;
      var $sub169=((($add168)-($138))|0);
      var $139=$inbuf_addr;
      var $arrayidx170=(($139+($sub169<<2))|0);
      var $140=HEAPF32[(($arrayidx170)>>2)];
      var $141=$i;
      var $142=$inbuf_old;
      var $arrayidx171=(($142+($141<<2))|0);
      HEAPF32[(($arrayidx171)>>2)]=$140;
      label = 44; break;
    case 44: 
      var $143=$i;
      var $inc173=((($143)+(1))|0);
      $i=$inc173;
      label = 42; break;
    case 45: 
      label = 55; break;
    case 46: 
      var $144=$BLACKSIZE;
      var $145=$num_used_addr;
      var $146=HEAP32[(($145)>>2)];
      var $sub175=((($144)-($146))|0);
      $n_shift=$sub175;
      $i=0;
      label = 47; break;
    case 47: 
      var $147=$i;
      var $148=$n_shift;
      var $cmp177=(($147)|0) < (($148)|0);
      if ($cmp177) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $149=$i;
      var $150=$num_used_addr;
      var $151=HEAP32[(($150)>>2)];
      var $add180=((($149)+($151))|0);
      var $152=$inbuf_old;
      var $arrayidx181=(($152+($add180<<2))|0);
      var $153=HEAPF32[(($arrayidx181)>>2)];
      var $154=$i;
      var $155=$inbuf_old;
      var $arrayidx182=(($155+($154<<2))|0);
      HEAPF32[(($arrayidx182)>>2)]=$153;
      label = 49; break;
    case 49: 
      var $156=$i;
      var $inc184=((($156)+(1))|0);
      $i=$inc184;
      label = 47; break;
    case 50: 
      $j=0;
      label = 51; break;
    case 51: 
      var $157=$i;
      var $158=$BLACKSIZE;
      var $cmp187=(($157)|0) < (($158)|0);
      if ($cmp187) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $159=$j;
      var $160=$inbuf_addr;
      var $arrayidx190=(($160+($159<<2))|0);
      var $161=HEAPF32[(($arrayidx190)>>2)];
      var $162=$i;
      var $163=$inbuf_old;
      var $arrayidx191=(($163+($162<<2))|0);
      HEAPF32[(($arrayidx191)>>2)]=$161;
      label = 53; break;
    case 53: 
      var $164=$i;
      var $inc193=((($164)+(1))|0);
      $i=$inc193;
      var $165=$j;
      var $inc194=((($165)+(1))|0);
      $j=$inc194;
      label = 51; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $166=$k;

      return $166;
    default: assert(0, "bad label: " + label);
  }

}
_fill_buffer_resample["X"]=1;

function _lame_report_def($format, $args) {
  var label = 0;


  var $format_addr;
  var $args_addr;
  $format_addr=$format;
  $args_addr=$args;
  var $0=HEAP32[((_stderr)>>2)];
  var $1=$format_addr;
  var $2=$args_addr;
  var $call=_fprintf($0, $1, $2);
  var $3=HEAP32[((_stderr)>>2)];
  var $call1=_fflush($3);

  return;
}


function _lame_report_fnc($print_f, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $print_f_addr;
      var $format_addr;
      var $args=__stackBase__;
      $print_f_addr=$print_f;
      $format_addr=$format;
      var $0=$print_f_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $args1=$args;
      HEAP32[(($args1)>>2)]=varrp;
      var $1=$print_f_addr;
      var $2=$format_addr;
      var $3=HEAP32[(($args)>>2)];
      FUNCTION_TABLE[$1]($2, $3);
      var $args2=$args;

      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_debugf($gfc, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $format_addr;
      var $args=__stackBase__;
      $gfc_addr=$gfc;
      $format_addr=$format;
      var $0=$gfc_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$gfc_addr;
      var $report_dbg=(($1+85828)|0);
      var $2=HEAP32[(($report_dbg)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $args2=$args;
      HEAP32[(($args2)>>2)]=varrp;
      var $3=$gfc_addr;
      var $report_dbg3=(($3+85828)|0);
      var $4=HEAP32[(($report_dbg3)>>2)];
      var $5=$format_addr;
      var $6=HEAP32[(($args)>>2)];
      FUNCTION_TABLE[$4]($5, $6);
      var $args4=$args;

      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_msgf($gfc, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $format_addr;
      var $args=__stackBase__;
      $gfc_addr=$gfc;
      $format_addr=$format;
      var $0=$gfc_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$gfc_addr;
      var $report_msg=(($1+85824)|0);
      var $2=HEAP32[(($report_msg)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $args2=$args;
      HEAP32[(($args2)>>2)]=varrp;
      var $3=$gfc_addr;
      var $report_msg3=(($3+85824)|0);
      var $4=HEAP32[(($report_msg3)>>2)];
      var $5=$format_addr;
      var $6=HEAP32[(($args)>>2)];
      FUNCTION_TABLE[$4]($5, $6);
      var $args4=$args;

      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _lame_errorf($gfc, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $format_addr;
      var $args=__stackBase__;
      $gfc_addr=$gfc;
      $format_addr=$format;
      var $0=$gfc_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$gfc_addr;
      var $report_err=(($1+85832)|0);
      var $2=HEAP32[(($report_err)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $args2=$args;
      HEAP32[(($args2)>>2)]=varrp;
      var $3=$gfc_addr;
      var $report_err3=(($3+85832)|0);
      var $4=HEAP32[(($report_err3)>>2)];
      var $5=$format_addr;
      var $6=HEAP32[(($args)>>2)];
      FUNCTION_TABLE[$4]($5, $6);
      var $args4=$args;

      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _init_log_table() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $j;
      var $0=HEAP32[((5327288)>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 8; break; } else { label = 3; break; }
    case 3: 
      $j=0;
      label = 4; break;
    case 4: 
      var $1=$j;
      var $cmp=(($1)|0) < 513;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $2=$j;
      var $conv=(($2)|0);
      var $div=($conv)/(512);
      var $add=($div)+(1);
      var $conv1=$add;
      var $call=Math.log($conv1);
      var $call2=Math.log(2);
      var $div3=($call)/($call2);
      var $conv4=$div3;
      var $3=$j;
      var $arrayidx=((5314532+($3<<2))|0);
      HEAPF32[(($arrayidx)>>2)]=$conv4;
      label = 6; break;
    case 6: 
      var $4=$j;
      var $inc=((($4)+(1))|0);
      $j=$inc;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      HEAP32[((5327288)>>2)]=1;

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _gcd($i, $j) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $j_addr;
      $i_addr=$i;
      $j_addr=$j;
      var $0=$j_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$j_addr;
      var $2=$i_addr;
      var $3=$j_addr;
      var $rem=((($2)|0))%((($3)|0));
      var $call=_gcd($1, $rem);
      var $cond = $call;label = 5; break;
    case 4: 
      var $4=$i_addr;
      var $cond = $4;label = 5; break;
    case 5: 
      var $cond;

      return $cond;
    default: assert(0, "bad label: " + label);
  }

}


function _blackman($x, $fcn, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x_addr;
      var $fcn_addr;
      var $l_addr;
      var $bkwn;
      var $x2;
      var $wcn;
      $x_addr=$x;
      $fcn_addr=$fcn;
      $l_addr=$l;
      var $0=$fcn_addr;
      var $conv=$0;
      var $mul=($conv)*(3.141592653589793);
      var $conv1=$mul;
      $wcn=$conv1;
      var $1=$l_addr;
      var $conv2=(($1)|0);
      var $2=$x_addr;
      var $div=($2)/($conv2);
      $x_addr=$div;
      var $3=$x_addr;
      var $cmp=$3 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $x_addr=0;
      label = 4; break;
    case 4: 
      var $4=$x_addr;
      var $cmp4=$4 > 1;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $x_addr=1;
      label = 6; break;
    case 6: 
      var $5=$x_addr;
      var $conv8=$5;
      var $sub=($conv8)-(0.5);
      var $conv9=$sub;
      $x2=$conv9;
      var $6=$x_addr;
      var $mul10=($6)*(2);
      var $conv11=$mul10;
      var $mul12=($conv11)*(3.141592653589793);
      var $call=Math.cos($mul12);
      var $mul13=($call)*(0.5);
      var $sub14=(0.42)-($mul13);
      var $7=$x_addr;
      var $mul15=($7)*(4);
      var $conv16=$mul15;
      var $mul17=($conv16)*(3.141592653589793);
      var $call18=Math.cos($mul17);
      var $mul19=($call18)*(0.08);
      var $add=($sub14)+($mul19);
      var $conv20=$add;
      $bkwn=$conv20;
      var $8=$x2;
      var $conv21=$8;
      var $call22=Math.abs($conv21);
      var $cmp23=$call22 < 1e-9;
      if ($cmp23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$wcn;
      var $conv26=$9;
      var $div27=($conv26)/(3.141592653589793);
      var $conv28=$div27;
      $retval=$conv28;
      label = 9; break;
    case 8: 
      var $10=$bkwn;
      var $conv29=$10;
      var $11=$l_addr;
      var $conv30=(($11)|0);
      var $12=$wcn;
      var $mul31=($conv30)*($12);
      var $13=$x2;
      var $mul32=($mul31)*($13);
      var $conv33=$mul32;
      var $call34=Math.sin($conv33);
      var $mul35=($conv29)*($call34);
      var $14=$l_addr;
      var $conv36=(($14)|0);
      var $mul37=($conv36)*(3.141592653589793);
      var $15=$x2;
      var $conv38=$15;
      var $mul39=($mul37)*($conv38);
      var $div40=($mul35)/($mul39);
      var $conv41=$div40;
      $retval=$conv41;
      label = 9; break;
    case 9: 
      var $16=$retval;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}
_blackman["X"]=1;

function _VBR_encode_frame($gfc, $xr34orig, $l3_xmin, $max_bits) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1464)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $gfc_addr;
      var $xr34orig_addr;
      var $l3_xmin_addr;
      var $max_bits_addr;
      var $cfg;
      var $sfwork_=__stackBase__;
      var $vbrsfmin_=(__stackBase__)+(624);
      var $that_=(__stackBase__)+(1248);
      var $ngr;
      var $nch;
      var $max_nbits_ch=(__stackBase__)+(1392);
      var $max_nbits_gr=(__stackBase__)+(1408);
      var $max_nbits_fr;
      var $use_nbits_ch=(__stackBase__)+(1416);
      var $use_nbits_gr=(__stackBase__)+(1432);
      var $use_nbits_fr;
      var $gr;
      var $ch;
      var $ok;
      var $sum_fr;
      var $that;
      var $sfwork;
      var $vbrsfmin;
      var $vbrmax;
      var $that81;
      var $f=(__stackBase__)+(1440);
      var $s;
      var $f292=(__stackBase__)+(1448);
      var $s293;
      var $f389=(__stackBase__)+(1456);
      var $s390;
      var $sum_gr;
      var $that611;
      var $sfwork621;
      var $vbrsfmin625;
      $gfc_addr=$gfc;
      $xr34orig_addr=$xr34orig;
      $l3_xmin_addr=$l3_xmin;
      $max_bits_addr=$max_bits;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$cfg;
      var $mode_gr=(($1+60)|0);
      var $2=HEAP32[(($mode_gr)>>2)];
      $ngr=$2;
      var $3=$cfg;
      var $channels_out=(($3+56)|0);
      var $4=HEAP32[(($channels_out)>>2)];
      $nch=$4;
      var $5=$max_nbits_ch;
      HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0; HEAP32[((($5)+(12))>>2)]=0;
      var $6=$max_nbits_gr;
      HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0;
      $max_nbits_fr=0;
      var $7=$use_nbits_ch;
      assert(16 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[((5388300)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((5388304)>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((5388308)>>2)];HEAP32[((($7)+(12))>>2)]=HEAP32[((5388312)>>2)];
      var $8=$use_nbits_gr;
      assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[((5388292)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((5388296)>>2)];
      $use_nbits_fr=15360;
      $gr=0;
      label = 3; break;
    case 3: 
      var $9=$gr;
      var $10=$ngr;
      var $cmp=(($9)|0) < (($10)|0);
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $11=$gr;
      var $arrayidx=(($max_nbits_gr+($11<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      $ch=0;
      label = 5; break;
    case 5: 
      var $12=$ch;
      var $13=$nch;
      var $cmp3=(($12)|0) < (($13)|0);
      if ($cmp3) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $14=$ch;
      var $15=$gr;
      var $16=$max_bits_addr;
      var $arrayidx5=(($16+($15<<3))|0);
      var $arrayidx6=(($arrayidx5+($14<<2))|0);
      var $17=HEAP32[(($arrayidx6)>>2)];
      var $18=$ch;
      var $19=$gr;
      var $arrayidx7=(($max_nbits_ch+($19<<3))|0);
      var $arrayidx8=(($arrayidx7+($18<<2))|0);
      HEAP32[(($arrayidx8)>>2)]=$17;
      var $20=$ch;
      var $21=$gr;
      var $arrayidx9=(($use_nbits_ch+($21<<3))|0);
      var $arrayidx10=(($arrayidx9+($20<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=0;
      var $22=$ch;
      var $23=$gr;
      var $24=$max_bits_addr;
      var $arrayidx11=(($24+($23<<3))|0);
      var $arrayidx12=(($arrayidx11+($22<<2))|0);
      var $25=HEAP32[(($arrayidx12)>>2)];
      var $26=$gr;
      var $arrayidx13=(($max_nbits_gr+($26<<2))|0);
      var $27=HEAP32[(($arrayidx13)>>2)];
      var $add=((($27)+($25))|0);
      HEAP32[(($arrayidx13)>>2)]=$add;
      var $28=$ch;
      var $29=$gr;
      var $30=$max_bits_addr;
      var $arrayidx14=(($30+($29<<3))|0);
      var $arrayidx15=(($arrayidx14+($28<<2))|0);
      var $31=HEAP32[(($arrayidx15)>>2)];
      var $32=$max_nbits_fr;
      var $add16=((($32)+($31))|0);
      $max_nbits_fr=$add16;
      var $33=$cfg;
      var $full_outer_loop=(($33+32)|0);
      var $34=HEAP32[(($full_outer_loop)>>2)];
      var $cmp17=(($34)|0) < 0;
      var $cond=$cmp17 ? (34) : (16);
      var $35=$ch;
      var $36=$gr;
      var $arrayidx18=(($that_+($36)*(72))|0);
      var $arrayidx19=(($arrayidx18+($35)*(36))|0);
      var $find=(($arrayidx19+4)|0);
      HEAP32[(($find)>>2)]=$cond;
      var $37=$gfc_addr;
      var $38=$ch;
      var $39=$gr;
      var $arrayidx20=(($that_+($39)*(72))|0);
      var $arrayidx21=(($arrayidx20+($38)*(36))|0);
      var $gfc22=(($arrayidx21+12)|0);
      HEAP32[(($gfc22)>>2)]=$37;
      var $40=$ch;
      var $41=$gr;
      var $42=$gfc_addr;
      var $l3_side=(($42+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx23=(($tt+($41)*(10504))|0);
      var $arrayidx24=(($arrayidx23+($40)*(5252))|0);
      var $43=$ch;
      var $44=$gr;
      var $arrayidx25=(($that_+($44)*(72))|0);
      var $arrayidx26=(($arrayidx25+($43)*(36))|0);
      var $cod_info=(($arrayidx26+16)|0);
      HEAP32[(($cod_info)>>2)]=$arrayidx24;
      var $45=$ch;
      var $46=$gr;
      var $47=$xr34orig_addr;
      var $arrayidx27=(($47+($46)*(4608))|0);
      var $arrayidx28=(($arrayidx27+($45)*(2304))|0);
      var $arraydecay=(($arrayidx28)|0);
      var $48=$ch;
      var $49=$gr;
      var $arrayidx29=(($that_+($49)*(72))|0);
      var $arrayidx30=(($arrayidx29+($48)*(36))|0);
      var $xr34orig31=(($arrayidx30+8)|0);
      HEAP32[(($xr34orig31)>>2)]=$arraydecay;
      var $50=$ch;
      var $51=$gr;
      var $arrayidx32=(($that_+($51)*(72))|0);
      var $arrayidx33=(($arrayidx32+($50)*(36))|0);
      var $cod_info34=(($arrayidx33+16)|0);
      var $52=HEAP32[(($cod_info34)>>2)];
      var $block_type=(($52+4788)|0);
      var $53=HEAP32[(($block_type)>>2)];
      var $cmp35=(($53)|0)==2;
      if ($cmp35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $54=$ch;
      var $55=$gr;
      var $arrayidx36=(($that_+($55)*(72))|0);
      var $arrayidx37=(($arrayidx36+($54)*(36))|0);
      var $alloc=(($arrayidx37)|0);
      HEAP32[(($alloc)>>2)]=32;
      label = 9; break;
    case 8: 
      var $56=$ch;
      var $57=$gr;
      var $arrayidx38=(($that_+($57)*(72))|0);
      var $arrayidx39=(($arrayidx38+($56)*(36))|0);
      var $alloc40=(($arrayidx39)|0);
      HEAP32[(($alloc40)>>2)]=22;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $58=$ch;
      var $inc=((($58)+(1))|0);
      $ch=$inc;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $59=$gr;
      var $inc42=((($59)+(1))|0);
      $gr=$inc42;
      label = 3; break;
    case 13: 
      $gr=0;
      label = 14; break;
    case 14: 
      var $60=$gr;
      var $61=$ngr;
      var $cmp45=(($60)|0) < (($61)|0);
      if ($cmp45) { label = 15; break; } else { label = 24; break; }
    case 15: 
      $ch=0;
      label = 16; break;
    case 16: 
      var $62=$ch;
      var $63=$nch;
      var $cmp48=(($62)|0) < (($63)|0);
      if ($cmp48) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $64=$ch;
      var $65=$gr;
      var $66=$max_bits_addr;
      var $arrayidx50=(($66+($65<<3))|0);
      var $arrayidx51=(($arrayidx50+($64<<2))|0);
      var $67=HEAP32[(($arrayidx51)>>2)];
      var $cmp52=(($67)|0) > 0;
      if ($cmp52) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $68=$ch;
      var $69=$gr;
      var $arrayidx54=(($that_+($69)*(72))|0);
      var $arrayidx55=(($arrayidx54+($68)*(36))|0);
      $that=$arrayidx55;
      var $70=$ch;
      var $71=$gr;
      var $arrayidx56=(($sfwork_+($71)*(312))|0);
      var $arrayidx57=(($arrayidx56+($70)*(156))|0);
      var $arraydecay58=(($arrayidx57)|0);
      $sfwork=$arraydecay58;
      var $72=$ch;
      var $73=$gr;
      var $arrayidx59=(($vbrsfmin_+($73)*(312))|0);
      var $arrayidx60=(($arrayidx59+($72)*(156))|0);
      var $arraydecay61=(($arrayidx60)|0);
      $vbrsfmin=$arraydecay61;
      var $74=$that;
      var $75=$ch;
      var $76=$gr;
      var $77=$l3_xmin_addr;
      var $arrayidx62=(($77+($76)*(312))|0);
      var $arrayidx63=(($arrayidx62+($75)*(156))|0);
      var $arraydecay64=(($arrayidx63)|0);
      var $78=$sfwork;
      var $79=$vbrsfmin;
      var $call=_block_sf($74, $arraydecay64, $78, $79);
      $vbrmax=$call;
      var $80=$that;
      var $alloc65=(($80)|0);
      var $81=HEAP32[(($alloc65)>>2)];
      var $82=$that;
      var $83=$sfwork;
      var $84=$vbrsfmin;
      var $85=$vbrmax;
      FUNCTION_TABLE[$81]($82, $83, $84, $85);
      var $86=$that;
      _bitcount($86);
      label = 20; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $87=$ch;
      var $inc69=((($87)+(1))|0);
      $ch=$inc69;
      label = 16; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $88=$gr;
      var $inc72=((($88)+(1))|0);
      $gr=$inc72;
      label = 14; break;
    case 24: 
      $use_nbits_fr=0;
      $gr=0;
      label = 25; break;
    case 25: 
      var $89=$gr;
      var $90=$ngr;
      var $cmp75=(($89)|0) < (($90)|0);
      if ($cmp75) { label = 26; break; } else { label = 35; break; }
    case 26: 
      var $91=$gr;
      var $arrayidx77=(($use_nbits_gr+($91<<2))|0);
      HEAP32[(($arrayidx77)>>2)]=0;
      $ch=0;
      label = 27; break;
    case 27: 
      var $92=$ch;
      var $93=$nch;
      var $cmp79=(($92)|0) < (($93)|0);
      if ($cmp79) { label = 28; break; } else { label = 33; break; }
    case 28: 
      var $94=$ch;
      var $95=$gr;
      var $arrayidx82=(($that_+($95)*(72))|0);
      var $arrayidx83=(($arrayidx82+($94)*(36))|0);
      $that81=$arrayidx83;
      var $96=$ch;
      var $97=$gr;
      var $98=$max_bits_addr;
      var $arrayidx84=(($98+($97<<3))|0);
      var $arrayidx85=(($arrayidx84+($96<<2))|0);
      var $99=HEAP32[(($arrayidx85)>>2)];
      var $cmp86=(($99)|0) > 0;
      if ($cmp86) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $100=$that81;
      var $cod_info88=(($100+16)|0);
      var $101=HEAP32[(($cod_info88)>>2)];
      var $l3_enc=(($101+2304)|0);
      var $arrayidx89=(($l3_enc)|0);
      var $102=$arrayidx89;
      for (var $$dest = $102>>2, $$stop = $$dest + 576; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $103=$that81;
      var $call90=_quantizeAndCountBits($103);
      label = 31; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $104=$gfc_addr;
      var $105=$gr;
      var $106=$ch;
      var $call93=_reduce_bit_usage($104, $105, $106);
      var $107=$ch;
      var $108=$gr;
      var $arrayidx94=(($use_nbits_ch+($108<<3))|0);
      var $arrayidx95=(($arrayidx94+($107<<2))|0);
      HEAP32[(($arrayidx95)>>2)]=$call93;
      var $109=$ch;
      var $110=$gr;
      var $arrayidx96=(($use_nbits_ch+($110<<3))|0);
      var $arrayidx97=(($arrayidx96+($109<<2))|0);
      var $111=HEAP32[(($arrayidx97)>>2)];
      var $112=$gr;
      var $arrayidx98=(($use_nbits_gr+($112<<2))|0);
      var $113=HEAP32[(($arrayidx98)>>2)];
      var $add99=((($113)+($111))|0);
      HEAP32[(($arrayidx98)>>2)]=$add99;
      label = 32; break;
    case 32: 
      var $114=$ch;
      var $inc101=((($114)+(1))|0);
      $ch=$inc101;
      label = 27; break;
    case 33: 
      var $115=$gr;
      var $arrayidx103=(($use_nbits_gr+($115<<2))|0);
      var $116=HEAP32[(($arrayidx103)>>2)];
      var $117=$use_nbits_fr;
      var $add104=((($117)+($116))|0);
      $use_nbits_fr=$add104;
      label = 34; break;
    case 34: 
      var $118=$gr;
      var $inc106=((($118)+(1))|0);
      $gr=$inc106;
      label = 25; break;
    case 35: 
      var $119=$use_nbits_fr;
      var $120=$max_nbits_fr;
      var $cmp108=(($119)|0) <= (($120)|0);
      if ($cmp108) { label = 36; break; } else { label = 51; break; }
    case 36: 
      $ok=1;
      $gr=0;
      label = 37; break;
    case 37: 
      var $121=$gr;
      var $122=$ngr;
      var $cmp111=(($121)|0) < (($122)|0);
      if ($cmp111) { label = 38; break; } else { label = 48; break; }
    case 38: 
      var $123=$gr;
      var $arrayidx113=(($use_nbits_gr+($123<<2))|0);
      var $124=HEAP32[(($arrayidx113)>>2)];
      var $cmp114=(($124)|0) > 7680;
      if ($cmp114) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $ok=0;
      label = 40; break;
    case 40: 
      $ch=0;
      label = 41; break;
    case 41: 
      var $125=$ch;
      var $126=$nch;
      var $cmp118=(($125)|0) < (($126)|0);
      if ($cmp118) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $127=$ch;
      var $128=$gr;
      var $arrayidx120=(($use_nbits_ch+($128<<3))|0);
      var $arrayidx121=(($arrayidx120+($127<<2))|0);
      var $129=HEAP32[(($arrayidx121)>>2)];
      var $cmp122=(($129)|0) > 4095;
      if ($cmp122) { label = 43; break; } else { label = 44; break; }
    case 43: 
      $ok=0;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $130=$ch;
      var $inc126=((($130)+(1))|0);
      $ch=$inc126;
      label = 41; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $131=$gr;
      var $inc129=((($131)+(1))|0);
      $gr=$inc129;
      label = 37; break;
    case 48: 
      var $132=$ok;
      var $tobool=(($132)|0)!=0;
      if ($tobool) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $133=$use_nbits_fr;
      $retval=$133;
      label = 199; break;
    case 50: 
      label = 51; break;
    case 51: 
      $ok=1;
      $sum_fr=0;
      $gr=0;
      label = 52; break;
    case 52: 
      var $134=$gr;
      var $135=$ngr;
      var $cmp135=(($134)|0) < (($135)|0);
      if ($cmp135) { label = 53; break; } else { label = 92; break; }
    case 53: 
      var $136=$gr;
      var $arrayidx137=(($max_nbits_gr+($136<<2))|0);
      HEAP32[(($arrayidx137)>>2)]=0;
      $ch=0;
      label = 54; break;
    case 54: 
      var $137=$ch;
      var $138=$nch;
      var $cmp139=(($137)|0) < (($138)|0);
      if ($cmp139) { label = 55; break; } else { label = 60; break; }
    case 55: 
      var $139=$ch;
      var $140=$gr;
      var $arrayidx141=(($use_nbits_ch+($140<<3))|0);
      var $arrayidx142=(($arrayidx141+($139<<2))|0);
      var $141=HEAP32[(($arrayidx142)>>2)];
      var $cmp143=(($141)|0) > 4095;
      if ($cmp143) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $142=$ch;
      var $143=$gr;
      var $arrayidx145=(($max_nbits_ch+($143<<3))|0);
      var $arrayidx146=(($arrayidx145+($142<<2))|0);
      HEAP32[(($arrayidx146)>>2)]=4095;
      label = 58; break;
    case 57: 
      var $144=$ch;
      var $145=$gr;
      var $arrayidx148=(($use_nbits_ch+($145<<3))|0);
      var $arrayidx149=(($arrayidx148+($144<<2))|0);
      var $146=HEAP32[(($arrayidx149)>>2)];
      var $147=$ch;
      var $148=$gr;
      var $arrayidx150=(($max_nbits_ch+($148<<3))|0);
      var $arrayidx151=(($arrayidx150+($147<<2))|0);
      HEAP32[(($arrayidx151)>>2)]=$146;
      label = 58; break;
    case 58: 
      var $149=$ch;
      var $150=$gr;
      var $arrayidx153=(($max_nbits_ch+($150<<3))|0);
      var $arrayidx154=(($arrayidx153+($149<<2))|0);
      var $151=HEAP32[(($arrayidx154)>>2)];
      var $152=$gr;
      var $arrayidx155=(($max_nbits_gr+($152<<2))|0);
      var $153=HEAP32[(($arrayidx155)>>2)];
      var $add156=((($153)+($151))|0);
      HEAP32[(($arrayidx155)>>2)]=$add156;
      label = 59; break;
    case 59: 
      var $154=$ch;
      var $inc158=((($154)+(1))|0);
      $ch=$inc158;
      label = 54; break;
    case 60: 
      var $155=$gr;
      var $arrayidx160=(($max_nbits_gr+($155<<2))|0);
      var $156=HEAP32[(($arrayidx160)>>2)];
      var $cmp161=(($156)|0) > 7680;
      if ($cmp161) { label = 61; break; } else { label = 90; break; }
    case 61: 
      var $157=$f;
      HEAP32[(($157)>>2)]=0; HEAP32[((($157)+(4))>>2)]=0;
      $s=0;
      $ch=0;
      label = 62; break;
    case 62: 
      var $158=$ch;
      var $159=$nch;
      var $cmp164=(($158)|0) < (($159)|0);
      if ($cmp164) { label = 63; break; } else { label = 68; break; }
    case 63: 
      var $160=$ch;
      var $161=$gr;
      var $arrayidx166=(($max_nbits_ch+($161<<3))|0);
      var $arrayidx167=(($arrayidx166+($160<<2))|0);
      var $162=HEAP32[(($arrayidx167)>>2)];
      var $cmp168=(($162)|0) > 0;
      if ($cmp168) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $163=$ch;
      var $164=$gr;
      var $arrayidx170=(($max_nbits_ch+($164<<3))|0);
      var $arrayidx171=(($arrayidx170+($163<<2))|0);
      var $165=HEAP32[(($arrayidx171)>>2)];
      var $conv=(($165)|0);
      var $call172=Math.sqrt($conv);
      var $call173=Math.sqrt($call172);
      var $conv174=$call173;
      var $166=$ch;
      var $arrayidx175=(($f+($166<<2))|0);
      HEAPF32[(($arrayidx175)>>2)]=$conv174;
      var $167=$ch;
      var $arrayidx176=(($f+($167<<2))|0);
      var $168=HEAPF32[(($arrayidx176)>>2)];
      var $169=$s;
      var $add177=($169)+($168);
      $s=$add177;
      label = 66; break;
    case 65: 
      var $170=$ch;
      var $arrayidx179=(($f+($170<<2))|0);
      HEAPF32[(($arrayidx179)>>2)]=0;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $171=$ch;
      var $inc182=((($171)+(1))|0);
      $ch=$inc182;
      label = 62; break;
    case 68: 
      $ch=0;
      label = 69; break;
    case 69: 
      var $172=$ch;
      var $173=$nch;
      var $cmp185=(($172)|0) < (($173)|0);
      if ($cmp185) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $174=$s;
      var $cmp188=$174 > 0;
      if ($cmp188) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $175=$ch;
      var $arrayidx191=(($f+($175<<2))|0);
      var $176=HEAPF32[(($arrayidx191)>>2)];
      var $mul=($176)*(7680);
      var $177=$s;
      var $div=($mul)/($177);
      var $conv192=(($div)&-1);
      var $178=$ch;
      var $179=$gr;
      var $arrayidx193=(($max_nbits_ch+($179<<3))|0);
      var $arrayidx194=(($arrayidx193+($178<<2))|0);
      HEAP32[(($arrayidx194)>>2)]=$conv192;
      label = 73; break;
    case 72: 
      var $180=$ch;
      var $181=$gr;
      var $arrayidx196=(($max_nbits_ch+($181<<3))|0);
      var $arrayidx197=(($arrayidx196+($180<<2))|0);
      HEAP32[(($arrayidx197)>>2)]=0;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $182=$ch;
      var $inc200=((($182)+(1))|0);
      $ch=$inc200;
      label = 69; break;
    case 75: 
      var $183=$nch;
      var $cmp202=(($183)|0) > 1;
      if ($cmp202) { label = 76; break; } else { label = 85; break; }
    case 76: 
      var $184=$gr;
      var $arrayidx205=(($max_nbits_ch+($184<<3))|0);
      var $arrayidx206=(($arrayidx205)|0);
      var $185=HEAP32[(($arrayidx206)>>2)];
      var $186=$gr;
      var $arrayidx207=(($use_nbits_ch+($186<<3))|0);
      var $arrayidx208=(($arrayidx207)|0);
      var $187=HEAP32[(($arrayidx208)>>2)];
      var $add209=((($187)+(32))|0);
      var $cmp210=(($185)|0) > (($add209)|0);
      if ($cmp210) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $188=$gr;
      var $arrayidx213=(($max_nbits_ch+($188<<3))|0);
      var $arrayidx214=(($arrayidx213)|0);
      var $189=HEAP32[(($arrayidx214)>>2)];
      var $190=$gr;
      var $arrayidx215=(($max_nbits_ch+($190<<3))|0);
      var $arrayidx216=(($arrayidx215+4)|0);
      var $191=HEAP32[(($arrayidx216)>>2)];
      var $add217=((($191)+($189))|0);
      HEAP32[(($arrayidx216)>>2)]=$add217;
      var $192=$gr;
      var $arrayidx218=(($use_nbits_ch+($192<<3))|0);
      var $arrayidx219=(($arrayidx218)|0);
      var $193=HEAP32[(($arrayidx219)>>2)];
      var $add220=((($193)+(32))|0);
      var $194=$gr;
      var $arrayidx221=(($max_nbits_ch+($194<<3))|0);
      var $arrayidx222=(($arrayidx221+4)|0);
      var $195=HEAP32[(($arrayidx222)>>2)];
      var $sub=((($195)-($add220))|0);
      HEAP32[(($arrayidx222)>>2)]=$sub;
      var $196=$gr;
      var $arrayidx223=(($use_nbits_ch+($196<<3))|0);
      var $arrayidx224=(($arrayidx223)|0);
      var $197=HEAP32[(($arrayidx224)>>2)];
      var $add225=((($197)+(32))|0);
      var $198=$gr;
      var $arrayidx226=(($max_nbits_ch+($198<<3))|0);
      var $arrayidx227=(($arrayidx226)|0);
      HEAP32[(($arrayidx227)>>2)]=$add225;
      label = 78; break;
    case 78: 
      var $199=$gr;
      var $arrayidx229=(($max_nbits_ch+($199<<3))|0);
      var $arrayidx230=(($arrayidx229+4)|0);
      var $200=HEAP32[(($arrayidx230)>>2)];
      var $201=$gr;
      var $arrayidx231=(($use_nbits_ch+($201<<3))|0);
      var $arrayidx232=(($arrayidx231+4)|0);
      var $202=HEAP32[(($arrayidx232)>>2)];
      var $add233=((($202)+(32))|0);
      var $cmp234=(($200)|0) > (($add233)|0);
      if ($cmp234) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $203=$gr;
      var $arrayidx237=(($max_nbits_ch+($203<<3))|0);
      var $arrayidx238=(($arrayidx237+4)|0);
      var $204=HEAP32[(($arrayidx238)>>2)];
      var $205=$gr;
      var $arrayidx239=(($max_nbits_ch+($205<<3))|0);
      var $arrayidx240=(($arrayidx239)|0);
      var $206=HEAP32[(($arrayidx240)>>2)];
      var $add241=((($206)+($204))|0);
      HEAP32[(($arrayidx240)>>2)]=$add241;
      var $207=$gr;
      var $arrayidx242=(($use_nbits_ch+($207<<3))|0);
      var $arrayidx243=(($arrayidx242+4)|0);
      var $208=HEAP32[(($arrayidx243)>>2)];
      var $add244=((($208)+(32))|0);
      var $209=$gr;
      var $arrayidx245=(($max_nbits_ch+($209<<3))|0);
      var $arrayidx246=(($arrayidx245)|0);
      var $210=HEAP32[(($arrayidx246)>>2)];
      var $sub247=((($210)-($add244))|0);
      HEAP32[(($arrayidx246)>>2)]=$sub247;
      var $211=$gr;
      var $arrayidx248=(($use_nbits_ch+($211<<3))|0);
      var $arrayidx249=(($arrayidx248+4)|0);
      var $212=HEAP32[(($arrayidx249)>>2)];
      var $add250=((($212)+(32))|0);
      var $213=$gr;
      var $arrayidx251=(($max_nbits_ch+($213<<3))|0);
      var $arrayidx252=(($arrayidx251+4)|0);
      HEAP32[(($arrayidx252)>>2)]=$add250;
      label = 80; break;
    case 80: 
      var $214=$gr;
      var $arrayidx254=(($max_nbits_ch+($214<<3))|0);
      var $arrayidx255=(($arrayidx254)|0);
      var $215=HEAP32[(($arrayidx255)>>2)];
      var $cmp256=(($215)|0) > 4095;
      if ($cmp256) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $216=$gr;
      var $arrayidx259=(($max_nbits_ch+($216<<3))|0);
      var $arrayidx260=(($arrayidx259)|0);
      HEAP32[(($arrayidx260)>>2)]=4095;
      label = 82; break;
    case 82: 
      var $217=$gr;
      var $arrayidx262=(($max_nbits_ch+($217<<3))|0);
      var $arrayidx263=(($arrayidx262+4)|0);
      var $218=HEAP32[(($arrayidx263)>>2)];
      var $cmp264=(($218)|0) > 4095;
      if ($cmp264) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $219=$gr;
      var $arrayidx267=(($max_nbits_ch+($219<<3))|0);
      var $arrayidx268=(($arrayidx267+4)|0);
      HEAP32[(($arrayidx268)>>2)]=4095;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $220=$gr;
      var $arrayidx271=(($max_nbits_gr+($220<<2))|0);
      HEAP32[(($arrayidx271)>>2)]=0;
      $ch=0;
      label = 86; break;
    case 86: 
      var $221=$ch;
      var $222=$nch;
      var $cmp273=(($221)|0) < (($222)|0);
      if ($cmp273) { label = 87; break; } else { label = 89; break; }
    case 87: 
      var $223=$ch;
      var $224=$gr;
      var $arrayidx276=(($max_nbits_ch+($224<<3))|0);
      var $arrayidx277=(($arrayidx276+($223<<2))|0);
      var $225=HEAP32[(($arrayidx277)>>2)];
      var $226=$gr;
      var $arrayidx278=(($max_nbits_gr+($226<<2))|0);
      var $227=HEAP32[(($arrayidx278)>>2)];
      var $add279=((($227)+($225))|0);
      HEAP32[(($arrayidx278)>>2)]=$add279;
      label = 88; break;
    case 88: 
      var $228=$ch;
      var $inc281=((($228)+(1))|0);
      $ch=$inc281;
      label = 86; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $229=$gr;
      var $arrayidx284=(($max_nbits_gr+($229<<2))|0);
      var $230=HEAP32[(($arrayidx284)>>2)];
      var $231=$sum_fr;
      var $add285=((($231)+($230))|0);
      $sum_fr=$add285;
      label = 91; break;
    case 91: 
      var $232=$gr;
      var $inc287=((($232)+(1))|0);
      $gr=$inc287;
      label = 52; break;
    case 92: 
      var $233=$sum_fr;
      var $234=$max_nbits_fr;
      var $cmp289=(($233)|0) > (($234)|0);
      if ($cmp289) { label = 93; break; } else { label = 150; break; }
    case 93: 
      var $235=$f292;
      HEAP32[(($235)>>2)]=0; HEAP32[((($235)+(4))>>2)]=0;
      $s293=0;
      $gr=0;
      label = 94; break;
    case 94: 
      var $236=$gr;
      var $237=$ngr;
      var $cmp295=(($236)|0) < (($237)|0);
      if ($cmp295) { label = 95; break; } else { label = 100; break; }
    case 95: 
      var $238=$gr;
      var $arrayidx298=(($max_nbits_gr+($238<<2))|0);
      var $239=HEAP32[(($arrayidx298)>>2)];
      var $cmp299=(($239)|0) > 0;
      if ($cmp299) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $240=$gr;
      var $arrayidx302=(($max_nbits_gr+($240<<2))|0);
      var $241=HEAP32[(($arrayidx302)>>2)];
      var $conv303=(($241)|0);
      var $call304=Math.sqrt($conv303);
      var $conv305=$call304;
      var $242=$gr;
      var $arrayidx306=(($f292+($242<<2))|0);
      HEAPF32[(($arrayidx306)>>2)]=$conv305;
      var $243=$gr;
      var $arrayidx307=(($f292+($243<<2))|0);
      var $244=HEAPF32[(($arrayidx307)>>2)];
      var $245=$s293;
      var $add308=($245)+($244);
      $s293=$add308;
      label = 98; break;
    case 97: 
      var $246=$gr;
      var $arrayidx310=(($f292+($246<<2))|0);
      HEAPF32[(($arrayidx310)>>2)]=0;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $247=$gr;
      var $inc313=((($247)+(1))|0);
      $gr=$inc313;
      label = 94; break;
    case 100: 
      $gr=0;
      label = 101; break;
    case 101: 
      var $248=$gr;
      var $249=$ngr;
      var $cmp316=(($248)|0) < (($249)|0);
      if ($cmp316) { label = 102; break; } else { label = 107; break; }
    case 102: 
      var $250=$s293;
      var $cmp319=$250 > 0;
      if ($cmp319) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $251=$max_nbits_fr;
      var $conv322=(($251)|0);
      var $252=$gr;
      var $arrayidx323=(($f292+($252<<2))|0);
      var $253=HEAPF32[(($arrayidx323)>>2)];
      var $mul324=($conv322)*($253);
      var $254=$s293;
      var $div325=($mul324)/($254);
      var $conv326=(($div325)&-1);
      var $255=$gr;
      var $arrayidx327=(($max_nbits_gr+($255<<2))|0);
      HEAP32[(($arrayidx327)>>2)]=$conv326;
      label = 105; break;
    case 104: 
      var $256=$gr;
      var $arrayidx329=(($max_nbits_gr+($256<<2))|0);
      HEAP32[(($arrayidx329)>>2)]=0;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $257=$gr;
      var $inc332=((($257)+(1))|0);
      $gr=$inc332;
      label = 101; break;
    case 107: 
      var $258=$ngr;
      var $cmp334=(($258)|0) > 1;
      if ($cmp334) { label = 108; break; } else { label = 119; break; }
    case 108: 
      var $arrayidx337=(($max_nbits_gr)|0);
      var $259=HEAP32[(($arrayidx337)>>2)];
      var $arrayidx338=(($use_nbits_gr)|0);
      var $260=HEAP32[(($arrayidx338)>>2)];
      var $add339=((($260)+(125))|0);
      var $cmp340=(($259)|0) > (($add339)|0);
      if ($cmp340) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $arrayidx343=(($max_nbits_gr)|0);
      var $261=HEAP32[(($arrayidx343)>>2)];
      var $arrayidx344=(($max_nbits_gr+4)|0);
      var $262=HEAP32[(($arrayidx344)>>2)];
      var $add345=((($262)+($261))|0);
      HEAP32[(($arrayidx344)>>2)]=$add345;
      var $arrayidx346=(($use_nbits_gr)|0);
      var $263=HEAP32[(($arrayidx346)>>2)];
      var $add347=((($263)+(125))|0);
      var $arrayidx348=(($max_nbits_gr+4)|0);
      var $264=HEAP32[(($arrayidx348)>>2)];
      var $sub349=((($264)-($add347))|0);
      HEAP32[(($arrayidx348)>>2)]=$sub349;
      var $arrayidx350=(($use_nbits_gr)|0);
      var $265=HEAP32[(($arrayidx350)>>2)];
      var $add351=((($265)+(125))|0);
      var $arrayidx352=(($max_nbits_gr)|0);
      HEAP32[(($arrayidx352)>>2)]=$add351;
      label = 110; break;
    case 110: 
      var $arrayidx354=(($max_nbits_gr+4)|0);
      var $266=HEAP32[(($arrayidx354)>>2)];
      var $arrayidx355=(($use_nbits_gr+4)|0);
      var $267=HEAP32[(($arrayidx355)>>2)];
      var $add356=((($267)+(125))|0);
      var $cmp357=(($266)|0) > (($add356)|0);
      if ($cmp357) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $arrayidx360=(($max_nbits_gr+4)|0);
      var $268=HEAP32[(($arrayidx360)>>2)];
      var $arrayidx361=(($max_nbits_gr)|0);
      var $269=HEAP32[(($arrayidx361)>>2)];
      var $add362=((($269)+($268))|0);
      HEAP32[(($arrayidx361)>>2)]=$add362;
      var $arrayidx363=(($use_nbits_gr+4)|0);
      var $270=HEAP32[(($arrayidx363)>>2)];
      var $add364=((($270)+(125))|0);
      var $arrayidx365=(($max_nbits_gr)|0);
      var $271=HEAP32[(($arrayidx365)>>2)];
      var $sub366=((($271)-($add364))|0);
      HEAP32[(($arrayidx365)>>2)]=$sub366;
      var $arrayidx367=(($use_nbits_gr+4)|0);
      var $272=HEAP32[(($arrayidx367)>>2)];
      var $add368=((($272)+(125))|0);
      var $arrayidx369=(($max_nbits_gr+4)|0);
      HEAP32[(($arrayidx369)>>2)]=$add368;
      label = 112; break;
    case 112: 
      $gr=0;
      label = 113; break;
    case 113: 
      var $273=$gr;
      var $274=$ngr;
      var $cmp372=(($273)|0) < (($274)|0);
      if ($cmp372) { label = 114; break; } else { label = 118; break; }
    case 114: 
      var $275=$gr;
      var $arrayidx375=(($max_nbits_gr+($275<<2))|0);
      var $276=HEAP32[(($arrayidx375)>>2)];
      var $cmp376=(($276)|0) > 7680;
      if ($cmp376) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $277=$gr;
      var $arrayidx379=(($max_nbits_gr+($277<<2))|0);
      HEAP32[(($arrayidx379)>>2)]=7680;
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $278=$gr;
      var $inc382=((($278)+(1))|0);
      $gr=$inc382;
      label = 113; break;
    case 118: 
      label = 119; break;
    case 119: 
      $gr=0;
      label = 120; break;
    case 120: 
      var $279=$gr;
      var $280=$ngr;
      var $cmp386=(($279)|0) < (($280)|0);
      if ($cmp386) { label = 121; break; } else { label = 149; break; }
    case 121: 
      var $281=$f389;
      HEAP32[(($281)>>2)]=0; HEAP32[((($281)+(4))>>2)]=0;
      $s390=0;
      $ch=0;
      label = 122; break;
    case 122: 
      var $282=$ch;
      var $283=$nch;
      var $cmp392=(($282)|0) < (($283)|0);
      if ($cmp392) { label = 123; break; } else { label = 128; break; }
    case 123: 
      var $284=$ch;
      var $285=$gr;
      var $arrayidx395=(($max_nbits_ch+($285<<3))|0);
      var $arrayidx396=(($arrayidx395+($284<<2))|0);
      var $286=HEAP32[(($arrayidx396)>>2)];
      var $cmp397=(($286)|0) > 0;
      if ($cmp397) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $287=$ch;
      var $288=$gr;
      var $arrayidx400=(($max_nbits_ch+($288<<3))|0);
      var $arrayidx401=(($arrayidx400+($287<<2))|0);
      var $289=HEAP32[(($arrayidx401)>>2)];
      var $conv402=(($289)|0);
      var $call403=Math.sqrt($conv402);
      var $conv404=$call403;
      var $290=$ch;
      var $arrayidx405=(($f389+($290<<2))|0);
      HEAPF32[(($arrayidx405)>>2)]=$conv404;
      var $291=$ch;
      var $arrayidx406=(($f389+($291<<2))|0);
      var $292=HEAPF32[(($arrayidx406)>>2)];
      var $293=$s390;
      var $add407=($293)+($292);
      $s390=$add407;
      label = 126; break;
    case 125: 
      var $294=$ch;
      var $arrayidx409=(($f389+($294<<2))|0);
      HEAPF32[(($arrayidx409)>>2)]=0;
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      var $295=$ch;
      var $inc412=((($295)+(1))|0);
      $ch=$inc412;
      label = 122; break;
    case 128: 
      $ch=0;
      label = 129; break;
    case 129: 
      var $296=$ch;
      var $297=$nch;
      var $cmp415=(($296)|0) < (($297)|0);
      if ($cmp415) { label = 130; break; } else { label = 135; break; }
    case 130: 
      var $298=$s390;
      var $cmp418=$298 > 0;
      if ($cmp418) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $299=$gr;
      var $arrayidx421=(($max_nbits_gr+($299<<2))|0);
      var $300=HEAP32[(($arrayidx421)>>2)];
      var $conv422=(($300)|0);
      var $301=$ch;
      var $arrayidx423=(($f389+($301<<2))|0);
      var $302=HEAPF32[(($arrayidx423)>>2)];
      var $mul424=($conv422)*($302);
      var $303=$s390;
      var $div425=($mul424)/($303);
      var $conv426=(($div425)&-1);
      var $304=$ch;
      var $305=$gr;
      var $arrayidx427=(($max_nbits_ch+($305<<3))|0);
      var $arrayidx428=(($arrayidx427+($304<<2))|0);
      HEAP32[(($arrayidx428)>>2)]=$conv426;
      label = 133; break;
    case 132: 
      var $306=$ch;
      var $307=$gr;
      var $arrayidx430=(($max_nbits_ch+($307<<3))|0);
      var $arrayidx431=(($arrayidx430+($306<<2))|0);
      HEAP32[(($arrayidx431)>>2)]=0;
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      var $308=$ch;
      var $inc434=((($308)+(1))|0);
      $ch=$inc434;
      label = 129; break;
    case 135: 
      var $309=$nch;
      var $cmp436=(($309)|0) > 1;
      if ($cmp436) { label = 136; break; } else { label = 147; break; }
    case 136: 
      var $310=$gr;
      var $arrayidx439=(($max_nbits_ch+($310<<3))|0);
      var $arrayidx440=(($arrayidx439)|0);
      var $311=HEAP32[(($arrayidx440)>>2)];
      var $312=$gr;
      var $arrayidx441=(($use_nbits_ch+($312<<3))|0);
      var $arrayidx442=(($arrayidx441)|0);
      var $313=HEAP32[(($arrayidx442)>>2)];
      var $add443=((($313)+(32))|0);
      var $cmp444=(($311)|0) > (($add443)|0);
      if ($cmp444) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $314=$gr;
      var $arrayidx447=(($max_nbits_ch+($314<<3))|0);
      var $arrayidx448=(($arrayidx447)|0);
      var $315=HEAP32[(($arrayidx448)>>2)];
      var $316=$gr;
      var $arrayidx449=(($max_nbits_ch+($316<<3))|0);
      var $arrayidx450=(($arrayidx449+4)|0);
      var $317=HEAP32[(($arrayidx450)>>2)];
      var $add451=((($317)+($315))|0);
      HEAP32[(($arrayidx450)>>2)]=$add451;
      var $318=$gr;
      var $arrayidx452=(($use_nbits_ch+($318<<3))|0);
      var $arrayidx453=(($arrayidx452)|0);
      var $319=HEAP32[(($arrayidx453)>>2)];
      var $add454=((($319)+(32))|0);
      var $320=$gr;
      var $arrayidx455=(($max_nbits_ch+($320<<3))|0);
      var $arrayidx456=(($arrayidx455+4)|0);
      var $321=HEAP32[(($arrayidx456)>>2)];
      var $sub457=((($321)-($add454))|0);
      HEAP32[(($arrayidx456)>>2)]=$sub457;
      var $322=$gr;
      var $arrayidx458=(($use_nbits_ch+($322<<3))|0);
      var $arrayidx459=(($arrayidx458)|0);
      var $323=HEAP32[(($arrayidx459)>>2)];
      var $add460=((($323)+(32))|0);
      var $324=$gr;
      var $arrayidx461=(($max_nbits_ch+($324<<3))|0);
      var $arrayidx462=(($arrayidx461)|0);
      HEAP32[(($arrayidx462)>>2)]=$add460;
      label = 138; break;
    case 138: 
      var $325=$gr;
      var $arrayidx464=(($max_nbits_ch+($325<<3))|0);
      var $arrayidx465=(($arrayidx464+4)|0);
      var $326=HEAP32[(($arrayidx465)>>2)];
      var $327=$gr;
      var $arrayidx466=(($use_nbits_ch+($327<<3))|0);
      var $arrayidx467=(($arrayidx466+4)|0);
      var $328=HEAP32[(($arrayidx467)>>2)];
      var $add468=((($328)+(32))|0);
      var $cmp469=(($326)|0) > (($add468)|0);
      if ($cmp469) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $329=$gr;
      var $arrayidx472=(($max_nbits_ch+($329<<3))|0);
      var $arrayidx473=(($arrayidx472+4)|0);
      var $330=HEAP32[(($arrayidx473)>>2)];
      var $331=$gr;
      var $arrayidx474=(($max_nbits_ch+($331<<3))|0);
      var $arrayidx475=(($arrayidx474)|0);
      var $332=HEAP32[(($arrayidx475)>>2)];
      var $add476=((($332)+($330))|0);
      HEAP32[(($arrayidx475)>>2)]=$add476;
      var $333=$gr;
      var $arrayidx477=(($use_nbits_ch+($333<<3))|0);
      var $arrayidx478=(($arrayidx477+4)|0);
      var $334=HEAP32[(($arrayidx478)>>2)];
      var $add479=((($334)+(32))|0);
      var $335=$gr;
      var $arrayidx480=(($max_nbits_ch+($335<<3))|0);
      var $arrayidx481=(($arrayidx480)|0);
      var $336=HEAP32[(($arrayidx481)>>2)];
      var $sub482=((($336)-($add479))|0);
      HEAP32[(($arrayidx481)>>2)]=$sub482;
      var $337=$gr;
      var $arrayidx483=(($use_nbits_ch+($337<<3))|0);
      var $arrayidx484=(($arrayidx483+4)|0);
      var $338=HEAP32[(($arrayidx484)>>2)];
      var $add485=((($338)+(32))|0);
      var $339=$gr;
      var $arrayidx486=(($max_nbits_ch+($339<<3))|0);
      var $arrayidx487=(($arrayidx486+4)|0);
      HEAP32[(($arrayidx487)>>2)]=$add485;
      label = 140; break;
    case 140: 
      $ch=0;
      label = 141; break;
    case 141: 
      var $340=$ch;
      var $341=$nch;
      var $cmp490=(($340)|0) < (($341)|0);
      if ($cmp490) { label = 142; break; } else { label = 146; break; }
    case 142: 
      var $342=$ch;
      var $343=$gr;
      var $arrayidx493=(($max_nbits_ch+($343<<3))|0);
      var $arrayidx494=(($arrayidx493+($342<<2))|0);
      var $344=HEAP32[(($arrayidx494)>>2)];
      var $cmp495=(($344)|0) > 4095;
      if ($cmp495) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $345=$ch;
      var $346=$gr;
      var $arrayidx498=(($max_nbits_ch+($346<<3))|0);
      var $arrayidx499=(($arrayidx498+($345<<2))|0);
      HEAP32[(($arrayidx499)>>2)]=4095;
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      var $347=$ch;
      var $inc502=((($347)+(1))|0);
      $ch=$inc502;
      label = 141; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $348=$gr;
      var $inc506=((($348)+(1))|0);
      $gr=$inc506;
      label = 120; break;
    case 149: 
      label = 150; break;
    case 150: 
      $sum_fr=0;
      $gr=0;
      label = 151; break;
    case 151: 
      var $349=$gr;
      var $350=$ngr;
      var $cmp510=(($349)|0) < (($350)|0);
      if ($cmp510) { label = 152; break; } else { label = 162; break; }
    case 152: 
      $sum_gr=0;
      $ch=0;
      label = 153; break;
    case 153: 
      var $351=$ch;
      var $352=$nch;
      var $cmp514=(($351)|0) < (($352)|0);
      if ($cmp514) { label = 154; break; } else { label = 158; break; }
    case 154: 
      var $353=$ch;
      var $354=$gr;
      var $arrayidx517=(($max_nbits_ch+($354<<3))|0);
      var $arrayidx518=(($arrayidx517+($353<<2))|0);
      var $355=HEAP32[(($arrayidx518)>>2)];
      var $356=$sum_gr;
      var $add519=((($356)+($355))|0);
      $sum_gr=$add519;
      var $357=$ch;
      var $358=$gr;
      var $arrayidx520=(($max_nbits_ch+($358<<3))|0);
      var $arrayidx521=(($arrayidx520+($357<<2))|0);
      var $359=HEAP32[(($arrayidx521)>>2)];
      var $cmp522=(($359)|0) > 4095;
      if ($cmp522) { label = 155; break; } else { label = 156; break; }
    case 155: 
      $ok=0;
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      var $360=$ch;
      var $inc527=((($360)+(1))|0);
      $ch=$inc527;
      label = 153; break;
    case 158: 
      var $361=$sum_gr;
      var $362=$sum_fr;
      var $add529=((($362)+($361))|0);
      $sum_fr=$add529;
      var $363=$sum_gr;
      var $cmp530=(($363)|0) > 7680;
      if ($cmp530) { label = 159; break; } else { label = 160; break; }
    case 159: 
      $ok=0;
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $364=$gr;
      var $inc535=((($364)+(1))|0);
      $gr=$inc535;
      label = 151; break;
    case 162: 
      var $365=$sum_fr;
      var $366=$max_nbits_fr;
      var $cmp537=(($365)|0) > (($366)|0);
      if ($cmp537) { label = 163; break; } else { label = 164; break; }
    case 163: 
      $ok=0;
      label = 164; break;
    case 164: 
      var $367=$ok;
      var $tobool541=(($367)|0)!=0;
      if ($tobool541) { label = 174; break; } else { label = 165; break; }
    case 165: 
      $gr=0;
      label = 166; break;
    case 166: 
      var $368=$gr;
      var $369=$ngr;
      var $cmp544=(($368)|0) < (($369)|0);
      if ($cmp544) { label = 167; break; } else { label = 173; break; }
    case 167: 
      $ch=0;
      label = 168; break;
    case 168: 
      var $370=$ch;
      var $371=$nch;
      var $cmp548=(($370)|0) < (($371)|0);
      if ($cmp548) { label = 169; break; } else { label = 171; break; }
    case 169: 
      var $372=$ch;
      var $373=$gr;
      var $374=$max_bits_addr;
      var $arrayidx551=(($374+($373<<3))|0);
      var $arrayidx552=(($arrayidx551+($372<<2))|0);
      var $375=HEAP32[(($arrayidx552)>>2)];
      var $376=$ch;
      var $377=$gr;
      var $arrayidx553=(($max_nbits_ch+($377<<3))|0);
      var $arrayidx554=(($arrayidx553+($376<<2))|0);
      HEAP32[(($arrayidx554)>>2)]=$375;
      label = 170; break;
    case 170: 
      var $378=$ch;
      var $inc556=((($378)+(1))|0);
      $ch=$inc556;
      label = 168; break;
    case 171: 
      label = 172; break;
    case 172: 
      var $379=$gr;
      var $inc559=((($379)+(1))|0);
      $gr=$inc559;
      label = 166; break;
    case 173: 
      label = 174; break;
    case 174: 
      $ch=0;
      label = 175; break;
    case 175: 
      var $380=$ch;
      var $381=$nch;
      var $cmp563=(($380)|0) < (($381)|0);
      if ($cmp563) { label = 176; break; } else { label = 178; break; }
    case 176: 
      var $382=$ch;
      var $383=$gfc_addr;
      var $l3_side566=(($383+304)|0);
      var $scfsi=(($l3_side566+21024)|0);
      var $arrayidx567=(($scfsi+($382<<4))|0);
      var $arrayidx568=(($arrayidx567)|0);
      HEAP32[(($arrayidx568)>>2)]=0;
      var $384=$ch;
      var $385=$gfc_addr;
      var $l3_side569=(($385+304)|0);
      var $scfsi570=(($l3_side569+21024)|0);
      var $arrayidx571=(($scfsi570+($384<<4))|0);
      var $arrayidx572=(($arrayidx571+4)|0);
      HEAP32[(($arrayidx572)>>2)]=0;
      var $386=$ch;
      var $387=$gfc_addr;
      var $l3_side573=(($387+304)|0);
      var $scfsi574=(($l3_side573+21024)|0);
      var $arrayidx575=(($scfsi574+($386<<4))|0);
      var $arrayidx576=(($arrayidx575+8)|0);
      HEAP32[(($arrayidx576)>>2)]=0;
      var $388=$ch;
      var $389=$gfc_addr;
      var $l3_side577=(($389+304)|0);
      var $scfsi578=(($l3_side577+21024)|0);
      var $arrayidx579=(($scfsi578+($388<<4))|0);
      var $arrayidx580=(($arrayidx579+12)|0);
      HEAP32[(($arrayidx580)>>2)]=0;
      label = 177; break;
    case 177: 
      var $390=$ch;
      var $inc582=((($390)+(1))|0);
      $ch=$inc582;
      label = 175; break;
    case 178: 
      $gr=0;
      label = 179; break;
    case 179: 
      var $391=$gr;
      var $392=$ngr;
      var $cmp585=(($391)|0) < (($392)|0);
      if ($cmp585) { label = 180; break; } else { label = 186; break; }
    case 180: 
      $ch=0;
      label = 181; break;
    case 181: 
      var $393=$ch;
      var $394=$nch;
      var $cmp589=(($393)|0) < (($394)|0);
      if ($cmp589) { label = 182; break; } else { label = 184; break; }
    case 182: 
      var $395=$ch;
      var $396=$gr;
      var $397=$gfc_addr;
      var $l3_side592=(($397+304)|0);
      var $tt593=(($l3_side592)|0);
      var $arrayidx594=(($tt593+($396)*(10504))|0);
      var $arrayidx595=(($arrayidx594+($395)*(5252))|0);
      var $scalefac_compress=(($arrayidx595+4784)|0);
      HEAP32[(($scalefac_compress)>>2)]=0;
      label = 183; break;
    case 183: 
      var $398=$ch;
      var $inc597=((($398)+(1))|0);
      $ch=$inc597;
      label = 181; break;
    case 184: 
      label = 185; break;
    case 185: 
      var $399=$gr;
      var $inc600=((($399)+(1))|0);
      $gr=$inc600;
      label = 179; break;
    case 186: 
      $use_nbits_fr=0;
      $gr=0;
      label = 187; break;
    case 187: 
      var $400=$gr;
      var $401=$ngr;
      var $cmp603=(($400)|0) < (($401)|0);
      if ($cmp603) { label = 188; break; } else { label = 196; break; }
    case 188: 
      var $402=$gr;
      var $arrayidx606=(($use_nbits_gr+($402<<2))|0);
      HEAP32[(($arrayidx606)>>2)]=0;
      $ch=0;
      label = 189; break;
    case 189: 
      var $403=$ch;
      var $404=$nch;
      var $cmp608=(($403)|0) < (($404)|0);
      if ($cmp608) { label = 190; break; } else { label = 194; break; }
    case 190: 
      var $405=$ch;
      var $406=$gr;
      var $arrayidx612=(($that_+($406)*(72))|0);
      var $arrayidx613=(($arrayidx612+($405)*(36))|0);
      $that611=$arrayidx613;
      var $407=$ch;
      var $408=$gr;
      var $arrayidx614=(($use_nbits_ch+($408<<3))|0);
      var $arrayidx615=(($arrayidx614+($407<<2))|0);
      HEAP32[(($arrayidx615)>>2)]=0;
      var $409=$ch;
      var $410=$gr;
      var $411=$max_bits_addr;
      var $arrayidx616=(($411+($410<<3))|0);
      var $arrayidx617=(($arrayidx616+($409<<2))|0);
      var $412=HEAP32[(($arrayidx617)>>2)];
      var $cmp618=(($412)|0) > 0;
      if ($cmp618) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $413=$ch;
      var $414=$gr;
      var $arrayidx622=(($sfwork_+($414)*(312))|0);
      var $arrayidx623=(($arrayidx622+($413)*(156))|0);
      var $arraydecay624=(($arrayidx623)|0);
      $sfwork621=$arraydecay624;
      var $415=$ch;
      var $416=$gr;
      var $arrayidx626=(($vbrsfmin_+($416)*(312))|0);
      var $arrayidx627=(($arrayidx626+($415)*(156))|0);
      var $arraydecay628=(($arrayidx627)|0);
      $vbrsfmin625=$arraydecay628;
      var $417=$sfwork621;
      var $418=$sfwork621;
      var $419=$that611;
      var $cod_info629=(($419+16)|0);
      var $420=HEAP32[(($cod_info629)>>2)];
      var $global_gain=(($420+4780)|0);
      var $421=HEAP32[(($global_gain)>>2)];
      _cutDistribution($417, $418, $421);
      var $422=$that611;
      var $423=$sfwork621;
      var $424=$vbrsfmin625;
      var $425=$ch;
      var $426=$gr;
      var $arrayidx630=(($max_nbits_ch+($426<<3))|0);
      var $arrayidx631=(($arrayidx630+($425<<2))|0);
      var $427=HEAP32[(($arrayidx631)>>2)];
      _outOfBitsStrategy($422, $423, $424, $427);
      label = 192; break;
    case 192: 
      var $428=$gfc_addr;
      var $429=$gr;
      var $430=$ch;
      var $call633=_reduce_bit_usage($428, $429, $430);
      var $431=$ch;
      var $432=$gr;
      var $arrayidx634=(($use_nbits_ch+($432<<3))|0);
      var $arrayidx635=(($arrayidx634+($431<<2))|0);
      HEAP32[(($arrayidx635)>>2)]=$call633;
      var $433=$ch;
      var $434=$gr;
      var $arrayidx636=(($use_nbits_ch+($434<<3))|0);
      var $arrayidx637=(($arrayidx636+($433<<2))|0);
      var $435=HEAP32[(($arrayidx637)>>2)];
      var $436=$gr;
      var $arrayidx638=(($use_nbits_gr+($436<<2))|0);
      var $437=HEAP32[(($arrayidx638)>>2)];
      var $add639=((($437)+($435))|0);
      HEAP32[(($arrayidx638)>>2)]=$add639;
      label = 193; break;
    case 193: 
      var $438=$ch;
      var $inc641=((($438)+(1))|0);
      $ch=$inc641;
      label = 189; break;
    case 194: 
      var $439=$gr;
      var $arrayidx643=(($use_nbits_gr+($439<<2))|0);
      var $440=HEAP32[(($arrayidx643)>>2)];
      var $441=$use_nbits_fr;
      var $add644=((($441)+($440))|0);
      $use_nbits_fr=$add644;
      label = 195; break;
    case 195: 
      var $442=$gr;
      var $inc646=((($442)+(1))|0);
      $gr=$inc646;
      label = 187; break;
    case 196: 
      var $443=$use_nbits_fr;
      var $444=$max_nbits_fr;
      var $cmp648=(($443)|0) <= (($444)|0);
      if ($cmp648) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $445=$use_nbits_fr;
      $retval=$445;
      label = 199; break;
    case 198: 
      var $446=$gfc_addr;
      var $447=$max_nbits_fr;
      var $448=$use_nbits_fr;
      _lame_errorf($446, ((5384864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$447,HEAP32[(((tempInt)+(4))>>2)]=$448,tempInt));
      _exit(-1);
      throw "Reached an unreachable!"
    case 199: 
      var $449=$retval;
      STACKTOP = __stackBase__;
      return $449;
    default: assert(0, "bad label: " + label);
  }

}
_VBR_encode_frame["X"]=1;

function _guess_scalefac_x34($xr, $xr34, $l3_xmin, $bw, $sf_min) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $xr_addr;
      var $xr34_addr;
      var $l3_xmin_addr;
      var $bw_addr;
      var $sf_min_addr;
      var $guess;
      $xr_addr=$xr;
      $xr34_addr=$xr34;
      $l3_xmin_addr=$l3_xmin;
      $bw_addr=$bw;
      $sf_min_addr=$sf_min;
      var $0=$l3_xmin_addr;
      var $1=$bw_addr;
      var $call=_calc_scalefac($0, $1);
      $guess=$call;
      var $2=$guess;
      var $3=$sf_min_addr;
      var $conv=(($3)&255);
      var $cmp=(($2)|0) < (($conv)|0);
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$sf_min_addr;
      $retval=$4;
      label = 7; break;
    case 4: 
      var $5=$guess;
      var $cmp2=(($5)|0) >= 255;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-1;
      label = 7; break;
    case 6: 
      var $6=$xr_addr;
      var $7=$xr34_addr;
      var $8=$guess;
      var $conv6=(($8) & 255);
      $retval=$conv6;
      label = 7; break;
    case 7: 
      var $9=$retval;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _find_scalefac_x34($xr, $xr34, $l3_xmin, $bw, $sf_min) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 2048)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xr_addr;
      var $xr34_addr;
      var $l3_xmin_addr;
      var $bw_addr;
      var $sf_min_addr;
      var $did_it=__stackBase__;
      var $sf;
      var $sf_ok;
      var $delsf;
      var $seen_good_one;
      var $i;
      var $bad;
      $xr_addr=$xr;
      $xr34_addr=$xr34;
      $l3_xmin_addr=$l3_xmin;
      $bw_addr=$bw;
      $sf_min_addr=$sf_min;
      $sf=-128;
      $sf_ok=-1;
      $delsf=-128;
      $seen_good_one=0;
      var $0=$did_it;
      for (var $$dest = $0>>2, $$stop = $$dest + 512; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $conv=(($1)&255);
      var $cmp=(($conv)|0) < 8;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $2=$delsf;
      var $conv2=(($2)&255);
      var $shr=$conv2 >> 1;
      var $conv3=(($shr) & 255);
      $delsf=$conv3;
      var $3=$sf;
      var $conv4=(($3)&255);
      var $4=$sf_min_addr;
      var $conv5=(($4)&255);
      var $cmp6=(($conv4)|0) <= (($conv5)|0);
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$delsf;
      var $conv8=(($5)&255);
      var $6=$sf;
      var $conv9=(($6)&255);
      var $add=((($conv9)+($conv8))|0);
      var $conv10=(($add) & 255);
      $sf=$conv10;
      label = 10; break;
    case 6: 
      var $7=$xr_addr;
      var $8=$xr34_addr;
      var $9=$l3_xmin_addr;
      var $10=$bw_addr;
      var $11=$sf;
      var $arraydecay=(($did_it)|0);
      var $call=_tri_calc_sfb_noise_x34($7, $8, $9, $10, $11, $arraydecay);
      $bad=$call;
      var $12=$bad;
      var $tobool=(($12 << 24) >> 24)!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$delsf;
      var $conv12=(($13)&255);
      var $14=$sf;
      var $conv13=(($14)&255);
      var $sub=((($conv13)-($conv12))|0);
      var $conv14=(($sub) & 255);
      $sf=$conv14;
      label = 9; break;
    case 8: 
      var $15=$sf;
      $sf_ok=$15;
      var $16=$delsf;
      var $conv16=(($16)&255);
      var $17=$sf;
      var $conv17=(($17)&255);
      var $add18=((($conv17)+($conv16))|0);
      var $conv19=(($add18) & 255);
      $sf=$conv19;
      $seen_good_one=1;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $18=$i;
      var $inc=((($18)+(1))&255);
      $i=$inc;
      label = 3; break;
    case 12: 
      var $19=$seen_good_one;
      var $conv21=(($19)&255);
      var $cmp22=(($conv21)|0) > 0;
      if ($cmp22) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=$sf_ok;
      $sf=$20;
      label = 14; break;
    case 14: 
      var $21=$sf;
      var $conv26=(($21)&255);
      var $22=$sf_min_addr;
      var $conv27=(($22)&255);
      var $cmp28=(($conv26)|0) <= (($conv27)|0);
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $23=$sf_min_addr;
      $sf=$23;
      label = 16; break;
    case 16: 
      var $24=$sf;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }

}
_find_scalefac_x34["X"]=1;

function _short_block_constrain($that, $vbrsf, $vbrsfmin, $vbrmax) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 156)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $vbrsf_addr;
      var $vbrsfmin_addr;
      var $vbrmax_addr;
      var $cod_info;
      var $gfc;
      var $cfg;
      var $maxminsfb;
      var $mover;
      var $maxover0;
      var $maxover1;
      var $delta;
      var $v;
      var $v0;
      var $v1;
      var $sfb;
      var $psymax;
      var $sf_temp=__stackBase__;
      $that_addr=$that;
      $vbrsf_addr=$vbrsf;
      $vbrsfmin_addr=$vbrsfmin;
      $vbrmax_addr=$vbrmax;
      var $0=$that_addr;
      var $cod_info1=(($0+16)|0);
      var $1=HEAP32[(($cod_info1)>>2)];
      $cod_info=$1;
      var $2=$that_addr;
      var $gfc2=(($2+12)|0);
      var $3=HEAP32[(($gfc2)>>2)];
      $gfc=$3;
      var $4=$gfc;
      var $cfg3=(($4+16)|0);
      $cfg=$cfg3;
      var $5=$that_addr;
      var $mingain_l=(($5+20)|0);
      var $6=HEAP32[(($mingain_l)>>2)];
      $maxminsfb=$6;
      $maxover0=0;
      $maxover1=0;
      $delta=0;
      var $7=$cod_info;
      var $psymax4=(($7+4864)|0);
      var $8=HEAP32[(($psymax4)>>2)];
      $psymax=$8;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $9=$sfb;
      var $10=$psymax;
      var $cmp=(($9)|0) < (($10)|0);
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $11=$vbrmax_addr;
      var $12=$sfb;
      var $13=$vbrsf_addr;
      var $arrayidx=(($13+($12<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      var $sub=((($11)-($14))|0);
      $v=$sub;
      var $15=$delta;
      var $16=$v;
      var $cmp5=(($15)|0) < (($16)|0);
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$v;
      $delta=$17;
      label = 6; break;
    case 6: 
      var $18=$v;
      var $19=$sfb;
      var $arrayidx6=((5314336+$19)|0);
      var $20=HEAP8[($arrayidx6)];
      var $conv=(($20)&255);
      var $mul=((($conv<<1))&-1);
      var $add=((($mul)+(56))|0);
      var $sub7=((($18)-($add))|0);
      $v0=$sub7;
      var $21=$v;
      var $22=$sfb;
      var $arrayidx8=((5314336+$22)|0);
      var $23=HEAP8[($arrayidx8)];
      var $conv9=(($23)&255);
      var $mul10=((($conv9<<2))&-1);
      var $add11=((($mul10)+(56))|0);
      var $sub12=((($21)-($add11))|0);
      $v1=$sub12;
      var $24=$maxover0;
      var $25=$v0;
      var $cmp13=(($24)|0) < (($25)|0);
      if ($cmp13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$v0;
      $maxover0=$26;
      label = 8; break;
    case 8: 
      var $27=$maxover1;
      var $28=$v1;
      var $cmp17=(($27)|0) < (($28)|0);
      if ($cmp17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $29=$v1;
      $maxover1=$29;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $30=$sfb;
      var $inc=((($30)+(1))|0);
      $sfb=$inc;
      label = 3; break;
    case 12: 
      var $31=$cfg;
      var $noise_shaping=(($31+12)|0);
      var $32=HEAP32[(($noise_shaping)>>2)];
      var $cmp21=(($32)|0)==2;
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $33=$maxover0;
      var $34=$maxover1;
      var $cmp24=(($33)|0) < (($34)|0);
      if ($cmp24) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=$maxover0;
      var $cond = $35;label = 16; break;
    case 15: 
      var $36=$maxover1;
      var $cond = $36;label = 16; break;
    case 16: 
      var $cond;
      $mover=$cond;
      label = 18; break;
    case 17: 
      var $37=$maxover0;
      $mover=$37;
      label = 18; break;
    case 18: 
      var $38=$delta;
      var $39=$mover;
      var $cmp27=(($38)|0) > (($39)|0);
      if ($cmp27) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$mover;
      $delta=$40;
      label = 20; break;
    case 20: 
      var $41=$delta;
      var $42=$vbrmax_addr;
      var $sub31=((($42)-($41))|0);
      $vbrmax_addr=$sub31;
      var $43=$mover;
      var $44=$maxover0;
      var $sub32=((($44)-($43))|0);
      $maxover0=$sub32;
      var $45=$mover;
      var $46=$maxover1;
      var $sub33=((($46)-($45))|0);
      $maxover1=$sub33;
      var $47=$maxover0;
      var $cmp34=(($47)|0)==0;
      if ($cmp34) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $48=$cod_info;
      var $scalefac_scale=(($48+4836)|0);
      HEAP32[(($scalefac_scale)>>2)]=0;
      label = 25; break;
    case 22: 
      var $49=$maxover1;
      var $cmp38=(($49)|0)==0;
      if ($cmp38) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $50=$cod_info;
      var $scalefac_scale41=(($50+4836)|0);
      HEAP32[(($scalefac_scale41)>>2)]=1;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $51=$vbrmax_addr;
      var $52=$maxminsfb;
      var $cmp44=(($51)|0) < (($52)|0);
      if ($cmp44) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $53=$maxminsfb;
      $vbrmax_addr=$53;
      label = 27; break;
    case 27: 
      var $54=$vbrmax_addr;
      var $55=$cod_info;
      var $global_gain=(($55+4780)|0);
      HEAP32[(($global_gain)>>2)]=$54;
      var $56=$cod_info;
      var $global_gain48=(($56+4780)|0);
      var $57=HEAP32[(($global_gain48)>>2)];
      var $cmp49=(($57)|0) < 0;
      if ($cmp49) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $58=$cod_info;
      var $global_gain52=(($58+4780)|0);
      HEAP32[(($global_gain52)>>2)]=0;
      label = 32; break;
    case 29: 
      var $59=$cod_info;
      var $global_gain54=(($59+4780)|0);
      var $60=HEAP32[(($global_gain54)>>2)];
      var $cmp55=(($60)|0) > 255;
      if ($cmp55) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $61=$cod_info;
      var $global_gain58=(($61+4780)|0);
      HEAP32[(($global_gain58)>>2)]=255;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      $sfb=0;
      label = 33; break;
    case 33: 
      var $62=$sfb;
      var $cmp62=(($62)|0) < 39;
      if ($cmp62) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $63=$sfb;
      var $64=$vbrsf_addr;
      var $arrayidx65=(($64+($63<<2))|0);
      var $65=HEAP32[(($arrayidx65)>>2)];
      var $66=$vbrmax_addr;
      var $sub66=((($65)-($66))|0);
      var $67=$sfb;
      var $arrayidx67=(($sf_temp+($67<<2))|0);
      HEAP32[(($arrayidx67)>>2)]=$sub66;
      label = 35; break;
    case 35: 
      var $68=$sfb;
      var $inc69=((($68)+(1))|0);
      $sfb=$inc69;
      label = 33; break;
    case 36: 
      var $69=$cod_info;
      var $70=$that_addr;
      var $mingain_s=(($70+24)|0);
      var $arrayidx71=(($mingain_s)|0);
      var $arraydecay=(($sf_temp)|0);
      _set_subblock_gain($69, $arrayidx71, $arraydecay);
      var $71=$cod_info;
      var $72=$vbrsfmin_addr;
      var $arraydecay72=(($sf_temp)|0);
      _set_scalefacs($71, $72, $arraydecay72, ((5314336)|0));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_short_block_constrain["X"]=1;

function _long_block_constrain($that, $vbrsf, $vbrsfmin, $vbrmax) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 156)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $vbrsf_addr;
      var $vbrsfmin_addr;
      var $vbrmax_addr;
      var $cod_info;
      var $gfc;
      var $cfg;
      var $max_rangep;
      var $maxminsfb;
      var $sfb;
      var $maxover0;
      var $maxover1;
      var $maxover0p;
      var $maxover1p;
      var $mover;
      var $delta;
      var $v;
      var $v0;
      var $v1;
      var $v0p;
      var $v1p;
      var $vm0p;
      var $vm1p;
      var $psymax;
      var $gain;
      var $a;
      var $gain68;
      var $b;
      var $sf_temp=__stackBase__;
      $that_addr=$that;
      $vbrsf_addr=$vbrsf;
      $vbrsfmin_addr=$vbrsfmin;
      $vbrmax_addr=$vbrmax;
      var $0=$that_addr;
      var $cod_info1=(($0+16)|0);
      var $1=HEAP32[(($cod_info1)>>2)];
      $cod_info=$1;
      var $2=$that_addr;
      var $gfc2=(($2+12)|0);
      var $3=HEAP32[(($gfc2)>>2)];
      $gfc=$3;
      var $4=$gfc;
      var $cfg3=(($4+16)|0);
      $cfg=$cfg3;
      var $5=$that_addr;
      var $mingain_l=(($5+20)|0);
      var $6=HEAP32[(($mingain_l)>>2)];
      $maxminsfb=$6;
      $delta=0;
      $vm0p=1;
      $vm1p=1;
      var $7=$cod_info;
      var $psymax4=(($7+4864)|0);
      var $8=HEAP32[(($psymax4)>>2)];
      $psymax=$8;
      var $9=$cfg;
      var $mode_gr=(($9+60)|0);
      var $10=HEAP32[(($mode_gr)>>2)];
      var $cmp=(($10)|0)==2;
      var $cond=$cmp ? (((5314496)|0)) : (((5314472)|0));
      $max_rangep=$cond;
      $maxover0=0;
      $maxover1=0;
      $maxover0p=0;
      $maxover1p=0;
      $sfb=0;
      label = 3; break;
    case 3: 
      var $11=$sfb;
      var $12=$psymax;
      var $cmp5=(($11)|0) < (($12)|0);
      if ($cmp5) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $13=$vbrmax_addr;
      var $14=$sfb;
      var $15=$vbrsf_addr;
      var $arrayidx=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx)>>2)];
      var $sub=((($13)-($16))|0);
      $v=$sub;
      var $17=$delta;
      var $18=$v;
      var $cmp6=(($17)|0) < (($18)|0);
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=$v;
      $delta=$19;
      label = 6; break;
    case 6: 
      var $20=$v;
      var $21=$sfb;
      var $arrayidx7=((5314496+$21)|0);
      var $22=HEAP8[($arrayidx7)];
      var $conv=(($22)&255);
      var $mul=((($conv<<1))&-1);
      var $sub8=((($20)-($mul))|0);
      $v0=$sub8;
      var $23=$v;
      var $24=$sfb;
      var $arrayidx9=((5314496+$24)|0);
      var $25=HEAP8[($arrayidx9)];
      var $conv10=(($25)&255);
      var $mul11=((($conv10<<2))&-1);
      var $sub12=((($23)-($mul11))|0);
      $v1=$sub12;
      var $26=$v;
      var $27=$sfb;
      var $28=$max_rangep;
      var $arrayidx13=(($28+$27)|0);
      var $29=HEAP8[($arrayidx13)];
      var $conv14=(($29)&255);
      var $30=$sfb;
      var $arrayidx15=((5257016+($30<<2))|0);
      var $31=HEAP32[(($arrayidx15)>>2)];
      var $add=((($conv14)+($31))|0);
      var $mul16=((($add<<1))&-1);
      var $sub17=((($26)-($mul16))|0);
      $v0p=$sub17;
      var $32=$v;
      var $33=$sfb;
      var $34=$max_rangep;
      var $arrayidx18=(($34+$33)|0);
      var $35=HEAP8[($arrayidx18)];
      var $conv19=(($35)&255);
      var $36=$sfb;
      var $arrayidx20=((5257016+($36<<2))|0);
      var $37=HEAP32[(($arrayidx20)>>2)];
      var $add21=((($conv19)+($37))|0);
      var $mul22=((($add21<<2))&-1);
      var $sub23=((($32)-($mul22))|0);
      $v1p=$sub23;
      var $38=$maxover0;
      var $39=$v0;
      var $cmp24=(($38)|0) < (($39)|0);
      if ($cmp24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $40=$v0;
      $maxover0=$40;
      label = 8; break;
    case 8: 
      var $41=$maxover1;
      var $42=$v1;
      var $cmp28=(($41)|0) < (($42)|0);
      if ($cmp28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $43=$v1;
      $maxover1=$43;
      label = 10; break;
    case 10: 
      var $44=$maxover0p;
      var $45=$v0p;
      var $cmp32=(($44)|0) < (($45)|0);
      if ($cmp32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $46=$v0p;
      $maxover0p=$46;
      label = 12; break;
    case 12: 
      var $47=$maxover1p;
      var $48=$v1p;
      var $cmp36=(($47)|0) < (($48)|0);
      if ($cmp36) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $49=$v1p;
      $maxover1p=$49;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $50=$sfb;
      var $inc=((($50)+(1))|0);
      $sfb=$inc;
      label = 3; break;
    case 16: 
      var $51=$vm0p;
      var $cmp40=(($51)|0)==1;
      if ($cmp40) { label = 17; break; } else { label = 26; break; }
    case 17: 
      var $52=$vbrmax_addr;
      var $53=$maxover0p;
      var $sub43=((($52)-($53))|0);
      $gain=$sub43;
      var $54=$gain;
      var $55=$maxminsfb;
      var $cmp44=(($54)|0) < (($55)|0);
      if ($cmp44) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $56=$maxminsfb;
      $gain=$56;
      label = 19; break;
    case 19: 
      $sfb=0;
      label = 20; break;
    case 20: 
      var $57=$sfb;
      var $58=$psymax;
      var $cmp49=(($57)|0) < (($58)|0);
      if ($cmp49) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $59=$gain;
      var $60=$sfb;
      var $61=$vbrsfmin_addr;
      var $arrayidx52=(($61+($60<<2))|0);
      var $62=HEAP32[(($arrayidx52)>>2)];
      var $sub53=((($59)-($62))|0);
      var $63=$sfb;
      var $arrayidx54=((5257016+($63<<2))|0);
      var $64=HEAP32[(($arrayidx54)>>2)];
      var $mul55=((($64<<1))&-1);
      var $sub56=((($sub53)-($mul55))|0);
      $a=$sub56;
      var $65=$a;
      var $cmp57=(($65)|0) <= 0;
      if ($cmp57) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $vm0p=0;
      $vm1p=0;
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $66=$sfb;
      var $inc62=((($66)+(1))|0);
      $sfb=$inc62;
      label = 20; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $67=$vm1p;
      var $cmp65=(($67)|0)==1;
      if ($cmp65) { label = 27; break; } else { label = 36; break; }
    case 27: 
      var $68=$vbrmax_addr;
      var $69=$maxover1p;
      var $sub69=((($68)-($69))|0);
      $gain68=$sub69;
      var $70=$gain68;
      var $71=$maxminsfb;
      var $cmp70=(($70)|0) < (($71)|0);
      if ($cmp70) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $72=$maxminsfb;
      $gain68=$72;
      label = 29; break;
    case 29: 
      $sfb=0;
      label = 30; break;
    case 30: 
      var $73=$sfb;
      var $74=$psymax;
      var $cmp75=(($73)|0) < (($74)|0);
      if ($cmp75) { label = 31; break; } else { label = 35; break; }
    case 31: 
      var $75=$gain68;
      var $76=$sfb;
      var $77=$vbrsfmin_addr;
      var $arrayidx78=(($77+($76<<2))|0);
      var $78=HEAP32[(($arrayidx78)>>2)];
      var $sub79=((($75)-($78))|0);
      var $79=$sfb;
      var $arrayidx80=((5257016+($79<<2))|0);
      var $80=HEAP32[(($arrayidx80)>>2)];
      var $mul81=((($80<<2))&-1);
      var $sub82=((($sub79)-($mul81))|0);
      $b=$sub82;
      var $81=$b;
      var $cmp83=(($81)|0) <= 0;
      if ($cmp83) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $vm1p=0;
      label = 35; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $82=$sfb;
      var $inc88=((($82)+(1))|0);
      $sfb=$inc88;
      label = 30; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $83=$vm0p;
      var $cmp91=(($83)|0)==0;
      if ($cmp91) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $84=$maxover0;
      $maxover0p=$84;
      label = 38; break;
    case 38: 
      var $85=$vm1p;
      var $cmp95=(($85)|0)==0;
      if ($cmp95) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $86=$maxover1;
      $maxover1p=$86;
      label = 40; break;
    case 40: 
      var $87=$cfg;
      var $noise_shaping=(($87+12)|0);
      var $88=HEAP32[(($noise_shaping)>>2)];
      var $cmp99=(($88)|0)!=2;
      if ($cmp99) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $89=$maxover0;
      $maxover1=$89;
      var $90=$maxover0p;
      $maxover1p=$90;
      label = 42; break;
    case 42: 
      var $91=$maxover0;
      var $92=$maxover0p;
      var $cmp103=(($91)|0) < (($92)|0);
      if ($cmp103) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $93=$maxover0;
      var $cond105 = $93;label = 45; break;
    case 44: 
      var $94=$maxover0p;
      var $cond105 = $94;label = 45; break;
    case 45: 
      var $cond105;
      $mover=$cond105;
      var $95=$mover;
      var $96=$maxover1;
      var $cmp106=(($95)|0) < (($96)|0);
      if ($cmp106) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $97=$mover;
      var $cond111 = $97;label = 48; break;
    case 47: 
      var $98=$maxover1;
      var $cond111 = $98;label = 48; break;
    case 48: 
      var $cond111;
      $mover=$cond111;
      var $99=$mover;
      var $100=$maxover1p;
      var $cmp112=(($99)|0) < (($100)|0);
      if ($cmp112) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $101=$mover;
      var $cond117 = $101;label = 51; break;
    case 50: 
      var $102=$maxover1p;
      var $cond117 = $102;label = 51; break;
    case 51: 
      var $cond117;
      $mover=$cond117;
      var $103=$delta;
      var $104=$mover;
      var $cmp118=(($103)|0) > (($104)|0);
      if ($cmp118) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $105=$mover;
      $delta=$105;
      label = 53; break;
    case 53: 
      var $106=$delta;
      var $107=$vbrmax_addr;
      var $sub122=((($107)-($106))|0);
      $vbrmax_addr=$sub122;
      var $108=$vbrmax_addr;
      var $109=$maxminsfb;
      var $cmp123=(($108)|0) < (($109)|0);
      if ($cmp123) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $110=$maxminsfb;
      $vbrmax_addr=$110;
      label = 55; break;
    case 55: 
      var $111=$mover;
      var $112=$maxover0;
      var $sub127=((($112)-($111))|0);
      $maxover0=$sub127;
      var $113=$mover;
      var $114=$maxover0p;
      var $sub128=((($114)-($113))|0);
      $maxover0p=$sub128;
      var $115=$mover;
      var $116=$maxover1;
      var $sub129=((($116)-($115))|0);
      $maxover1=$sub129;
      var $117=$mover;
      var $118=$maxover1p;
      var $sub130=((($118)-($117))|0);
      $maxover1p=$sub130;
      var $119=$maxover0;
      var $cmp131=(($119)|0)==0;
      if ($cmp131) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $120=$cod_info;
      var $scalefac_scale=(($120+4836)|0);
      HEAP32[(($scalefac_scale)>>2)]=0;
      var $121=$cod_info;
      var $preflag=(($121+4832)|0);
      HEAP32[(($preflag)>>2)]=0;
      $max_rangep=((5314496)|0);
      label = 67; break;
    case 57: 
      var $122=$maxover0p;
      var $cmp134=(($122)|0)==0;
      if ($cmp134) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $123=$cod_info;
      var $scalefac_scale137=(($123+4836)|0);
      HEAP32[(($scalefac_scale137)>>2)]=0;
      var $124=$cod_info;
      var $preflag138=(($124+4832)|0);
      HEAP32[(($preflag138)>>2)]=1;
      label = 66; break;
    case 59: 
      var $125=$maxover1;
      var $cmp140=(($125)|0)==0;
      if ($cmp140) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $126=$cod_info;
      var $scalefac_scale143=(($126+4836)|0);
      HEAP32[(($scalefac_scale143)>>2)]=1;
      var $127=$cod_info;
      var $preflag144=(($127+4832)|0);
      HEAP32[(($preflag144)>>2)]=0;
      $max_rangep=((5314496)|0);
      label = 65; break;
    case 61: 
      var $128=$maxover1p;
      var $cmp146=(($128)|0)==0;
      if ($cmp146) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $129=$cod_info;
      var $scalefac_scale149=(($129+4836)|0);
      HEAP32[(($scalefac_scale149)>>2)]=1;
      var $130=$cod_info;
      var $preflag150=(($130+4832)|0);
      HEAP32[(($preflag150)>>2)]=1;
      label = 64; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $131=$vbrmax_addr;
      var $132=$cod_info;
      var $global_gain=(($132+4780)|0);
      HEAP32[(($global_gain)>>2)]=$131;
      var $133=$cod_info;
      var $global_gain156=(($133+4780)|0);
      var $134=HEAP32[(($global_gain156)>>2)];
      var $cmp157=(($134)|0) < 0;
      if ($cmp157) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $135=$cod_info;
      var $global_gain160=(($135+4780)|0);
      HEAP32[(($global_gain160)>>2)]=0;
      label = 72; break;
    case 69: 
      var $136=$cod_info;
      var $global_gain162=(($136+4780)|0);
      var $137=HEAP32[(($global_gain162)>>2)];
      var $cmp163=(($137)|0) > 255;
      if ($cmp163) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $138=$cod_info;
      var $global_gain166=(($138+4780)|0);
      HEAP32[(($global_gain166)>>2)]=255;
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      $sfb=0;
      label = 73; break;
    case 73: 
      var $139=$sfb;
      var $cmp170=(($139)|0) < 39;
      if ($cmp170) { label = 74; break; } else { label = 76; break; }
    case 74: 
      var $140=$sfb;
      var $141=$vbrsf_addr;
      var $arrayidx173=(($141+($140<<2))|0);
      var $142=HEAP32[(($arrayidx173)>>2)];
      var $143=$vbrmax_addr;
      var $sub174=((($142)-($143))|0);
      var $144=$sfb;
      var $arrayidx175=(($sf_temp+($144<<2))|0);
      HEAP32[(($arrayidx175)>>2)]=$sub174;
      label = 75; break;
    case 75: 
      var $145=$sfb;
      var $inc177=((($145)+(1))|0);
      $sfb=$inc177;
      label = 73; break;
    case 76: 
      var $146=$cod_info;
      var $147=$vbrsfmin_addr;
      var $arraydecay=(($sf_temp)|0);
      var $148=$max_rangep;
      _set_scalefacs($146, $147, $arraydecay, $148);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_long_block_constrain["X"]=1;

function _block_sf($that, $l3_xmin, $vbrsf, $vbrsfmin) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $l3_xmin_addr;
      var $vbrsf_addr;
      var $vbrsfmin_addr;
      var $max_xr34;
      var $xr;
      var $xr34_orig;
      var $width;
      var $energy_above_cutoff;
      var $max_nonzero_coeff;
      var $maxsf;
      var $sfb;
      var $m_o;
      var $j;
      var $i;
      var $psymax;
      var $w;
      var $m;
      var $l;
      var $m1;
      var $m2;
      $that_addr=$that;
      $l3_xmin_addr=$l3_xmin;
      $vbrsf_addr=$vbrsf;
      $vbrsfmin_addr=$vbrsfmin;
      var $0=$that_addr;
      var $cod_info=(($0+16)|0);
      var $1=HEAP32[(($cod_info)>>2)];
      var $xr1=(($1)|0);
      var $arrayidx=(($xr1)|0);
      $xr=$arrayidx;
      var $2=$that_addr;
      var $xr34orig=(($2+8)|0);
      var $3=HEAP32[(($xr34orig)>>2)];
      var $arrayidx2=(($3)|0);
      $xr34_orig=$arrayidx2;
      var $4=$that_addr;
      var $cod_info3=(($4+16)|0);
      var $5=HEAP32[(($cod_info3)>>2)];
      var $width4=(($5+4872)|0);
      var $arrayidx5=(($width4)|0);
      $width=$arrayidx5;
      var $6=$that_addr;
      var $cod_info6=(($6+16)|0);
      var $7=HEAP32[(($cod_info6)>>2)];
      var $energy_above_cutoff7=(($7+5212)|0);
      var $arrayidx8=(($energy_above_cutoff7)|0);
      $energy_above_cutoff=$arrayidx8;
      var $8=$that_addr;
      var $cod_info9=(($8+16)|0);
      var $9=HEAP32[(($cod_info9)>>2)];
      var $max_nonzero_coeff10=(($9+5208)|0);
      var $10=HEAP32[(($max_nonzero_coeff10)>>2)];
      $max_nonzero_coeff=$10;
      $maxsf=0;
      $sfb=0;
      $m_o=-1;
      $j=0;
      $i=0;
      var $11=$that_addr;
      var $cod_info11=(($11+16)|0);
      var $12=HEAP32[(($cod_info11)>>2)];
      var $psymax12=(($12+4864)|0);
      var $13=HEAP32[(($psymax12)>>2)];
      $psymax=$13;
      var $14=$that_addr;
      var $mingain_l=(($14+20)|0);
      HEAP32[(($mingain_l)>>2)]=0;
      var $15=$that_addr;
      var $mingain_s=(($15+24)|0);
      var $arrayidx13=(($mingain_s)|0);
      HEAP32[(($arrayidx13)>>2)]=0;
      var $16=$that_addr;
      var $mingain_s14=(($16+24)|0);
      var $arrayidx15=(($mingain_s14+4)|0);
      HEAP32[(($arrayidx15)>>2)]=0;
      var $17=$that_addr;
      var $mingain_s16=(($17+24)|0);
      var $arrayidx17=(($mingain_s16+8)|0);
      HEAP32[(($arrayidx17)>>2)]=0;
      label = 3; break;
    case 3: 
      var $18=$j;
      var $19=$max_nonzero_coeff;
      var $cmp=(($18)>>>0) <= (($19)>>>0);
      if ($cmp) { label = 4; break; } else { label = 27; break; }
    case 4: 
      var $20=$sfb;
      var $21=$width;
      var $arrayidx18=(($21+($20<<2))|0);
      var $22=HEAP32[(($arrayidx18)>>2)];
      $w=$22;
      var $23=$max_nonzero_coeff;
      var $24=$j;
      var $sub=((($23)-($24))|0);
      var $add=((($sub)+(1))|0);
      $m=$add;
      var $25=$w;
      $l=$25;
      var $26=$l;
      var $27=$m;
      var $cmp19=(($26)>>>0) > (($27)>>>0);
      if ($cmp19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $28=$m;
      $l=$28;
      label = 6; break;
    case 6: 
      var $29=$j;
      var $30=$xr34_orig;
      var $arrayidx20=(($30+($29<<2))|0);
      var $31=$l;
      var $call=_vec_max_c($arrayidx20, $31);
      $max_xr34=$call;
      var $32=$max_xr34;
      var $call21=_find_lowest_scalefac($32);
      $m1=$call21;
      var $33=$m1;
      var $conv=(($33)&255);
      var $34=$sfb;
      var $35=$vbrsfmin_addr;
      var $arrayidx22=(($35+($34<<2))|0);
      HEAP32[(($arrayidx22)>>2)]=$conv;
      var $36=$that_addr;
      var $mingain_l23=(($36+20)|0);
      var $37=HEAP32[(($mingain_l23)>>2)];
      var $38=$m1;
      var $conv24=(($38)&255);
      var $cmp25=(($37)|0) < (($conv24)|0);
      if ($cmp25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $39=$m1;
      var $conv28=(($39)&255);
      var $40=$that_addr;
      var $mingain_l29=(($40+20)|0);
      HEAP32[(($mingain_l29)>>2)]=$conv28;
      label = 8; break;
    case 8: 
      var $41=$i;
      var $42=$that_addr;
      var $mingain_s31=(($42+24)|0);
      var $arrayidx32=(($mingain_s31+($41<<2))|0);
      var $43=HEAP32[(($arrayidx32)>>2)];
      var $44=$m1;
      var $conv33=(($44)&255);
      var $cmp34=(($43)|0) < (($conv33)|0);
      if ($cmp34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $45=$m1;
      var $conv37=(($45)&255);
      var $46=$i;
      var $47=$that_addr;
      var $mingain_s38=(($47+24)|0);
      var $arrayidx39=(($mingain_s38+($46<<2))|0);
      HEAP32[(($arrayidx39)>>2)]=$conv37;
      label = 10; break;
    case 10: 
      var $48=$i;
      var $inc=((($48)+(1))|0);
      $i=$inc;
      var $cmp41=(($inc)>>>0) > 2;
      if ($cmp41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $i=0;
      label = 12; break;
    case 12: 
      var $49=$sfb;
      var $50=$psymax;
      var $cmp45=(($49)|0) < (($50)|0);
      if ($cmp45) { label = 13; break; } else { label = 23; break; }
    case 13: 
      var $51=$w;
      var $cmp47=(($51)>>>0) > 2;
      if ($cmp47) { label = 14; break; } else { label = 23; break; }
    case 14: 
      var $52=$sfb;
      var $53=$energy_above_cutoff;
      var $arrayidx50=(($53+$52)|0);
      var $54=HEAP8[($arrayidx50)];
      var $tobool=(($54 << 24) >> 24)!=0;
      if ($tobool) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $55=$that_addr;
      var $find=(($55+4)|0);
      var $56=HEAP32[(($find)>>2)];
      var $57=$j;
      var $58=$xr;
      var $arrayidx52=(($58+($57<<2))|0);
      var $59=$j;
      var $60=$xr34_orig;
      var $arrayidx53=(($60+($59<<2))|0);
      var $61=$sfb;
      var $62=$l3_xmin_addr;
      var $arrayidx54=(($62+($61<<2))|0);
      var $63=HEAPF32[(($arrayidx54)>>2)];
      var $64=$l;
      var $65=$m1;
      var $call55=FUNCTION_TABLE[$56]($arrayidx52, $arrayidx53, $63, $64, $65);
      $m2=$call55;
      var $66=$maxsf;
      var $conv56=(($66)&255);
      var $67=$m2;
      var $conv57=(($67)&255);
      var $cmp58=(($conv56)|0) < (($conv57)|0);
      if ($cmp58) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $68=$m2;
      $maxsf=$68;
      label = 17; break;
    case 17: 
      var $69=$m_o;
      var $70=$m2;
      var $conv62=(($70)&255);
      var $cmp63=(($69)|0) < (($conv62)|0);
      if ($cmp63) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $71=$m2;
      var $conv66=(($71)&255);
      var $cmp67=(($conv66)|0) < 255;
      if ($cmp67) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $72=$m2;
      var $conv70=(($72)&255);
      $m_o=$conv70;
      label = 20; break;
    case 20: 
      label = 22; break;
    case 21: 
      $m2=-1;
      $maxsf=-1;
      label = 22; break;
    case 22: 
      label = 26; break;
    case 23: 
      var $73=$maxsf;
      var $conv74=(($73)&255);
      var $74=$m1;
      var $conv75=(($74)&255);
      var $cmp76=(($conv74)|0) < (($conv75)|0);
      if ($cmp76) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $75=$m1;
      $maxsf=$75;
      label = 25; break;
    case 25: 
      var $76=$maxsf;
      $m2=$76;
      label = 26; break;
    case 26: 
      var $77=$m2;
      var $conv81=(($77)&255);
      var $78=$sfb;
      var $79=$vbrsf_addr;
      var $arrayidx82=(($79+($78<<2))|0);
      HEAP32[(($arrayidx82)>>2)]=$conv81;
      var $80=$sfb;
      var $inc83=((($80)+(1))|0);
      $sfb=$inc83;
      var $81=$w;
      var $82=$j;
      var $add84=((($82)+($81))|0);
      $j=$add84;
      label = 3; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $83=$sfb;
      var $cmp85=(($83)|0) < 39;
      if ($cmp85) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $84=$maxsf;
      var $conv87=(($84)&255);
      var $85=$sfb;
      var $86=$vbrsf_addr;
      var $arrayidx88=(($86+($85<<2))|0);
      HEAP32[(($arrayidx88)>>2)]=$conv87;
      var $87=$sfb;
      var $88=$vbrsfmin_addr;
      var $arrayidx89=(($88+($87<<2))|0);
      HEAP32[(($arrayidx89)>>2)]=0;
      label = 30; break;
    case 30: 
      var $89=$sfb;
      var $inc90=((($89)+(1))|0);
      $sfb=$inc90;
      label = 28; break;
    case 31: 
      var $90=$m_o;
      var $cmp91=(($90)|0) > -1;
      if ($cmp91) { label = 32; break; } else { label = 39; break; }
    case 32: 
      var $91=$m_o;
      var $conv94=(($91) & 255);
      $maxsf=$conv94;
      $sfb=0;
      label = 33; break;
    case 33: 
      var $92=$sfb;
      var $cmp96=(($92)|0) < 39;
      if ($cmp96) { label = 34; break; } else { label = 38; break; }
    case 34: 
      var $93=$sfb;
      var $94=$vbrsf_addr;
      var $arrayidx99=(($94+($93<<2))|0);
      var $95=HEAP32[(($arrayidx99)>>2)];
      var $cmp100=(($95)|0)==255;
      if ($cmp100) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $96=$m_o;
      var $97=$sfb;
      var $98=$vbrsf_addr;
      var $arrayidx103=(($98+($97<<2))|0);
      HEAP32[(($arrayidx103)>>2)]=$96;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $99=$sfb;
      var $inc106=((($99)+(1))|0);
      $sfb=$inc106;
      label = 33; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $100=$maxsf;
      var $conv109=(($100)&255);

      return $conv109;
    default: assert(0, "bad label: " + label);
  }

}
_block_sf["X"]=1;

function _quantizeAndCountBits($that) {
  var label = 0;


  var $that_addr;
  $that_addr=$that;
  var $0=$that_addr;
  _quantize_x34($0);
  var $1=$that_addr;
  var $gfc=(($1+12)|0);
  var $2=HEAP32[(($gfc)>>2)];
  var $3=$that_addr;
  var $cod_info=(($3+16)|0);
  var $4=HEAP32[(($cod_info)>>2)];
  var $call=_noquant_count_bits($2, $4, 0);
  var $5=$that_addr;
  var $cod_info1=(($5+16)|0);
  var $6=HEAP32[(($cod_info1)>>2)];
  var $part2_3_length=(($6+4768)|0);
  HEAP32[(($part2_3_length)>>2)]=$call;
  var $7=$that_addr;
  var $cod_info2=(($7+16)|0);
  var $8=HEAP32[(($cod_info2)>>2)];
  var $part2_3_length3=(($8+4768)|0);
  var $9=HEAP32[(($part2_3_length3)>>2)];

  return $9;
}


function _bitcount($that) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $rc;
      $that_addr=$that;
      var $0=$that_addr;
      var $gfc=(($0+12)|0);
      var $1=HEAP32[(($gfc)>>2)];
      var $2=$that_addr;
      var $cod_info=(($2+16)|0);
      var $3=HEAP32[(($cod_info)>>2)];
      var $call=_scale_bitcount($1, $3);
      $rc=$call;
      var $4=$rc;
      var $cmp=(($4)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      STACKTOP = __stackBase__;
      return;
    case 4: 
      var $5=$that_addr;
      var $gfc1=(($5+12)|0);
      var $6=HEAP32[(($gfc1)>>2)];
      _lame_errorf($6, ((5386800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(-1);
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}


function _cutDistribution($sfwork, $sf_out, $cut) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $sfwork_addr;
      var $sf_out_addr;
      var $cut_addr;
      var $i;
      var $j;
      var $x;
      $sfwork_addr=$sfwork;
      $sf_out_addr=$sf_out;
      $cut_addr=$cut;
      $j=39;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $cmp=(($0)>>>0) > 0;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$i;
      var $2=$sfwork_addr;
      var $arrayidx=(($2+($1<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      $x=$3;
      var $4=$x;
      var $5=$cut_addr;
      var $cmp1=(($4)|0) < (($5)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$x;
      var $cond = $6;label = 7; break;
    case 6: 
      var $7=$cut_addr;
      var $cond = $7;label = 7; break;
    case 7: 
      var $cond;
      var $8=$i;
      var $9=$sf_out_addr;
      var $arrayidx2=(($9+($8<<2))|0);
      HEAP32[(($arrayidx2)>>2)]=$cond;
      label = 8; break;
    case 8: 
      var $10=$j;
      var $dec=((($10)-(1))|0);
      $j=$dec;
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _sfDepth($sfwork) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $sfwork_addr;
      var $m;
      var $i;
      var $j;
      var $di;
      $sfwork_addr=$sfwork;
      $m=0;
      $j=39;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $cmp=(($0)>>>0) > 0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$i;
      var $2=$sfwork_addr;
      var $arrayidx=(($2+($1<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $sub=(((255)-($3))|0);
      $di=$sub;
      var $4=$m;
      var $5=$di;
      var $cmp1=(($4)|0) < (($5)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$di;
      $m=$6;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $7=$j;
      var $dec=((($7)-(1))|0);
      $j=$dec;
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $9=$m;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _flattenDistribution($sfwork, $sf_out, $dm, $k, $p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $sfwork_addr;
      var $sf_out_addr;
      var $dm_addr;
      var $k_addr;
      var $p_addr;
      var $i;
      var $j;
      var $x;
      var $sfmax;
      var $di;
      $sfwork_addr=$sfwork;
      $sf_out_addr=$sf_out;
      $dm_addr=$dm;
      $k_addr=$k;
      $p_addr=$p;
      $sfmax=0;
      var $0=$dm_addr;
      var $cmp=(($0)|0) > 0;
      if ($cmp) { label = 3; break; } else { label = 15; break; }
    case 3: 
      $j=39;
      $i=0;
      label = 4; break;
    case 4: 
      var $1=$j;
      var $cmp1=(($1)>>>0) > 0;
      if ($cmp1) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $2=$p_addr;
      var $3=$i;
      var $4=$sfwork_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $sub=((($2)-($5))|0);
      $di=$sub;
      var $6=$i;
      var $7=$sfwork_addr;
      var $arrayidx2=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $9=$k_addr;
      var $10=$di;
      var $mul=((($9)*($10))&-1);
      var $11=$dm_addr;
      var $div=((((($mul)|0))/((($11)|0)))&-1);
      var $add=((($8)+($div))|0);
      $x=$add;
      var $12=$x;
      var $cmp3=(($12)|0) < 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $x=0;
      label = 10; break;
    case 7: 
      var $13=$x;
      var $cmp5=(($13)|0) > 255;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $x=255;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$x;
      var $15=$i;
      var $16=$sf_out_addr;
      var $arrayidx8=(($16+($15<<2))|0);
      HEAP32[(($arrayidx8)>>2)]=$14;
      var $17=$sfmax;
      var $18=$x;
      var $cmp9=(($17)|0) < (($18)|0);
      if ($cmp9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $19=$x;
      $sfmax=$19;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $20=$j;
      var $dec=((($20)-(1))|0);
      $j=$dec;
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 14: 
      label = 22; break;
    case 15: 
      $j=39;
      $i=0;
      label = 16; break;
    case 16: 
      var $22=$j;
      var $cmp14=(($22)>>>0) > 0;
      if ($cmp14) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $23=$i;
      var $24=$sfwork_addr;
      var $arrayidx16=(($24+($23<<2))|0);
      var $25=HEAP32[(($arrayidx16)>>2)];
      $x=$25;
      var $26=$x;
      var $27=$i;
      var $28=$sf_out_addr;
      var $arrayidx17=(($28+($27<<2))|0);
      HEAP32[(($arrayidx17)>>2)]=$26;
      var $29=$sfmax;
      var $30=$x;
      var $cmp18=(($29)|0) < (($30)|0);
      if ($cmp18) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $31=$x;
      $sfmax=$31;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $32=$j;
      var $dec22=((($32)-(1))|0);
      $j=$dec22;
      var $33=$i;
      var $inc23=((($33)+(1))|0);
      $i=$inc23;
      label = 16; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $34=$sfmax;

      return $34;
    default: assert(0, "bad label: " + label);
  }

}
_flattenDistribution["X"]=1;

function _reduce_bit_usage($gfc, $gr, $ch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $gfc_addr;
      var $gr_addr;
      var $ch_addr;
      var $cfg;
      var $cod_info;
      $gfc_addr=$gfc;
      $gr_addr=$gr;
      $ch_addr=$ch;
      var $0=$gfc_addr;
      var $cfg1=(($0+16)|0);
      $cfg=$cfg1;
      var $1=$ch_addr;
      var $2=$gr_addr;
      var $3=$gfc_addr;
      var $l3_side=(($3+304)|0);
      var $tt=(($l3_side)|0);
      var $arrayidx=(($tt+($2)*(10504))|0);
      var $arrayidx2=(($arrayidx+($1)*(5252))|0);
      $cod_info=$arrayidx2;
      var $4=$gfc_addr;
      var $5=$gr_addr;
      var $6=$ch_addr;
      var $7=$gfc_addr;
      var $l3_side3=(($7+304)|0);
      _best_scalefac_store($4, $5, $6, $l3_side3);
      var $8=$cfg;
      var $use_best_huffman=(($8+20)|0);
      var $9=HEAP32[(($use_best_huffman)>>2)];
      var $cmp=(($9)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$gfc_addr;
      var $11=$cod_info;
      _best_huffman_divide($10, $11);
      label = 4; break;
    case 4: 
      var $12=$cod_info;
      var $part2_3_length=(($12+4768)|0);
      var $13=HEAP32[(($part2_3_length)>>2)];
      var $14=$cod_info;
      var $part2_length=(($14+4844)|0);
      var $15=HEAP32[(($part2_length)>>2)];
      var $add=((($13)+($15))|0);

      return $add;
    default: assert(0, "bad label: " + label);
  }

}


function _outOfBitsStrategy($that, $sfwork, $vbrsfmin, $target) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 156)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $sfwork_addr;
      var $vbrsfmin_addr;
      var $target_addr;
      var $wrk=__stackBase__;
      var $dm;
      var $p;
      var $nbits;
      var $bi;
      var $bi_ok;
      var $bu;
      var $bo;
      var $sfmax;
      var $sfmax14;
      var $bi21;
      var $bi_ok24;
      var $bu25;
      var $bo26;
      var $sfmax28;
      var $sfmax50;
      $that_addr=$that;
      $sfwork_addr=$sfwork;
      $vbrsfmin_addr=$vbrsfmin;
      $target_addr=$target;
      var $0=$sfwork_addr;
      var $call=_sfDepth($0);
      $dm=$call;
      var $1=$that_addr;
      var $cod_info=(($1+16)|0);
      var $2=HEAP32[(($cod_info)>>2)];
      var $global_gain=(($2+4780)|0);
      var $3=HEAP32[(($global_gain)>>2)];
      $p=$3;
      var $4=$dm;
      var $div=((((($4)|0))/(2))&-1);
      $bi=$div;
      $bi_ok=-1;
      $bu=0;
      var $5=$dm;
      $bo=$5;
      label = 3; break;
    case 3: 
      var $6=$sfwork_addr;
      var $arraydecay=(($wrk)|0);
      var $7=$dm;
      var $8=$bi;
      var $9=$p;
      var $call1=_flattenDistribution($6, $arraydecay, $7, $8, $9);
      $sfmax=$call1;
      var $10=$that_addr;
      var $arraydecay2=(($wrk)|0);
      var $11=$vbrsfmin_addr;
      var $12=$sfmax;
      var $call3=_tryThatOne($10, $arraydecay2, $11, $12);
      $nbits=$call3;
      var $13=$nbits;
      var $14=$target_addr;
      var $cmp=(($13)|0) <= (($14)|0);
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$bi;
      $bi_ok=$15;
      var $16=$bi;
      var $sub=((($16)-(1))|0);
      $bo=$sub;
      label = 6; break;
    case 5: 
      var $17=$bi;
      var $add=((($17)+(1))|0);
      $bu=$add;
      label = 6; break;
    case 6: 
      var $18=$bu;
      var $19=$bo;
      var $cmp4=(($18)|0) <= (($19)|0);
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $20=$bu;
      var $21=$bo;
      var $add6=((($20)+($21))|0);
      var $div7=((((($add6)|0))/(2))&-1);
      $bi=$div7;
      label = 9; break;
    case 8: 
      label = 10; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $22=$bi_ok;
      var $cmp10=(($22)|0) >= 0;
      if ($cmp10) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $23=$bi;
      var $24=$bi_ok;
      var $cmp12=(($23)|0)!=(($24)|0);
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $25=$sfwork_addr;
      var $arraydecay15=(($wrk)|0);
      var $26=$dm;
      var $27=$bi_ok;
      var $28=$p;
      var $call16=_flattenDistribution($25, $arraydecay15, $26, $27, $28);
      $sfmax14=$call16;
      var $29=$that_addr;
      var $arraydecay17=(($wrk)|0);
      var $30=$vbrsfmin_addr;
      var $31=$sfmax14;
      var $call18=_tryThatOne($29, $arraydecay17, $30, $31);
      $nbits=$call18;
      label = 13; break;
    case 13: 
      label = 27; break;
    case 14: 
      var $32=$p;
      var $add22=((($32)+(255))|0);
      var $div23=((((($add22)|0))/(2))&-1);
      $bi21=$div23;
      $bi_ok24=-1;
      var $33=$p;
      $bu25=$33;
      $bo26=255;
      label = 15; break;
    case 15: 
      var $34=$sfwork_addr;
      var $arraydecay29=(($wrk)|0);
      var $35=$dm;
      var $36=$dm;
      var $37=$bi21;
      var $call30=_flattenDistribution($34, $arraydecay29, $35, $36, $37);
      $sfmax28=$call30;
      var $38=$that_addr;
      var $arraydecay31=(($wrk)|0);
      var $39=$vbrsfmin_addr;
      var $40=$sfmax28;
      var $call32=_tryThatOne($38, $arraydecay31, $39, $40);
      $nbits=$call32;
      var $41=$nbits;
      var $42=$target_addr;
      var $cmp33=(($41)|0) <= (($42)|0);
      if ($cmp33) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $43=$bi21;
      $bi_ok24=$43;
      var $44=$bi21;
      var $sub35=((($44)-(1))|0);
      $bo26=$sub35;
      label = 18; break;
    case 17: 
      var $45=$bi21;
      var $add37=((($45)+(1))|0);
      $bu25=$add37;
      label = 18; break;
    case 18: 
      var $46=$bu25;
      var $47=$bo26;
      var $cmp39=(($46)|0) <= (($47)|0);
      if ($cmp39) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $48=$bu25;
      var $49=$bo26;
      var $add41=((($48)+($49))|0);
      var $div42=((((($add41)|0))/(2))&-1);
      $bi21=$div42;
      label = 21; break;
    case 20: 
      label = 22; break;
    case 21: 
      label = 15; break;
    case 22: 
      var $50=$bi_ok24;
      var $cmp46=(($50)|0) >= 0;
      if ($cmp46) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $51=$bi21;
      var $52=$bi_ok24;
      var $cmp48=(($51)|0)!=(($52)|0);
      if ($cmp48) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $53=$sfwork_addr;
      var $arraydecay51=(($wrk)|0);
      var $54=$dm;
      var $55=$dm;
      var $56=$bi_ok24;
      var $call52=_flattenDistribution($53, $arraydecay51, $54, $55, $56);
      $sfmax50=$call52;
      var $57=$that_addr;
      var $arraydecay53=(($wrk)|0);
      var $58=$vbrsfmin_addr;
      var $59=$sfmax50;
      var $call54=_tryThatOne($57, $arraydecay53, $58, $59);
      $nbits=$call54;
      label = 25; break;
    case 25: 
      label = 27; break;
    case 26: 
      var $60=$that_addr;
      var $arraydecay57=(($wrk)|0);
      var $61=$vbrsfmin_addr;
      var $62=$target_addr;
      _searchGlobalStepsizeMax($60, $arraydecay57, $61, $62);
      label = 27; break;
    case 27: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_outOfBitsStrategy["X"]=1;

function _tryThatOne($that, $sftemp, $vbrsfmin, $vbrmax) {
  var label = 0;


  var $that_addr;
  var $sftemp_addr;
  var $vbrsfmin_addr;
  var $vbrmax_addr;
  var $xrpow_max;
  var $nbits;
  $that_addr=$that;
  $sftemp_addr=$sftemp;
  $vbrsfmin_addr=$vbrsfmin;
  $vbrmax_addr=$vbrmax;
  var $0=$that_addr;
  var $cod_info=(($0+16)|0);
  var $1=HEAP32[(($cod_info)>>2)];
  var $xrpow_max1=(($1+4764)|0);
  var $2=HEAPF32[(($xrpow_max1)>>2)];
  $xrpow_max=$2;
  $nbits=100000;
  var $3=$that_addr;
  var $alloc=(($3)|0);
  var $4=HEAP32[(($alloc)>>2)];
  var $5=$that_addr;
  var $6=$sftemp_addr;
  var $7=$vbrsfmin_addr;
  var $8=$vbrmax_addr;
  FUNCTION_TABLE[$4]($5, $6, $7, $8);
  var $9=$that_addr;
  _bitcount($9);
  var $10=$that_addr;
  var $call=_quantizeAndCountBits($10);
  $nbits=$call;
  var $11=$that_addr;
  var $cod_info2=(($11+16)|0);
  var $12=HEAP32[(($cod_info2)>>2)];
  var $part2_length=(($12+4844)|0);
  var $13=HEAP32[(($part2_length)>>2)];
  var $14=$nbits;
  var $add=((($14)+($13))|0);
  $nbits=$add;
  var $15=$xrpow_max;
  var $16=$that_addr;
  var $cod_info3=(($16+16)|0);
  var $17=HEAP32[(($cod_info3)>>2)];
  var $xrpow_max4=(($17+4764)|0);
  HEAPF32[(($xrpow_max4)>>2)]=$15;
  var $18=$nbits;

  return $18;
}


function _searchGlobalStepsizeMax($that, $sfwork, $vbrsfmin, $target) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $sfwork_addr;
      var $vbrsfmin_addr;
      var $target_addr;
      var $cod_info;
      var $gain;
      var $curr;
      var $gain_ok;
      var $nbits;
      var $l;
      var $r;
      $that_addr=$that;
      $sfwork_addr=$sfwork;
      $vbrsfmin_addr=$vbrsfmin;
      $target_addr=$target;
      var $0=$that_addr;
      var $cod_info1=(($0+16)|0);
      var $1=HEAP32[(($cod_info1)>>2)];
      $cod_info=$1;
      var $2=$cod_info;
      var $global_gain=(($2+4780)|0);
      var $3=HEAP32[(($global_gain)>>2)];
      $gain=$3;
      var $4=$gain;
      $curr=$4;
      $gain_ok=1024;
      $nbits=100000;
      var $5=$gain;
      $l=$5;
      $r=512;
      label = 3; break;
    case 3: 
      var $6=$l;
      var $7=$r;
      var $cmp=(($6)|0) <= (($7)|0);
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $8=$l;
      var $9=$r;
      var $add=((($8)+($9))|0);
      var $shr=$add >> 1;
      $curr=$shr;
      var $10=$that_addr;
      var $11=$sfwork_addr;
      var $12=$vbrsfmin_addr;
      var $13=$curr;
      var $14=$gain;
      var $sub=((($13)-($14))|0);
      var $call=_tryGlobalStepsize($10, $11, $12, $sub);
      $nbits=$call;
      var $15=$nbits;
      var $cmp2=(($15)|0)==0;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $16=$nbits;
      var $17=$cod_info;
      var $part2_length=(($17+4844)|0);
      var $18=HEAP32[(($part2_length)>>2)];
      var $add3=((($16)+($18))|0);
      var $19=$target_addr;
      var $cmp4=(($add3)|0) < (($19)|0);
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$curr;
      var $sub5=((($20)-(1))|0);
      $r=$sub5;
      var $21=$curr;
      $gain_ok=$21;
      label = 10; break;
    case 7: 
      var $22=$curr;
      var $add6=((($22)+(1))|0);
      $l=$add6;
      var $23=$gain_ok;
      var $cmp7=(($23)|0)==1024;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=$curr;
      $gain_ok=$24;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 3; break;
    case 11: 
      var $25=$gain_ok;
      var $26=$curr;
      var $cmp10=(($25)|0)!=(($26)|0);
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$gain_ok;
      $curr=$27;
      var $28=$that_addr;
      var $29=$sfwork_addr;
      var $30=$vbrsfmin_addr;
      var $31=$curr;
      var $32=$gain;
      var $sub12=((($31)-($32))|0);
      var $call13=_tryGlobalStepsize($28, $29, $30, $sub12);
      $nbits=$call13;
      label = 13; break;
    case 13: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_searchGlobalStepsizeMax["X"]=1;

function _tryGlobalStepsize($that, $sfwork, $vbrsfmin, $delta) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 156)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $sfwork_addr;
      var $vbrsfmin_addr;
      var $delta_addr;
      var $xrpow_max;
      var $sftemp=__stackBase__;
      var $i;
      var $nbits;
      var $gain;
      var $vbrmax;
      $that_addr=$that;
      $sfwork_addr=$sfwork;
      $vbrsfmin_addr=$vbrsfmin;
      $delta_addr=$delta;
      var $0=$that_addr;
      var $cod_info=(($0+16)|0);
      var $1=HEAP32[(($cod_info)>>2)];
      var $xrpow_max1=(($1+4764)|0);
      var $2=HEAPF32[(($xrpow_max1)>>2)];
      $xrpow_max=$2;
      $vbrmax=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $cmp=(($3)|0) < 39;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $4=$i;
      var $5=$sfwork_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $7=$delta_addr;
      var $add=((($6)+($7))|0);
      $gain=$add;
      var $8=$gain;
      var $9=$i;
      var $10=$vbrsfmin_addr;
      var $arrayidx2=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx2)>>2)];
      var $cmp3=(($8)|0) < (($11)|0);
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$i;
      var $13=$vbrsfmin_addr;
      var $arrayidx4=(($13+($12<<2))|0);
      var $14=HEAP32[(($arrayidx4)>>2)];
      $gain=$14;
      label = 6; break;
    case 6: 
      var $15=$gain;
      var $cmp5=(($15)|0) > 255;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $gain=255;
      label = 8; break;
    case 8: 
      var $16=$vbrmax;
      var $17=$gain;
      var $cmp8=(($16)|0) < (($17)|0);
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $18=$gain;
      $vbrmax=$18;
      label = 10; break;
    case 10: 
      var $19=$gain;
      var $20=$i;
      var $arrayidx11=(($sftemp+($20<<2))|0);
      HEAP32[(($arrayidx11)>>2)]=$19;
      label = 11; break;
    case 11: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 12: 
      var $22=$that_addr;
      var $alloc=(($22)|0);
      var $23=HEAP32[(($alloc)>>2)];
      var $24=$that_addr;
      var $arraydecay=(($sftemp)|0);
      var $25=$vbrsfmin_addr;
      var $26=$vbrmax;
      FUNCTION_TABLE[$23]($24, $arraydecay, $25, $26);
      var $27=$that_addr;
      _bitcount($27);
      var $28=$that_addr;
      var $call=_quantizeAndCountBits($28);
      $nbits=$call;
      var $29=$xrpow_max;
      var $30=$that_addr;
      var $cod_info12=(($30+16)|0);
      var $31=HEAP32[(($cod_info12)>>2)];
      var $xrpow_max13=(($31+4764)|0);
      HEAPF32[(($xrpow_max13)>>2)]=$29;
      var $32=$nbits;
      STACKTOP = __stackBase__;
      return $32;
    default: assert(0, "bad label: " + label);
  }

}
_tryGlobalStepsize["X"]=1;

function _k_34_4($x, $l3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $x_addr;
  var $l3_addr;
  var $fi=__stackBase__;
  $x_addr=$x;
  $l3_addr=$l3;
  var $0=$x_addr;
  var $arrayidx=(($0)|0);
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $add=($1)+(8388608);
  (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($arrayidx)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=$x_addr;
  var $arrayidx1=(($2)|0);
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $conv=$3;
  var $arrayidx2=(($fi)|0);
  var $f=$arrayidx2;
  HEAPF32[(($f)>>2)]=$conv;
  var $4=$x_addr;
  var $arrayidx3=(($4+8)|0);
  var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $add4=($5)+(8388608);
  (HEAPF64[(tempDoublePtr)>>3]=$add4,HEAP32[(($arrayidx3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=$x_addr;
  var $arrayidx5=(($6+8)|0);
  var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $conv6=$7;
  var $arrayidx7=(($fi+4)|0);
  var $f8=$arrayidx7;
  HEAPF32[(($f8)>>2)]=$conv6;
  var $8=$x_addr;
  var $arrayidx9=(($8+16)|0);
  var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx9)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx9)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $add10=($9)+(8388608);
  (HEAPF64[(tempDoublePtr)>>3]=$add10,HEAP32[(($arrayidx9)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx9)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $10=$x_addr;
  var $arrayidx11=(($10+16)|0);
  var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $conv12=$11;
  var $arrayidx13=(($fi+8)|0);
  var $f14=$arrayidx13;
  HEAPF32[(($f14)>>2)]=$conv12;
  var $12=$x_addr;
  var $arrayidx15=(($12+24)|0);
  var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $add16=($13)+(8388608);
  (HEAPF64[(tempDoublePtr)>>3]=$add16,HEAP32[(($arrayidx15)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx15)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $14=$x_addr;
  var $arrayidx17=(($14+24)|0);
  var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $conv18=$15;
  var $arrayidx19=(($fi+12)|0);
  var $f20=$arrayidx19;
  HEAPF32[(($f20)>>2)]=$conv18;
  var $16=$x_addr;
  var $arrayidx21=(($16)|0);
  var $17=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $arrayidx22=(($fi)|0);
  var $i=$arrayidx22;
  var $18=HEAP32[(($i)>>2)];
  var $sub=((($18)-(1258291200))|0);
  var $arrayidx23=((5349896+($sub<<2))|0);
  var $19=HEAPF32[(($arrayidx23)>>2)];
  var $conv24=$19;
  var $add25=($17)+($conv24);
  var $conv26=$add25;
  var $arrayidx27=(($fi)|0);
  var $f28=$arrayidx27;
  HEAPF32[(($f28)>>2)]=$conv26;
  var $20=$x_addr;
  var $arrayidx29=(($20+8)|0);
  var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx29)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx29)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $arrayidx30=(($fi+4)|0);
  var $i31=$arrayidx30;
  var $22=HEAP32[(($i31)>>2)];
  var $sub32=((($22)-(1258291200))|0);
  var $arrayidx33=((5349896+($sub32<<2))|0);
  var $23=HEAPF32[(($arrayidx33)>>2)];
  var $conv34=$23;
  var $add35=($21)+($conv34);
  var $conv36=$add35;
  var $arrayidx37=(($fi+4)|0);
  var $f38=$arrayidx37;
  HEAPF32[(($f38)>>2)]=$conv36;
  var $24=$x_addr;
  var $arrayidx39=(($24+16)|0);
  var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx39)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx39)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $arrayidx40=(($fi+8)|0);
  var $i41=$arrayidx40;
  var $26=HEAP32[(($i41)>>2)];
  var $sub42=((($26)-(1258291200))|0);
  var $arrayidx43=((5349896+($sub42<<2))|0);
  var $27=HEAPF32[(($arrayidx43)>>2)];
  var $conv44=$27;
  var $add45=($25)+($conv44);
  var $conv46=$add45;
  var $arrayidx47=(($fi+8)|0);
  var $f48=$arrayidx47;
  HEAPF32[(($f48)>>2)]=$conv46;
  var $28=$x_addr;
  var $arrayidx49=(($28+24)|0);
  var $29=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $arrayidx50=(($fi+12)|0);
  var $i51=$arrayidx50;
  var $30=HEAP32[(($i51)>>2)];
  var $sub52=((($30)-(1258291200))|0);
  var $arrayidx53=((5349896+($sub52<<2))|0);
  var $31=HEAPF32[(($arrayidx53)>>2)];
  var $conv54=$31;
  var $add55=($29)+($conv54);
  var $conv56=$add55;
  var $arrayidx57=(($fi+12)|0);
  var $f58=$arrayidx57;
  HEAPF32[(($f58)>>2)]=$conv56;
  var $arrayidx59=(($fi)|0);
  var $i60=$arrayidx59;
  var $32=HEAP32[(($i60)>>2)];
  var $sub61=((($32)-(1258291200))|0);
  var $33=$l3_addr;
  var $arrayidx62=(($33)|0);
  HEAP32[(($arrayidx62)>>2)]=$sub61;
  var $arrayidx63=(($fi+4)|0);
  var $i64=$arrayidx63;
  var $34=HEAP32[(($i64)>>2)];
  var $sub65=((($34)-(1258291200))|0);
  var $35=$l3_addr;
  var $arrayidx66=(($35+4)|0);
  HEAP32[(($arrayidx66)>>2)]=$sub65;
  var $arrayidx67=(($fi+8)|0);
  var $i68=$arrayidx67;
  var $36=HEAP32[(($i68)>>2)];
  var $sub69=((($36)-(1258291200))|0);
  var $37=$l3_addr;
  var $arrayidx70=(($37+8)|0);
  HEAP32[(($arrayidx70)>>2)]=$sub69;
  var $arrayidx71=(($fi+12)|0);
  var $i72=$arrayidx71;
  var $38=HEAP32[(($i72)>>2)];
  var $sub73=((($38)-(1258291200))|0);
  var $39=$l3_addr;
  var $arrayidx74=(($39+12)|0);
  HEAP32[(($arrayidx74)>>2)]=$sub73;
  STACKTOP = __stackBase__;
  return;
}
_k_34_4["X"]=1;

function _vec_max_c($xr34, $bw) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xr34_addr;
      var $bw_addr;
      var $xfsf;
      var $i;
      var $remaining;
      $xr34_addr=$xr34;
      $bw_addr=$bw;
      $xfsf=0;
      var $0=$bw_addr;
      var $shr=$0 >>> 2;
      $i=$shr;
      var $1=$bw_addr;
      var $and=$1 & 3;
      $remaining=$and;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $dec=((($2)-(1))|0);
      $i=$dec;
      var $cmp=(($2)>>>0) > 0;
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $3=$xfsf;
      var $4=$xr34_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAPF32[(($arrayidx)>>2)];
      var $cmp1=$3 < $5;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$xr34_addr;
      var $arrayidx2=(($6)|0);
      var $7=HEAPF32[(($arrayidx2)>>2)];
      $xfsf=$7;
      label = 6; break;
    case 6: 
      var $8=$xfsf;
      var $9=$xr34_addr;
      var $arrayidx3=(($9+4)|0);
      var $10=HEAPF32[(($arrayidx3)>>2)];
      var $cmp4=$8 < $10;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$xr34_addr;
      var $arrayidx6=(($11+4)|0);
      var $12=HEAPF32[(($arrayidx6)>>2)];
      $xfsf=$12;
      label = 8; break;
    case 8: 
      var $13=$xfsf;
      var $14=$xr34_addr;
      var $arrayidx8=(($14+8)|0);
      var $15=HEAPF32[(($arrayidx8)>>2)];
      var $cmp9=$13 < $15;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$xr34_addr;
      var $arrayidx11=(($16+8)|0);
      var $17=HEAPF32[(($arrayidx11)>>2)];
      $xfsf=$17;
      label = 10; break;
    case 10: 
      var $18=$xfsf;
      var $19=$xr34_addr;
      var $arrayidx13=(($19+12)|0);
      var $20=HEAPF32[(($arrayidx13)>>2)];
      var $cmp14=$18 < $20;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $21=$xr34_addr;
      var $arrayidx16=(($21+12)|0);
      var $22=HEAPF32[(($arrayidx16)>>2)];
      $xfsf=$22;
      label = 12; break;
    case 12: 
      var $23=$xr34_addr;
      var $add_ptr=(($23+16)|0);
      $xr34_addr=$add_ptr;
      label = 3; break;
    case 13: 
      var $24=$remaining;
      if ((($24)|0)==3) {
        label = 14; break;
      }
      else if ((($24)|0)==2) {
        label = 17; break;
      }
      else if ((($24)|0)==1) {
        label = 20; break;
      }
      else {
      label = 23; break;
      }
      
    case 14: 
      var $25=$xfsf;
      var $26=$xr34_addr;
      var $arrayidx18=(($26+8)|0);
      var $27=HEAPF32[(($arrayidx18)>>2)];
      var $cmp19=$25 < $27;
      if ($cmp19) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $28=$xr34_addr;
      var $arrayidx21=(($28+8)|0);
      var $29=HEAPF32[(($arrayidx21)>>2)];
      $xfsf=$29;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $30=$xfsf;
      var $31=$xr34_addr;
      var $arrayidx24=(($31+4)|0);
      var $32=HEAPF32[(($arrayidx24)>>2)];
      var $cmp25=$30 < $32;
      if ($cmp25) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $33=$xr34_addr;
      var $arrayidx27=(($33+4)|0);
      var $34=HEAPF32[(($arrayidx27)>>2)];
      $xfsf=$34;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $35=$xfsf;
      var $36=$xr34_addr;
      var $arrayidx30=(($36)|0);
      var $37=HEAPF32[(($arrayidx30)>>2)];
      var $cmp31=$35 < $37;
      if ($cmp31) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $38=$xr34_addr;
      var $arrayidx33=(($38)|0);
      var $39=HEAPF32[(($arrayidx33)>>2)];
      $xfsf=$39;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $40=$xfsf;

      return $40;
    default: assert(0, "bad label: " + label);
  }

}
_vec_max_c["X"]=1;

function _find_lowest_scalefac($xr34) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xr34_addr;
      var $sf_ok;
      var $sf;
      var $delsf;
      var $i;
      var $ixmax_val;
      var $xfsf;
      $xr34_addr=$xr34;
      $sf_ok=-1;
      $sf=-128;
      $delsf=64;
      $ixmax_val=8206;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $conv=(($0)&255);
      var $cmp=(($conv)|0) < 8;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$sf;
      var $idxprom=(($1)&255);
      var $arrayidx=((5326260+($idxprom<<2))|0);
      var $2=HEAPF32[(($arrayidx)>>2)];
      var $3=$xr34_addr;
      var $mul=($2)*($3);
      $xfsf=$mul;
      var $4=$xfsf;
      var $cmp2=$4 <= 8206;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$sf;
      $sf_ok=$5;
      var $6=$delsf;
      var $conv4=(($6)&255);
      var $7=$sf;
      var $conv5=(($7)&255);
      var $sub=((($conv5)-($conv4))|0);
      var $conv6=(($sub) & 255);
      $sf=$conv6;
      label = 7; break;
    case 6: 
      var $8=$delsf;
      var $conv7=(($8)&255);
      var $9=$sf;
      var $conv8=(($9)&255);
      var $add=((($conv8)+($conv7))|0);
      var $conv9=(($add) & 255);
      $sf=$conv9;
      label = 7; break;
    case 7: 
      var $10=$delsf;
      var $conv10=(($10)&255);
      var $shr=$conv10 >> 1;
      var $conv11=(($shr) & 255);
      $delsf=$conv11;
      label = 8; break;
    case 8: 
      var $11=$i;
      var $inc=((($11)+(1))&255);
      $i=$inc;
      label = 3; break;
    case 9: 
      var $12=$sf_ok;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}
_find_lowest_scalefac["X"]=1;

function _set_scalefacs($cod_info, $vbrsfmin, $sf, $max_range) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cod_info_addr;
      var $vbrsfmin_addr;
      var $sf_addr;
      var $max_range_addr;
      var $ifqstep;
      var $ifqstepShift;
      var $scalefac;
      var $sfbmax;
      var $sfb;
      var $sbg;
      var $window;
      var $preflag;
      var $gain;
      var $m;
      $cod_info_addr=$cod_info;
      $vbrsfmin_addr=$vbrsfmin;
      $sf_addr=$sf;
      $max_range_addr=$max_range;
      var $0=$cod_info_addr;
      var $scalefac_scale=(($0+4836)|0);
      var $1=HEAP32[(($scalefac_scale)>>2)];
      var $cmp=(($1)|0)==0;
      var $cond=$cmp ? 2 : 4;
      $ifqstep=$cond;
      var $2=$cod_info_addr;
      var $scalefac_scale1=(($2+4836)|0);
      var $3=HEAP32[(($scalefac_scale1)>>2)];
      var $cmp2=(($3)|0)==0;
      var $cond3=$cmp2 ? 1 : 2;
      $ifqstepShift=$cond3;
      var $4=$cod_info_addr;
      var $scalefac4=(($4+4608)|0);
      var $arraydecay=(($scalefac4)|0);
      $scalefac=$arraydecay;
      var $5=$cod_info_addr;
      var $sfbmax5=(($5+4860)|0);
      var $6=HEAP32[(($sfbmax5)>>2)];
      $sfbmax=$6;
      var $7=$cod_info_addr;
      var $subblock_gain=(($7+4808)|0);
      var $arraydecay6=(($subblock_gain)|0);
      $sbg=$arraydecay6;
      var $8=$cod_info_addr;
      var $window7=(($8+5028)|0);
      var $arraydecay8=(($window7)|0);
      $window=$arraydecay8;
      var $9=$cod_info_addr;
      var $preflag9=(($9+4832)|0);
      var $10=HEAP32[(($preflag9)>>2)];
      $preflag=$10;
      var $11=$preflag;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      $sfb=11;
      label = 4; break;
    case 4: 
      var $12=$sfb;
      var $13=$sfbmax;
      var $cmp10=(($12)|0) < (($13)|0);
      if ($cmp10) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $14=$sfb;
      var $arrayidx=((5257016+($14<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      var $16=$ifqstep;
      var $mul=((($15)*($16))&-1);
      var $17=$sfb;
      var $18=$sf_addr;
      var $arrayidx11=(($18+($17<<2))|0);
      var $19=HEAP32[(($arrayidx11)>>2)];
      var $add=((($19)+($mul))|0);
      HEAP32[(($arrayidx11)>>2)]=$add;
      label = 6; break;
    case 6: 
      var $20=$sfb;
      var $inc=((($20)+(1))|0);
      $sfb=$inc;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      $sfb=0;
      label = 9; break;
    case 9: 
      var $21=$sfb;
      var $22=$sfbmax;
      var $cmp13=(($21)|0) < (($22)|0);
      if ($cmp13) { label = 10; break; } else { label = 23; break; }
    case 10: 
      var $23=$cod_info_addr;
      var $global_gain=(($23+4780)|0);
      var $24=HEAP32[(($global_gain)>>2)];
      var $25=$sfb;
      var $26=$window;
      var $arrayidx15=(($26+($25<<2))|0);
      var $27=HEAP32[(($arrayidx15)>>2)];
      var $28=$sbg;
      var $arrayidx16=(($28+($27<<2))|0);
      var $29=HEAP32[(($arrayidx16)>>2)];
      var $mul17=((($29<<3))&-1);
      var $sub=((($24)-($mul17))|0);
      var $30=$preflag;
      var $tobool18=(($30)|0)!=0;
      if ($tobool18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $31=$sfb;
      var $arrayidx19=((5257016+($31<<2))|0);
      var $32=HEAP32[(($arrayidx19)>>2)];
      var $cond20 = $32;label = 13; break;
    case 12: 
      var $cond20 = 0;label = 13; break;
    case 13: 
      var $cond20;
      var $33=$ifqstep;
      var $mul21=((($cond20)*($33))&-1);
      var $sub22=((($sub)-($mul21))|0);
      $gain=$sub22;
      var $34=$sfb;
      var $35=$sf_addr;
      var $arrayidx23=(($35+($34<<2))|0);
      var $36=HEAP32[(($arrayidx23)>>2)];
      var $cmp24=(($36)|0) < 0;
      if ($cmp24) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $37=$gain;
      var $38=$sfb;
      var $39=$vbrsfmin_addr;
      var $arrayidx26=(($39+($38<<2))|0);
      var $40=HEAP32[(($arrayidx26)>>2)];
      var $sub27=((($37)-($40))|0);
      $m=$sub27;
      var $41=$ifqstep;
      var $sub28=((($41)-(1))|0);
      var $42=$sfb;
      var $43=$sf_addr;
      var $arrayidx29=(($43+($42<<2))|0);
      var $44=HEAP32[(($arrayidx29)>>2)];
      var $sub30=((($sub28)-($44))|0);
      var $45=$ifqstepShift;
      var $shr=$sub30 >> (($45)|0);
      var $46=$sfb;
      var $47=$scalefac;
      var $arrayidx31=(($47+($46<<2))|0);
      HEAP32[(($arrayidx31)>>2)]=$shr;
      var $48=$sfb;
      var $49=$scalefac;
      var $arrayidx32=(($49+($48<<2))|0);
      var $50=HEAP32[(($arrayidx32)>>2)];
      var $51=$sfb;
      var $52=$max_range_addr;
      var $arrayidx33=(($52+$51)|0);
      var $53=HEAP8[($arrayidx33)];
      var $conv=(($53)&255);
      var $cmp34=(($50)|0) > (($conv)|0);
      if ($cmp34) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $54=$sfb;
      var $55=$max_range_addr;
      var $arrayidx37=(($55+$54)|0);
      var $56=HEAP8[($arrayidx37)];
      var $conv38=(($56)&255);
      var $57=$sfb;
      var $58=$scalefac;
      var $arrayidx39=(($58+($57<<2))|0);
      HEAP32[(($arrayidx39)>>2)]=$conv38;
      label = 16; break;
    case 16: 
      var $59=$sfb;
      var $60=$scalefac;
      var $arrayidx41=(($60+($59<<2))|0);
      var $61=HEAP32[(($arrayidx41)>>2)];
      var $cmp42=(($61)|0) > 0;
      if ($cmp42) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $62=$sfb;
      var $63=$scalefac;
      var $arrayidx44=(($63+($62<<2))|0);
      var $64=HEAP32[(($arrayidx44)>>2)];
      var $65=$ifqstepShift;
      var $shl=$64 << $65;
      var $66=$m;
      var $cmp45=(($shl)|0) > (($66)|0);
      if ($cmp45) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $67=$m;
      var $68=$ifqstepShift;
      var $shr48=$67 >> (($68)|0);
      var $69=$sfb;
      var $70=$scalefac;
      var $arrayidx49=(($70+($69<<2))|0);
      HEAP32[(($arrayidx49)>>2)]=$shr48;
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $71=$sfb;
      var $72=$scalefac;
      var $arrayidx51=(($72+($71<<2))|0);
      HEAP32[(($arrayidx51)>>2)]=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $73=$sfb;
      var $inc54=((($73)+(1))|0);
      $sfb=$inc54;
      label = 9; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $74=$sfb;
      var $cmp57=(($74)|0) < 39;
      if ($cmp57) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $75=$sfb;
      var $76=$scalefac;
      var $arrayidx60=(($76+($75<<2))|0);
      HEAP32[(($arrayidx60)>>2)]=0;
      label = 26; break;
    case 26: 
      var $77=$sfb;
      var $inc62=((($77)+(1))|0);
      $sfb=$inc62;
      label = 24; break;
    case 27: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_set_scalefacs["X"]=1;

function _quantize_x34($that) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $that_addr;
      var $x=__stackBase__;
      var $xr34_orig;
      var $cod_info;
      var $ifqstep;
      var $l3;
      var $j;
      var $sfb;
      var $max_nonzero_coeff;
      var $s;
      var $sfac;
      var $sfpow34;
      var $w;
      var $m;
      var $i;
      var $remaining;
      var $tmp_l3=(__stackBase__)+(32);
      $that_addr=$that;
      var $0=$that_addr;
      var $xr34orig=(($0+8)|0);
      var $1=HEAP32[(($xr34orig)>>2)];
      $xr34_orig=$1;
      var $2=$that_addr;
      var $cod_info1=(($2+16)|0);
      var $3=HEAP32[(($cod_info1)>>2)];
      $cod_info=$3;
      var $4=$cod_info;
      var $scalefac_scale=(($4+4836)|0);
      var $5=HEAP32[(($scalefac_scale)>>2)];
      var $cmp=(($5)|0)==0;
      var $cond=$cmp ? 2 : 4;
      $ifqstep=$cond;
      var $6=$cod_info;
      var $l3_enc=(($6+2304)|0);
      var $arraydecay=(($l3_enc)|0);
      $l3=$arraydecay;
      $j=0;
      $sfb=0;
      var $7=$cod_info;
      var $max_nonzero_coeff2=(($7+5208)|0);
      var $8=HEAP32[(($max_nonzero_coeff2)>>2)];
      $max_nonzero_coeff=$8;
      label = 3; break;
    case 3: 
      var $9=$j;
      var $10=$max_nonzero_coeff;
      var $cmp3=(($9)>>>0) <= (($10)>>>0);
      if ($cmp3) { label = 4; break; } else { label = 24; break; }
    case 4: 
      var $11=$sfb;
      var $12=$cod_info;
      var $scalefac=(($12+4608)|0);
      var $arrayidx=(($scalefac+($11<<2))|0);
      var $13=HEAP32[(($arrayidx)>>2)];
      var $14=$cod_info;
      var $preflag=(($14+4832)|0);
      var $15=HEAP32[(($preflag)>>2)];
      var $tobool=(($15)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$sfb;
      var $arrayidx4=((5257016+($16<<2))|0);
      var $17=HEAP32[(($arrayidx4)>>2)];
      var $cond5 = $17;label = 7; break;
    case 6: 
      var $cond5 = 0;label = 7; break;
    case 7: 
      var $cond5;
      var $add=((($13)+($cond5))|0);
      var $18=$ifqstep;
      var $mul=((($add)*($18))&-1);
      var $19=$sfb;
      var $20=$cod_info;
      var $window=(($20+5028)|0);
      var $arrayidx6=(($window+($19<<2))|0);
      var $21=HEAP32[(($arrayidx6)>>2)];
      var $22=$cod_info;
      var $subblock_gain=(($22+4808)|0);
      var $arrayidx7=(($subblock_gain+($21<<2))|0);
      var $23=HEAP32[(($arrayidx7)>>2)];
      var $mul8=((($23<<3))&-1);
      var $add9=((($mul)+($mul8))|0);
      $s=$add9;
      var $24=$cod_info;
      var $global_gain=(($24+4780)|0);
      var $25=HEAP32[(($global_gain)>>2)];
      var $26=$s;
      var $sub=((($25)-($26))|0);
      var $conv=(($sub) & 255);
      $sfac=$conv;
      var $27=$sfac;
      var $idxprom=(($27)&255);
      var $arrayidx10=((5326260+($idxprom<<2))|0);
      var $28=HEAPF32[(($arrayidx10)>>2)];
      $sfpow34=$28;
      var $29=$sfb;
      var $30=$cod_info;
      var $width=(($30+4872)|0);
      var $arrayidx11=(($width+($29<<2))|0);
      var $31=HEAP32[(($arrayidx11)>>2)];
      $w=$31;
      var $32=$max_nonzero_coeff;
      var $33=$j;
      var $sub12=((($32)-($33))|0);
      var $add13=((($sub12)+(1))|0);
      $m=$add13;
      var $34=$w;
      var $35=$j;
      var $add14=((($35)+($34))|0);
      $j=$add14;
      var $36=$sfb;
      var $inc=((($36)+(1))|0);
      $sfb=$inc;
      var $37=$w;
      var $38=$m;
      var $cmp15=(($37)>>>0) <= (($38)>>>0);
      if ($cmp15) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $39=$w;
      var $cond20 = $39;label = 10; break;
    case 9: 
      var $40=$m;
      var $cond20 = $40;label = 10; break;
    case 10: 
      var $cond20;
      $i=$cond20;
      var $41=$i;
      var $and=$41 & 3;
      $remaining=$and;
      var $42=$i;
      var $shr=$42 >>> 2;
      $i=$shr;
      label = 11; break;
    case 11: 
      var $43=$i;
      var $dec=((($43)-(1))|0);
      $i=$dec;
      var $cmp22=(($43)>>>0) > 0;
      if ($cmp22) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $44=$sfpow34;
      var $45=$xr34_orig;
      var $arrayidx25=(($45)|0);
      var $46=HEAPF32[(($arrayidx25)>>2)];
      var $mul26=($44)*($46);
      var $conv27=$mul26;
      var $arrayidx28=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv27,HEAP32[(($arrayidx28)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx28)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $47=$sfpow34;
      var $48=$xr34_orig;
      var $arrayidx29=(($48+4)|0);
      var $49=HEAPF32[(($arrayidx29)>>2)];
      var $mul30=($47)*($49);
      var $conv31=$mul30;
      var $arrayidx32=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv31,HEAP32[(($arrayidx32)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx32)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $50=$sfpow34;
      var $51=$xr34_orig;
      var $arrayidx33=(($51+8)|0);
      var $52=HEAPF32[(($arrayidx33)>>2)];
      var $mul34=($50)*($52);
      var $conv35=$mul34;
      var $arrayidx36=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv35,HEAP32[(($arrayidx36)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx36)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $53=$sfpow34;
      var $54=$xr34_orig;
      var $arrayidx37=(($54+12)|0);
      var $55=HEAPF32[(($arrayidx37)>>2)];
      var $mul38=($53)*($55);
      var $conv39=$mul38;
      var $arrayidx40=(($x+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv39,HEAP32[(($arrayidx40)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx40)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arraydecay41=(($x)|0);
      var $56=$l3;
      _k_34_4($arraydecay41, $56);
      var $57=$l3;
      var $add_ptr=(($57+16)|0);
      $l3=$add_ptr;
      var $58=$xr34_orig;
      var $add_ptr42=(($58+16)|0);
      $xr34_orig=$add_ptr42;
      label = 11; break;
    case 13: 
      var $59=$remaining;
      var $tobool43=(($59)|0)!=0;
      if ($tobool43) { label = 14; break; } else { label = 23; break; }
    case 14: 
      var $arrayidx44=(($x+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx44)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx44)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx45=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx45)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx45)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx46=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx46)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx46)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx47=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx47)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx47)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $60=$remaining;
      if ((($60)|0)==3) {
        label = 15; break;
      }
      else if ((($60)|0)==2) {
        label = 16; break;
      }
      else if ((($60)|0)==1) {
        label = 17; break;
      }
      else {
      label = 18; break;
      }
      
    case 15: 
      var $61=$sfpow34;
      var $62=$xr34_orig;
      var $arrayidx48=(($62+8)|0);
      var $63=HEAPF32[(($arrayidx48)>>2)];
      var $mul49=($61)*($63);
      var $conv50=$mul49;
      var $arrayidx51=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv50,HEAP32[(($arrayidx51)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx51)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 16; break;
    case 16: 
      var $64=$sfpow34;
      var $65=$xr34_orig;
      var $arrayidx53=(($65+4)|0);
      var $66=HEAPF32[(($arrayidx53)>>2)];
      var $mul54=($64)*($66);
      var $conv55=$mul54;
      var $arrayidx56=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv55,HEAP32[(($arrayidx56)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx56)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 17; break;
    case 17: 
      var $67=$sfpow34;
      var $68=$xr34_orig;
      var $arrayidx58=(($68)|0);
      var $69=HEAPF32[(($arrayidx58)>>2)];
      var $mul59=($67)*($69);
      var $conv60=$mul59;
      var $arrayidx61=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv60,HEAP32[(($arrayidx61)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx61)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 18; break;
    case 18: 
      var $arraydecay62=(($x)|0);
      var $arraydecay63=(($tmp_l3)|0);
      _k_34_4($arraydecay62, $arraydecay63);
      var $70=$remaining;
      if ((($70)|0)==3) {
        label = 19; break;
      }
      else if ((($70)|0)==2) {
        label = 20; break;
      }
      else if ((($70)|0)==1) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 19: 
      var $arrayidx65=(($tmp_l3+8)|0);
      var $71=HEAP32[(($arrayidx65)>>2)];
      var $72=$l3;
      var $arrayidx66=(($72+8)|0);
      HEAP32[(($arrayidx66)>>2)]=$71;
      label = 20; break;
    case 20: 
      var $arrayidx68=(($tmp_l3+4)|0);
      var $73=HEAP32[(($arrayidx68)>>2)];
      var $74=$l3;
      var $arrayidx69=(($74+4)|0);
      HEAP32[(($arrayidx69)>>2)]=$73;
      label = 21; break;
    case 21: 
      var $arrayidx71=(($tmp_l3)|0);
      var $75=HEAP32[(($arrayidx71)>>2)];
      var $76=$l3;
      var $arrayidx72=(($76)|0);
      HEAP32[(($arrayidx72)>>2)]=$75;
      label = 22; break;
    case 22: 
      var $77=$remaining;
      var $78=$l3;
      var $add_ptr74=(($78+($77<<2))|0);
      $l3=$add_ptr74;
      var $79=$remaining;
      var $80=$xr34_orig;
      var $add_ptr75=(($80+($79<<2))|0);
      $xr34_orig=$add_ptr75;
      label = 23; break;
    case 23: 
      label = 3; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_quantize_x34["X"]=1;

function _get_lame_version() {
  var label = 0;


  var $0=HEAP32[((5345312)>>2)];

  return $0;
}


function _get_lame_short_version() {
  var label = 0;


  var $0=HEAP32[((5345328)>>2)];

  return $0;
}


function _get_lame_very_short_version() {
  var label = 0;


  var $0=HEAP32[((5345308)>>2)];

  return $0;
}


function _get_lame_tag_encoder_short_version() {
  var label = 0;


  var $0=HEAP32[((5345324)>>2)];

  return $0;
}


function _get_psy_version() {
  var label = 0;


  var $0=HEAP32[((5345304)>>2)];

  return $0;
}


function _get_lame_url() {
  var label = 0;


  var $0=HEAP32[((5345320)>>2)];

  return $0;
}


function _set_subblock_gain($cod_info, $mingain_s, $sf) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cod_info_addr;
      var $mingain_s_addr;
      var $sf_addr;
      var $maxrange1;
      var $maxrange2;
      var $ifqstepShift;
      var $sbg;
      var $psymax;
      var $psydiv;
      var $sbg0;
      var $sbg1;
      var $sbg2;
      var $sfb;
      var $i;
      var $min_sbg;
      var $maxsf1;
      var $maxsf2;
      var $minsf;
      var $v;
      var $v16;
      var $m1;
      var $m2;
      var $m140;
      var $m242;
      $cod_info_addr=$cod_info;
      $mingain_s_addr=$mingain_s;
      $sf_addr=$sf;
      $maxrange1=15;
      $maxrange2=7;
      var $0=$cod_info_addr;
      var $scalefac_scale=(($0+4836)|0);
      var $1=HEAP32[(($scalefac_scale)>>2)];
      var $cmp=(($1)|0)==0;
      var $cond=$cmp ? 1 : 2;
      $ifqstepShift=$cond;
      var $2=$cod_info_addr;
      var $subblock_gain=(($2+4808)|0);
      var $arraydecay=(($subblock_gain)|0);
      $sbg=$arraydecay;
      var $3=$cod_info_addr;
      var $psymax1=(($3+4864)|0);
      var $4=HEAP32[(($psymax1)>>2)];
      $psymax=$4;
      $psydiv=18;
      $min_sbg=7;
      var $5=$psydiv;
      var $6=$psymax;
      var $cmp2=(($5)>>>0) > (($6)>>>0);
      if ($cmp2) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$psymax;
      $psydiv=$7;
      label = 4; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $cmp3=(($8)>>>0) < 3;
      if ($cmp3) { label = 6; break; } else { label = 42; break; }
    case 6: 
      $maxsf1=0;
      $maxsf2=0;
      $minsf=1000;
      var $9=$i;
      $sfb=$9;
      label = 7; break;
    case 7: 
      var $10=$sfb;
      var $11=$psydiv;
      var $cmp5=(($10)>>>0) < (($11)>>>0);
      if ($cmp5) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $12=$sfb;
      var $13=$sf_addr;
      var $arrayidx=(($13+($12<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      var $sub=(((-$14))|0);
      $v=$sub;
      var $15=$maxsf1;
      var $16=$v;
      var $cmp7=(($15)|0) < (($16)|0);
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$v;
      $maxsf1=$17;
      label = 10; break;
    case 10: 
      var $18=$minsf;
      var $19=$v;
      var $cmp10=(($18)|0) > (($19)|0);
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $20=$v;
      $minsf=$20;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $21=$sfb;
      var $add=((($21)+(3))|0);
      $sfb=$add;
      label = 7; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $22=$sfb;
      var $cmp14=(($22)>>>0) < 39;
      if ($cmp14) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $23=$sfb;
      var $24=$sf_addr;
      var $arrayidx17=(($24+($23<<2))|0);
      var $25=HEAP32[(($arrayidx17)>>2)];
      var $sub18=(((-$25))|0);
      $v16=$sub18;
      var $26=$maxsf2;
      var $27=$v16;
      var $cmp19=(($26)|0) < (($27)|0);
      if ($cmp19) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $28=$v16;
      $maxsf2=$28;
      label = 18; break;
    case 18: 
      var $29=$minsf;
      var $30=$v16;
      var $cmp22=(($29)|0) > (($30)|0);
      if ($cmp22) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $31=$v16;
      $minsf=$31;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $32=$sfb;
      var $add26=((($32)+(3))|0);
      $sfb=$add26;
      label = 15; break;
    case 22: 
      var $33=$maxsf1;
      var $34=$ifqstepShift;
      var $shl=15 << $34;
      var $sub28=((($33)-($shl))|0);
      $m1=$sub28;
      var $35=$maxsf2;
      var $36=$ifqstepShift;
      var $shl29=7 << $36;
      var $sub30=((($35)-($shl29))|0);
      $m2=$sub30;
      var $37=$m1;
      var $38=$m2;
      var $cmp31=(($37)|0) > (($38)|0);
      if ($cmp31) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $39=$m1;
      var $cond32 = $39;label = 25; break;
    case 24: 
      var $40=$m2;
      var $cond32 = $40;label = 25; break;
    case 25: 
      var $cond32;
      $maxsf1=$cond32;
      var $41=$minsf;
      var $cmp33=(($41)|0) > 0;
      if ($cmp33) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $42=$minsf;
      var $shr=$42 >> 3;
      var $43=$i;
      var $44=$sbg;
      var $arrayidx35=(($44+($43<<2))|0);
      HEAP32[(($arrayidx35)>>2)]=$shr;
      label = 28; break;
    case 27: 
      var $45=$i;
      var $46=$sbg;
      var $arrayidx36=(($46+($45<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=0;
      label = 28; break;
    case 28: 
      var $47=$maxsf1;
      var $cmp38=(($47)|0) > 0;
      if ($cmp38) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $48=$i;
      var $49=$sbg;
      var $arrayidx41=(($49+($48<<2))|0);
      var $50=HEAP32[(($arrayidx41)>>2)];
      $m140=$50;
      var $51=$maxsf1;
      var $add43=((($51)+(7))|0);
      var $shr44=$add43 >> 3;
      $m242=$shr44;
      var $52=$m140;
      var $53=$m242;
      var $cmp45=(($52)|0) > (($53)|0);
      if ($cmp45) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $54=$m140;
      var $cond49 = $54;label = 32; break;
    case 31: 
      var $55=$m242;
      var $cond49 = $55;label = 32; break;
    case 32: 
      var $cond49;
      var $56=$i;
      var $57=$sbg;
      var $arrayidx50=(($57+($56<<2))|0);
      HEAP32[(($arrayidx50)>>2)]=$cond49;
      label = 33; break;
    case 33: 
      var $58=$i;
      var $59=$sbg;
      var $arrayidx52=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx52)>>2)];
      var $cmp53=(($60)|0) > 0;
      if ($cmp53) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $61=$i;
      var $62=$mingain_s_addr;
      var $arrayidx54=(($62+($61<<2))|0);
      var $63=HEAP32[(($arrayidx54)>>2)];
      var $64=$cod_info_addr;
      var $global_gain=(($64+4780)|0);
      var $65=HEAP32[(($global_gain)>>2)];
      var $66=$i;
      var $67=$sbg;
      var $arrayidx55=(($67+($66<<2))|0);
      var $68=HEAP32[(($arrayidx55)>>2)];
      var $mul=((($68<<3))&-1);
      var $sub56=((($65)-($mul))|0);
      var $cmp57=(($63)|0) > (($sub56)|0);
      if ($cmp57) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $69=$cod_info_addr;
      var $global_gain59=(($69+4780)|0);
      var $70=HEAP32[(($global_gain59)>>2)];
      var $71=$i;
      var $72=$mingain_s_addr;
      var $arrayidx60=(($72+($71<<2))|0);
      var $73=HEAP32[(($arrayidx60)>>2)];
      var $sub61=((($70)-($73))|0);
      var $shr62=$sub61 >> 3;
      var $74=$i;
      var $75=$sbg;
      var $arrayidx63=(($75+($74<<2))|0);
      HEAP32[(($arrayidx63)>>2)]=$shr62;
      label = 36; break;
    case 36: 
      var $76=$i;
      var $77=$sbg;
      var $arrayidx65=(($77+($76<<2))|0);
      var $78=HEAP32[(($arrayidx65)>>2)];
      var $cmp66=(($78)|0) > 7;
      if ($cmp66) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $79=$i;
      var $80=$sbg;
      var $arrayidx68=(($80+($79<<2))|0);
      HEAP32[(($arrayidx68)>>2)]=7;
      label = 38; break;
    case 38: 
      var $81=$min_sbg;
      var $82=$i;
      var $83=$sbg;
      var $arrayidx70=(($83+($82<<2))|0);
      var $84=HEAP32[(($arrayidx70)>>2)];
      var $cmp71=(($81)|0) > (($84)|0);
      if ($cmp71) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $85=$i;
      var $86=$sbg;
      var $arrayidx73=(($86+($85<<2))|0);
      var $87=HEAP32[(($arrayidx73)>>2)];
      $min_sbg=$87;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $88=$i;
      var $inc=((($88)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 42: 
      var $89=$sbg;
      var $arrayidx77=(($89)|0);
      var $90=HEAP32[(($arrayidx77)>>2)];
      var $mul78=((($90<<3))&-1);
      $sbg0=$mul78;
      var $91=$sbg;
      var $arrayidx79=(($91+4)|0);
      var $92=HEAP32[(($arrayidx79)>>2)];
      var $mul80=((($92<<3))&-1);
      $sbg1=$mul80;
      var $93=$sbg;
      var $arrayidx81=(($93+8)|0);
      var $94=HEAP32[(($arrayidx81)>>2)];
      var $mul82=((($94<<3))&-1);
      $sbg2=$mul82;
      $sfb=0;
      label = 43; break;
    case 43: 
      var $95=$sfb;
      var $cmp84=(($95)>>>0) < 39;
      if ($cmp84) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $96=$sbg0;
      var $97=$sfb;
      var $add86=(($97)|0);
      var $98=$sf_addr;
      var $arrayidx87=(($98+($add86<<2))|0);
      var $99=HEAP32[(($arrayidx87)>>2)];
      var $add88=((($99)+($96))|0);
      HEAP32[(($arrayidx87)>>2)]=$add88;
      var $100=$sbg1;
      var $101=$sfb;
      var $add89=((($101)+(1))|0);
      var $102=$sf_addr;
      var $arrayidx90=(($102+($add89<<2))|0);
      var $103=HEAP32[(($arrayidx90)>>2)];
      var $add91=((($103)+($100))|0);
      HEAP32[(($arrayidx90)>>2)]=$add91;
      var $104=$sbg2;
      var $105=$sfb;
      var $add92=((($105)+(2))|0);
      var $106=$sf_addr;
      var $arrayidx93=(($106+($add92<<2))|0);
      var $107=HEAP32[(($arrayidx93)>>2)];
      var $add94=((($107)+($104))|0);
      HEAP32[(($arrayidx93)>>2)]=$add94;
      label = 45; break;
    case 45: 
      var $108=$sfb;
      var $add96=((($108)+(3))|0);
      $sfb=$add96;
      label = 43; break;
    case 46: 
      var $109=$min_sbg;
      var $cmp98=(($109)|0) > 0;
      if ($cmp98) { label = 47; break; } else { label = 52; break; }
    case 47: 
      $i=0;
      label = 48; break;
    case 48: 
      var $110=$i;
      var $cmp101=(($110)>>>0) < 3;
      if ($cmp101) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $111=$min_sbg;
      var $112=$i;
      var $113=$sbg;
      var $arrayidx103=(($113+($112<<2))|0);
      var $114=HEAP32[(($arrayidx103)>>2)];
      var $sub104=((($114)-($111))|0);
      HEAP32[(($arrayidx103)>>2)]=$sub104;
      label = 50; break;
    case 50: 
      var $115=$i;
      var $inc106=((($115)+(1))|0);
      $i=$inc106;
      label = 48; break;
    case 51: 
      var $116=$min_sbg;
      var $mul108=((($116<<3))&-1);
      var $117=$cod_info_addr;
      var $global_gain109=(($117+4780)|0);
      var $118=HEAP32[(($global_gain109)>>2)];
      var $sub110=((($118)-($mul108))|0);
      HEAP32[(($global_gain109)>>2)]=$sub110;
      label = 52; break;
    case 52: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_set_subblock_gain["X"]=1;

function _tri_calc_sfb_noise_x34($xr, $xr34, $l3_xmin, $bw, $sf, $did_it) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $xr_addr;
      var $xr34_addr;
      var $l3_xmin_addr;
      var $bw_addr;
      var $sf_addr;
      var $did_it_addr;
      var $sf_x;
      var $sf_x43;
      $xr_addr=$xr;
      $xr34_addr=$xr34;
      $l3_xmin_addr=$l3_xmin;
      $bw_addr=$bw;
      $sf_addr=$sf;
      $did_it_addr=$did_it;
      var $0=$sf_addr;
      var $idxprom=(($0)&255);
      var $1=$did_it_addr;
      var $arrayidx=(($1+($idxprom<<3))|0);
      var $valid=(($arrayidx)|0);
      var $2=HEAP32[(($valid)>>2)];
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$sf_addr;
      var $idxprom1=(($3)&255);
      var $4=$did_it_addr;
      var $arrayidx2=(($4+($idxprom1<<3))|0);
      var $valid3=(($arrayidx2)|0);
      HEAP32[(($valid3)>>2)]=1;
      var $5=$xr_addr;
      var $6=$xr34_addr;
      var $7=$bw_addr;
      var $8=$sf_addr;
      var $call=_calc_sfb_noise_x34($5, $6, $7, $8);
      var $9=$sf_addr;
      var $idxprom4=(($9)&255);
      var $10=$did_it_addr;
      var $arrayidx5=(($10+($idxprom4<<3))|0);
      var $value=(($arrayidx5+4)|0);
      HEAPF32[(($value)>>2)]=$call;
      label = 4; break;
    case 4: 
      var $11=$l3_xmin_addr;
      var $12=$sf_addr;
      var $idxprom6=(($12)&255);
      var $13=$did_it_addr;
      var $arrayidx7=(($13+($idxprom6<<3))|0);
      var $value8=(($arrayidx7+4)|0);
      var $14=HEAPF32[(($value8)>>2)];
      var $cmp9=$11 < $14;
      if ($cmp9) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 19; break;
    case 6: 
      var $15=$sf_addr;
      var $conv=(($15)&255);
      var $cmp12=(($conv)|0) < 255;
      if ($cmp12) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $16=$sf_addr;
      var $conv15=(($16)&255);
      var $add=((($conv15)+(1))|0);
      var $conv16=(($add) & 255);
      $sf_x=$conv16;
      var $17=$sf_x;
      var $idxprom17=(($17)&255);
      var $18=$did_it_addr;
      var $arrayidx18=(($18+($idxprom17<<3))|0);
      var $valid19=(($arrayidx18)|0);
      var $19=HEAP32[(($valid19)>>2)];
      var $cmp20=(($19)|0)==0;
      if ($cmp20) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$sf_x;
      var $idxprom23=(($20)&255);
      var $21=$did_it_addr;
      var $arrayidx24=(($21+($idxprom23<<3))|0);
      var $valid25=(($arrayidx24)|0);
      HEAP32[(($valid25)>>2)]=1;
      var $22=$xr_addr;
      var $23=$xr34_addr;
      var $24=$bw_addr;
      var $25=$sf_x;
      var $call26=_calc_sfb_noise_x34($22, $23, $24, $25);
      var $26=$sf_x;
      var $idxprom27=(($26)&255);
      var $27=$did_it_addr;
      var $arrayidx28=(($27+($idxprom27<<3))|0);
      var $value29=(($arrayidx28+4)|0);
      HEAPF32[(($value29)>>2)]=$call26;
      label = 9; break;
    case 9: 
      var $28=$l3_xmin_addr;
      var $29=$sf_x;
      var $idxprom31=(($29)&255);
      var $30=$did_it_addr;
      var $arrayidx32=(($30+($idxprom31<<3))|0);
      var $value33=(($arrayidx32+4)|0);
      var $31=HEAPF32[(($value33)>>2)];
      var $cmp34=$28 < $31;
      if ($cmp34) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=1;
      label = 19; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $32=$sf_addr;
      var $conv39=(($32)&255);
      var $cmp40=(($conv39)|0) > 0;
      if ($cmp40) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $33=$sf_addr;
      var $conv44=(($33)&255);
      var $sub=((($conv44)-(1))|0);
      var $conv45=(($sub) & 255);
      $sf_x43=$conv45;
      var $34=$sf_x43;
      var $idxprom46=(($34)&255);
      var $35=$did_it_addr;
      var $arrayidx47=(($35+($idxprom46<<3))|0);
      var $valid48=(($arrayidx47)|0);
      var $36=HEAP32[(($valid48)>>2)];
      var $cmp49=(($36)|0)==0;
      if ($cmp49) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $37=$sf_x43;
      var $idxprom52=(($37)&255);
      var $38=$did_it_addr;
      var $arrayidx53=(($38+($idxprom52<<3))|0);
      var $valid54=(($arrayidx53)|0);
      HEAP32[(($valid54)>>2)]=1;
      var $39=$xr_addr;
      var $40=$xr34_addr;
      var $41=$bw_addr;
      var $42=$sf_x43;
      var $call55=_calc_sfb_noise_x34($39, $40, $41, $42);
      var $43=$sf_x43;
      var $idxprom56=(($43)&255);
      var $44=$did_it_addr;
      var $arrayidx57=(($44+($idxprom56<<3))|0);
      var $value58=(($arrayidx57+4)|0);
      HEAPF32[(($value58)>>2)]=$call55;
      label = 15; break;
    case 15: 
      var $45=$l3_xmin_addr;
      var $46=$sf_x43;
      var $idxprom60=(($46)&255);
      var $47=$did_it_addr;
      var $arrayidx61=(($47+($idxprom60<<3))|0);
      var $value62=(($arrayidx61+4)|0);
      var $48=HEAPF32[(($value62)>>2)];
      var $cmp63=$45 < $48;
      if ($cmp63) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $retval=1;
      label = 19; break;
    case 17: 
      label = 18; break;
    case 18: 
      $retval=0;
      label = 19; break;
    case 19: 
      var $49=$retval;

      return $49;
    default: assert(0, "bad label: " + label);
  }

}
_tri_calc_sfb_noise_x34["X"]=1;

function _calc_sfb_noise_x34($xr, $xr34, $bw, $sf) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xr_addr;
      var $xr34_addr;
      var $bw_addr;
      var $sf_addr;
      var $x=__stackBase__;
      var $l3=(__stackBase__)+(32);
      var $sfpow;
      var $sfpow34;
      var $xfsf;
      var $i;
      var $remaining;
      $xr_addr=$xr;
      $xr34_addr=$xr34;
      $bw_addr=$bw;
      $sf_addr=$sf;
      var $0=$sf_addr;
      var $conv=(($0)&255);
      var $add=((($conv)+(116))|0);
      var $arrayidx=((5289936+($add<<2))|0);
      var $1=HEAPF32[(($arrayidx)>>2)];
      $sfpow=$1;
      var $2=$sf_addr;
      var $idxprom=(($2)&255);
      var $arrayidx1=((5326260+($idxprom<<2))|0);
      var $3=HEAPF32[(($arrayidx1)>>2)];
      $sfpow34=$3;
      $xfsf=0;
      var $4=$bw_addr;
      var $shr=$4 >>> 2;
      $i=$shr;
      var $5=$bw_addr;
      var $and=$5 & 3;
      $remaining=$and;
      label = 3; break;
    case 3: 
      var $6=$i;
      var $dec=((($6)-(1))|0);
      $i=$dec;
      var $cmp=(($6)>>>0) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $7=$sfpow34;
      var $8=$xr34_addr;
      var $arrayidx3=(($8)|0);
      var $9=HEAPF32[(($arrayidx3)>>2)];
      var $mul=($7)*($9);
      var $conv4=$mul;
      var $arrayidx5=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv4,HEAP32[(($arrayidx5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $10=$sfpow34;
      var $11=$xr34_addr;
      var $arrayidx6=(($11+4)|0);
      var $12=HEAPF32[(($arrayidx6)>>2)];
      var $mul7=($10)*($12);
      var $conv8=$mul7;
      var $arrayidx9=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv8,HEAP32[(($arrayidx9)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx9)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $13=$sfpow34;
      var $14=$xr34_addr;
      var $arrayidx10=(($14+8)|0);
      var $15=HEAPF32[(($arrayidx10)>>2)];
      var $mul11=($13)*($15);
      var $conv12=$mul11;
      var $arrayidx13=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv12,HEAP32[(($arrayidx13)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx13)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $16=$sfpow34;
      var $17=$xr34_addr;
      var $arrayidx14=(($17+12)|0);
      var $18=HEAPF32[(($arrayidx14)>>2)];
      var $mul15=($16)*($18);
      var $conv16=$mul15;
      var $arrayidx17=(($x+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv16,HEAP32[(($arrayidx17)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx17)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arraydecay=(($x)|0);
      var $arraydecay18=(($l3)|0);
      _k_34_4($arraydecay, $arraydecay18);
      var $19=$xr_addr;
      var $arrayidx19=(($19)|0);
      var $20=HEAPF32[(($arrayidx19)>>2)];
      var $call=Math.abs($20);
      var $21=$sfpow;
      var $arrayidx20=(($l3)|0);
      var $22=HEAP32[(($arrayidx20)>>2)];
      var $arrayidx21=((5257104+($22<<2))|0);
      var $23=HEAPF32[(($arrayidx21)>>2)];
      var $mul22=($21)*($23);
      var $sub=($call)-($mul22);
      var $conv23=$sub;
      var $arrayidx24=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv23,HEAP32[(($arrayidx24)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx24)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $24=$xr_addr;
      var $arrayidx25=(($24+4)|0);
      var $25=HEAPF32[(($arrayidx25)>>2)];
      var $call26=Math.abs($25);
      var $26=$sfpow;
      var $arrayidx27=(($l3+4)|0);
      var $27=HEAP32[(($arrayidx27)>>2)];
      var $arrayidx28=((5257104+($27<<2))|0);
      var $28=HEAPF32[(($arrayidx28)>>2)];
      var $mul29=($26)*($28);
      var $sub30=($call26)-($mul29);
      var $conv31=$sub30;
      var $arrayidx32=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv31,HEAP32[(($arrayidx32)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx32)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $29=$xr_addr;
      var $arrayidx33=(($29+8)|0);
      var $30=HEAPF32[(($arrayidx33)>>2)];
      var $call34=Math.abs($30);
      var $31=$sfpow;
      var $arrayidx35=(($l3+8)|0);
      var $32=HEAP32[(($arrayidx35)>>2)];
      var $arrayidx36=((5257104+($32<<2))|0);
      var $33=HEAPF32[(($arrayidx36)>>2)];
      var $mul37=($31)*($33);
      var $sub38=($call34)-($mul37);
      var $conv39=$sub38;
      var $arrayidx40=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv39,HEAP32[(($arrayidx40)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx40)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $34=$xr_addr;
      var $arrayidx41=(($34+12)|0);
      var $35=HEAPF32[(($arrayidx41)>>2)];
      var $call42=Math.abs($35);
      var $36=$sfpow;
      var $arrayidx43=(($l3+12)|0);
      var $37=HEAP32[(($arrayidx43)>>2)];
      var $arrayidx44=((5257104+($37<<2))|0);
      var $38=HEAPF32[(($arrayidx44)>>2)];
      var $mul45=($36)*($38);
      var $sub46=($call42)-($mul45);
      var $conv47=$sub46;
      var $arrayidx48=(($x+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv47,HEAP32[(($arrayidx48)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx48)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx49=(($x)|0);
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx49)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx49)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx50=(($x)|0);
      var $40=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx50)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx50)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul51=($39)*($40);
      var $arrayidx52=(($x+8)|0);
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx52)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx52)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx53=(($x+8)|0);
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx53)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx53)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul54=($41)*($42);
      var $add55=($mul51)+($mul54);
      var $arrayidx56=(($x+16)|0);
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx56)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx56)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx57=(($x+16)|0);
      var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx57)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx57)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul58=($43)*($44);
      var $arrayidx59=(($x+24)|0);
      var $45=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx59)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx59)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx60=(($x+24)|0);
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx60)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx60)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul61=($45)*($46);
      var $add62=($mul58)+($mul61);
      var $add63=($add55)+($add62);
      var $47=$xfsf;
      var $conv64=$47;
      var $add65=($conv64)+($add63);
      var $conv66=$add65;
      $xfsf=$conv66;
      var $48=$xr_addr;
      var $add_ptr=(($48+16)|0);
      $xr_addr=$add_ptr;
      var $49=$xr34_addr;
      var $add_ptr67=(($49+16)|0);
      $xr34_addr=$add_ptr67;
      label = 3; break;
    case 5: 
      var $50=$remaining;
      var $tobool=(($50)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $arrayidx68=(($x+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx68)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx68)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx69=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx69)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx69)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx70=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx70)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx70)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx71=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx71)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx71)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $51=$remaining;
      if ((($51)|0)==3) {
        label = 7; break;
      }
      else if ((($51)|0)==2) {
        label = 8; break;
      }
      else if ((($51)|0)==1) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
      
    case 7: 
      var $52=$sfpow34;
      var $53=$xr34_addr;
      var $arrayidx72=(($53+8)|0);
      var $54=HEAPF32[(($arrayidx72)>>2)];
      var $mul73=($52)*($54);
      var $conv74=$mul73;
      var $arrayidx75=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv74,HEAP32[(($arrayidx75)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx75)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 8: 
      var $55=$sfpow34;
      var $56=$xr34_addr;
      var $arrayidx77=(($56+4)|0);
      var $57=HEAPF32[(($arrayidx77)>>2)];
      var $mul78=($55)*($57);
      var $conv79=$mul78;
      var $arrayidx80=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv79,HEAP32[(($arrayidx80)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx80)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 9; break;
    case 9: 
      var $58=$sfpow34;
      var $59=$xr34_addr;
      var $arrayidx82=(($59)|0);
      var $60=HEAPF32[(($arrayidx82)>>2)];
      var $mul83=($58)*($60);
      var $conv84=$mul83;
      var $arrayidx85=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv84,HEAP32[(($arrayidx85)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx85)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 10; break;
    case 10: 
      var $arraydecay86=(($x)|0);
      var $arraydecay87=(($l3)|0);
      _k_34_4($arraydecay86, $arraydecay87);
      var $arrayidx88=(($x+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx88)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx88)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx89=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx89)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx89)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx90=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx90)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx90)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $arrayidx91=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($arrayidx91)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx91)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $61=$remaining;
      if ((($61)|0)==3) {
        label = 11; break;
      }
      else if ((($61)|0)==2) {
        label = 12; break;
      }
      else if ((($61)|0)==1) {
        label = 13; break;
      }
      else {
      label = 14; break;
      }
      
    case 11: 
      var $62=$xr_addr;
      var $arrayidx93=(($62+8)|0);
      var $63=HEAPF32[(($arrayidx93)>>2)];
      var $call94=Math.abs($63);
      var $64=$sfpow;
      var $arrayidx95=(($l3+8)|0);
      var $65=HEAP32[(($arrayidx95)>>2)];
      var $arrayidx96=((5257104+($65<<2))|0);
      var $66=HEAPF32[(($arrayidx96)>>2)];
      var $mul97=($64)*($66);
      var $sub98=($call94)-($mul97);
      var $conv99=$sub98;
      var $arrayidx100=(($x+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv99,HEAP32[(($arrayidx100)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx100)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 12; break;
    case 12: 
      var $67=$xr_addr;
      var $arrayidx102=(($67+4)|0);
      var $68=HEAPF32[(($arrayidx102)>>2)];
      var $call103=Math.abs($68);
      var $69=$sfpow;
      var $arrayidx104=(($l3+4)|0);
      var $70=HEAP32[(($arrayidx104)>>2)];
      var $arrayidx105=((5257104+($70<<2))|0);
      var $71=HEAPF32[(($arrayidx105)>>2)];
      var $mul106=($69)*($71);
      var $sub107=($call103)-($mul106);
      var $conv108=$sub107;
      var $arrayidx109=(($x+8)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv108,HEAP32[(($arrayidx109)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx109)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 13; break;
    case 13: 
      var $72=$xr_addr;
      var $arrayidx111=(($72)|0);
      var $73=HEAPF32[(($arrayidx111)>>2)];
      var $call112=Math.abs($73);
      var $74=$sfpow;
      var $arrayidx113=(($l3)|0);
      var $75=HEAP32[(($arrayidx113)>>2)];
      var $arrayidx114=((5257104+($75<<2))|0);
      var $76=HEAPF32[(($arrayidx114)>>2)];
      var $mul115=($74)*($76);
      var $sub116=($call112)-($mul115);
      var $conv117=$sub116;
      var $arrayidx118=(($x)|0);
      (HEAPF64[(tempDoublePtr)>>3]=$conv117,HEAP32[(($arrayidx118)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($arrayidx118)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 14: 
      var $arrayidx120=(($x)|0);
      var $77=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx120)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx120)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx121=(($x)|0);
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx121)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx121)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul122=($77)*($78);
      var $arrayidx123=(($x+8)|0);
      var $79=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx123)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx123)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx124=(($x+8)|0);
      var $80=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx124)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx124)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul125=($79)*($80);
      var $add126=($mul122)+($mul125);
      var $arrayidx127=(($x+16)|0);
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx127)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx127)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx128=(($x+16)|0);
      var $82=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx128)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx128)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul129=($81)*($82);
      var $arrayidx130=(($x+24)|0);
      var $83=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx130)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx130)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $arrayidx131=(($x+24)|0);
      var $84=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($arrayidx131)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($arrayidx131)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul132=($83)*($84);
      var $add133=($mul129)+($mul132);
      var $add134=($add126)+($add133);
      var $85=$xfsf;
      var $conv135=$85;
      var $add136=($conv135)+($add134);
      var $conv137=$add136;
      $xfsf=$conv137;
      label = 15; break;
    case 15: 
      var $86=$xfsf;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }

}
_calc_sfb_noise_x34["X"]=1;

function _calc_scalefac($l3_xmin, $bw) {
  var label = 0;


  var $l3_xmin_addr;
  var $bw_addr;
  var $c;
  $l3_xmin_addr=$l3_xmin;
  $bw_addr=$bw;
  $c=5.799142360687256;
  var $0=$l3_xmin_addr;
  var $1=$bw_addr;
  var $conv=(($1)|0);
  var $div=($0)/($conv);
  var $call=_log10($div);
  var $mul=($call)*(5.799142360687256);
  var $sub=($mul)-(0.5);
  var $conv1=(($sub)&-1);
  var $add=((($conv1)+(210))|0);

  return $add;
}


function _get_lame_os_bitness() {
  var label = 0;


  var $0=HEAP32[((5345340)>>2)];

  return $0;
}


function _get_lame_version_numerical($lvp) {
  var label = 0;


  var $lvp_addr;
  $lvp_addr=$lvp;
  var $0=$lvp_addr;
  var $major=(($0)|0);
  HEAP32[(($major)>>2)]=3;
  var $1=$lvp_addr;
  var $minor=(($1+4)|0);
  HEAP32[(($minor)>>2)]=99;
  var $2=$lvp_addr;
  var $alpha=(($2+8)|0);
  HEAP32[(($alpha)>>2)]=0;
  var $3=$lvp_addr;
  var $beta=(($3+12)|0);
  HEAP32[(($beta)>>2)]=0;
  var $4=$lvp_addr;
  var $psy_major=(($4+16)|0);
  HEAP32[(($psy_major)>>2)]=1;
  var $5=$lvp_addr;
  var $psy_minor=(($5+20)|0);
  HEAP32[(($psy_minor)>>2)]=0;
  var $6=$lvp_addr;
  var $psy_alpha=(($6+24)|0);
  HEAP32[(($psy_alpha)>>2)]=0;
  var $7=$lvp_addr;
  var $psy_beta=(($7+28)|0);
  HEAP32[(($psy_beta)>>2)]=0;
  var $8=HEAP32[((5345316)>>2)];
  var $9=$lvp_addr;
  var $features=(($9+32)|0);
  HEAP32[(($features)>>2)]=$8;

  return;
}


function _malloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F102;
      var $rsize157;
      var $p159;
      var $r163;
      var $dvs;
      var $rsize185;
      var $p187;
      var $r188;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>0) <= 244;
      if ($cmp) { label = 3; break; } else { label = 38; break; }
    case 3: 
      var $1=$bytes_addr;
      var $cmp1=(($1)>>>0) < 11;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond = 16;label = 6; break;
    case 5: 
      var $2=$bytes_addr;
      var $add=((($2)+(4))|0);
      var $add2=((($add)+(7))|0);
      var $and=$add2 & -8;
      var $cond = $and;label = 6; break;
    case 6: 
      var $cond;
      $nb=$cond;
      var $3=$nb;
      var $shr=$3 >>> 3;
      $idx=$shr;
      var $4=HEAP32[((((5387700)|0))>>2)];
      var $5=$idx;
      var $shr3=$4 >>> (($5)>>>0);
      $smallbits=$shr3;
      var $6=$smallbits;
      var $and4=$6 & 3;
      var $cmp5=(($and4)|0)!=0;
      if ($cmp5) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $7=$smallbits;
      var $neg=$7 ^ -1;
      var $and7=$neg & 1;
      var $8=$idx;
      var $add8=((($8)+($and7))|0);
      $idx=$add8;
      var $9=$idx;
      var $shl=$9 << 1;
      var $arrayidx=((((5387740)|0)+($shl<<2))|0);
      var $10=$arrayidx;
      var $11=$10;
      $b=$11;
      var $12=$b;
      var $fd=(($12+8)|0);
      var $13=HEAP32[(($fd)>>2)];
      $p=$13;
      var $14=$p;
      var $fd9=(($14+8)|0);
      var $15=HEAP32[(($fd9)>>2)];
      $F=$15;
      var $16=$b;
      var $17=$F;
      var $cmp10=(($16)|0)==(($17)|0);
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$idx;
      var $shl12=1 << $18;
      var $neg13=$shl12 ^ -1;
      var $19=HEAP32[((((5387700)|0))>>2)];
      var $and14=$19 & $neg13;
      HEAP32[((((5387700)|0))>>2)]=$and14;
      label = 13; break;
    case 9: 
      var $20=$F;
      var $21=$20;
      var $22=HEAP32[((((5387716)|0))>>2)];
      var $cmp15=(($21)>>>0) >= (($22)>>>0);
      var $conv=(($cmp15)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=$F;
      var $24=$b;
      var $fd17=(($24+8)|0);
      HEAP32[(($fd17)>>2)]=$23;
      var $25=$b;
      var $26=$F;
      var $bk=(($26+12)|0);
      HEAP32[(($bk)>>2)]=$25;
      label = 12; break;
    case 11: 
      _abort();
      throw "Reached an unreachable!"
    case 12: 
      label = 13; break;
    case 13: 
      var $27=$idx;
      var $shl20=$27 << 3;
      var $or=$shl20 | 1;
      var $or21=$or | 2;
      var $28=$p;
      var $head=(($28+4)|0);
      HEAP32[(($head)>>2)]=$or21;
      var $29=$p;
      var $30=$29;
      var $31=$idx;
      var $shl22=$31 << 3;
      var $add_ptr=(($30+$shl22)|0);
      var $32=$add_ptr;
      var $head23=(($32+4)|0);
      var $33=HEAP32[(($head23)>>2)];
      var $or24=$33 | 1;
      HEAP32[(($head23)>>2)]=$or24;
      var $34=$p;
      var $35=$34;
      var $add_ptr25=(($35+8)|0);
      $mem=$add_ptr25;
      label = 54; break;
    case 14: 
      var $36=$nb;
      var $37=HEAP32[((((5387708)|0))>>2)];
      var $cmp27=(($36)>>>0) > (($37)>>>0);
      if ($cmp27) { label = 15; break; } else { label = 36; break; }
    case 15: 
      var $38=$smallbits;
      var $cmp30=(($38)|0)!=0;
      if ($cmp30) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $39=$smallbits;
      var $40=$idx;
      var $shl35=$39 << $40;
      var $41=$idx;
      var $shl36=1 << $41;
      var $shl37=$shl36 << 1;
      var $42=$idx;
      var $shl38=1 << $42;
      var $shl39=$shl38 << 1;
      var $sub=(((-$shl39))|0);
      var $or40=$shl37 | $sub;
      var $and41=$shl35 & $or40;
      $leftbits=$and41;
      var $43=$leftbits;
      var $44=$leftbits;
      var $sub42=(((-$44))|0);
      var $and43=$43 & $sub42;
      $leastbit=$and43;
      var $45=$leastbit;
      var $sub44=((($45)-(1))|0);
      $Y=$sub44;
      var $46=$Y;
      var $shr45=$46 >>> 12;
      var $and46=$shr45 & 16;
      $K=$and46;
      var $47=$K;
      $N=$47;
      var $48=$K;
      var $49=$Y;
      var $shr47=$49 >>> (($48)>>>0);
      $Y=$shr47;
      var $50=$Y;
      var $shr48=$50 >>> 5;
      var $and49=$shr48 & 8;
      $K=$and49;
      var $51=$N;
      var $add50=((($51)+($and49))|0);
      $N=$add50;
      var $52=$K;
      var $53=$Y;
      var $shr51=$53 >>> (($52)>>>0);
      $Y=$shr51;
      var $54=$Y;
      var $shr52=$54 >>> 2;
      var $and53=$shr52 & 4;
      $K=$and53;
      var $55=$N;
      var $add54=((($55)+($and53))|0);
      $N=$add54;
      var $56=$K;
      var $57=$Y;
      var $shr55=$57 >>> (($56)>>>0);
      $Y=$shr55;
      var $58=$Y;
      var $shr56=$58 >>> 1;
      var $and57=$shr56 & 2;
      $K=$and57;
      var $59=$N;
      var $add58=((($59)+($and57))|0);
      $N=$add58;
      var $60=$K;
      var $61=$Y;
      var $shr59=$61 >>> (($60)>>>0);
      $Y=$shr59;
      var $62=$Y;
      var $shr60=$62 >>> 1;
      var $and61=$shr60 & 1;
      $K=$and61;
      var $63=$N;
      var $add62=((($63)+($and61))|0);
      $N=$add62;
      var $64=$K;
      var $65=$Y;
      var $shr63=$65 >>> (($64)>>>0);
      $Y=$shr63;
      var $66=$N;
      var $67=$Y;
      var $add64=((($66)+($67))|0);
      $i=$add64;
      var $68=$i;
      var $shl65=$68 << 1;
      var $arrayidx66=((((5387740)|0)+($shl65<<2))|0);
      var $69=$arrayidx66;
      var $70=$69;
      $b33=$70;
      var $71=$b33;
      var $fd67=(($71+8)|0);
      var $72=HEAP32[(($fd67)>>2)];
      $p34=$72;
      var $73=$p34;
      var $fd69=(($73+8)|0);
      var $74=HEAP32[(($fd69)>>2)];
      $F68=$74;
      var $75=$b33;
      var $76=$F68;
      var $cmp70=(($75)|0)==(($76)|0);
      if ($cmp70) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $77=$i;
      var $shl73=1 << $77;
      var $neg74=$shl73 ^ -1;
      var $78=HEAP32[((((5387700)|0))>>2)];
      var $and75=$78 & $neg74;
      HEAP32[((((5387700)|0))>>2)]=$and75;
      label = 22; break;
    case 18: 
      var $79=$F68;
      var $80=$79;
      var $81=HEAP32[((((5387716)|0))>>2)];
      var $cmp77=(($80)>>>0) >= (($81)>>>0);
      var $conv78=(($cmp77)&1);
      var $expval79=($conv78);
      var $tobool80=(($expval79)|0)!=0;
      if ($tobool80) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $82=$F68;
      var $83=$b33;
      var $fd82=(($83+8)|0);
      HEAP32[(($fd82)>>2)]=$82;
      var $84=$b33;
      var $85=$F68;
      var $bk83=(($85+12)|0);
      HEAP32[(($bk83)>>2)]=$84;
      label = 21; break;
    case 20: 
      _abort();
      throw "Reached an unreachable!"
    case 21: 
      label = 22; break;
    case 22: 
      var $86=$i;
      var $shl87=$86 << 3;
      var $87=$nb;
      var $sub88=((($shl87)-($87))|0);
      $rsize=$sub88;
      var $88=$nb;
      var $or89=$88 | 1;
      var $or90=$or89 | 2;
      var $89=$p34;
      var $head91=(($89+4)|0);
      HEAP32[(($head91)>>2)]=$or90;
      var $90=$p34;
      var $91=$90;
      var $92=$nb;
      var $add_ptr92=(($91+$92)|0);
      var $93=$add_ptr92;
      $r=$93;
      var $94=$rsize;
      var $or93=$94 | 1;
      var $95=$r;
      var $head94=(($95+4)|0);
      HEAP32[(($head94)>>2)]=$or93;
      var $96=$rsize;
      var $97=$r;
      var $98=$97;
      var $99=$rsize;
      var $add_ptr95=(($98+$99)|0);
      var $100=$add_ptr95;
      var $prev_foot=(($100)|0);
      HEAP32[(($prev_foot)>>2)]=$96;
      var $101=HEAP32[((((5387708)|0))>>2)];
      $DVS=$101;
      var $102=$DVS;
      var $cmp96=(($102)|0)!=0;
      if ($cmp96) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $103=HEAP32[((((5387720)|0))>>2)];
      $DV=$103;
      var $104=$DVS;
      var $shr99=$104 >>> 3;
      $I=$shr99;
      var $105=$I;
      var $shl100=$105 << 1;
      var $arrayidx101=((((5387740)|0)+($shl100<<2))|0);
      var $106=$arrayidx101;
      var $107=$106;
      $B=$107;
      var $108=$B;
      $F102=$108;
      var $109=HEAP32[((((5387700)|0))>>2)];
      var $110=$I;
      var $shl103=1 << $110;
      var $and104=$109 & $shl103;
      var $tobool105=(($and104)|0)!=0;
      if ($tobool105) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $111=$I;
      var $shl107=1 << $111;
      var $112=HEAP32[((((5387700)|0))>>2)];
      var $or108=$112 | $shl107;
      HEAP32[((((5387700)|0))>>2)]=$or108;
      label = 29; break;
    case 25: 
      var $113=$B;
      var $fd110=(($113+8)|0);
      var $114=HEAP32[(($fd110)>>2)];
      var $115=$114;
      var $116=HEAP32[((((5387716)|0))>>2)];
      var $cmp111=(($115)>>>0) >= (($116)>>>0);
      var $conv112=(($cmp111)&1);
      var $expval113=($conv112);
      var $tobool114=(($expval113)|0)!=0;
      if ($tobool114) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $117=$B;
      var $fd116=(($117+8)|0);
      var $118=HEAP32[(($fd116)>>2)];
      $F102=$118;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      var $119=$DV;
      var $120=$B;
      var $fd120=(($120+8)|0);
      HEAP32[(($fd120)>>2)]=$119;
      var $121=$DV;
      var $122=$F102;
      var $bk121=(($122+12)|0);
      HEAP32[(($bk121)>>2)]=$121;
      var $123=$F102;
      var $124=$DV;
      var $fd122=(($124+8)|0);
      HEAP32[(($fd122)>>2)]=$123;
      var $125=$B;
      var $126=$DV;
      var $bk123=(($126+12)|0);
      HEAP32[(($bk123)>>2)]=$125;
      label = 30; break;
    case 30: 
      var $127=$rsize;
      HEAP32[((((5387708)|0))>>2)]=$127;
      var $128=$r;
      HEAP32[((((5387720)|0))>>2)]=$128;
      var $129=$p34;
      var $130=$129;
      var $add_ptr125=(($130+8)|0);
      $mem=$add_ptr125;
      label = 54; break;
    case 31: 
      var $131=HEAP32[((((5387704)|0))>>2)];
      var $cmp127=(($131)|0)!=0;
      if ($cmp127) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $132=$nb;
      var $call=_tmalloc_small(5387700, $132);
      $mem=$call;
      var $cmp129=(($call)|0)!=0;
      if ($cmp129) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 54; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $133=$bytes_addr;
      var $cmp137=(($133)>>>0) >= 4294967232;
      if ($cmp137) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $nb=-1;
      label = 44; break;
    case 40: 
      var $134=$bytes_addr;
      var $add141=((($134)+(4))|0);
      var $add142=((($add141)+(7))|0);
      var $and143=$add142 & -8;
      $nb=$and143;
      var $135=HEAP32[((((5387704)|0))>>2)];
      var $cmp144=(($135)|0)!=0;
      if ($cmp144) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $136=$nb;
      var $call147=_tmalloc_large(5387700, $136);
      $mem=$call147;
      var $cmp148=(($call147)|0)!=0;
      if ($cmp148) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 54; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $137=$nb;
      var $138=HEAP32[((((5387708)|0))>>2)];
      var $cmp154=(($137)>>>0) <= (($138)>>>0);
      if ($cmp154) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $139=HEAP32[((((5387708)|0))>>2)];
      var $140=$nb;
      var $sub158=((($139)-($140))|0);
      $rsize157=$sub158;
      var $141=HEAP32[((((5387720)|0))>>2)];
      $p159=$141;
      var $142=$rsize157;
      var $cmp160=(($142)>>>0) >= 16;
      if ($cmp160) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $143=$p159;
      var $144=$143;
      var $145=$nb;
      var $add_ptr164=(($144+$145)|0);
      var $146=$add_ptr164;
      HEAP32[((((5387720)|0))>>2)]=$146;
      $r163=$146;
      var $147=$rsize157;
      HEAP32[((((5387708)|0))>>2)]=$147;
      var $148=$rsize157;
      var $or165=$148 | 1;
      var $149=$r163;
      var $head166=(($149+4)|0);
      HEAP32[(($head166)>>2)]=$or165;
      var $150=$rsize157;
      var $151=$r163;
      var $152=$151;
      var $153=$rsize157;
      var $add_ptr167=(($152+$153)|0);
      var $154=$add_ptr167;
      var $prev_foot168=(($154)|0);
      HEAP32[(($prev_foot168)>>2)]=$150;
      var $155=$nb;
      var $or169=$155 | 1;
      var $or170=$or169 | 2;
      var $156=$p159;
      var $head171=(($156+4)|0);
      HEAP32[(($head171)>>2)]=$or170;
      label = 49; break;
    case 48: 
      var $157=HEAP32[((((5387708)|0))>>2)];
      $dvs=$157;
      HEAP32[((((5387708)|0))>>2)]=0;
      HEAP32[((((5387720)|0))>>2)]=0;
      var $158=$dvs;
      var $or173=$158 | 1;
      var $or174=$or173 | 2;
      var $159=$p159;
      var $head175=(($159+4)|0);
      HEAP32[(($head175)>>2)]=$or174;
      var $160=$p159;
      var $161=$160;
      var $162=$dvs;
      var $add_ptr176=(($161+$162)|0);
      var $163=$add_ptr176;
      var $head177=(($163+4)|0);
      var $164=HEAP32[(($head177)>>2)];
      var $or178=$164 | 1;
      HEAP32[(($head177)>>2)]=$or178;
      label = 49; break;
    case 49: 
      var $165=$p159;
      var $166=$165;
      var $add_ptr180=(($166+8)|0);
      $mem=$add_ptr180;
      label = 54; break;
    case 50: 
      var $167=$nb;
      var $168=HEAP32[((((5387712)|0))>>2)];
      var $cmp182=(($167)>>>0) < (($168)>>>0);
      if ($cmp182) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $169=$nb;
      var $170=HEAP32[((((5387712)|0))>>2)];
      var $sub186=((($170)-($169))|0);
      HEAP32[((((5387712)|0))>>2)]=$sub186;
      $rsize185=$sub186;
      var $171=HEAP32[((((5387724)|0))>>2)];
      $p187=$171;
      var $172=$p187;
      var $173=$172;
      var $174=$nb;
      var $add_ptr189=(($173+$174)|0);
      var $175=$add_ptr189;
      HEAP32[((((5387724)|0))>>2)]=$175;
      $r188=$175;
      var $176=$rsize185;
      var $or190=$176 | 1;
      var $177=$r188;
      var $head191=(($177+4)|0);
      HEAP32[(($head191)>>2)]=$or190;
      var $178=$nb;
      var $or192=$178 | 1;
      var $or193=$or192 | 2;
      var $179=$p187;
      var $head194=(($179+4)|0);
      HEAP32[(($head194)>>2)]=$or193;
      var $180=$p187;
      var $181=$180;
      var $add_ptr195=(($181+8)|0);
      $mem=$add_ptr195;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $182=$nb;
      var $call198=_sys_alloc(5387700, $182);
      $mem=$call198;
      label = 54; break;
    case 54: 
      var $183=$mem;

      return $183;
    default: assert(0, "bad label: " + label);
  }

}
_malloc["X"]=1;


function _tmalloc_small($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F191;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr;
      var $treemap=(($0+4)|0);
      var $1=HEAP32[(($treemap)>>2)];
      var $2=$m_addr;
      var $treemap1=(($2+4)|0);
      var $3=HEAP32[(($treemap1)>>2)];
      var $sub=(((-$3))|0);
      var $and=$1 & $sub;
      $leastbit=$and;
      var $4=$leastbit;
      var $sub2=((($4)-(1))|0);
      $Y=$sub2;
      var $5=$Y;
      var $shr=$5 >>> 12;
      var $and3=$shr & 16;
      $K=$and3;
      var $6=$K;
      $N=$6;
      var $7=$K;
      var $8=$Y;
      var $shr4=$8 >>> (($7)>>>0);
      $Y=$shr4;
      var $9=$Y;
      var $shr5=$9 >>> 5;
      var $and6=$shr5 & 8;
      $K=$and6;
      var $10=$N;
      var $add=((($10)+($and6))|0);
      $N=$add;
      var $11=$K;
      var $12=$Y;
      var $shr7=$12 >>> (($11)>>>0);
      $Y=$shr7;
      var $13=$Y;
      var $shr8=$13 >>> 2;
      var $and9=$shr8 & 4;
      $K=$and9;
      var $14=$N;
      var $add10=((($14)+($and9))|0);
      $N=$add10;
      var $15=$K;
      var $16=$Y;
      var $shr11=$16 >>> (($15)>>>0);
      $Y=$shr11;
      var $17=$Y;
      var $shr12=$17 >>> 1;
      var $and13=$shr12 & 2;
      $K=$and13;
      var $18=$N;
      var $add14=((($18)+($and13))|0);
      $N=$add14;
      var $19=$K;
      var $20=$Y;
      var $shr15=$20 >>> (($19)>>>0);
      $Y=$shr15;
      var $21=$Y;
      var $shr16=$21 >>> 1;
      var $and17=$shr16 & 1;
      $K=$and17;
      var $22=$N;
      var $add18=((($22)+($and17))|0);
      $N=$add18;
      var $23=$K;
      var $24=$Y;
      var $shr19=$24 >>> (($23)>>>0);
      $Y=$shr19;
      var $25=$N;
      var $26=$Y;
      var $add20=((($25)+($26))|0);
      $i=$add20;
      var $27=$i;
      var $28=$m_addr;
      var $treebins=(($28+304)|0);
      var $arrayidx=(($treebins+($27<<2))|0);
      var $29=HEAP32[(($arrayidx)>>2)];
      $t=$29;
      $v=$29;
      var $30=$t;
      var $head=(($30+4)|0);
      var $31=HEAP32[(($head)>>2)];
      var $and21=$31 & -8;
      var $32=$nb_addr;
      var $sub22=((($and21)-($32))|0);
      $rsize=$sub22;
      label = 3; break;
    case 3: 
      var $33=$t;
      var $child=(($33+16)|0);
      var $arrayidx23=(($child)|0);
      var $34=HEAP32[(($arrayidx23)>>2)];
      var $cmp=(($34)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$t;
      var $child24=(($35+16)|0);
      var $arrayidx25=(($child24)|0);
      var $36=HEAP32[(($arrayidx25)>>2)];
      var $cond = $36;label = 6; break;
    case 5: 
      var $37=$t;
      var $child26=(($37+16)|0);
      var $arrayidx27=(($child26+4)|0);
      var $38=HEAP32[(($arrayidx27)>>2)];
      var $cond = $38;label = 6; break;
    case 6: 
      var $cond;
      $t=$cond;
      var $cmp28=(($cond)|0)!=0;
      if ($cmp28) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $39=$t;
      var $head29=(($39+4)|0);
      var $40=HEAP32[(($head29)>>2)];
      var $and30=$40 & -8;
      var $41=$nb_addr;
      var $sub31=((($and30)-($41))|0);
      $trem=$sub31;
      var $42=$trem;
      var $43=$rsize;
      var $cmp32=(($42)>>>0) < (($43)>>>0);
      if ($cmp32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$trem;
      $rsize=$44;
      var $45=$t;
      $v=$45;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $46=$v;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp33=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp33)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 11; break; } else { label = 70; break; }
    case 11: 
      var $50=$v;
      var $51=$50;
      var $52=$nb_addr;
      var $add_ptr=(($51+$52)|0);
      var $53=$add_ptr;
      $r=$53;
      var $54=$v;
      var $55=$54;
      var $56=$r;
      var $57=$56;
      var $cmp35=(($55)>>>0) < (($57)>>>0);
      var $conv36=(($cmp35)&1);
      var $expval37=($conv36);
      var $tobool38=(($expval37)|0)!=0;
      if ($tobool38) { label = 12; break; } else { label = 69; break; }
    case 12: 
      var $58=$v;
      var $parent=(($58+24)|0);
      var $59=HEAP32[(($parent)>>2)];
      $XP=$59;
      var $60=$v;
      var $bk=(($60+12)|0);
      var $61=HEAP32[(($bk)>>2)];
      var $62=$v;
      var $cmp40=(($61)|0)!=(($62)|0);
      if ($cmp40) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $63=$v;
      var $fd=(($63+8)|0);
      var $64=HEAP32[(($fd)>>2)];
      $F=$64;
      var $65=$v;
      var $bk43=(($65+12)|0);
      var $66=HEAP32[(($bk43)>>2)];
      $R=$66;
      var $67=$F;
      var $68=$67;
      var $69=$m_addr;
      var $least_addr44=(($69+16)|0);
      var $70=HEAP32[(($least_addr44)>>2)];
      var $cmp45=(($68)>>>0) >= (($70)>>>0);
      var $conv46=(($cmp45)&1);
      var $expval47=($conv46);
      var $tobool48=(($expval47)|0)!=0;
      if ($tobool48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $71=$R;
      var $72=$F;
      var $bk50=(($72+12)|0);
      HEAP32[(($bk50)>>2)]=$71;
      var $73=$F;
      var $74=$R;
      var $fd51=(($74+8)|0);
      HEAP32[(($fd51)>>2)]=$73;
      label = 16; break;
    case 15: 
      _abort();
      throw "Reached an unreachable!"
    case 16: 
      label = 29; break;
    case 17: 
      var $75=$v;
      var $child54=(($75+16)|0);
      var $arrayidx55=(($child54+4)|0);
      $RP=$arrayidx55;
      var $76=HEAP32[(($arrayidx55)>>2)];
      $R=$76;
      var $cmp56=(($76)|0)!=0;
      if ($cmp56) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $77=$v;
      var $child58=(($77+16)|0);
      var $arrayidx59=(($child58)|0);
      $RP=$arrayidx59;
      var $78=HEAP32[(($arrayidx59)>>2)];
      $R=$78;
      var $cmp60=(($78)|0)!=0;
      if ($cmp60) { label = 19; break; } else { label = 28; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $79=$R;
      var $child64=(($79+16)|0);
      var $arrayidx65=(($child64+4)|0);
      $CP=$arrayidx65;
      var $80=HEAP32[(($arrayidx65)>>2)];
      var $cmp66=(($80)|0)!=0;
      if ($cmp66) { var $83 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $81=$R;
      var $child68=(($81+16)|0);
      var $arrayidx69=(($child68)|0);
      $CP=$arrayidx69;
      var $82=HEAP32[(($arrayidx69)>>2)];
      var $cmp70=(($82)|0)!=0;
      var $83 = $cmp70;label = 22; break;
    case 22: 
      var $83;
      if ($83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $84=$CP;
      $RP=$84;
      var $85=HEAP32[(($84)>>2)];
      $R=$85;
      label = 20; break;
    case 24: 
      var $86=$RP;
      var $87=$86;
      var $88=$m_addr;
      var $least_addr74=(($88+16)|0);
      var $89=HEAP32[(($least_addr74)>>2)];
      var $cmp75=(($87)>>>0) >= (($89)>>>0);
      var $conv76=(($cmp75)&1);
      var $expval77=($conv76);
      var $tobool78=(($expval77)|0)!=0;
      if ($tobool78) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $90=$RP;
      HEAP32[(($90)>>2)]=0;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$XP;
      var $cmp84=(($91)|0)!=0;
      if ($cmp84) { label = 30; break; } else { label = 57; break; }
    case 30: 
      var $92=$v;
      var $index=(($92+28)|0);
      var $93=HEAP32[(($index)>>2)];
      var $94=$m_addr;
      var $treebins87=(($94+304)|0);
      var $arrayidx88=(($treebins87+($93<<2))|0);
      $H=$arrayidx88;
      var $95=$v;
      var $96=$H;
      var $97=HEAP32[(($96)>>2)];
      var $cmp89=(($95)|0)==(($97)|0);
      if ($cmp89) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $98=$R;
      var $99=$H;
      HEAP32[(($99)>>2)]=$98;
      var $cmp92=(($98)|0)==0;
      if ($cmp92) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $100=$v;
      var $index95=(($100+28)|0);
      var $101=HEAP32[(($index95)>>2)];
      var $shl=1 << $101;
      var $neg=$shl ^ -1;
      var $102=$m_addr;
      var $treemap96=(($102+4)|0);
      var $103=HEAP32[(($treemap96)>>2)];
      var $and97=$103 & $neg;
      HEAP32[(($treemap96)>>2)]=$and97;
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $104=$XP;
      var $105=$104;
      var $106=$m_addr;
      var $least_addr100=(($106+16)|0);
      var $107=HEAP32[(($least_addr100)>>2)];
      var $cmp101=(($105)>>>0) >= (($107)>>>0);
      var $conv102=(($cmp101)&1);
      var $expval103=($conv102);
      var $tobool104=(($expval103)|0)!=0;
      if ($tobool104) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $108=$XP;
      var $child106=(($108+16)|0);
      var $arrayidx107=(($child106)|0);
      var $109=HEAP32[(($arrayidx107)>>2)];
      var $110=$v;
      var $cmp108=(($109)|0)==(($110)|0);
      if ($cmp108) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $111=$R;
      var $112=$XP;
      var $child111=(($112+16)|0);
      var $arrayidx112=(($child111)|0);
      HEAP32[(($arrayidx112)>>2)]=$111;
      label = 38; break;
    case 37: 
      var $113=$R;
      var $114=$XP;
      var $child114=(($114+16)|0);
      var $arrayidx115=(($child114+4)|0);
      HEAP32[(($arrayidx115)>>2)]=$113;
      label = 38; break;
    case 38: 
      label = 40; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 41; break;
    case 41: 
      var $115=$R;
      var $cmp120=(($115)|0)!=0;
      if ($cmp120) { label = 42; break; } else { label = 56; break; }
    case 42: 
      var $116=$R;
      var $117=$116;
      var $118=$m_addr;
      var $least_addr123=(($118+16)|0);
      var $119=HEAP32[(($least_addr123)>>2)];
      var $cmp124=(($117)>>>0) >= (($119)>>>0);
      var $conv125=(($cmp124)&1);
      var $expval126=($conv125);
      var $tobool127=(($expval126)|0)!=0;
      if ($tobool127) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $120=$XP;
      var $121=$R;
      var $parent129=(($121+24)|0);
      HEAP32[(($parent129)>>2)]=$120;
      var $122=$v;
      var $child130=(($122+16)|0);
      var $arrayidx131=(($child130)|0);
      var $123=HEAP32[(($arrayidx131)>>2)];
      $C0=$123;
      var $cmp132=(($123)|0)!=0;
      if ($cmp132) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $124=$C0;
      var $125=$124;
      var $126=$m_addr;
      var $least_addr135=(($126+16)|0);
      var $127=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($125)>>>0) >= (($127)>>>0);
      var $conv137=(($cmp136)&1);
      var $expval138=($conv137);
      var $tobool139=(($expval138)|0)!=0;
      if ($tobool139) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $128=$C0;
      var $129=$R;
      var $child141=(($129+16)|0);
      var $arrayidx142=(($child141)|0);
      HEAP32[(($arrayidx142)>>2)]=$128;
      var $130=$R;
      var $131=$C0;
      var $parent143=(($131+24)|0);
      HEAP32[(($parent143)>>2)]=$130;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 48; break;
    case 48: 
      var $132=$v;
      var $child147=(($132+16)|0);
      var $arrayidx148=(($child147+4)|0);
      var $133=HEAP32[(($arrayidx148)>>2)];
      $C1=$133;
      var $cmp149=(($133)|0)!=0;
      if ($cmp149) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $134=$C1;
      var $135=$134;
      var $136=$m_addr;
      var $least_addr152=(($136+16)|0);
      var $137=HEAP32[(($least_addr152)>>2)];
      var $cmp153=(($135)>>>0) >= (($137)>>>0);
      var $conv154=(($cmp153)&1);
      var $expval155=($conv154);
      var $tobool156=(($expval155)|0)!=0;
      if ($tobool156) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $138=$C1;
      var $139=$R;
      var $child158=(($139+16)|0);
      var $arrayidx159=(($child158+4)|0);
      HEAP32[(($arrayidx159)>>2)]=$138;
      var $140=$R;
      var $141=$C1;
      var $parent160=(($141+24)|0);
      HEAP32[(($parent160)>>2)]=$140;
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!"
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $142=$rsize;
      var $cmp168=(($142)>>>0) < 16;
      if ($cmp168) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $143=$rsize;
      var $144=$nb_addr;
      var $add171=((($143)+($144))|0);
      var $or=$add171 | 1;
      var $or172=$or | 2;
      var $145=$v;
      var $head173=(($145+4)|0);
      HEAP32[(($head173)>>2)]=$or172;
      var $146=$v;
      var $147=$146;
      var $148=$rsize;
      var $149=$nb_addr;
      var $add174=((($148)+($149))|0);
      var $add_ptr175=(($147+$add174)|0);
      var $150=$add_ptr175;
      var $head176=(($150+4)|0);
      var $151=HEAP32[(($head176)>>2)];
      var $or177=$151 | 1;
      HEAP32[(($head176)>>2)]=$or177;
      label = 68; break;
    case 59: 
      var $152=$nb_addr;
      var $or179=$152 | 1;
      var $or180=$or179 | 2;
      var $153=$v;
      var $head181=(($153+4)|0);
      HEAP32[(($head181)>>2)]=$or180;
      var $154=$rsize;
      var $or182=$154 | 1;
      var $155=$r;
      var $head183=(($155+4)|0);
      HEAP32[(($head183)>>2)]=$or182;
      var $156=$rsize;
      var $157=$r;
      var $158=$157;
      var $159=$rsize;
      var $add_ptr184=(($158+$159)|0);
      var $160=$add_ptr184;
      var $prev_foot=(($160)|0);
      HEAP32[(($prev_foot)>>2)]=$156;
      var $161=$m_addr;
      var $dvsize=(($161+8)|0);
      var $162=HEAP32[(($dvsize)>>2)];
      $DVS=$162;
      var $163=$DVS;
      var $cmp185=(($163)|0)!=0;
      if ($cmp185) { label = 60; break; } else { label = 67; break; }
    case 60: 
      var $164=$m_addr;
      var $dv=(($164+20)|0);
      var $165=HEAP32[(($dv)>>2)];
      $DV=$165;
      var $166=$DVS;
      var $shr188=$166 >>> 3;
      $I=$shr188;
      var $167=$I;
      var $shl189=$167 << 1;
      var $168=$m_addr;
      var $smallbins=(($168+40)|0);
      var $arrayidx190=(($smallbins+($shl189<<2))|0);
      var $169=$arrayidx190;
      var $170=$169;
      $B=$170;
      var $171=$B;
      $F191=$171;
      var $172=$m_addr;
      var $smallmap=(($172)|0);
      var $173=HEAP32[(($smallmap)>>2)];
      var $174=$I;
      var $shl192=1 << $174;
      var $and193=$173 & $shl192;
      var $tobool194=(($and193)|0)!=0;
      if ($tobool194) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $175=$I;
      var $shl196=1 << $175;
      var $176=$m_addr;
      var $smallmap197=(($176)|0);
      var $177=HEAP32[(($smallmap197)>>2)];
      var $or198=$177 | $shl196;
      HEAP32[(($smallmap197)>>2)]=$or198;
      label = 66; break;
    case 62: 
      var $178=$B;
      var $fd200=(($178+8)|0);
      var $179=HEAP32[(($fd200)>>2)];
      var $180=$179;
      var $181=$m_addr;
      var $least_addr201=(($181+16)|0);
      var $182=HEAP32[(($least_addr201)>>2)];
      var $cmp202=(($180)>>>0) >= (($182)>>>0);
      var $conv203=(($cmp202)&1);
      var $expval204=($conv203);
      var $tobool205=(($expval204)|0)!=0;
      if ($tobool205) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $183=$B;
      var $fd207=(($183+8)|0);
      var $184=HEAP32[(($fd207)>>2)];
      $F191=$184;
      label = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      label = 66; break;
    case 66: 
      var $185=$DV;
      var $186=$B;
      var $fd211=(($186+8)|0);
      HEAP32[(($fd211)>>2)]=$185;
      var $187=$DV;
      var $188=$F191;
      var $bk212=(($188+12)|0);
      HEAP32[(($bk212)>>2)]=$187;
      var $189=$F191;
      var $190=$DV;
      var $fd213=(($190+8)|0);
      HEAP32[(($fd213)>>2)]=$189;
      var $191=$B;
      var $192=$DV;
      var $bk214=(($192+12)|0);
      HEAP32[(($bk214)>>2)]=$191;
      label = 67; break;
    case 67: 
      var $193=$rsize;
      var $194=$m_addr;
      var $dvsize216=(($194+8)|0);
      HEAP32[(($dvsize216)>>2)]=$193;
      var $195=$r;
      var $196=$m_addr;
      var $dv217=(($196+20)|0);
      HEAP32[(($dv217)>>2)]=$195;
      label = 68; break;
    case 68: 
      var $197=$v;
      var $198=$197;
      var $add_ptr219=(($198+8)|0);

      return $add_ptr219;
    case 69: 
      label = 70; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F282;
      var $TP;
      var $H307;
      var $I308;
      var $X309;
      var $Y319;
      var $N320;
      var $K324;
      var $T;
      var $K365;
      var $C;
      var $F404;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0;
      var $0=$nb_addr;
      var $sub=(((-$0))|0);
      $rsize=$sub;
      var $1=$nb_addr;
      var $shr=$1 >>> 8;
      $X=$shr;
      var $2=$X;
      var $cmp=(($2)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $3=$X;
      var $cmp1=(($3)>>>0) > 65535;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $4=$X;
      $Y=$4;
      var $5=$Y;
      var $sub4=((($5)-(256))|0);
      var $shr5=$sub4 >>> 16;
      var $and=$shr5 & 8;
      $N=$and;
      var $6=$N;
      var $7=$Y;
      var $shl=$7 << $6;
      $Y=$shl;
      var $sub6=((($shl)-(4096))|0);
      var $shr7=$sub6 >>> 16;
      var $and8=$shr7 & 4;
      $K=$and8;
      var $8=$K;
      var $9=$N;
      var $add=((($9)+($8))|0);
      $N=$add;
      var $10=$K;
      var $11=$Y;
      var $shl9=$11 << $10;
      $Y=$shl9;
      var $sub10=((($shl9)-(16384))|0);
      var $shr11=$sub10 >>> 16;
      var $and12=$shr11 & 2;
      $K=$and12;
      var $12=$N;
      var $add13=((($12)+($and12))|0);
      $N=$add13;
      var $13=$N;
      var $sub14=(((14)-($13))|0);
      var $14=$K;
      var $15=$Y;
      var $shl15=$15 << $14;
      $Y=$shl15;
      var $shr16=$shl15 >>> 15;
      var $add17=((($sub14)+($shr16))|0);
      $K=$add17;
      var $16=$K;
      var $shl18=$16 << 1;
      var $17=$nb_addr;
      var $18=$K;
      var $add19=((($18)+(7))|0);
      var $shr20=$17 >>> (($add19)>>>0);
      var $and21=$shr20 & 1;
      var $add22=((($shl18)+($and21))|0);
      $idx=$add22;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$idx;
      var $20=$m_addr;
      var $treebins=(($20+304)|0);
      var $arrayidx=(($treebins+($19<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      $t=$21;
      var $cmp24=(($21)|0)!=0;
      if ($cmp24) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$nb_addr;
      var $23=$idx;
      var $cmp26=(($23)|0)==31;
      if ($cmp26) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $24=$idx;
      var $shr27=$24 >>> 1;
      var $add28=((($shr27)+(8))|0);
      var $sub29=((($add28)-(2))|0);
      var $sub30=(((31)-($sub29))|0);
      var $cond = $sub30;label = 12; break;
    case 12: 
      var $cond;
      var $shl31=$22 << $cond;
      $sizebits=$shl31;
      $rst=0;
      label = 13; break;
    case 13: 
      var $25=$t;
      var $head=(($25+4)|0);
      var $26=HEAP32[(($head)>>2)];
      var $and32=$26 & -8;
      var $27=$nb_addr;
      var $sub33=((($and32)-($27))|0);
      $trem=$sub33;
      var $28=$trem;
      var $29=$rsize;
      var $cmp34=(($28)>>>0) < (($29)>>>0);
      if ($cmp34) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $30=$t;
      $v=$30;
      var $31=$trem;
      $rsize=$31;
      var $cmp36=(($31)|0)==0;
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$t;
      var $child=(($32+16)|0);
      var $arrayidx40=(($child+4)|0);
      var $33=HEAP32[(($arrayidx40)>>2)];
      $rt=$33;
      var $34=$sizebits;
      var $shr41=$34 >>> 31;
      var $and42=$shr41 & 1;
      var $35=$t;
      var $child43=(($35+16)|0);
      var $arrayidx44=(($child43+($and42<<2))|0);
      var $36=HEAP32[(($arrayidx44)>>2)];
      $t=$36;
      var $37=$rt;
      var $cmp45=(($37)|0)!=0;
      if ($cmp45) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $38=$rt;
      var $39=$t;
      var $cmp46=(($38)|0)!=(($39)|0);
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$rt;
      $rst=$40;
      label = 20; break;
    case 20: 
      var $41=$t;
      var $cmp49=(($41)|0)==0;
      if ($cmp49) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $42=$rst;
      $t=$42;
      label = 23; break;
    case 22: 
      var $43=$sizebits;
      var $shl52=$43 << 1;
      $sizebits=$shl52;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $44=$t;
      var $cmp54=(($44)|0)==0;
      if ($cmp54) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $45=$v;
      var $cmp56=(($45)|0)==0;
      if ($cmp56) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $46=$idx;
      var $shl58=1 << $46;
      var $shl59=$shl58 << 1;
      var $47=$idx;
      var $shl60=1 << $47;
      var $shl61=$shl60 << 1;
      var $sub62=(((-$shl61))|0);
      var $or=$shl59 | $sub62;
      var $48=$m_addr;
      var $treemap=(($48+4)|0);
      var $49=HEAP32[(($treemap)>>2)];
      var $and63=$or & $49;
      $leftbits=$and63;
      var $50=$leftbits;
      var $cmp64=(($50)|0)!=0;
      if ($cmp64) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=$leftbits;
      var $52=$leftbits;
      var $sub66=(((-$52))|0);
      var $and67=$51 & $sub66;
      $leastbit=$and67;
      var $53=$leastbit;
      var $sub69=((($53)-(1))|0);
      $Y68=$sub69;
      var $54=$Y68;
      var $shr71=$54 >>> 12;
      var $and72=$shr71 & 16;
      $K70=$and72;
      var $55=$K70;
      $N73=$55;
      var $56=$K70;
      var $57=$Y68;
      var $shr74=$57 >>> (($56)>>>0);
      $Y68=$shr74;
      var $58=$Y68;
      var $shr75=$58 >>> 5;
      var $and76=$shr75 & 8;
      $K70=$and76;
      var $59=$N73;
      var $add77=((($59)+($and76))|0);
      $N73=$add77;
      var $60=$K70;
      var $61=$Y68;
      var $shr78=$61 >>> (($60)>>>0);
      $Y68=$shr78;
      var $62=$Y68;
      var $shr79=$62 >>> 2;
      var $and80=$shr79 & 4;
      $K70=$and80;
      var $63=$N73;
      var $add81=((($63)+($and80))|0);
      $N73=$add81;
      var $64=$K70;
      var $65=$Y68;
      var $shr82=$65 >>> (($64)>>>0);
      $Y68=$shr82;
      var $66=$Y68;
      var $shr83=$66 >>> 1;
      var $and84=$shr83 & 2;
      $K70=$and84;
      var $67=$N73;
      var $add85=((($67)+($and84))|0);
      $N73=$add85;
      var $68=$K70;
      var $69=$Y68;
      var $shr86=$69 >>> (($68)>>>0);
      $Y68=$shr86;
      var $70=$Y68;
      var $shr87=$70 >>> 1;
      var $and88=$shr87 & 1;
      $K70=$and88;
      var $71=$N73;
      var $add89=((($71)+($and88))|0);
      $N73=$add89;
      var $72=$K70;
      var $73=$Y68;
      var $shr90=$73 >>> (($72)>>>0);
      $Y68=$shr90;
      var $74=$N73;
      var $75=$Y68;
      var $add91=((($74)+($75))|0);
      $i=$add91;
      var $76=$i;
      var $77=$m_addr;
      var $treebins92=(($77+304)|0);
      var $arrayidx93=(($treebins92+($76<<2))|0);
      var $78=HEAP32[(($arrayidx93)>>2)];
      $t=$78;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $79=$t;
      var $cmp96=(($79)|0)!=0;
      if ($cmp96) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $80=$t;
      var $head98=(($80+4)|0);
      var $81=HEAP32[(($head98)>>2)];
      var $and99=$81 & -8;
      var $82=$nb_addr;
      var $sub100=((($and99)-($82))|0);
      $trem97=$sub100;
      var $83=$trem97;
      var $84=$rsize;
      var $cmp101=(($83)>>>0) < (($84)>>>0);
      if ($cmp101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $85=$trem97;
      $rsize=$85;
      var $86=$t;
      $v=$86;
      label = 33; break;
    case 33: 
      var $87=$t;
      var $child104=(($87+16)|0);
      var $arrayidx105=(($child104)|0);
      var $88=HEAP32[(($arrayidx105)>>2)];
      var $cmp106=(($88)|0)!=0;
      if ($cmp106) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $89=$t;
      var $child108=(($89+16)|0);
      var $arrayidx109=(($child108)|0);
      var $90=HEAP32[(($arrayidx109)>>2)];
      var $cond114 = $90;label = 36; break;
    case 35: 
      var $91=$t;
      var $child111=(($91+16)|0);
      var $arrayidx112=(($child111+4)|0);
      var $92=HEAP32[(($arrayidx112)>>2)];
      var $cond114 = $92;label = 36; break;
    case 36: 
      var $cond114;
      $t=$cond114;
      label = 30; break;
    case 37: 
      var $93=$v;
      var $cmp115=(($93)|0)!=0;
      if ($cmp115) { label = 38; break; } else { label = 127; break; }
    case 38: 
      var $94=$rsize;
      var $95=$m_addr;
      var $dvsize=(($95+8)|0);
      var $96=HEAP32[(($dvsize)>>2)];
      var $97=$nb_addr;
      var $sub117=((($96)-($97))|0);
      var $cmp118=(($94)>>>0) < (($sub117)>>>0);
      if ($cmp118) { label = 39; break; } else { label = 127; break; }
    case 39: 
      var $98=$v;
      var $99=$98;
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp120=(($99)>>>0) >= (($101)>>>0);
      var $conv=(($cmp120)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 40; break; } else { label = 126; break; }
    case 40: 
      var $102=$v;
      var $103=$102;
      var $104=$nb_addr;
      var $add_ptr=(($103+$104)|0);
      var $105=$add_ptr;
      $r=$105;
      var $106=$v;
      var $107=$106;
      var $108=$r;
      var $109=$108;
      var $cmp122=(($107)>>>0) < (($109)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if ($tobool125) { label = 41; break; } else { label = 125; break; }
    case 41: 
      var $110=$v;
      var $parent=(($110+24)|0);
      var $111=HEAP32[(($parent)>>2)];
      $XP=$111;
      var $112=$v;
      var $bk=(($112+12)|0);
      var $113=HEAP32[(($bk)>>2)];
      var $114=$v;
      var $cmp127=(($113)|0)!=(($114)|0);
      if ($cmp127) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $115=$v;
      var $fd=(($115+8)|0);
      var $116=HEAP32[(($fd)>>2)];
      $F=$116;
      var $117=$v;
      var $bk130=(($117+12)|0);
      var $118=HEAP32[(($bk130)>>2)];
      $R=$118;
      var $119=$F;
      var $120=$119;
      var $121=$m_addr;
      var $least_addr131=(($121+16)|0);
      var $122=HEAP32[(($least_addr131)>>2)];
      var $cmp132=(($120)>>>0) >= (($122)>>>0);
      var $conv133=(($cmp132)&1);
      var $expval134=($conv133);
      var $tobool135=(($expval134)|0)!=0;
      if ($tobool135) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $123=$R;
      var $124=$F;
      var $bk137=(($124+12)|0);
      HEAP32[(($bk137)>>2)]=$123;
      var $125=$F;
      var $126=$R;
      var $fd138=(($126+8)|0);
      HEAP32[(($fd138)>>2)]=$125;
      label = 45; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!"
    case 45: 
      label = 58; break;
    case 46: 
      var $127=$v;
      var $child142=(($127+16)|0);
      var $arrayidx143=(($child142+4)|0);
      $RP=$arrayidx143;
      var $128=HEAP32[(($arrayidx143)>>2)];
      $R=$128;
      var $cmp144=(($128)|0)!=0;
      if ($cmp144) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $129=$v;
      var $child146=(($129+16)|0);
      var $arrayidx147=(($child146)|0);
      $RP=$arrayidx147;
      var $130=HEAP32[(($arrayidx147)>>2)];
      $R=$130;
      var $cmp148=(($130)|0)!=0;
      if ($cmp148) { label = 48; break; } else { label = 57; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $131=$R;
      var $child152=(($131+16)|0);
      var $arrayidx153=(($child152+4)|0);
      $CP=$arrayidx153;
      var $132=HEAP32[(($arrayidx153)>>2)];
      var $cmp154=(($132)|0)!=0;
      if ($cmp154) { var $135 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $133=$R;
      var $child156=(($133+16)|0);
      var $arrayidx157=(($child156)|0);
      $CP=$arrayidx157;
      var $134=HEAP32[(($arrayidx157)>>2)];
      var $cmp158=(($134)|0)!=0;
      var $135 = $cmp158;label = 51; break;
    case 51: 
      var $135;
      if ($135) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $136=$CP;
      $RP=$136;
      var $137=HEAP32[(($136)>>2)];
      $R=$137;
      label = 49; break;
    case 53: 
      var $138=$RP;
      var $139=$138;
      var $140=$m_addr;
      var $least_addr162=(($140+16)|0);
      var $141=HEAP32[(($least_addr162)>>2)];
      var $cmp163=(($139)>>>0) >= (($141)>>>0);
      var $conv164=(($cmp163)&1);
      var $expval165=($conv164);
      var $tobool166=(($expval165)|0)!=0;
      if ($tobool166) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $142=$RP;
      HEAP32[(($142)>>2)]=0;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $143=$XP;
      var $cmp172=(($143)|0)!=0;
      if ($cmp172) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $144=$v;
      var $index=(($144+28)|0);
      var $145=HEAP32[(($index)>>2)];
      var $146=$m_addr;
      var $treebins175=(($146+304)|0);
      var $arrayidx176=(($treebins175+($145<<2))|0);
      $H=$arrayidx176;
      var $147=$v;
      var $148=$H;
      var $149=HEAP32[(($148)>>2)];
      var $cmp177=(($147)|0)==(($149)|0);
      if ($cmp177) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $150=$R;
      var $151=$H;
      HEAP32[(($151)>>2)]=$150;
      var $cmp180=(($150)|0)==0;
      if ($cmp180) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $152=$v;
      var $index183=(($152+28)|0);
      var $153=HEAP32[(($index183)>>2)];
      var $shl184=1 << $153;
      var $neg=$shl184 ^ -1;
      var $154=$m_addr;
      var $treemap185=(($154+4)|0);
      var $155=HEAP32[(($treemap185)>>2)];
      var $and186=$155 & $neg;
      HEAP32[(($treemap185)>>2)]=$and186;
      label = 62; break;
    case 62: 
      label = 70; break;
    case 63: 
      var $156=$XP;
      var $157=$156;
      var $158=$m_addr;
      var $least_addr189=(($158+16)|0);
      var $159=HEAP32[(($least_addr189)>>2)];
      var $cmp190=(($157)>>>0) >= (($159)>>>0);
      var $conv191=(($cmp190)&1);
      var $expval192=($conv191);
      var $tobool193=(($expval192)|0)!=0;
      if ($tobool193) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $160=$XP;
      var $child195=(($160+16)|0);
      var $arrayidx196=(($child195)|0);
      var $161=HEAP32[(($arrayidx196)>>2)];
      var $162=$v;
      var $cmp197=(($161)|0)==(($162)|0);
      if ($cmp197) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $163=$R;
      var $164=$XP;
      var $child200=(($164+16)|0);
      var $arrayidx201=(($child200)|0);
      HEAP32[(($arrayidx201)>>2)]=$163;
      label = 67; break;
    case 66: 
      var $165=$R;
      var $166=$XP;
      var $child203=(($166+16)|0);
      var $arrayidx204=(($child203+4)|0);
      HEAP32[(($arrayidx204)>>2)]=$165;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      var $167=$R;
      var $cmp209=(($167)|0)!=0;
      if ($cmp209) { label = 71; break; } else { label = 85; break; }
    case 71: 
      var $168=$R;
      var $169=$168;
      var $170=$m_addr;
      var $least_addr212=(($170+16)|0);
      var $171=HEAP32[(($least_addr212)>>2)];
      var $cmp213=(($169)>>>0) >= (($171)>>>0);
      var $conv214=(($cmp213)&1);
      var $expval215=($conv214);
      var $tobool216=(($expval215)|0)!=0;
      if ($tobool216) { label = 72; break; } else { label = 83; break; }
    case 72: 
      var $172=$XP;
      var $173=$R;
      var $parent218=(($173+24)|0);
      HEAP32[(($parent218)>>2)]=$172;
      var $174=$v;
      var $child219=(($174+16)|0);
      var $arrayidx220=(($child219)|0);
      var $175=HEAP32[(($arrayidx220)>>2)];
      $C0=$175;
      var $cmp221=(($175)|0)!=0;
      if ($cmp221) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $176=$C0;
      var $177=$176;
      var $178=$m_addr;
      var $least_addr224=(($178+16)|0);
      var $179=HEAP32[(($least_addr224)>>2)];
      var $cmp225=(($177)>>>0) >= (($179)>>>0);
      var $conv226=(($cmp225)&1);
      var $expval227=($conv226);
      var $tobool228=(($expval227)|0)!=0;
      if ($tobool228) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $180=$C0;
      var $181=$R;
      var $child230=(($181+16)|0);
      var $arrayidx231=(($child230)|0);
      HEAP32[(($arrayidx231)>>2)]=$180;
      var $182=$R;
      var $183=$C0;
      var $parent232=(($183+24)|0);
      HEAP32[(($parent232)>>2)]=$182;
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!"
    case 76: 
      label = 77; break;
    case 77: 
      var $184=$v;
      var $child236=(($184+16)|0);
      var $arrayidx237=(($child236+4)|0);
      var $185=HEAP32[(($arrayidx237)>>2)];
      $C1=$185;
      var $cmp238=(($185)|0)!=0;
      if ($cmp238) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $186=$C1;
      var $187=$186;
      var $188=$m_addr;
      var $least_addr241=(($188+16)|0);
      var $189=HEAP32[(($least_addr241)>>2)];
      var $cmp242=(($187)>>>0) >= (($189)>>>0);
      var $conv243=(($cmp242)&1);
      var $expval244=($conv243);
      var $tobool245=(($expval244)|0)!=0;
      if ($tobool245) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $190=$C1;
      var $191=$R;
      var $child247=(($191+16)|0);
      var $arrayidx248=(($child247+4)|0);
      HEAP32[(($arrayidx248)>>2)]=$190;
      var $192=$R;
      var $193=$C1;
      var $parent249=(($193+24)|0);
      HEAP32[(($parent249)>>2)]=$192;
      label = 81; break;
    case 80: 
      _abort();
      throw "Reached an unreachable!"
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!"
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $194=$rsize;
      var $cmp257=(($194)>>>0) < 16;
      if ($cmp257) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $195=$rsize;
      var $196=$nb_addr;
      var $add260=((($195)+($196))|0);
      var $or261=$add260 | 1;
      var $or262=$or261 | 2;
      var $197=$v;
      var $head263=(($197+4)|0);
      HEAP32[(($head263)>>2)]=$or262;
      var $198=$v;
      var $199=$198;
      var $200=$rsize;
      var $201=$nb_addr;
      var $add264=((($200)+($201))|0);
      var $add_ptr265=(($199+$add264)|0);
      var $202=$add_ptr265;
      var $head266=(($202+4)|0);
      var $203=HEAP32[(($head266)>>2)];
      var $or267=$203 | 1;
      HEAP32[(($head266)>>2)]=$or267;
      label = 124; break;
    case 88: 
      var $204=$nb_addr;
      var $or269=$204 | 1;
      var $or270=$or269 | 2;
      var $205=$v;
      var $head271=(($205+4)|0);
      HEAP32[(($head271)>>2)]=$or270;
      var $206=$rsize;
      var $or272=$206 | 1;
      var $207=$r;
      var $head273=(($207+4)|0);
      HEAP32[(($head273)>>2)]=$or272;
      var $208=$rsize;
      var $209=$r;
      var $210=$209;
      var $211=$rsize;
      var $add_ptr274=(($210+$211)|0);
      var $212=$add_ptr274;
      var $prev_foot=(($212)|0);
      HEAP32[(($prev_foot)>>2)]=$208;
      var $213=$rsize;
      var $shr275=$213 >>> 3;
      var $cmp276=(($shr275)>>>0) < 32;
      if ($cmp276) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $214=$rsize;
      var $shr279=$214 >>> 3;
      $I=$shr279;
      var $215=$I;
      var $shl280=$215 << 1;
      var $216=$m_addr;
      var $smallbins=(($216+40)|0);
      var $arrayidx281=(($smallbins+($shl280<<2))|0);
      var $217=$arrayidx281;
      var $218=$217;
      $B=$218;
      var $219=$B;
      $F282=$219;
      var $220=$m_addr;
      var $smallmap=(($220)|0);
      var $221=HEAP32[(($smallmap)>>2)];
      var $222=$I;
      var $shl283=1 << $222;
      var $and284=$221 & $shl283;
      var $tobool285=(($and284)|0)!=0;
      if ($tobool285) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $223=$I;
      var $shl287=1 << $223;
      var $224=$m_addr;
      var $smallmap288=(($224)|0);
      var $225=HEAP32[(($smallmap288)>>2)];
      var $or289=$225 | $shl287;
      HEAP32[(($smallmap288)>>2)]=$or289;
      label = 95; break;
    case 91: 
      var $226=$B;
      var $fd291=(($226+8)|0);
      var $227=HEAP32[(($fd291)>>2)];
      var $228=$227;
      var $229=$m_addr;
      var $least_addr292=(($229+16)|0);
      var $230=HEAP32[(($least_addr292)>>2)];
      var $cmp293=(($228)>>>0) >= (($230)>>>0);
      var $conv294=(($cmp293)&1);
      var $expval295=($conv294);
      var $tobool296=(($expval295)|0)!=0;
      if ($tobool296) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $231=$B;
      var $fd298=(($231+8)|0);
      var $232=HEAP32[(($fd298)>>2)];
      $F282=$232;
      label = 94; break;
    case 93: 
      _abort();
      throw "Reached an unreachable!"
    case 94: 
      label = 95; break;
    case 95: 
      var $233=$r;
      var $234=$B;
      var $fd302=(($234+8)|0);
      HEAP32[(($fd302)>>2)]=$233;
      var $235=$r;
      var $236=$F282;
      var $bk303=(($236+12)|0);
      HEAP32[(($bk303)>>2)]=$235;
      var $237=$F282;
      var $238=$r;
      var $fd304=(($238+8)|0);
      HEAP32[(($fd304)>>2)]=$237;
      var $239=$B;
      var $240=$r;
      var $bk305=(($240+12)|0);
      HEAP32[(($bk305)>>2)]=$239;
      label = 123; break;
    case 96: 
      var $241=$r;
      var $242=$241;
      $TP=$242;
      var $243=$rsize;
      var $shr310=$243 >>> 8;
      $X309=$shr310;
      var $244=$X309;
      var $cmp311=(($244)|0)==0;
      if ($cmp311) { label = 97; break; } else { label = 98; break; }
    case 97: 
      $I308=0;
      label = 102; break;
    case 98: 
      var $245=$X309;
      var $cmp315=(($245)>>>0) > 65535;
      if ($cmp315) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I308=31;
      label = 101; break;
    case 100: 
      var $246=$X309;
      $Y319=$246;
      var $247=$Y319;
      var $sub321=((($247)-(256))|0);
      var $shr322=$sub321 >>> 16;
      var $and323=$shr322 & 8;
      $N320=$and323;
      var $248=$N320;
      var $249=$Y319;
      var $shl325=$249 << $248;
      $Y319=$shl325;
      var $sub326=((($shl325)-(4096))|0);
      var $shr327=$sub326 >>> 16;
      var $and328=$shr327 & 4;
      $K324=$and328;
      var $250=$K324;
      var $251=$N320;
      var $add329=((($251)+($250))|0);
      $N320=$add329;
      var $252=$K324;
      var $253=$Y319;
      var $shl330=$253 << $252;
      $Y319=$shl330;
      var $sub331=((($shl330)-(16384))|0);
      var $shr332=$sub331 >>> 16;
      var $and333=$shr332 & 2;
      $K324=$and333;
      var $254=$N320;
      var $add334=((($254)+($and333))|0);
      $N320=$add334;
      var $255=$N320;
      var $sub335=(((14)-($255))|0);
      var $256=$K324;
      var $257=$Y319;
      var $shl336=$257 << $256;
      $Y319=$shl336;
      var $shr337=$shl336 >>> 15;
      var $add338=((($sub335)+($shr337))|0);
      $K324=$add338;
      var $258=$K324;
      var $shl339=$258 << 1;
      var $259=$rsize;
      var $260=$K324;
      var $add340=((($260)+(7))|0);
      var $shr341=$259 >>> (($add340)>>>0);
      var $and342=$shr341 & 1;
      var $add343=((($shl339)+($and342))|0);
      $I308=$add343;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $261=$I308;
      var $262=$m_addr;
      var $treebins346=(($262+304)|0);
      var $arrayidx347=(($treebins346+($261<<2))|0);
      $H307=$arrayidx347;
      var $263=$I308;
      var $264=$TP;
      var $index348=(($264+28)|0);
      HEAP32[(($index348)>>2)]=$263;
      var $265=$TP;
      var $child349=(($265+16)|0);
      var $arrayidx350=(($child349+4)|0);
      HEAP32[(($arrayidx350)>>2)]=0;
      var $266=$TP;
      var $child351=(($266+16)|0);
      var $arrayidx352=(($child351)|0);
      HEAP32[(($arrayidx352)>>2)]=0;
      var $267=$m_addr;
      var $treemap353=(($267+4)|0);
      var $268=HEAP32[(($treemap353)>>2)];
      var $269=$I308;
      var $shl354=1 << $269;
      var $and355=$268 & $shl354;
      var $tobool356=(($and355)|0)!=0;
      if ($tobool356) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $270=$I308;
      var $shl358=1 << $270;
      var $271=$m_addr;
      var $treemap359=(($271+4)|0);
      var $272=HEAP32[(($treemap359)>>2)];
      var $or360=$272 | $shl358;
      HEAP32[(($treemap359)>>2)]=$or360;
      var $273=$TP;
      var $274=$H307;
      HEAP32[(($274)>>2)]=$273;
      var $275=$H307;
      var $276=$275;
      var $277=$TP;
      var $parent361=(($277+24)|0);
      HEAP32[(($parent361)>>2)]=$276;
      var $278=$TP;
      var $279=$TP;
      var $bk362=(($279+12)|0);
      HEAP32[(($bk362)>>2)]=$278;
      var $280=$TP;
      var $fd363=(($280+8)|0);
      HEAP32[(($fd363)>>2)]=$278;
      label = 122; break;
    case 104: 
      var $281=$H307;
      var $282=HEAP32[(($281)>>2)];
      $T=$282;
      var $283=$rsize;
      var $284=$I308;
      var $cmp366=(($284)|0)==31;
      if ($cmp366) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $cond375 = 0;label = 107; break;
    case 106: 
      var $285=$I308;
      var $shr370=$285 >>> 1;
      var $add371=((($shr370)+(8))|0);
      var $sub372=((($add371)-(2))|0);
      var $sub373=(((31)-($sub372))|0);
      var $cond375 = $sub373;label = 107; break;
    case 107: 
      var $cond375;
      var $shl376=$283 << $cond375;
      $K365=$shl376;
      label = 108; break;
    case 108: 
      var $286=$T;
      var $head378=(($286+4)|0);
      var $287=HEAP32[(($head378)>>2)];
      var $and379=$287 & -8;
      var $288=$rsize;
      var $cmp380=(($and379)|0)!=(($288)|0);
      if ($cmp380) { label = 109; break; } else { label = 115; break; }
    case 109: 
      var $289=$K365;
      var $shr383=$289 >>> 31;
      var $and384=$shr383 & 1;
      var $290=$T;
      var $child385=(($290+16)|0);
      var $arrayidx386=(($child385+($and384<<2))|0);
      $C=$arrayidx386;
      var $291=$K365;
      var $shl387=$291 << 1;
      $K365=$shl387;
      var $292=$C;
      var $293=HEAP32[(($292)>>2)];
      var $cmp388=(($293)|0)!=0;
      if ($cmp388) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $294=$C;
      var $295=HEAP32[(($294)>>2)];
      $T=$295;
      label = 114; break;
    case 111: 
      var $296=$C;
      var $297=$296;
      var $298=$m_addr;
      var $least_addr392=(($298+16)|0);
      var $299=HEAP32[(($least_addr392)>>2)];
      var $cmp393=(($297)>>>0) >= (($299)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $300=$TP;
      var $301=$C;
      HEAP32[(($301)>>2)]=$300;
      var $302=$T;
      var $303=$TP;
      var $parent398=(($303+24)|0);
      HEAP32[(($parent398)>>2)]=$302;
      var $304=$TP;
      var $305=$TP;
      var $bk399=(($305+12)|0);
      HEAP32[(($bk399)>>2)]=$304;
      var $306=$TP;
      var $fd400=(($306+8)|0);
      HEAP32[(($fd400)>>2)]=$304;
      label = 121; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!"
    case 114: 
      label = 120; break;
    case 115: 
      var $307=$T;
      var $fd405=(($307+8)|0);
      var $308=HEAP32[(($fd405)>>2)];
      $F404=$308;
      var $309=$T;
      var $310=$309;
      var $311=$m_addr;
      var $least_addr406=(($311+16)|0);
      var $312=HEAP32[(($least_addr406)>>2)];
      var $cmp407=(($310)>>>0) >= (($312)>>>0);
      if ($cmp407) { label = 116; break; } else { var $317 = 0;label = 117; break; }
    case 116: 
      var $313=$F404;
      var $314=$313;
      var $315=$m_addr;
      var $least_addr409=(($315+16)|0);
      var $316=HEAP32[(($least_addr409)>>2)];
      var $cmp410=(($314)>>>0) >= (($316)>>>0);
      var $317 = $cmp410;label = 117; break;
    case 117: 
      var $317;
      var $land_ext=(($317)&1);
      var $expval412=($land_ext);
      var $tobool413=(($expval412)|0)!=0;
      if ($tobool413) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $318=$TP;
      var $319=$F404;
      var $bk415=(($319+12)|0);
      HEAP32[(($bk415)>>2)]=$318;
      var $320=$T;
      var $fd416=(($320+8)|0);
      HEAP32[(($fd416)>>2)]=$318;
      var $321=$F404;
      var $322=$TP;
      var $fd417=(($322+8)|0);
      HEAP32[(($fd417)>>2)]=$321;
      var $323=$T;
      var $324=$TP;
      var $bk418=(($324+12)|0);
      HEAP32[(($bk418)>>2)]=$323;
      var $325=$TP;
      var $parent419=(($325+24)|0);
      HEAP32[(($parent419)>>2)]=0;
      label = 121; break;
    case 119: 
      _abort();
      throw "Reached an unreachable!"
    case 120: 
      label = 108; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $326=$v;
      var $327=$326;
      var $add_ptr426=(($327+8)|0);
      $retval=$add_ptr426;
      label = 128; break;
    case 125: 
      label = 126; break;
    case 126: 
      _abort();
      throw "Reached an unreachable!"
    case 127: 
      $retval=0;
      label = 128; break;
    case 128: 
      var $328=$retval;

      return $328;
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize97;
      var $br106;
      var $end107;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$m_addr;
      var $mflags=(($2+440)|0);
      var $3=HEAP32[(($mflags)>>2)];
      var $and=$3 & 0;
      var $tobool1=(($and)|0)!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $4=$nb_addr;
      var $5=HEAP32[((((5292324)|0))>>2)];
      var $cmp2=(($4)>>>0) >= (($5)>>>0);
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $cmp4=(($7)|0)!=0;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $8=$m_addr;
      var $9=$nb_addr;
      var $call5=_mmap_alloc($8, $9);
      $mem=$call5;
      var $10=$mem;
      var $cmp6=(($10)|0)!=0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$mem;
      $retval=$11;
      label = 93; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $12=$m_addr;
      var $mflags9=(($12+440)|0);
      var $13=HEAP32[(($mflags9)>>2)];
      var $and10=$13 & 4;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { label = 43; break; } else { label = 11; break; }
    case 11: 
      $br=-1;
      var $14=$m_addr;
      var $top=(($14+24)|0);
      var $15=HEAP32[(($top)>>2)];
      var $cmp13=(($15)|0)==0;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $cond = 0;label = 14; break;
    case 13: 
      var $16=$m_addr;
      var $17=$m_addr;
      var $top14=(($17+24)|0);
      var $18=HEAP32[(($top14)>>2)];
      var $19=$18;
      var $call15=_segment_holding($16, $19);
      var $cond = $call15;label = 14; break;
    case 14: 
      var $cond;
      $ss=$cond;
      $asize=0;
      var $20=$ss;
      var $cmp16=(($20)|0)==0;
      if ($cmp16) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $call18=_sbrk(0);
      $base=$call18;
      var $21=$base;
      var $cmp19=(($21)|0)!=-1;
      if ($cmp19) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $22=$nb_addr;
      var $add=((($22)+(48))|0);
      var $23=HEAP32[((((5292320)|0))>>2)];
      var $sub=((($23)-(1))|0);
      var $add21=((($add)+($sub))|0);
      var $24=HEAP32[((((5292320)|0))>>2)];
      var $sub22=((($24)-(1))|0);
      var $neg=$sub22 ^ -1;
      var $and23=$add21 & $neg;
      $asize=$and23;
      var $25=$base;
      var $26=$25;
      var $27=HEAP32[((((5292316)|0))>>2)];
      var $sub24=((($27)-(1))|0);
      var $and25=$26 & $sub24;
      var $cmp26=(($and25)|0)==0;
      if ($cmp26) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $28=$base;
      var $29=$28;
      var $30=HEAP32[((((5292316)|0))>>2)];
      var $sub28=((($30)-(1))|0);
      var $add29=((($29)+($sub28))|0);
      var $31=HEAP32[((((5292316)|0))>>2)];
      var $sub30=((($31)-(1))|0);
      var $neg31=$sub30 ^ -1;
      var $and32=$add29 & $neg31;
      var $32=$base;
      var $33=$32;
      var $sub33=((($and32)-($33))|0);
      var $34=$asize;
      var $add34=((($34)+($sub33))|0);
      $asize=$add34;
      label = 18; break;
    case 18: 
      var $35=$asize;
      var $cmp36=(($35)>>>0) < 2147483647;
      if ($cmp36) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $36=$asize;
      var $call38=_sbrk($36);
      $br=$call38;
      var $37=$base;
      var $cmp39=(($call38)|0)==(($37)|0);
      if ($cmp39) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$base;
      $tbase=$38;
      var $39=$asize;
      $tsize=$39;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 27; break;
    case 23: 
      var $40=$nb_addr;
      var $41=$m_addr;
      var $topsize43=(($41+12)|0);
      var $42=HEAP32[(($topsize43)>>2)];
      var $sub44=((($40)-($42))|0);
      var $add45=((($sub44)+(48))|0);
      var $43=HEAP32[((((5292320)|0))>>2)];
      var $sub46=((($43)-(1))|0);
      var $add47=((($add45)+($sub46))|0);
      var $44=HEAP32[((((5292320)|0))>>2)];
      var $sub48=((($44)-(1))|0);
      var $neg49=$sub48 ^ -1;
      var $and50=$add47 & $neg49;
      $asize=$and50;
      var $45=$asize;
      var $cmp51=(($45)>>>0) < 2147483647;
      if ($cmp51) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $46=$asize;
      var $call53=_sbrk($46);
      $br=$call53;
      var $47=$ss;
      var $base54=(($47)|0);
      var $48=HEAP32[(($base54)>>2)];
      var $49=$ss;
      var $size=(($49+4)|0);
      var $50=HEAP32[(($size)>>2)];
      var $add_ptr=(($48+$50)|0);
      var $cmp55=(($call53)|0)==(($add_ptr)|0);
      if ($cmp55) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $51=$br;
      $tbase=$51;
      var $52=$asize;
      $tsize=$52;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $53=$tbase;
      var $cmp59=(($53)|0)==-1;
      if ($cmp59) { label = 28; break; } else { label = 42; break; }
    case 28: 
      var $54=$br;
      var $cmp61=(($54)|0)!=-1;
      if ($cmp61) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $55=$asize;
      var $cmp63=(($55)>>>0) < 2147483647;
      if ($cmp63) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $56=$asize;
      var $57=$nb_addr;
      var $add65=((($57)+(48))|0);
      var $cmp66=(($56)>>>0) < (($add65)>>>0);
      if ($cmp66) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $58=$nb_addr;
      var $add68=((($58)+(48))|0);
      var $59=$asize;
      var $sub69=((($add68)-($59))|0);
      var $60=HEAP32[((((5292320)|0))>>2)];
      var $sub70=((($60)-(1))|0);
      var $add71=((($sub69)+($sub70))|0);
      var $61=HEAP32[((((5292320)|0))>>2)];
      var $sub72=((($61)-(1))|0);
      var $neg73=$sub72 ^ -1;
      var $and74=$add71 & $neg73;
      $esize=$and74;
      var $62=$esize;
      var $cmp75=(($62)>>>0) < 2147483647;
      if ($cmp75) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $63=$esize;
      var $call77=_sbrk($63);
      $end=$call77;
      var $64=$end;
      var $cmp78=(($64)|0)!=-1;
      if ($cmp78) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $65=$esize;
      var $66=$asize;
      var $add80=((($66)+($65))|0);
      $asize=$add80;
      label = 35; break;
    case 34: 
      var $67=$asize;
      var $sub82=(((-$67))|0);
      var $call83=_sbrk($sub82);
      $br=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $68=$br;
      var $cmp88=(($68)|0)!=-1;
      if ($cmp88) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $69=$br;
      $tbase=$69;
      var $70=$asize;
      $tsize=$70;
      label = 41; break;
    case 40: 
      var $71=$m_addr;
      var $mflags91=(($71+440)|0);
      var $72=HEAP32[(($mflags91)>>2)];
      var $or=$72 | 4;
      HEAP32[(($mflags91)>>2)]=$or;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $73=$tbase;
      var $cmp95=(($73)|0)==-1;
      if ($cmp95) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $74=$nb_addr;
      var $add98=((($74)+(48))|0);
      var $75=HEAP32[((((5292320)|0))>>2)];
      var $sub99=((($75)-(1))|0);
      var $add100=((($add98)+($sub99))|0);
      var $76=HEAP32[((((5292320)|0))>>2)];
      var $sub101=((($76)-(1))|0);
      var $neg102=$sub101 ^ -1;
      var $and103=$add100 & $neg102;
      $asize97=$and103;
      var $77=$asize97;
      var $cmp104=(($77)>>>0) < 2147483647;
      if ($cmp104) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $br106=-1;
      $end107=-1;
      var $78=$asize97;
      var $call108=_sbrk($78);
      $br106=$call108;
      var $call109=_sbrk(0);
      $end107=$call109;
      var $79=$br106;
      var $cmp110=(($79)|0)!=-1;
      if ($cmp110) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $80=$end107;
      var $cmp112=(($80)|0)!=-1;
      if ($cmp112) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $81=$br106;
      var $82=$end107;
      var $cmp114=(($81)>>>0) < (($82)>>>0);
      if ($cmp114) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $83=$end107;
      var $84=$br106;
      var $sub_ptr_lhs_cast=$83;
      var $sub_ptr_rhs_cast=$84;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $ssize=$sub_ptr_sub;
      var $85=$ssize;
      var $86=$nb_addr;
      var $add116=((($86)+(40))|0);
      var $cmp117=(($85)>>>0) > (($add116)>>>0);
      if ($cmp117) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $87=$br106;
      $tbase=$87;
      var $88=$ssize;
      $tsize=$88;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $89=$tbase;
      var $cmp123=(($89)|0)!=-1;
      if ($cmp123) { label = 54; break; } else { label = 92; break; }
    case 54: 
      var $90=$tsize;
      var $91=$m_addr;
      var $footprint=(($91+432)|0);
      var $92=HEAP32[(($footprint)>>2)];
      var $add125=((($92)+($90))|0);
      HEAP32[(($footprint)>>2)]=$add125;
      var $93=$m_addr;
      var $max_footprint=(($93+436)|0);
      var $94=HEAP32[(($max_footprint)>>2)];
      var $cmp126=(($add125)>>>0) > (($94)>>>0);
      if ($cmp126) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $95=$m_addr;
      var $footprint128=(($95+432)|0);
      var $96=HEAP32[(($footprint128)>>2)];
      var $97=$m_addr;
      var $max_footprint129=(($97+436)|0);
      HEAP32[(($max_footprint129)>>2)]=$96;
      label = 56; break;
    case 56: 
      var $98=$m_addr;
      var $top131=(($98+24)|0);
      var $99=HEAP32[(($top131)>>2)];
      var $cmp132=(($99)|0)!=0;
      if ($cmp132) { label = 64; break; } else { label = 57; break; }
    case 57: 
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp134=(($101)|0)==0;
      if ($cmp134) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $102=$tbase;
      var $103=$m_addr;
      var $least_addr135=(($103+16)|0);
      var $104=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($102)>>>0) < (($104)>>>0);
      if ($cmp136) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $105=$tbase;
      var $106=$m_addr;
      var $least_addr138=(($106+16)|0);
      HEAP32[(($least_addr138)>>2)]=$105;
      label = 60; break;
    case 60: 
      var $107=$tbase;
      var $108=$m_addr;
      var $seg=(($108+444)|0);
      var $base140=(($seg)|0);
      HEAP32[(($base140)>>2)]=$107;
      var $109=$tsize;
      var $110=$m_addr;
      var $seg141=(($110+444)|0);
      var $size142=(($seg141+4)|0);
      HEAP32[(($size142)>>2)]=$109;
      var $111=$mmap_flag;
      var $112=$m_addr;
      var $seg143=(($112+444)|0);
      var $sflags=(($seg143+12)|0);
      HEAP32[(($sflags)>>2)]=$111;
      var $113=HEAP32[((((5292312)|0))>>2)];
      var $114=$m_addr;
      var $magic=(($114+36)|0);
      HEAP32[(($magic)>>2)]=$113;
      var $115=$m_addr;
      var $release_checks=(($115+32)|0);
      HEAP32[(($release_checks)>>2)]=-1;
      var $116=$m_addr;
      _init_bins($116);
      var $117=$m_addr;
      var $cmp144=(($117)|0)==5387700;
      if ($cmp144) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $118=$m_addr;
      var $119=$tbase;
      var $120=$119;
      var $121=$tsize;
      var $sub146=((($121)-(40))|0);
      _init_top($118, $120, $sub146);
      label = 63; break;
    case 62: 
      var $122=$m_addr;
      var $123=$122;
      var $add_ptr148=((($123)-(8))|0);
      var $124=$add_ptr148;
      var $125=$124;
      var $126=$m_addr;
      var $127=$126;
      var $add_ptr149=((($127)-(8))|0);
      var $128=$add_ptr149;
      var $head=(($128+4)|0);
      var $129=HEAP32[(($head)>>2)];
      var $and150=$129 & -8;
      var $add_ptr151=(($125+$and150)|0);
      var $130=$add_ptr151;
      $mn=$130;
      var $131=$m_addr;
      var $132=$mn;
      var $133=$tbase;
      var $134=$tsize;
      var $add_ptr152=(($133+$134)|0);
      var $135=$mn;
      var $136=$135;
      var $sub_ptr_lhs_cast153=$add_ptr152;
      var $sub_ptr_rhs_cast154=$136;
      var $sub_ptr_sub155=((($sub_ptr_lhs_cast153)-($sub_ptr_rhs_cast154))|0);
      var $sub156=((($sub_ptr_sub155)-(40))|0);
      _init_top($131, $132, $sub156);
      label = 63; break;
    case 63: 
      label = 89; break;
    case 64: 
      var $137=$m_addr;
      var $seg159=(($137+444)|0);
      $sp=$seg159;
      label = 65; break;
    case 65: 
      var $138=$sp;
      var $cmp160=(($138)|0)!=0;
      if ($cmp160) { label = 66; break; } else { var $144 = 0;label = 67; break; }
    case 66: 
      var $139=$tbase;
      var $140=$sp;
      var $base161=(($140)|0);
      var $141=HEAP32[(($base161)>>2)];
      var $142=$sp;
      var $size162=(($142+4)|0);
      var $143=HEAP32[(($size162)>>2)];
      var $add_ptr163=(($141+$143)|0);
      var $cmp164=(($139)|0)!=(($add_ptr163)|0);
      var $144 = $cmp164;label = 67; break;
    case 67: 
      var $144;
      if ($144) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $145=$sp;
      var $next=(($145+8)|0);
      var $146=HEAP32[(($next)>>2)];
      $sp=$146;
      label = 65; break;
    case 69: 
      var $147=$sp;
      var $cmp165=(($147)|0)!=0;
      if ($cmp165) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $148=$sp;
      var $sflags167=(($148+12)|0);
      var $149=HEAP32[(($sflags167)>>2)];
      var $and168=$149 & 8;
      var $tobool169=(($and168)|0)!=0;
      if ($tobool169) { label = 75; break; } else { label = 71; break; }
    case 71: 
      var $150=$sp;
      var $sflags171=(($150+12)|0);
      var $151=HEAP32[(($sflags171)>>2)];
      var $and172=$151 & 0;
      var $152=$mmap_flag;
      var $cmp173=(($and172)|0)==(($152)|0);
      if ($cmp173) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $153=$m_addr;
      var $top175=(($153+24)|0);
      var $154=HEAP32[(($top175)>>2)];
      var $155=$154;
      var $156=$sp;
      var $base176=(($156)|0);
      var $157=HEAP32[(($base176)>>2)];
      var $cmp177=(($155)>>>0) >= (($157)>>>0);
      if ($cmp177) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $158=$m_addr;
      var $top179=(($158+24)|0);
      var $159=HEAP32[(($top179)>>2)];
      var $160=$159;
      var $161=$sp;
      var $base180=(($161)|0);
      var $162=HEAP32[(($base180)>>2)];
      var $163=$sp;
      var $size181=(($163+4)|0);
      var $164=HEAP32[(($size181)>>2)];
      var $add_ptr182=(($162+$164)|0);
      var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0);
      if ($cmp183) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $165=$tsize;
      var $166=$sp;
      var $size185=(($166+4)|0);
      var $167=HEAP32[(($size185)>>2)];
      var $add186=((($167)+($165))|0);
      HEAP32[(($size185)>>2)]=$add186;
      var $168=$m_addr;
      var $169=$m_addr;
      var $top187=(($169+24)|0);
      var $170=HEAP32[(($top187)>>2)];
      var $171=$m_addr;
      var $topsize188=(($171+12)|0);
      var $172=HEAP32[(($topsize188)>>2)];
      var $173=$tsize;
      var $add189=((($172)+($173))|0);
      _init_top($168, $170, $add189);
      label = 88; break;
    case 75: 
      var $174=$tbase;
      var $175=$m_addr;
      var $least_addr191=(($175+16)|0);
      var $176=HEAP32[(($least_addr191)>>2)];
      var $cmp192=(($174)>>>0) < (($176)>>>0);
      if ($cmp192) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $177=$tbase;
      var $178=$m_addr;
      var $least_addr194=(($178+16)|0);
      HEAP32[(($least_addr194)>>2)]=$177;
      label = 77; break;
    case 77: 
      var $179=$m_addr;
      var $seg196=(($179+444)|0);
      $sp=$seg196;
      label = 78; break;
    case 78: 
      var $180=$sp;
      var $cmp198=(($180)|0)!=0;
      if ($cmp198) { label = 79; break; } else { var $185 = 0;label = 80; break; }
    case 79: 
      var $181=$sp;
      var $base200=(($181)|0);
      var $182=HEAP32[(($base200)>>2)];
      var $183=$tbase;
      var $184=$tsize;
      var $add_ptr201=(($183+$184)|0);
      var $cmp202=(($182)|0)!=(($add_ptr201)|0);
      var $185 = $cmp202;label = 80; break;
    case 80: 
      var $185;
      if ($185) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $186=$sp;
      var $next205=(($186+8)|0);
      var $187=HEAP32[(($next205)>>2)];
      $sp=$187;
      label = 78; break;
    case 82: 
      var $188=$sp;
      var $cmp207=(($188)|0)!=0;
      if ($cmp207) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $189=$sp;
      var $sflags209=(($189+12)|0);
      var $190=HEAP32[(($sflags209)>>2)];
      var $and210=$190 & 8;
      var $tobool211=(($and210)|0)!=0;
      if ($tobool211) { label = 86; break; } else { label = 84; break; }
    case 84: 
      var $191=$sp;
      var $sflags213=(($191+12)|0);
      var $192=HEAP32[(($sflags213)>>2)];
      var $and214=$192 & 0;
      var $193=$mmap_flag;
      var $cmp215=(($and214)|0)==(($193)|0);
      if ($cmp215) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $194=$sp;
      var $base217=(($194)|0);
      var $195=HEAP32[(($base217)>>2)];
      $oldbase=$195;
      var $196=$tbase;
      var $197=$sp;
      var $base218=(($197)|0);
      HEAP32[(($base218)>>2)]=$196;
      var $198=$tsize;
      var $199=$sp;
      var $size219=(($199+4)|0);
      var $200=HEAP32[(($size219)>>2)];
      var $add220=((($200)+($198))|0);
      HEAP32[(($size219)>>2)]=$add220;
      var $201=$m_addr;
      var $202=$tbase;
      var $203=$oldbase;
      var $204=$nb_addr;
      var $call221=_prepend_alloc($201, $202, $203, $204);
      $retval=$call221;
      label = 93; break;
    case 86: 
      var $205=$m_addr;
      var $206=$tbase;
      var $207=$tsize;
      var $208=$mmap_flag;
      _add_segment($205, $206, $207, $208);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $209=$nb_addr;
      var $210=$m_addr;
      var $topsize226=(($210+12)|0);
      var $211=HEAP32[(($topsize226)>>2)];
      var $cmp227=(($209)>>>0) < (($211)>>>0);
      if ($cmp227) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $212=$nb_addr;
      var $213=$m_addr;
      var $topsize229=(($213+12)|0);
      var $214=HEAP32[(($topsize229)>>2)];
      var $sub230=((($214)-($212))|0);
      HEAP32[(($topsize229)>>2)]=$sub230;
      $rsize=$sub230;
      var $215=$m_addr;
      var $top231=(($215+24)|0);
      var $216=HEAP32[(($top231)>>2)];
      $p=$216;
      var $217=$p;
      var $218=$217;
      var $219=$nb_addr;
      var $add_ptr232=(($218+$219)|0);
      var $220=$add_ptr232;
      var $221=$m_addr;
      var $top233=(($221+24)|0);
      HEAP32[(($top233)>>2)]=$220;
      $r=$220;
      var $222=$rsize;
      var $or234=$222 | 1;
      var $223=$r;
      var $head235=(($223+4)|0);
      HEAP32[(($head235)>>2)]=$or234;
      var $224=$nb_addr;
      var $or236=$224 | 1;
      var $or237=$or236 | 2;
      var $225=$p;
      var $head238=(($225+4)|0);
      HEAP32[(($head238)>>2)]=$or237;
      var $226=$p;
      var $227=$226;
      var $add_ptr239=(($227+8)|0);
      $retval=$add_ptr239;
      label = 93; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $call242=___errno_location();
      HEAP32[(($call242)>>2)]=12;
      $retval=0;
      label = 93; break;
    case 93: 
      var $228=$retval;

      return $228;
    default: assert(0, "bad label: " + label);
  }

}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $4=$3;
      var $5=HEAP32[((((5387716)|0))>>2)];
      var $cmp1=(($4)>>>0) >= (($5)>>>0);
      if ($cmp1) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$p;
      var $head=(($6+4)|0);
      var $7=HEAP32[(($head)>>2)];
      var $and=$7 & 3;
      var $cmp2=(($and)|0)!=1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $17=$p;
      var $prev_foot=(($17)|0);
      var $18=HEAP32[(($prev_foot)>>2)];
      $prevsize=$18;
      var $19=$p;
      var $head11=(($19+4)|0);
      var $20=HEAP32[(($head11)>>2)];
      var $and12=$20 & 3;
      var $cmp13=(($and12)|0)==0;
      if ($cmp13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$prevsize;
      var $add=((($21)+(16))|0);
      var $22=$psize;
      var $add15=((($22)+($add))|0);
      $psize=$add15;
      label = 196; break;
    case 9: 
      var $23=$p;
      var $24=$23;
      var $25=$prevsize;
      var $idx_neg=(((-$25))|0);
      var $add_ptr16=(($24+$idx_neg)|0);
      var $26=$add_ptr16;
      $prev=$26;
      var $27=$prevsize;
      var $28=$psize;
      var $add17=((($28)+($27))|0);
      $psize=$add17;
      var $29=$prev;
      $p=$29;
      var $30=$prev;
      var $31=$30;
      var $32=HEAP32[((((5387716)|0))>>2)];
      var $cmp18=(($31)>>>0) >= (($32)>>>0);
      var $conv=(($cmp18)&1);
      var $expval19=($conv);
      var $tobool20=(($expval19)|0)!=0;
      if ($tobool20) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $33=$p;
      var $34=HEAP32[((((5387720)|0))>>2)];
      var $cmp22=(($33)|0)!=(($34)|0);
      if ($cmp22) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $35=$prevsize;
      var $shr=$35 >>> 3;
      var $cmp25=(($shr)>>>0) < 32;
      if ($cmp25) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $36=$p;
      var $fd=(($36+8)|0);
      var $37=HEAP32[(($fd)>>2)];
      $F=$37;
      var $38=$p;
      var $bk=(($38+12)|0);
      var $39=HEAP32[(($bk)>>2)];
      $B=$39;
      var $40=$prevsize;
      var $shr28=$40 >>> 3;
      $I=$shr28;
      var $41=$F;
      var $42=$B;
      var $cmp29=(($41)|0)==(($42)|0);
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$I;
      var $shl=1 << $43;
      var $neg=$shl ^ -1;
      var $44=HEAP32[((((5387700)|0))>>2)];
      var $and32=$44 & $neg;
      HEAP32[((((5387700)|0))>>2)]=$and32;
      label = 23; break;
    case 14: 
      var $45=$F;
      var $46=$I;
      var $shl34=$46 << 1;
      var $arrayidx=((((5387740)|0)+($shl34<<2))|0);
      var $47=$arrayidx;
      var $48=$47;
      var $cmp35=(($45)|0)==(($48)|0);
      if ($cmp35) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $49=$F;
      var $50=$49;
      var $51=HEAP32[((((5387716)|0))>>2)];
      var $cmp37=(($50)>>>0) >= (($51)>>>0);
      if ($cmp37) { label = 16; break; } else { var $60 = 0;label = 19; break; }
    case 16: 
      var $52=$B;
      var $53=$I;
      var $shl40=$53 << 1;
      var $arrayidx41=((((5387740)|0)+($shl40<<2))|0);
      var $54=$arrayidx41;
      var $55=$54;
      var $cmp42=(($52)|0)==(($55)|0);
      if ($cmp42) { var $59 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $56=$B;
      var $57=$56;
      var $58=HEAP32[((((5387716)|0))>>2)];
      var $cmp44=(($57)>>>0) >= (($58)>>>0);
      var $59 = $cmp44;label = 18; break;
    case 18: 
      var $59;
      var $60 = $59;label = 19; break;
    case 19: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=($land_ext47);
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $61=$B;
      var $62=$F;
      var $bk51=(($62+12)|0);
      HEAP32[(($bk51)>>2)]=$61;
      var $63=$F;
      var $64=$B;
      var $fd52=(($64+8)|0);
      HEAP32[(($fd52)>>2)]=$63;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!"
    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $65=$p;
      var $66=$65;
      $TP=$66;
      var $67=$TP;
      var $parent=(($67+24)|0);
      var $68=HEAP32[(($parent)>>2)];
      $XP=$68;
      var $69=$TP;
      var $bk56=(($69+12)|0);
      var $70=HEAP32[(($bk56)>>2)];
      var $71=$TP;
      var $cmp57=(($70)|0)!=(($71)|0);
      if ($cmp57) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $72=$TP;
      var $fd61=(($72+8)|0);
      var $73=HEAP32[(($fd61)>>2)];
      $F60=$73;
      var $74=$TP;
      var $bk62=(($74+12)|0);
      var $75=HEAP32[(($bk62)>>2)];
      $R=$75;
      var $76=$F60;
      var $77=$76;
      var $78=HEAP32[((((5387716)|0))>>2)];
      var $cmp63=(($77)>>>0) >= (($78)>>>0);
      var $conv64=(($cmp63)&1);
      var $expval65=($conv64);
      var $tobool66=(($expval65)|0)!=0;
      if ($tobool66) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $79=$R;
      var $80=$F60;
      var $bk68=(($80+12)|0);
      HEAP32[(($bk68)>>2)]=$79;
      var $81=$F60;
      var $82=$R;
      var $fd69=(($82+8)|0);
      HEAP32[(($fd69)>>2)]=$81;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 41; break;
    case 29: 
      var $83=$TP;
      var $child=(($83+16)|0);
      var $arrayidx73=(($child+4)|0);
      $RP=$arrayidx73;
      var $84=HEAP32[(($arrayidx73)>>2)];
      $R=$84;
      var $cmp74=(($84)|0)!=0;
      if ($cmp74) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $85=$TP;
      var $child77=(($85+16)|0);
      var $arrayidx78=(($child77)|0);
      $RP=$arrayidx78;
      var $86=HEAP32[(($arrayidx78)>>2)];
      $R=$86;
      var $cmp79=(($86)|0)!=0;
      if ($cmp79) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $87=$R;
      var $child82=(($87+16)|0);
      var $arrayidx83=(($child82+4)|0);
      $CP=$arrayidx83;
      var $88=HEAP32[(($arrayidx83)>>2)];
      var $cmp84=(($88)|0)!=0;
      if ($cmp84) { var $91 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $89=$R;
      var $child87=(($89+16)|0);
      var $arrayidx88=(($child87)|0);
      $CP=$arrayidx88;
      var $90=HEAP32[(($arrayidx88)>>2)];
      var $cmp89=(($90)|0)!=0;
      var $91 = $cmp89;label = 34; break;
    case 34: 
      var $91;
      if ($91) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $92=$CP;
      $RP=$92;
      var $93=HEAP32[(($92)>>2)];
      $R=$93;
      label = 32; break;
    case 36: 
      var $94=$RP;
      var $95=$94;
      var $96=HEAP32[((((5387716)|0))>>2)];
      var $cmp92=(($95)>>>0) >= (($96)>>>0);
      var $conv93=(($cmp92)&1);
      var $expval94=($conv93);
      var $tobool95=(($expval94)|0)!=0;
      if ($tobool95) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $97=$RP;
      HEAP32[(($97)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $98=$XP;
      var $cmp101=(($98)|0)!=0;
      if ($cmp101) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $99=$TP;
      var $index=(($99+28)|0);
      var $100=HEAP32[(($index)>>2)];
      var $arrayidx104=((((5388004)|0)+($100<<2))|0);
      $H=$arrayidx104;
      var $101=$TP;
      var $102=$H;
      var $103=HEAP32[(($102)>>2)];
      var $cmp105=(($101)|0)==(($103)|0);
      if ($cmp105) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $104=$R;
      var $105=$H;
      HEAP32[(($105)>>2)]=$104;
      var $cmp108=(($104)|0)==0;
      if ($cmp108) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $106=$TP;
      var $index111=(($106+28)|0);
      var $107=HEAP32[(($index111)>>2)];
      var $shl112=1 << $107;
      var $neg113=$shl112 ^ -1;
      var $108=HEAP32[((((5387704)|0))>>2)];
      var $and114=$108 & $neg113;
      HEAP32[((((5387704)|0))>>2)]=$and114;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $109=$XP;
      var $110=$109;
      var $111=HEAP32[((((5387716)|0))>>2)];
      var $cmp117=(($110)>>>0) >= (($111)>>>0);
      var $conv118=(($cmp117)&1);
      var $expval119=($conv118);
      var $tobool120=(($expval119)|0)!=0;
      if ($tobool120) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $112=$XP;
      var $child122=(($112+16)|0);
      var $arrayidx123=(($child122)|0);
      var $113=HEAP32[(($arrayidx123)>>2)];
      var $114=$TP;
      var $cmp124=(($113)|0)==(($114)|0);
      if ($cmp124) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $115=$R;
      var $116=$XP;
      var $child127=(($116+16)|0);
      var $arrayidx128=(($child127)|0);
      HEAP32[(($arrayidx128)>>2)]=$115;
      label = 50; break;
    case 49: 
      var $117=$R;
      var $118=$XP;
      var $child130=(($118+16)|0);
      var $arrayidx131=(($child130+4)|0);
      HEAP32[(($arrayidx131)>>2)]=$117;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      var $119=$R;
      var $cmp136=(($119)|0)!=0;
      if ($cmp136) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $120=$R;
      var $121=$120;
      var $122=HEAP32[((((5387716)|0))>>2)];
      var $cmp139=(($121)>>>0) >= (($122)>>>0);
      var $conv140=(($cmp139)&1);
      var $expval141=($conv140);
      var $tobool142=(($expval141)|0)!=0;
      if ($tobool142) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $123=$XP;
      var $124=$R;
      var $parent144=(($124+24)|0);
      HEAP32[(($parent144)>>2)]=$123;
      var $125=$TP;
      var $child145=(($125+16)|0);
      var $arrayidx146=(($child145)|0);
      var $126=HEAP32[(($arrayidx146)>>2)];
      $C0=$126;
      var $cmp147=(($126)|0)!=0;
      if ($cmp147) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=$C0;
      var $128=$127;
      var $129=HEAP32[((((5387716)|0))>>2)];
      var $cmp150=(($128)>>>0) >= (($129)>>>0);
      var $conv151=(($cmp150)&1);
      var $expval152=($conv151);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $130=$C0;
      var $131=$R;
      var $child155=(($131+16)|0);
      var $arrayidx156=(($child155)|0);
      HEAP32[(($arrayidx156)>>2)]=$130;
      var $132=$R;
      var $133=$C0;
      var $parent157=(($133+24)|0);
      HEAP32[(($parent157)>>2)]=$132;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!"
    case 59: 
      label = 60; break;
    case 60: 
      var $134=$TP;
      var $child161=(($134+16)|0);
      var $arrayidx162=(($child161+4)|0);
      var $135=HEAP32[(($arrayidx162)>>2)];
      $C1=$135;
      var $cmp163=(($135)|0)!=0;
      if ($cmp163) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $136=$C1;
      var $137=$136;
      var $138=HEAP32[((((5387716)|0))>>2)];
      var $cmp166=(($137)>>>0) >= (($138)>>>0);
      var $conv167=(($cmp166)&1);
      var $expval168=($conv167);
      var $tobool169=(($expval168)|0)!=0;
      if ($tobool169) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $139=$C1;
      var $140=$R;
      var $child171=(($140+16)|0);
      var $arrayidx172=(($child171+4)|0);
      HEAP32[(($arrayidx172)>>2)]=$139;
      var $141=$R;
      var $142=$C1;
      var $parent173=(($142+24)|0);
      HEAP32[(($parent173)>>2)]=$141;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!"
    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $143=$next;
      var $head183=(($143+4)|0);
      var $144=HEAP32[(($head183)>>2)];
      var $and184=$144 & 3;
      var $cmp185=(($and184)|0)==3;
      if ($cmp185) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $145=$psize;
      HEAP32[((((5387708)|0))>>2)]=$145;
      var $146=$next;
      var $head188=(($146+4)|0);
      var $147=HEAP32[(($head188)>>2)];
      var $and189=$147 & -2;
      HEAP32[(($head188)>>2)]=$and189;
      var $148=$psize;
      var $or=$148 | 1;
      var $149=$p;
      var $head190=(($149+4)|0);
      HEAP32[(($head190)>>2)]=$or;
      var $150=$psize;
      var $151=$p;
      var $152=$151;
      var $153=$psize;
      var $add_ptr191=(($152+$153)|0);
      var $154=$add_ptr191;
      var $prev_foot192=(($154)|0);
      HEAP32[(($prev_foot192)>>2)]=$150;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $155=$p;
      var $156=$155;
      var $157=$next;
      var $158=$157;
      var $cmp199=(($156)>>>0) < (($158)>>>0);
      if ($cmp199) { label = 79; break; } else { var $161 = 0;label = 80; break; }
    case 79: 
      var $159=$next;
      var $head202=(($159+4)|0);
      var $160=HEAP32[(($head202)>>2)];
      var $and203=$160 & 1;
      var $tobool204=(($and203)|0)!=0;
      var $161 = $tobool204;label = 80; break;
    case 80: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=($land_ext206);
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $162=$next;
      var $head210=(($162+4)|0);
      var $163=HEAP32[(($head210)>>2)];
      var $and211=$163 & 2;
      var $tobool212=(($and211)|0)!=0;
      if ($tobool212) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $164=$next;
      var $165=HEAP32[((((5387724)|0))>>2)];
      var $cmp214=(($164)|0)==(($165)|0);
      if ($cmp214) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $166=$psize;
      var $167=HEAP32[((((5387712)|0))>>2)];
      var $add217=((($167)+($166))|0);
      HEAP32[((((5387712)|0))>>2)]=$add217;
      $tsize=$add217;
      var $168=$p;
      HEAP32[((((5387724)|0))>>2)]=$168;
      var $169=$tsize;
      var $or218=$169 | 1;
      var $170=$p;
      var $head219=(($170+4)|0);
      HEAP32[(($head219)>>2)]=$or218;
      var $171=$p;
      var $172=HEAP32[((((5387720)|0))>>2)];
      var $cmp220=(($171)|0)==(($172)|0);
      if ($cmp220) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5387720)|0))>>2)]=0;
      HEAP32[((((5387708)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $173=$tsize;
      var $174=HEAP32[((((5387728)|0))>>2)];
      var $cmp224=(($173)>>>0) > (($174)>>>0);
      if ($cmp224) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $call=_sys_trim(5387700, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $175=$next;
      var $176=HEAP32[((((5387720)|0))>>2)];
      var $cmp229=(($175)|0)==(($176)|0);
      if ($cmp229) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $177=$psize;
      var $178=HEAP32[((((5387708)|0))>>2)];
      var $add232=((($178)+($177))|0);
      HEAP32[((((5387708)|0))>>2)]=$add232;
      $dsize=$add232;
      var $179=$p;
      HEAP32[((((5387720)|0))>>2)]=$179;
      var $180=$dsize;
      var $or233=$180 | 1;
      var $181=$p;
      var $head234=(($181+4)|0);
      HEAP32[(($head234)>>2)]=$or233;
      var $182=$dsize;
      var $183=$p;
      var $184=$183;
      var $185=$dsize;
      var $add_ptr235=(($184+$185)|0);
      var $186=$add_ptr235;
      var $prev_foot236=(($186)|0);
      HEAP32[(($prev_foot236)>>2)]=$182;
      label = 196; break;
    case 90: 
      var $187=$next;
      var $head238=(($187+4)|0);
      var $188=HEAP32[(($head238)>>2)];
      var $and239=$188 & -8;
      $nsize=$and239;
      var $189=$nsize;
      var $190=$psize;
      var $add240=((($190)+($189))|0);
      $psize=$add240;
      var $191=$nsize;
      var $shr241=$191 >>> 3;
      var $cmp242=(($shr241)>>>0) < 32;
      if ($cmp242) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $192=$next;
      var $fd246=(($192+8)|0);
      var $193=HEAP32[(($fd246)>>2)];
      $F245=$193;
      var $194=$next;
      var $bk248=(($194+12)|0);
      var $195=HEAP32[(($bk248)>>2)];
      $B247=$195;
      var $196=$nsize;
      var $shr250=$196 >>> 3;
      $I249=$shr250;
      var $197=$F245;
      var $198=$B247;
      var $cmp251=(($197)|0)==(($198)|0);
      if ($cmp251) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $199=$I249;
      var $shl254=1 << $199;
      var $neg255=$shl254 ^ -1;
      var $200=HEAP32[((((5387700)|0))>>2)];
      var $and256=$200 & $neg255;
      HEAP32[((((5387700)|0))>>2)]=$and256;
      label = 102; break;
    case 93: 
      var $201=$F245;
      var $202=$I249;
      var $shl258=$202 << 1;
      var $arrayidx259=((((5387740)|0)+($shl258<<2))|0);
      var $203=$arrayidx259;
      var $204=$203;
      var $cmp260=(($201)|0)==(($204)|0);
      if ($cmp260) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $205=$F245;
      var $206=$205;
      var $207=HEAP32[((((5387716)|0))>>2)];
      var $cmp263=(($206)>>>0) >= (($207)>>>0);
      if ($cmp263) { label = 95; break; } else { var $216 = 0;label = 98; break; }
    case 95: 
      var $208=$B247;
      var $209=$I249;
      var $shl266=$209 << 1;
      var $arrayidx267=((((5387740)|0)+($shl266<<2))|0);
      var $210=$arrayidx267;
      var $211=$210;
      var $cmp268=(($208)|0)==(($211)|0);
      if ($cmp268) { var $215 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $212=$B247;
      var $213=$212;
      var $214=HEAP32[((((5387716)|0))>>2)];
      var $cmp271=(($213)>>>0) >= (($214)>>>0);
      var $215 = $cmp271;label = 97; break;
    case 97: 
      var $215;
      var $216 = $215;label = 98; break;
    case 98: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=($land_ext275);
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $217=$B247;
      var $218=$F245;
      var $bk279=(($218+12)|0);
      HEAP32[(($bk279)>>2)]=$217;
      var $219=$F245;
      var $220=$B247;
      var $fd280=(($220+8)|0);
      HEAP32[(($fd280)>>2)]=$219;
      label = 101; break;
    case 100: 
      _abort();
      throw "Reached an unreachable!"
    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $221=$next;
      var $222=$221;
      $TP285=$222;
      var $223=$TP285;
      var $parent287=(($223+24)|0);
      var $224=HEAP32[(($parent287)>>2)];
      $XP286=$224;
      var $225=$TP285;
      var $bk289=(($225+12)|0);
      var $226=HEAP32[(($bk289)>>2)];
      var $227=$TP285;
      var $cmp290=(($226)|0)!=(($227)|0);
      if ($cmp290) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $228=$TP285;
      var $fd294=(($228+8)|0);
      var $229=HEAP32[(($fd294)>>2)];
      $F293=$229;
      var $230=$TP285;
      var $bk295=(($230+12)|0);
      var $231=HEAP32[(($bk295)>>2)];
      $R288=$231;
      var $232=$F293;
      var $233=$232;
      var $234=HEAP32[((((5387716)|0))>>2)];
      var $cmp296=(($233)>>>0) >= (($234)>>>0);
      var $conv297=(($cmp296)&1);
      var $expval298=($conv297);
      var $tobool299=(($expval298)|0)!=0;
      if ($tobool299) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $235=$R288;
      var $236=$F293;
      var $bk301=(($236+12)|0);
      HEAP32[(($bk301)>>2)]=$235;
      var $237=$F293;
      var $238=$R288;
      var $fd302=(($238+8)|0);
      HEAP32[(($fd302)>>2)]=$237;
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 120; break;
    case 108: 
      var $239=$TP285;
      var $child307=(($239+16)|0);
      var $arrayidx308=(($child307+4)|0);
      $RP306=$arrayidx308;
      var $240=HEAP32[(($arrayidx308)>>2)];
      $R288=$240;
      var $cmp309=(($240)|0)!=0;
      if ($cmp309) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $241=$TP285;
      var $child312=(($241+16)|0);
      var $arrayidx313=(($child312)|0);
      $RP306=$arrayidx313;
      var $242=HEAP32[(($arrayidx313)>>2)];
      $R288=$242;
      var $cmp314=(($242)|0)!=0;
      if ($cmp314) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $243=$R288;
      var $child319=(($243+16)|0);
      var $arrayidx320=(($child319+4)|0);
      $CP317=$arrayidx320;
      var $244=HEAP32[(($arrayidx320)>>2)];
      var $cmp321=(($244)|0)!=0;
      if ($cmp321) { var $247 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $245=$R288;
      var $child324=(($245+16)|0);
      var $arrayidx325=(($child324)|0);
      $CP317=$arrayidx325;
      var $246=HEAP32[(($arrayidx325)>>2)];
      var $cmp326=(($246)|0)!=0;
      var $247 = $cmp326;label = 113; break;
    case 113: 
      var $247;
      if ($247) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $248=$CP317;
      $RP306=$248;
      var $249=HEAP32[(($248)>>2)];
      $R288=$249;
      label = 111; break;
    case 115: 
      var $250=$RP306;
      var $251=$250;
      var $252=HEAP32[((((5387716)|0))>>2)];
      var $cmp331=(($251)>>>0) >= (($252)>>>0);
      var $conv332=(($cmp331)&1);
      var $expval333=($conv332);
      var $tobool334=(($expval333)|0)!=0;
      if ($tobool334) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $253=$RP306;
      HEAP32[(($253)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();
      throw "Reached an unreachable!"
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $254=$XP286;
      var $cmp340=(($254)|0)!=0;
      if ($cmp340) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $255=$TP285;
      var $index344=(($255+28)|0);
      var $256=HEAP32[(($index344)>>2)];
      var $arrayidx345=((((5388004)|0)+($256<<2))|0);
      $H343=$arrayidx345;
      var $257=$TP285;
      var $258=$H343;
      var $259=HEAP32[(($258)>>2)];
      var $cmp346=(($257)|0)==(($259)|0);
      if ($cmp346) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $260=$R288;
      var $261=$H343;
      HEAP32[(($261)>>2)]=$260;
      var $cmp349=(($260)|0)==0;
      if ($cmp349) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $262=$TP285;
      var $index352=(($262+28)|0);
      var $263=HEAP32[(($index352)>>2)];
      var $shl353=1 << $263;
      var $neg354=$shl353 ^ -1;
      var $264=HEAP32[((((5387704)|0))>>2)];
      var $and355=$264 & $neg354;
      HEAP32[((((5387704)|0))>>2)]=$and355;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $265=$XP286;
      var $266=$265;
      var $267=HEAP32[((((5387716)|0))>>2)];
      var $cmp358=(($266)>>>0) >= (($267)>>>0);
      var $conv359=(($cmp358)&1);
      var $expval360=($conv359);
      var $tobool361=(($expval360)|0)!=0;
      if ($tobool361) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $268=$XP286;
      var $child363=(($268+16)|0);
      var $arrayidx364=(($child363)|0);
      var $269=HEAP32[(($arrayidx364)>>2)];
      var $270=$TP285;
      var $cmp365=(($269)|0)==(($270)|0);
      if ($cmp365) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $271=$R288;
      var $272=$XP286;
      var $child368=(($272+16)|0);
      var $arrayidx369=(($child368)|0);
      HEAP32[(($arrayidx369)>>2)]=$271;
      label = 129; break;
    case 128: 
      var $273=$R288;
      var $274=$XP286;
      var $child371=(($274+16)|0);
      var $arrayidx372=(($child371+4)|0);
      HEAP32[(($arrayidx372)>>2)]=$273;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();
      throw "Reached an unreachable!"
    case 131: 
      label = 132; break;
    case 132: 
      var $275=$R288;
      var $cmp377=(($275)|0)!=0;
      if ($cmp377) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $276=$R288;
      var $277=$276;
      var $278=HEAP32[((((5387716)|0))>>2)];
      var $cmp380=(($277)>>>0) >= (($278)>>>0);
      var $conv381=(($cmp380)&1);
      var $expval382=($conv381);
      var $tobool383=(($expval382)|0)!=0;
      if ($tobool383) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $279=$XP286;
      var $280=$R288;
      var $parent387=(($280+24)|0);
      HEAP32[(($parent387)>>2)]=$279;
      var $281=$TP285;
      var $child388=(($281+16)|0);
      var $arrayidx389=(($child388)|0);
      var $282=HEAP32[(($arrayidx389)>>2)];
      $C0385=$282;
      var $cmp390=(($282)|0)!=0;
      if ($cmp390) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $283=$C0385;
      var $284=$283;
      var $285=HEAP32[((((5387716)|0))>>2)];
      var $cmp393=(($284)>>>0) >= (($285)>>>0);
      var $conv394=(($cmp393)&1);
      var $expval395=($conv394);
      var $tobool396=(($expval395)|0)!=0;
      if ($tobool396) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $286=$C0385;
      var $287=$R288;
      var $child398=(($287+16)|0);
      var $arrayidx399=(($child398)|0);
      HEAP32[(($arrayidx399)>>2)]=$286;
      var $288=$R288;
      var $289=$C0385;
      var $parent400=(($289+24)|0);
      HEAP32[(($parent400)>>2)]=$288;
      label = 138; break;
    case 137: 
      _abort();
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $290=$TP285;
      var $child404=(($290+16)|0);
      var $arrayidx405=(($child404+4)|0);
      var $291=HEAP32[(($arrayidx405)>>2)];
      $C1386=$291;
      var $cmp406=(($291)|0)!=0;
      if ($cmp406) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $292=$C1386;
      var $293=$292;
      var $294=HEAP32[((((5387716)|0))>>2)];
      var $cmp409=(($293)>>>0) >= (($294)>>>0);
      var $conv410=(($cmp409)&1);
      var $expval411=($conv410);
      var $tobool412=(($expval411)|0)!=0;
      if ($tobool412) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $295=$C1386;
      var $296=$R288;
      var $child414=(($296+16)|0);
      var $arrayidx415=(($child414+4)|0);
      HEAP32[(($arrayidx415)>>2)]=$295;
      var $297=$R288;
      var $298=$C1386;
      var $parent416=(($298+24)|0);
      HEAP32[(($parent416)>>2)]=$297;
      label = 143; break;
    case 142: 
      _abort();
      throw "Reached an unreachable!"
    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!"
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $299=$psize;
      var $or425=$299 | 1;
      var $300=$p;
      var $head426=(($300+4)|0);
      HEAP32[(($head426)>>2)]=$or425;
      var $301=$psize;
      var $302=$p;
      var $303=$302;
      var $304=$psize;
      var $add_ptr427=(($303+$304)|0);
      var $305=$add_ptr427;
      var $prev_foot428=(($305)|0);
      HEAP32[(($prev_foot428)>>2)]=$301;
      var $306=$p;
      var $307=HEAP32[((((5387720)|0))>>2)];
      var $cmp429=(($306)|0)==(($307)|0);
      if ($cmp429) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $308=$psize;
      HEAP32[((((5387708)|0))>>2)]=$308;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $309=$next;
      var $head436=(($309+4)|0);
      var $310=HEAP32[(($head436)>>2)];
      var $and437=$310 & -2;
      HEAP32[(($head436)>>2)]=$and437;
      var $311=$psize;
      var $or438=$311 | 1;
      var $312=$p;
      var $head439=(($312+4)|0);
      HEAP32[(($head439)>>2)]=$or438;
      var $313=$psize;
      var $314=$p;
      var $315=$314;
      var $316=$psize;
      var $add_ptr440=(($315+$316)|0);
      var $317=$add_ptr440;
      var $prev_foot441=(($317)|0);
      HEAP32[(($prev_foot441)>>2)]=$313;
      label = 155; break;
    case 155: 
      var $318=$psize;
      var $shr443=$318 >>> 3;
      var $cmp444=(($shr443)>>>0) < 32;
      if ($cmp444) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $319=$psize;
      var $shr448=$319 >>> 3;
      $I447=$shr448;
      var $320=$I447;
      var $shl450=$320 << 1;
      var $arrayidx451=((((5387740)|0)+($shl450<<2))|0);
      var $321=$arrayidx451;
      var $322=$321;
      $B449=$322;
      var $323=$B449;
      $F452=$323;
      var $324=HEAP32[((((5387700)|0))>>2)];
      var $325=$I447;
      var $shl453=1 << $325;
      var $and454=$324 & $shl453;
      var $tobool455=(($and454)|0)!=0;
      if ($tobool455) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $326=$I447;
      var $shl457=1 << $326;
      var $327=HEAP32[((((5387700)|0))>>2)];
      var $or458=$327 | $shl457;
      HEAP32[((((5387700)|0))>>2)]=$or458;
      label = 162; break;
    case 158: 
      var $328=$B449;
      var $fd460=(($328+8)|0);
      var $329=HEAP32[(($fd460)>>2)];
      var $330=$329;
      var $331=HEAP32[((((5387716)|0))>>2)];
      var $cmp461=(($330)>>>0) >= (($331)>>>0);
      var $conv462=(($cmp461)&1);
      var $expval463=($conv462);
      var $tobool464=(($expval463)|0)!=0;
      if ($tobool464) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $332=$B449;
      var $fd466=(($332+8)|0);
      var $333=HEAP32[(($fd466)>>2)];
      $F452=$333;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!"
    case 161: 
      label = 162; break;
    case 162: 
      var $334=$p;
      var $335=$B449;
      var $fd470=(($335+8)|0);
      HEAP32[(($fd470)>>2)]=$334;
      var $336=$p;
      var $337=$F452;
      var $bk471=(($337+12)|0);
      HEAP32[(($bk471)>>2)]=$336;
      var $338=$F452;
      var $339=$p;
      var $fd472=(($339+8)|0);
      HEAP32[(($fd472)>>2)]=$338;
      var $340=$B449;
      var $341=$p;
      var $bk473=(($341+12)|0);
      HEAP32[(($bk473)>>2)]=$340;
      label = 192; break;
    case 163: 
      var $342=$p;
      var $343=$342;
      $tp=$343;
      var $344=$psize;
      var $shr477=$344 >>> 8;
      $X=$shr477;
      var $345=$X;
      var $cmp478=(($345)|0)==0;
      if ($cmp478) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I476=0;
      label = 169; break;
    case 165: 
      var $346=$X;
      var $cmp482=(($346)>>>0) > 65535;
      if ($cmp482) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I476=31;
      label = 168; break;
    case 167: 
      var $347=$X;
      $Y=$347;
      var $348=$Y;
      var $sub=((($348)-(256))|0);
      var $shr486=$sub >>> 16;
      var $and487=$shr486 & 8;
      $N=$and487;
      var $349=$N;
      var $350=$Y;
      var $shl488=$350 << $349;
      $Y=$shl488;
      var $sub489=((($shl488)-(4096))|0);
      var $shr490=$sub489 >>> 16;
      var $and491=$shr490 & 4;
      $K=$and491;
      var $351=$K;
      var $352=$N;
      var $add492=((($352)+($351))|0);
      $N=$add492;
      var $353=$K;
      var $354=$Y;
      var $shl493=$354 << $353;
      $Y=$shl493;
      var $sub494=((($shl493)-(16384))|0);
      var $shr495=$sub494 >>> 16;
      var $and496=$shr495 & 2;
      $K=$and496;
      var $355=$N;
      var $add497=((($355)+($and496))|0);
      $N=$add497;
      var $356=$N;
      var $sub498=(((14)-($356))|0);
      var $357=$K;
      var $358=$Y;
      var $shl499=$358 << $357;
      $Y=$shl499;
      var $shr500=$shl499 >>> 15;
      var $add501=((($sub498)+($shr500))|0);
      $K=$add501;
      var $359=$K;
      var $shl502=$359 << 1;
      var $360=$psize;
      var $361=$K;
      var $add503=((($361)+(7))|0);
      var $shr504=$360 >>> (($add503)>>>0);
      var $and505=$shr504 & 1;
      var $add506=((($shl502)+($and505))|0);
      $I476=$add506;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $362=$I476;
      var $arrayidx509=((((5388004)|0)+($362<<2))|0);
      $H475=$arrayidx509;
      var $363=$I476;
      var $364=$tp;
      var $index510=(($364+28)|0);
      HEAP32[(($index510)>>2)]=$363;
      var $365=$tp;
      var $child511=(($365+16)|0);
      var $arrayidx512=(($child511+4)|0);
      HEAP32[(($arrayidx512)>>2)]=0;
      var $366=$tp;
      var $child513=(($366+16)|0);
      var $arrayidx514=(($child513)|0);
      HEAP32[(($arrayidx514)>>2)]=0;
      var $367=HEAP32[((((5387704)|0))>>2)];
      var $368=$I476;
      var $shl515=1 << $368;
      var $and516=$367 & $shl515;
      var $tobool517=(($and516)|0)!=0;
      if ($tobool517) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $369=$I476;
      var $shl519=1 << $369;
      var $370=HEAP32[((((5387704)|0))>>2)];
      var $or520=$370 | $shl519;
      HEAP32[((((5387704)|0))>>2)]=$or520;
      var $371=$tp;
      var $372=$H475;
      HEAP32[(($372)>>2)]=$371;
      var $373=$H475;
      var $374=$373;
      var $375=$tp;
      var $parent521=(($375+24)|0);
      HEAP32[(($parent521)>>2)]=$374;
      var $376=$tp;
      var $377=$tp;
      var $bk522=(($377+12)|0);
      HEAP32[(($bk522)>>2)]=$376;
      var $378=$tp;
      var $fd523=(($378+8)|0);
      HEAP32[(($fd523)>>2)]=$376;
      label = 189; break;
    case 171: 
      var $379=$H475;
      var $380=HEAP32[(($379)>>2)];
      $T=$380;
      var $381=$psize;
      var $382=$I476;
      var $cmp526=(($382)|0)==31;
      if ($cmp526) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $cond = 0;label = 174; break;
    case 173: 
      var $383=$I476;
      var $shr528=$383 >>> 1;
      var $add529=((($shr528)+(8))|0);
      var $sub530=((($add529)-(2))|0);
      var $sub531=(((31)-($sub530))|0);
      var $cond = $sub531;label = 174; break;
    case 174: 
      var $cond;
      var $shl532=$381 << $cond;
      $K525=$shl532;
      label = 175; break;
    case 175: 
      var $384=$T;
      var $head533=(($384+4)|0);
      var $385=HEAP32[(($head533)>>2)];
      var $and534=$385 & -8;
      var $386=$psize;
      var $cmp535=(($and534)|0)!=(($386)|0);
      if ($cmp535) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $387=$K525;
      var $shr538=$387 >>> 31;
      var $and539=$shr538 & 1;
      var $388=$T;
      var $child540=(($388+16)|0);
      var $arrayidx541=(($child540+($and539<<2))|0);
      $C=$arrayidx541;
      var $389=$K525;
      var $shl542=$389 << 1;
      $K525=$shl542;
      var $390=$C;
      var $391=HEAP32[(($390)>>2)];
      var $cmp543=(($391)|0)!=0;
      if ($cmp543) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $392=$C;
      var $393=HEAP32[(($392)>>2)];
      $T=$393;
      label = 181; break;
    case 178: 
      var $394=$C;
      var $395=$394;
      var $396=HEAP32[((((5387716)|0))>>2)];
      var $cmp547=(($395)>>>0) >= (($396)>>>0);
      var $conv548=(($cmp547)&1);
      var $expval549=($conv548);
      var $tobool550=(($expval549)|0)!=0;
      if ($tobool550) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $397=$tp;
      var $398=$C;
      HEAP32[(($398)>>2)]=$397;
      var $399=$T;
      var $400=$tp;
      var $parent552=(($400+24)|0);
      HEAP32[(($parent552)>>2)]=$399;
      var $401=$tp;
      var $402=$tp;
      var $bk553=(($402+12)|0);
      HEAP32[(($bk553)>>2)]=$401;
      var $403=$tp;
      var $fd554=(($403+8)|0);
      HEAP32[(($fd554)>>2)]=$401;
      label = 188; break;
    case 180: 
      _abort();
      throw "Reached an unreachable!"
    case 181: 
      label = 187; break;
    case 182: 
      var $404=$T;
      var $fd559=(($404+8)|0);
      var $405=HEAP32[(($fd559)>>2)];
      $F558=$405;
      var $406=$T;
      var $407=$406;
      var $408=HEAP32[((((5387716)|0))>>2)];
      var $cmp560=(($407)>>>0) >= (($408)>>>0);
      if ($cmp560) { label = 183; break; } else { var $412 = 0;label = 184; break; }
    case 183: 
      var $409=$F558;
      var $410=$409;
      var $411=HEAP32[((((5387716)|0))>>2)];
      var $cmp563=(($410)>>>0) >= (($411)>>>0);
      var $412 = $cmp563;label = 184; break;
    case 184: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=($land_ext566);
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $413=$tp;
      var $414=$F558;
      var $bk570=(($414+12)|0);
      HEAP32[(($bk570)>>2)]=$413;
      var $415=$T;
      var $fd571=(($415+8)|0);
      HEAP32[(($fd571)>>2)]=$413;
      var $416=$F558;
      var $417=$tp;
      var $fd572=(($417+8)|0);
      HEAP32[(($fd572)>>2)]=$416;
      var $418=$T;
      var $419=$tp;
      var $bk573=(($419+12)|0);
      HEAP32[(($bk573)>>2)]=$418;
      var $420=$tp;
      var $parent574=(($420+24)|0);
      HEAP32[(($parent574)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();
      throw "Reached an unreachable!"
    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $421=HEAP32[((((5387732)|0))>>2)];
      var $dec=((($421)-(1))|0);
      HEAP32[((((5387732)|0))>>2)]=$dec;
      var $cmp578=(($dec)|0)==0;
      if ($cmp578) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $call581=_release_unused_segments(5387700);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!"
    case 196: 
      label = 197; break;
    case 197: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$pad_addr;
      var $cmp1=(($2)>>>0) < 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp2=(($4)|0)!=0;
      if ($cmp2) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $5=$pad_addr;
      var $add=((($5)+(40))|0);
      $pad_addr=$add;
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $8=$pad_addr;
      var $cmp3=(($7)>>>0) > (($8)>>>0);
      if ($cmp3) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $9=HEAP32[((((5292320)|0))>>2)];
      $unit=$9;
      var $10=$m_addr;
      var $topsize5=(($10+12)|0);
      var $11=HEAP32[(($topsize5)>>2)];
      var $12=$pad_addr;
      var $sub=((($11)-($12))|0);
      var $13=$unit;
      var $sub6=((($13)-(1))|0);
      var $add7=((($sub)+($sub6))|0);
      var $14=$unit;
      var $div=Math.floor(((($add7)>>>0))/((($14)>>>0)));
      var $sub8=((($div)-(1))|0);
      var $15=$unit;
      var $mul=((($sub8)*($15))&-1);
      $extra=$mul;
      var $16=$m_addr;
      var $17=$m_addr;
      var $top9=(($17+24)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $19=$18;
      var $call10=_segment_holding($16, $19);
      $sp=$call10;
      var $20=$sp;
      var $sflags=(($20+12)|0);
      var $21=HEAP32[(($sflags)>>2)];
      var $and=$21 & 8;
      var $tobool11=(($and)|0)!=0;
      if ($tobool11) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|0)!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $24=$extra;
      var $cmp17=(($24)>>>0) >= 2147483647;
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$unit;
      var $sub19=(((-2147483648)-($25))|0);
      $extra=$sub19;
      label = 12; break;
    case 12: 
      var $call20=_sbrk(0);
      $old_br=$call20;
      var $26=$old_br;
      var $27=$sp;
      var $base=(($27)|0);
      var $28=HEAP32[(($base)>>2)];
      var $29=$sp;
      var $size=(($29+4)|0);
      var $30=HEAP32[(($size)>>2)];
      var $add_ptr=(($28+$30)|0);
      var $cmp21=(($26)|0)==(($add_ptr)|0);
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$extra;
      var $sub23=(((-$31))|0);
      var $call24=_sbrk($sub23);
      $rel_br=$call24;
      var $call25=_sbrk(0);
      $new_br=$call25;
      var $32=$rel_br;
      var $cmp26=(($32)|0)!=-1;
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$new_br;
      var $34=$old_br;
      var $cmp28=(($33)>>>0) < (($34)>>>0);
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$old_br;
      var $36=$new_br;
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $released=$sub_ptr_sub;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$released;
      var $cmp34=(($37)|0)!=0;
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$released;
      var $cmp44=(($50)|0)==0;
      if ($cmp44) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>0) > (($54)>>>0);
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$released;
      var $cmp52=(($56)|0)!=0;
      var $cond=$cmp52 ? 1 : 0;

      return $cond;
    default: assert(0, "bad label: " + label);
  }

}
_sys_trim["X"]=1;

function _calloc($n_elements, $elem_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_elements_addr;
      var $elem_size_addr;
      var $mem;
      var $req;
      $n_elements_addr=$n_elements;
      $elem_size_addr=$elem_size;
      $req=0;
      var $0=$n_elements_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$n_elements_addr;
      var $2=$elem_size_addr;
      var $mul=((($1)*($2))&-1);
      $req=$mul;
      var $3=$n_elements_addr;
      var $4=$elem_size_addr;
      var $or=$3 | $4;
      var $and=$or & -65536;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$req;
      var $6=$n_elements_addr;
      var $div=Math.floor(((($5)>>>0))/((($6)>>>0)));
      var $7=$elem_size_addr;
      var $cmp1=(($div)|0)!=(($7)|0);
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $req=-1;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$req;
      var $call=_malloc($8);
      $mem=$call;
      var $9=$mem;
      var $cmp4=(($9)|0)!=0;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$mem;
      var $add_ptr=((($10)-(8))|0);
      var $11=$add_ptr;
      var $head=(($11+4)|0);
      var $12=HEAP32[(($head)>>2)];
      var $and6=$12 & 3;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $13=$mem;
      var $14=$req;
      _memset($13, 0, $14);
      label = 10; break;
    case 10: 
      var $15=$mem;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}
Module["_calloc"] = _calloc;

function _realloc($oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $oldmem_addr;
      var $bytes_addr;
      var $m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$oldmem_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$bytes_addr;
      var $call=_malloc($1);
      $retval=$call;
      label = 5; break;
    case 4: 
      $m=5387700;
      var $2=$m;
      var $3=$oldmem_addr;
      var $4=$bytes_addr;
      var $call1=_internal_realloc($2, $3, $4);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $5=$retval;

      return $5;
    default: assert(0, "bad label: " + label);
  }

}
Module["_realloc"] = _realloc;

function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0;
      $nsegs=0;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $pred=$seg;
      var $1=$pred;
      var $next=(($1+8)|0);
      var $2=HEAP32[(($next)>>2)];
      $sp=$2;
      label = 3; break;
    case 3: 
      var $3=$sp;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $4=$sp;
      var $base1=(($4)|0);
      var $5=HEAP32[(($base1)>>2)];
      $base=$5;
      var $6=$sp;
      var $size2=(($6+4)|0);
      var $7=HEAP32[(($size2)>>2)];
      $size=$7;
      var $8=$sp;
      var $next4=(($8+8)|0);
      var $9=HEAP32[(($next4)>>2)];
      $next3=$9;
      var $10=$nsegs;
      var $inc=((($10)+(1))|0);
      $nsegs=$inc;
      var $11=$sp;
      var $sflags=(($11+12)|0);
      var $12=HEAP32[(($sflags)>>2)];
      var $and=$12 & 0;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $13=$sp;
      var $sflags5=(($13+12)|0);
      var $14=HEAP32[(($sflags5)>>2)];
      var $and6=$14 & 8;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $15=$base;
      var $16=$base;
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and8=$17 & 7;
      var $cmp9=(($and8)|0)==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $18=$base;
      var $add_ptr10=(($18+8)|0);
      var $19=$add_ptr10;
      var $and11=$19 & 7;
      var $sub=(((8)-($and11))|0);
      var $and12=$sub & 7;
      var $cond = $and12;label = 9; break;
    case 9: 
      var $cond;
      var $add_ptr13=(($15+$cond)|0);
      var $20=$add_ptr13;
      $p=$20;
      var $21=$p;
      var $head=(($21+4)|0);
      var $22=HEAP32[(($head)>>2)];
      var $and14=$22 & -8;
      $psize=$and14;
      var $23=$p;
      var $head15=(($23+4)|0);
      var $24=HEAP32[(($head15)>>2)];
      var $and16=$24 & 3;
      var $cmp17=(($and16)|0)!=1;
      if ($cmp17) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $25=$p;
      var $26=$25;
      var $27=$psize;
      var $add_ptr19=(($26+$27)|0);
      var $28=$base;
      var $29=$size;
      var $add_ptr20=(($28+$29)|0);
      var $add_ptr21=((($add_ptr20)-(40))|0);
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0);
      if ($cmp22) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $30=$p;
      var $31=$30;
      $tp=$31;
      var $32=$p;
      var $33=$m_addr;
      var $dv=(($33+20)|0);
      var $34=HEAP32[(($dv)>>2)];
      var $cmp24=(($32)|0)==(($34)|0);
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $35=$m_addr;
      var $dv26=(($35+20)|0);
      HEAP32[(($dv26)>>2)]=0;
      var $36=$m_addr;
      var $dvsize=(($36+8)|0);
      HEAP32[(($dvsize)>>2)]=0;
      label = 59; break;
    case 13: 
      var $37=$tp;
      var $parent=(($37+24)|0);
      var $38=HEAP32[(($parent)>>2)];
      $XP=$38;
      var $39=$tp;
      var $bk=(($39+12)|0);
      var $40=HEAP32[(($bk)>>2)];
      var $41=$tp;
      var $cmp27=(($40)|0)!=(($41)|0);
      if ($cmp27) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $42=$tp;
      var $fd=(($42+8)|0);
      var $43=HEAP32[(($fd)>>2)];
      $F=$43;
      var $44=$tp;
      var $bk29=(($44+12)|0);
      var $45=HEAP32[(($bk29)>>2)];
      $R=$45;
      var $46=$F;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp30=(($47)>>>0) >= (($49)>>>0);
      var $conv=(($cmp30)&1);
      var $expval=($conv);
      var $tobool31=(($expval)|0)!=0;
      if ($tobool31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $50=$R;
      var $51=$F;
      var $bk33=(($51+12)|0);
      HEAP32[(($bk33)>>2)]=$50;
      var $52=$F;
      var $53=$R;
      var $fd34=(($53+8)|0);
      HEAP32[(($fd34)>>2)]=$52;
      label = 17; break;
    case 16: 
      _abort();
      throw "Reached an unreachable!"
    case 17: 
      label = 30; break;
    case 18: 
      var $54=$tp;
      var $child=(($54+16)|0);
      var $arrayidx=(($child+4)|0);
      $RP=$arrayidx;
      var $55=HEAP32[(($arrayidx)>>2)];
      $R=$55;
      var $cmp37=(($55)|0)!=0;
      if ($cmp37) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $56=$tp;
      var $child39=(($56+16)|0);
      var $arrayidx40=(($child39)|0);
      $RP=$arrayidx40;
      var $57=HEAP32[(($arrayidx40)>>2)];
      $R=$57;
      var $cmp41=(($57)|0)!=0;
      if ($cmp41) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $58=$R;
      var $child45=(($58+16)|0);
      var $arrayidx46=(($child45+4)|0);
      $CP=$arrayidx46;
      var $59=HEAP32[(($arrayidx46)>>2)];
      var $cmp47=(($59)|0)!=0;
      if ($cmp47) { var $62 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $60=$R;
      var $child49=(($60+16)|0);
      var $arrayidx50=(($child49)|0);
      $CP=$arrayidx50;
      var $61=HEAP32[(($arrayidx50)>>2)];
      var $cmp51=(($61)|0)!=0;
      var $62 = $cmp51;label = 23; break;
    case 23: 
      var $62;
      if ($62) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $63=$CP;
      $RP=$63;
      var $64=HEAP32[(($63)>>2)];
      $R=$64;
      label = 21; break;
    case 25: 
      var $65=$RP;
      var $66=$65;
      var $67=$m_addr;
      var $least_addr54=(($67+16)|0);
      var $68=HEAP32[(($least_addr54)>>2)];
      var $cmp55=(($66)>>>0) >= (($68)>>>0);
      var $conv56=(($cmp55)&1);
      var $expval57=($conv56);
      var $tobool58=(($expval57)|0)!=0;
      if ($tobool58) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $69=$RP;
      HEAP32[(($69)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $70=$XP;
      var $cmp64=(($70)|0)!=0;
      if ($cmp64) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $71=$tp;
      var $index=(($71+28)|0);
      var $72=HEAP32[(($index)>>2)];
      var $73=$m_addr;
      var $treebins=(($73+304)|0);
      var $arrayidx67=(($treebins+($72<<2))|0);
      $H=$arrayidx67;
      var $74=$tp;
      var $75=$H;
      var $76=HEAP32[(($75)>>2)];
      var $cmp68=(($74)|0)==(($76)|0);
      if ($cmp68) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $77=$R;
      var $78=$H;
      HEAP32[(($78)>>2)]=$77;
      var $cmp71=(($77)|0)==0;
      if ($cmp71) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $79=$tp;
      var $index74=(($79+28)|0);
      var $80=HEAP32[(($index74)>>2)];
      var $shl=1 << $80;
      var $neg=$shl ^ -1;
      var $81=$m_addr;
      var $treemap=(($81+4)|0);
      var $82=HEAP32[(($treemap)>>2)];
      var $and75=$82 & $neg;
      HEAP32[(($treemap)>>2)]=$and75;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $83=$XP;
      var $84=$83;
      var $85=$m_addr;
      var $least_addr78=(($85+16)|0);
      var $86=HEAP32[(($least_addr78)>>2)];
      var $cmp79=(($84)>>>0) >= (($86)>>>0);
      var $conv80=(($cmp79)&1);
      var $expval81=($conv80);
      var $tobool82=(($expval81)|0)!=0;
      if ($tobool82) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $87=$XP;
      var $child84=(($87+16)|0);
      var $arrayidx85=(($child84)|0);
      var $88=HEAP32[(($arrayidx85)>>2)];
      var $89=$tp;
      var $cmp86=(($88)|0)==(($89)|0);
      if ($cmp86) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $90=$R;
      var $91=$XP;
      var $child89=(($91+16)|0);
      var $arrayidx90=(($child89)|0);
      HEAP32[(($arrayidx90)>>2)]=$90;
      label = 39; break;
    case 38: 
      var $92=$R;
      var $93=$XP;
      var $child92=(($93+16)|0);
      var $arrayidx93=(($child92+4)|0);
      HEAP32[(($arrayidx93)>>2)]=$92;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      var $94=$R;
      var $cmp98=(($94)|0)!=0;
      if ($cmp98) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $95=$R;
      var $96=$95;
      var $97=$m_addr;
      var $least_addr101=(($97+16)|0);
      var $98=HEAP32[(($least_addr101)>>2)];
      var $cmp102=(($96)>>>0) >= (($98)>>>0);
      var $conv103=(($cmp102)&1);
      var $expval104=($conv103);
      var $tobool105=(($expval104)|0)!=0;
      if ($tobool105) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $99=$XP;
      var $100=$R;
      var $parent107=(($100+24)|0);
      HEAP32[(($parent107)>>2)]=$99;
      var $101=$tp;
      var $child108=(($101+16)|0);
      var $arrayidx109=(($child108)|0);
      var $102=HEAP32[(($arrayidx109)>>2)];
      $C0=$102;
      var $cmp110=(($102)|0)!=0;
      if ($cmp110) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $103=$C0;
      var $104=$103;
      var $105=$m_addr;
      var $least_addr113=(($105+16)|0);
      var $106=HEAP32[(($least_addr113)>>2)];
      var $cmp114=(($104)>>>0) >= (($106)>>>0);
      var $conv115=(($cmp114)&1);
      var $expval116=($conv115);
      var $tobool117=(($expval116)|0)!=0;
      if ($tobool117) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $107=$C0;
      var $108=$R;
      var $child119=(($108+16)|0);
      var $arrayidx120=(($child119)|0);
      HEAP32[(($arrayidx120)>>2)]=$107;
      var $109=$R;
      var $110=$C0;
      var $parent121=(($110+24)|0);
      HEAP32[(($parent121)>>2)]=$109;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!"
    case 48: 
      label = 49; break;
    case 49: 
      var $111=$tp;
      var $child125=(($111+16)|0);
      var $arrayidx126=(($child125+4)|0);
      var $112=HEAP32[(($arrayidx126)>>2)];
      $C1=$112;
      var $cmp127=(($112)|0)!=0;
      if ($cmp127) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $113=$C1;
      var $114=$113;
      var $115=$m_addr;
      var $least_addr130=(($115+16)|0);
      var $116=HEAP32[(($least_addr130)>>2)];
      var $cmp131=(($114)>>>0) >= (($116)>>>0);
      var $conv132=(($cmp131)&1);
      var $expval133=($conv132);
      var $tobool134=(($expval133)|0)!=0;
      if ($tobool134) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $117=$C1;
      var $118=$R;
      var $child136=(($118+16)|0);
      var $arrayidx137=(($child136+4)|0);
      HEAP32[(($arrayidx137)>>2)]=$117;
      var $119=$R;
      var $120=$C1;
      var $parent138=(($120+24)|0);
      HEAP32[(($parent138)>>2)]=$119;
      label = 53; break;
    case 52: 
      _abort();
      throw "Reached an unreachable!"
    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $121=$psize;
      var $shr=$121 >>> 8;
      $X=$shr;
      var $122=$X;
      var $cmp148=(($122)|0)==0;
      if ($cmp148) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $123=$X;
      var $cmp152=(($123)>>>0) > 65535;
      if ($cmp152) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $124=$X;
      $Y=$124;
      var $125=$Y;
      var $sub156=((($125)-(256))|0);
      var $shr157=$sub156 >>> 16;
      var $and158=$shr157 & 8;
      $N=$and158;
      var $126=$N;
      var $127=$Y;
      var $shl159=$127 << $126;
      $Y=$shl159;
      var $sub160=((($shl159)-(4096))|0);
      var $shr161=$sub160 >>> 16;
      var $and162=$shr161 & 4;
      $K=$and162;
      var $128=$K;
      var $129=$N;
      var $add=((($129)+($128))|0);
      $N=$add;
      var $130=$K;
      var $131=$Y;
      var $shl163=$131 << $130;
      $Y=$shl163;
      var $sub164=((($shl163)-(16384))|0);
      var $shr165=$sub164 >>> 16;
      var $and166=$shr165 & 2;
      $K=$and166;
      var $132=$N;
      var $add167=((($132)+($and166))|0);
      $N=$add167;
      var $133=$N;
      var $sub168=(((14)-($133))|0);
      var $134=$K;
      var $135=$Y;
      var $shl169=$135 << $134;
      $Y=$shl169;
      var $shr170=$shl169 >>> 15;
      var $add171=((($sub168)+($shr170))|0);
      $K=$add171;
      var $136=$K;
      var $shl172=$136 << 1;
      var $137=$psize;
      var $138=$K;
      var $add173=((($138)+(7))|0);
      var $shr174=$137 >>> (($add173)>>>0);
      var $and175=$shr174 & 1;
      var $add176=((($shl172)+($and175))|0);
      $I=$add176;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $139=$I;
      var $140=$m_addr;
      var $treebins179=(($140+304)|0);
      var $arrayidx180=(($treebins179+($139<<2))|0);
      $H147=$arrayidx180;
      var $141=$I;
      var $142=$tp;
      var $index181=(($142+28)|0);
      HEAP32[(($index181)>>2)]=$141;
      var $143=$tp;
      var $child182=(($143+16)|0);
      var $arrayidx183=(($child182+4)|0);
      HEAP32[(($arrayidx183)>>2)]=0;
      var $144=$tp;
      var $child184=(($144+16)|0);
      var $arrayidx185=(($child184)|0);
      HEAP32[(($arrayidx185)>>2)]=0;
      var $145=$m_addr;
      var $treemap186=(($145+4)|0);
      var $146=HEAP32[(($treemap186)>>2)];
      var $147=$I;
      var $shl187=1 << $147;
      var $and188=$146 & $shl187;
      var $tobool189=(($and188)|0)!=0;
      if ($tobool189) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $148=$I;
      var $shl191=1 << $148;
      var $149=$m_addr;
      var $treemap192=(($149+4)|0);
      var $150=HEAP32[(($treemap192)>>2)];
      var $or=$150 | $shl191;
      HEAP32[(($treemap192)>>2)]=$or;
      var $151=$tp;
      var $152=$H147;
      HEAP32[(($152)>>2)]=$151;
      var $153=$H147;
      var $154=$153;
      var $155=$tp;
      var $parent193=(($155+24)|0);
      HEAP32[(($parent193)>>2)]=$154;
      var $156=$tp;
      var $157=$tp;
      var $bk194=(($157+12)|0);
      HEAP32[(($bk194)>>2)]=$156;
      var $158=$tp;
      var $fd195=(($158+8)|0);
      HEAP32[(($fd195)>>2)]=$156;
      label = 85; break;
    case 67: 
      var $159=$H147;
      var $160=HEAP32[(($159)>>2)];
      $T=$160;
      var $161=$psize;
      var $162=$I;
      var $cmp198=(($162)|0)==31;
      if ($cmp198) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $cond207 = 0;label = 70; break;
    case 69: 
      var $163=$I;
      var $shr202=$163 >>> 1;
      var $add203=((($shr202)+(8))|0);
      var $sub204=((($add203)-(2))|0);
      var $sub205=(((31)-($sub204))|0);
      var $cond207 = $sub205;label = 70; break;
    case 70: 
      var $cond207;
      var $shl208=$161 << $cond207;
      $K197=$shl208;
      label = 71; break;
    case 71: 
      var $164=$T;
      var $head209=(($164+4)|0);
      var $165=HEAP32[(($head209)>>2)];
      var $and210=$165 & -8;
      var $166=$psize;
      var $cmp211=(($and210)|0)!=(($166)|0);
      if ($cmp211) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $167=$K197;
      var $shr214=$167 >>> 31;
      var $and215=$shr214 & 1;
      var $168=$T;
      var $child216=(($168+16)|0);
      var $arrayidx217=(($child216+($and215<<2))|0);
      $C=$arrayidx217;
      var $169=$K197;
      var $shl218=$169 << 1;
      $K197=$shl218;
      var $170=$C;
      var $171=HEAP32[(($170)>>2)];
      var $cmp219=(($171)|0)!=0;
      if ($cmp219) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $172=$C;
      var $173=HEAP32[(($172)>>2)];
      $T=$173;
      label = 77; break;
    case 74: 
      var $174=$C;
      var $175=$174;
      var $176=$m_addr;
      var $least_addr223=(($176+16)|0);
      var $177=HEAP32[(($least_addr223)>>2)];
      var $cmp224=(($175)>>>0) >= (($177)>>>0);
      var $conv225=(($cmp224)&1);
      var $expval226=($conv225);
      var $tobool227=(($expval226)|0)!=0;
      if ($tobool227) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $178=$tp;
      var $179=$C;
      HEAP32[(($179)>>2)]=$178;
      var $180=$T;
      var $181=$tp;
      var $parent229=(($181+24)|0);
      HEAP32[(($parent229)>>2)]=$180;
      var $182=$tp;
      var $183=$tp;
      var $bk230=(($183+12)|0);
      HEAP32[(($bk230)>>2)]=$182;
      var $184=$tp;
      var $fd231=(($184+8)|0);
      HEAP32[(($fd231)>>2)]=$182;
      label = 84; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 83; break;
    case 78: 
      var $185=$T;
      var $fd236=(($185+8)|0);
      var $186=HEAP32[(($fd236)>>2)];
      $F235=$186;
      var $187=$T;
      var $188=$187;
      var $189=$m_addr;
      var $least_addr237=(($189+16)|0);
      var $190=HEAP32[(($least_addr237)>>2)];
      var $cmp238=(($188)>>>0) >= (($190)>>>0);
      if ($cmp238) { label = 79; break; } else { var $195 = 0;label = 80; break; }
    case 79: 
      var $191=$F235;
      var $192=$191;
      var $193=$m_addr;
      var $least_addr240=(($193+16)|0);
      var $194=HEAP32[(($least_addr240)>>2)];
      var $cmp241=(($192)>>>0) >= (($194)>>>0);
      var $195 = $cmp241;label = 80; break;
    case 80: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=($land_ext);
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $196=$tp;
      var $197=$F235;
      var $bk246=(($197+12)|0);
      HEAP32[(($bk246)>>2)]=$196;
      var $198=$T;
      var $fd247=(($198+8)|0);
      HEAP32[(($fd247)>>2)]=$196;
      var $199=$F235;
      var $200=$tp;
      var $fd248=(($200+8)|0);
      HEAP32[(($fd248)>>2)]=$199;
      var $201=$T;
      var $202=$tp;
      var $bk249=(($202+12)|0);
      HEAP32[(($bk249)>>2)]=$201;
      var $203=$tp;
      var $parent250=(($203+24)|0);
      HEAP32[(($parent250)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $204=$sp;
      $pred=$204;
      var $205=$next3;
      $sp=$205;
      label = 3; break;
    case 88: 
      var $206=$nsegs;
      var $cmp257=(($206)>>>0) > 4294967295;
      if ($cmp257) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $207=$nsegs;
      var $cond262 = $207;label = 91; break;
    case 90: 
      var $cond262 = -1;label = 91; break;
    case 91: 
      var $cond262;
      var $208=$m_addr;
      var $release_checks=(($208+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond262;
      var $209=$released;

      return $209;
    default: assert(0, "bad label: " + label);
  }

}
_release_unused_segments["X"]=1;

function _memalign($alignment, $bytes) {
  var label = 0;


  var $alignment_addr;
  var $bytes_addr;
  $alignment_addr=$alignment;
  $bytes_addr=$bytes;
  var $0=$alignment_addr;
  var $1=$bytes_addr;
  var $call=_internal_memalign(5387700, $0, $1);

  return $call;
}


function _internal_memalign($m, $alignment, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $alignment_addr;
      var $bytes_addr;
      var $a;
      var $nb;
      var $req;
      var $mem;
      var $leader;
      var $trailer;
      var $p;
      var $br;
      var $pos;
      var $newp;
      var $leadsize;
      var $newsize;
      var $size;
      var $remainder_size;
      var $remainder;
      $m_addr=$m;
      $alignment_addr=$alignment;
      $bytes_addr=$bytes;
      var $0=$alignment_addr;
      var $cmp=(($0)>>>0) <= 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$bytes_addr;
      var $call=_malloc($1);
      $retval=$call;
      label = 38; break;
    case 4: 
      var $2=$alignment_addr;
      var $cmp1=(($2)>>>0) < 16;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $alignment_addr=16;
      label = 6; break;
    case 6: 
      var $3=$alignment_addr;
      var $4=$alignment_addr;
      var $sub=((($4)-(1))|0);
      var $and=$3 & $sub;
      var $cmp4=(($and)|0)!=0;
      if ($cmp4) { label = 7; break; } else { label = 11; break; }
    case 7: 
      $a=16;
      label = 8; break;
    case 8: 
      var $5=$a;
      var $6=$alignment_addr;
      var $cmp6=(($5)>>>0) < (($6)>>>0);
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $7=$a;
      var $shl=$7 << 1;
      $a=$shl;
      label = 8; break;
    case 10: 
      var $8=$a;
      $alignment_addr=$8;
      label = 11; break;
    case 11: 
      var $9=$bytes_addr;
      var $10=$alignment_addr;
      var $sub8=(((-64)-($10))|0);
      var $cmp9=(($9)>>>0) >= (($sub8)>>>0);
      if ($cmp9) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $11=$m_addr;
      var $cmp11=(($11)|0)!=0;
      if ($cmp11) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $call13=___errno_location();
      HEAP32[(($call13)>>2)]=12;
      label = 14; break;
    case 14: 
      label = 37; break;
    case 15: 
      var $12=$bytes_addr;
      var $cmp15=(($12)>>>0) < 11;
      if ($cmp15) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $cond = 16;label = 18; break;
    case 17: 
      var $13=$bytes_addr;
      var $add=((($13)+(4))|0);
      var $add16=((($add)+(7))|0);
      var $and17=$add16 & -8;
      var $cond = $and17;label = 18; break;
    case 18: 
      var $cond;
      $nb=$cond;
      var $14=$nb;
      var $15=$alignment_addr;
      var $add18=((($14)+($15))|0);
      var $add19=((($add18)+(16))|0);
      var $sub20=((($add19)-(4))|0);
      $req=$sub20;
      var $16=$req;
      var $call21=_malloc($16);
      $mem=$call21;
      var $17=$mem;
      var $cmp22=(($17)|0)!=0;
      if ($cmp22) { label = 19; break; } else { label = 36; break; }
    case 19: 
      $leader=0;
      $trailer=0;
      var $18=$mem;
      var $add_ptr=((($18)-(8))|0);
      var $19=$add_ptr;
      $p=$19;
      var $20=$mem;
      var $21=$20;
      var $22=$alignment_addr;
      var $rem=((($21)>>>0))%((($22)>>>0));
      var $cmp24=(($rem)|0)!=0;
      if ($cmp24) { label = 20; break; } else { label = 27; break; }
    case 20: 
      var $23=$mem;
      var $24=$alignment_addr;
      var $add_ptr26=(($23+$24)|0);
      var $add_ptr27=((($add_ptr26)-(1))|0);
      var $25=$add_ptr27;
      var $26=$alignment_addr;
      var $sub28=(((-$26))|0);
      var $and29=$25 & $sub28;
      var $27=$and29;
      var $add_ptr30=((($27)-(8))|0);
      var $28=$add_ptr30;
      var $29=$28;
      $br=$29;
      var $30=$br;
      var $31=$p;
      var $32=$31;
      var $sub_ptr_lhs_cast=$30;
      var $sub_ptr_rhs_cast=$32;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $cmp31=(($sub_ptr_sub)>>>0) >= 16;
      if ($cmp31) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $33=$br;
      var $cond36 = $33;label = 23; break;
    case 22: 
      var $34=$br;
      var $35=$alignment_addr;
      var $add_ptr34=(($34+$35)|0);
      var $cond36 = $add_ptr34;label = 23; break;
    case 23: 
      var $cond36;
      $pos=$cond36;
      var $36=$pos;
      var $37=$36;
      $newp=$37;
      var $38=$pos;
      var $39=$p;
      var $40=$39;
      var $sub_ptr_lhs_cast37=$38;
      var $sub_ptr_rhs_cast38=$40;
      var $sub_ptr_sub39=((($sub_ptr_lhs_cast37)-($sub_ptr_rhs_cast38))|0);
      $leadsize=$sub_ptr_sub39;
      var $41=$p;
      var $head=(($41+4)|0);
      var $42=HEAP32[(($head)>>2)];
      var $and40=$42 & -8;
      var $43=$leadsize;
      var $sub41=((($and40)-($43))|0);
      $newsize=$sub41;
      var $44=$p;
      var $head42=(($44+4)|0);
      var $45=HEAP32[(($head42)>>2)];
      var $and43=$45 & 3;
      var $cmp44=(($and43)|0)==0;
      if ($cmp44) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $46=$p;
      var $prev_foot=(($46)|0);
      var $47=HEAP32[(($prev_foot)>>2)];
      var $48=$leadsize;
      var $add46=((($47)+($48))|0);
      var $49=$newp;
      var $prev_foot47=(($49)|0);
      HEAP32[(($prev_foot47)>>2)]=$add46;
      var $50=$newsize;
      var $51=$newp;
      var $head48=(($51+4)|0);
      HEAP32[(($head48)>>2)]=$50;
      label = 26; break;
    case 25: 
      var $52=$newp;
      var $head50=(($52+4)|0);
      var $53=HEAP32[(($head50)>>2)];
      var $and51=$53 & 1;
      var $54=$newsize;
      var $or=$and51 | $54;
      var $or52=$or | 2;
      var $55=$newp;
      var $head53=(($55+4)|0);
      HEAP32[(($head53)>>2)]=$or52;
      var $56=$newp;
      var $57=$56;
      var $58=$newsize;
      var $add_ptr54=(($57+$58)|0);
      var $59=$add_ptr54;
      var $head55=(($59+4)|0);
      var $60=HEAP32[(($head55)>>2)];
      var $or56=$60 | 1;
      HEAP32[(($head55)>>2)]=$or56;
      var $61=$p;
      var $head57=(($61+4)|0);
      var $62=HEAP32[(($head57)>>2)];
      var $and58=$62 & 1;
      var $63=$leadsize;
      var $or59=$and58 | $63;
      var $or60=$or59 | 2;
      var $64=$p;
      var $head61=(($64+4)|0);
      HEAP32[(($head61)>>2)]=$or60;
      var $65=$p;
      var $66=$65;
      var $67=$leadsize;
      var $add_ptr62=(($66+$67)|0);
      var $68=$add_ptr62;
      var $head63=(($68+4)|0);
      var $69=HEAP32[(($head63)>>2)];
      var $or64=$69 | 1;
      HEAP32[(($head63)>>2)]=$or64;
      var $70=$p;
      var $71=$70;
      var $add_ptr65=(($71+8)|0);
      $leader=$add_ptr65;
      label = 26; break;
    case 26: 
      var $72=$newp;
      $p=$72;
      label = 27; break;
    case 27: 
      var $73=$p;
      var $head68=(($73+4)|0);
      var $74=HEAP32[(($head68)>>2)];
      var $and69=$74 & 3;
      var $cmp70=(($and69)|0)==0;
      if ($cmp70) { label = 31; break; } else { label = 28; break; }
    case 28: 
      var $75=$p;
      var $head72=(($75+4)|0);
      var $76=HEAP32[(($head72)>>2)];
      var $and73=$76 & -8;
      $size=$and73;
      var $77=$size;
      var $78=$nb;
      var $add74=((($78)+(16))|0);
      var $cmp75=(($77)>>>0) > (($add74)>>>0);
      if ($cmp75) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $79=$size;
      var $80=$nb;
      var $sub77=((($79)-($80))|0);
      $remainder_size=$sub77;
      var $81=$p;
      var $82=$81;
      var $83=$nb;
      var $add_ptr78=(($82+$83)|0);
      var $84=$add_ptr78;
      $remainder=$84;
      var $85=$p;
      var $head79=(($85+4)|0);
      var $86=HEAP32[(($head79)>>2)];
      var $and80=$86 & 1;
      var $87=$nb;
      var $or81=$and80 | $87;
      var $or82=$or81 | 2;
      var $88=$p;
      var $head83=(($88+4)|0);
      HEAP32[(($head83)>>2)]=$or82;
      var $89=$p;
      var $90=$89;
      var $91=$nb;
      var $add_ptr84=(($90+$91)|0);
      var $92=$add_ptr84;
      var $head85=(($92+4)|0);
      var $93=HEAP32[(($head85)>>2)];
      var $or86=$93 | 1;
      HEAP32[(($head85)>>2)]=$or86;
      var $94=$remainder;
      var $head87=(($94+4)|0);
      var $95=HEAP32[(($head87)>>2)];
      var $and88=$95 & 1;
      var $96=$remainder_size;
      var $or89=$and88 | $96;
      var $or90=$or89 | 2;
      var $97=$remainder;
      var $head91=(($97+4)|0);
      HEAP32[(($head91)>>2)]=$or90;
      var $98=$remainder;
      var $99=$98;
      var $100=$remainder_size;
      var $add_ptr92=(($99+$100)|0);
      var $101=$add_ptr92;
      var $head93=(($101+4)|0);
      var $102=HEAP32[(($head93)>>2)];
      var $or94=$102 | 1;
      HEAP32[(($head93)>>2)]=$or94;
      var $103=$remainder;
      var $104=$103;
      var $add_ptr95=(($104+8)|0);
      $trailer=$add_ptr95;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $105=$leader;
      var $cmp98=(($105)|0)!=0;
      if ($cmp98) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $106=$leader;
      _free($106);
      label = 33; break;
    case 33: 
      var $107=$trailer;
      var $cmp101=(($107)|0)!=0;
      if ($cmp101) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $108=$trailer;
      _free($108);
      label = 35; break;
    case 35: 
      var $109=$p;
      var $110=$109;
      var $add_ptr104=(($110+8)|0);
      $retval=$add_ptr104;
      label = 38; break;
    case 36: 
      label = 37; break;
    case 37: 
      $retval=0;
      label = 38; break;
    case 38: 
      var $111=$retval;

      return $111;
    default: assert(0, "bad label: " + label);
  }

}
_internal_memalign["X"]=1;

function _independent_calloc($n_elements, $elem_size, $chunks) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $n_elements_addr;
  var $elem_size_addr;
  var $chunks_addr;
  var $sz=__stackBase__;
  $n_elements_addr=$n_elements;
  $elem_size_addr=$elem_size;
  $chunks_addr=$chunks;
  var $0=$elem_size_addr;
  HEAP32[(($sz)>>2)]=$0;
  var $1=$n_elements_addr;
  var $2=$chunks_addr;
  var $call=_ialloc(5387700, $1, $sz, 3, $2);
  STACKTOP = __stackBase__;
  return $call;
}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldmem_addr;
      var $bytes_addr;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $m_addr=$m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>0) >= 4294967232;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=___errno_location();
      HEAP32[(($call)>>2)]=12;
      $retval=0;
      label = 35; break;
    case 4: 
      var $1=$oldmem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $oldp=$2;
      var $3=$oldp;
      var $head=(($3+4)|0);
      var $4=HEAP32[(($head)>>2)];
      var $and=$4 & -8;
      $oldsize=$and;
      var $5=$oldp;
      var $6=$5;
      var $7=$oldsize;
      var $add_ptr1=(($6+$7)|0);
      var $8=$add_ptr1;
      $next=$8;
      $newp=0;
      $extra=0;
      var $9=$oldp;
      var $10=$9;
      var $11=$m_addr;
      var $least_addr=(($11+16)|0);
      var $12=HEAP32[(($least_addr)>>2)];
      var $cmp2=(($10)>>>0) >= (($12)>>>0);
      if ($cmp2) { label = 5; break; } else { var $21 = 0;label = 8; break; }
    case 5: 
      var $13=$oldp;
      var $head3=(($13+4)|0);
      var $14=HEAP32[(($head3)>>2)];
      var $and4=$14 & 3;
      var $cmp5=(($and4)|0)!=1;
      if ($cmp5) { label = 6; break; } else { var $21 = 0;label = 8; break; }
    case 6: 
      var $15=$oldp;
      var $16=$15;
      var $17=$next;
      var $18=$17;
      var $cmp7=(($16)>>>0) < (($18)>>>0);
      if ($cmp7) { label = 7; break; } else { var $21 = 0;label = 8; break; }
    case 7: 
      var $19=$next;
      var $head8=(($19+4)|0);
      var $20=HEAP32[(($head8)>>2)];
      var $and9=$20 & 1;
      var $tobool=(($and9)|0)!=0;
      var $21 = $tobool;label = 8; break;
    case 8: 
      var $21;
      var $land_ext=(($21)&1);
      var $expval=($land_ext);
      var $tobool10=(($expval)|0)!=0;
      if ($tobool10) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$bytes_addr;
      var $cmp12=(($22)>>>0) < 11;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 16;label = 12; break;
    case 11: 
      var $23=$bytes_addr;
      var $add=((($23)+(4))|0);
      var $add13=((($add)+(7))|0);
      var $and14=$add13 & -8;
      var $cond = $and14;label = 12; break;
    case 12: 
      var $cond;
      $nb=$cond;
      var $24=$oldp;
      var $head15=(($24+4)|0);
      var $25=HEAP32[(($head15)>>2)];
      var $and16=$25 & 3;
      var $cmp17=(($and16)|0)==0;
      if ($cmp17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $26=$m_addr;
      var $27=$oldp;
      var $28=$nb;
      var $call19=_mmap_resize($26, $27, $28);
      $newp=$call19;
      label = 23; break;
    case 14: 
      var $29=$oldsize;
      var $30=$nb;
      var $cmp20=(($29)>>>0) >= (($30)>>>0);
      if ($cmp20) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $31=$oldsize;
      var $32=$nb;
      var $sub=((($31)-($32))|0);
      $rsize=$sub;
      var $33=$oldp;
      $newp=$33;
      var $34=$rsize;
      var $cmp22=(($34)>>>0) >= 16;
      if ($cmp22) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $35=$newp;
      var $36=$35;
      var $37=$nb;
      var $add_ptr24=(($36+$37)|0);
      var $38=$add_ptr24;
      $remainder=$38;
      var $39=$newp;
      var $head25=(($39+4)|0);
      var $40=HEAP32[(($head25)>>2)];
      var $and26=$40 & 1;
      var $41=$nb;
      var $or=$and26 | $41;
      var $or27=$or | 2;
      var $42=$newp;
      var $head28=(($42+4)|0);
      HEAP32[(($head28)>>2)]=$or27;
      var $43=$newp;
      var $44=$43;
      var $45=$nb;
      var $add_ptr29=(($44+$45)|0);
      var $46=$add_ptr29;
      var $head30=(($46+4)|0);
      var $47=HEAP32[(($head30)>>2)];
      var $or31=$47 | 1;
      HEAP32[(($head30)>>2)]=$or31;
      var $48=$rsize;
      var $or32=$48 | 1;
      var $or33=$or32 | 2;
      var $49=$remainder;
      var $head34=(($49+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $50=$remainder;
      var $51=$50;
      var $52=$rsize;
      var $add_ptr35=(($51+$52)|0);
      var $53=$add_ptr35;
      var $head36=(($53+4)|0);
      var $54=HEAP32[(($head36)>>2)];
      var $or37=$54 | 1;
      HEAP32[(($head36)>>2)]=$or37;
      var $55=$remainder;
      var $56=$55;
      var $add_ptr38=(($56+8)|0);
      $extra=$add_ptr38;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $57=$next;
      var $58=$m_addr;
      var $top=(($58+24)|0);
      var $59=HEAP32[(($top)>>2)];
      var $cmp41=(($57)|0)==(($59)|0);
      if ($cmp41) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $60=$oldsize;
      var $61=$m_addr;
      var $topsize=(($61+12)|0);
      var $62=HEAP32[(($topsize)>>2)];
      var $add43=((($60)+($62))|0);
      var $63=$nb;
      var $cmp44=(($add43)>>>0) > (($63)>>>0);
      if ($cmp44) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $64=$oldsize;
      var $65=$m_addr;
      var $topsize46=(($65+12)|0);
      var $66=HEAP32[(($topsize46)>>2)];
      var $add47=((($64)+($66))|0);
      $newsize=$add47;
      var $67=$newsize;
      var $68=$nb;
      var $sub48=((($67)-($68))|0);
      $newtopsize=$sub48;
      var $69=$oldp;
      var $70=$69;
      var $71=$nb;
      var $add_ptr49=(($70+$71)|0);
      var $72=$add_ptr49;
      $newtop=$72;
      var $73=$oldp;
      var $head50=(($73+4)|0);
      var $74=HEAP32[(($head50)>>2)];
      var $and51=$74 & 1;
      var $75=$nb;
      var $or52=$and51 | $75;
      var $or53=$or52 | 2;
      var $76=$oldp;
      var $head54=(($76+4)|0);
      HEAP32[(($head54)>>2)]=$or53;
      var $77=$oldp;
      var $78=$77;
      var $79=$nb;
      var $add_ptr55=(($78+$79)|0);
      var $80=$add_ptr55;
      var $head56=(($80+4)|0);
      var $81=HEAP32[(($head56)>>2)];
      var $or57=$81 | 1;
      HEAP32[(($head56)>>2)]=$or57;
      var $82=$newtopsize;
      var $or58=$82 | 1;
      var $83=$newtop;
      var $head59=(($83+4)|0);
      HEAP32[(($head59)>>2)]=$or58;
      var $84=$newtop;
      var $85=$m_addr;
      var $top60=(($85+24)|0);
      HEAP32[(($top60)>>2)]=$84;
      var $86=$newtopsize;
      var $87=$m_addr;
      var $topsize61=(($87+12)|0);
      HEAP32[(($topsize61)>>2)]=$86;
      var $88=$oldp;
      $newp=$88;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      var $89=$newp;
      var $cmp67=(($89)|0)!=0;
      if ($cmp67) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $90=$extra;
      var $cmp69=(($90)|0)!=0;
      if ($cmp69) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $91=$extra;
      _free($91);
      label = 28; break;
    case 28: 
      var $92=$newp;
      var $93=$92;
      var $add_ptr72=(($93+8)|0);
      $retval=$add_ptr72;
      label = 35; break;
    case 29: 
      var $94=$bytes_addr;
      var $call74=_malloc($94);
      $newmem=$call74;
      var $95=$newmem;
      var $cmp75=(($95)|0)!=0;
      if ($cmp75) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $96=$oldsize;
      var $97=$oldp;
      var $head77=(($97+4)|0);
      var $98=HEAP32[(($head77)>>2)];
      var $and78=$98 & 3;
      var $cmp79=(($and78)|0)==0;
      var $cond80=$cmp79 ? 8 : 4;
      var $sub81=((($96)-($cond80))|0);
      $oc=$sub81;
      var $99=$newmem;
      var $100=$oldmem_addr;
      var $101=$oc;
      var $102=$bytes_addr;
      var $cmp82=(($101)>>>0) < (($102)>>>0);
      if ($cmp82) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $103=$oc;
      var $cond86 = $103;label = 33; break;
    case 32: 
      var $104=$bytes_addr;
      var $cond86 = $104;label = 33; break;
    case 33: 
      var $cond86;
      assert($cond86 % 1 === 0);_memcpy($99, $100, $cond86);
      var $105=$oldmem_addr;
      _free($105);
      label = 34; break;
    case 34: 
      var $106=$newmem;
      $retval=$106;
      label = 35; break;
    case 35: 
      var $107=$retval;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
_internal_realloc["X"]=1;

function _malloc_footprint() {
  var label = 0;


  var $0=HEAP32[((((5388132)|0))>>2)];

  return $0;
}


function _malloc_max_footprint() {
  var label = 0;


  var $0=HEAP32[((((5388136)|0))>>2)];

  return $0;
}


function _ialloc($m, $n_elements, $sizes, $opts, $chunks) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $n_elements_addr;
      var $sizes_addr;
      var $opts_addr;
      var $chunks_addr;
      var $element_size;
      var $contents_size;
      var $array_size;
      var $mem;
      var $p;
      var $remainder_size;
      var $marray;
      var $array_chunk;
      var $was_enabled;
      var $size;
      var $i;
      var $array_chunk_size;
      $m_addr=$m;
      $n_elements_addr=$n_elements;
      $sizes_addr=$sizes;
      $opts_addr=$opts;
      $chunks_addr=$chunks;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$chunks_addr;
      var $cmp1=(($2)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $3=$n_elements_addr;
      var $cmp2=(($3)|0)==0;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$chunks_addr;
      $retval=$4;
      label = 48; break;
    case 7: 
      var $5=$chunks_addr;
      $marray=$5;
      $array_size=0;
      label = 14; break;
    case 8: 
      var $6=$n_elements_addr;
      var $cmp4=(($6)|0)==0;
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $call6=_malloc(0);
      var $7=$call6;
      $retval=$7;
      label = 48; break;
    case 10: 
      $marray=0;
      var $8=$n_elements_addr;
      var $mul=((($8<<2))&-1);
      var $cmp8=(($mul)>>>0) < 11;
      if ($cmp8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $cond = 16;label = 13; break;
    case 12: 
      var $9=$n_elements_addr;
      var $mul9=((($9<<2))&-1);
      var $add=((($mul9)+(4))|0);
      var $add10=((($add)+(7))|0);
      var $and=$add10 & -8;
      var $cond = $and;label = 13; break;
    case 13: 
      var $cond;
      $array_size=$cond;
      label = 14; break;
    case 14: 
      var $10=$opts_addr;
      var $and12=$10 & 1;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $11=$sizes_addr;
      var $12=HEAP32[(($11)>>2)];
      var $cmp15=(($12)>>>0) < 11;
      if ($cmp15) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $cond22 = 16;label = 18; break;
    case 17: 
      var $13=$sizes_addr;
      var $14=HEAP32[(($13)>>2)];
      var $add18=((($14)+(4))|0);
      var $add19=((($add18)+(7))|0);
      var $and20=$add19 & -8;
      var $cond22 = $and20;label = 18; break;
    case 18: 
      var $cond22;
      $element_size=$cond22;
      var $15=$n_elements_addr;
      var $16=$element_size;
      var $mul23=((($15)*($16))&-1);
      $contents_size=$mul23;
      label = 27; break;
    case 19: 
      $element_size=0;
      $contents_size=0;
      $i=0;
      label = 20; break;
    case 20: 
      var $17=$i;
      var $18=$n_elements_addr;
      var $cmp25=(($17)|0)!=(($18)|0);
      if ($cmp25) { label = 21; break; } else { label = 26; break; }
    case 21: 
      var $19=$i;
      var $20=$sizes_addr;
      var $arrayidx=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      var $cmp26=(($21)>>>0) < 11;
      if ($cmp26) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $cond34 = 16;label = 24; break;
    case 23: 
      var $22=$i;
      var $23=$sizes_addr;
      var $arrayidx29=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx29)>>2)];
      var $add30=((($24)+(4))|0);
      var $add31=((($add30)+(7))|0);
      var $and32=$add31 & -8;
      var $cond34 = $and32;label = 24; break;
    case 24: 
      var $cond34;
      var $25=$contents_size;
      var $add35=((($25)+($cond34))|0);
      $contents_size=$add35;
      label = 25; break;
    case 25: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 20; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $27=$contents_size;
      var $28=$array_size;
      var $add37=((($27)+($28))|0);
      $size=$add37;
      var $29=$m_addr;
      var $mflags=(($29+440)|0);
      var $30=HEAP32[(($mflags)>>2)];
      var $and38=$30 & 0;
      $was_enabled=$and38;
      var $31=$m_addr;
      var $mflags39=(($31+440)|0);
      var $32=HEAP32[(($mflags39)>>2)];
      HEAP32[(($mflags39)>>2)]=$32;
      var $33=$size;
      var $sub=((($33)-(4))|0);
      var $call40=_malloc($sub);
      $mem=$call40;
      var $34=$was_enabled;
      var $tobool41=(($34)|0)!=0;
      if ($tobool41) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $35=$m_addr;
      var $mflags43=(($35+440)|0);
      var $36=HEAP32[(($mflags43)>>2)];
      HEAP32[(($mflags43)>>2)]=$36;
      label = 29; break;
    case 29: 
      var $37=$mem;
      var $cmp45=(($37)|0)==0;
      if ($cmp45) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $retval=0;
      label = 48; break;
    case 31: 
      var $38=$mem;
      var $add_ptr=((($38)-(8))|0);
      var $39=$add_ptr;
      $p=$39;
      var $40=$p;
      var $head=(($40+4)|0);
      var $41=HEAP32[(($head)>>2)];
      var $and48=$41 & -8;
      $remainder_size=$and48;
      var $42=$opts_addr;
      var $and49=$42 & 2;
      var $tobool50=(($and49)|0)!=0;
      if ($tobool50) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $43=$mem;
      var $44=$43;
      var $45=$44;
      var $46=$remainder_size;
      var $sub52=((($46)-(4))|0);
      var $47=$array_size;
      var $sub53=((($sub52)-($47))|0);
      _memset($45, 0, $sub53);
      label = 33; break;
    case 33: 
      var $48=$marray;
      var $cmp55=(($48)|0)==0;
      if ($cmp55) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $49=$p;
      var $50=$49;
      var $51=$contents_size;
      var $add_ptr57=(($50+$51)|0);
      var $52=$add_ptr57;
      $array_chunk=$52;
      var $53=$remainder_size;
      var $54=$contents_size;
      var $sub58=((($53)-($54))|0);
      $array_chunk_size=$sub58;
      var $55=$array_chunk;
      var $56=$55;
      var $add_ptr59=(($56+8)|0);
      var $57=$add_ptr59;
      $marray=$57;
      var $58=$array_chunk_size;
      var $or=$58 | 1;
      var $or60=$or | 2;
      var $59=$array_chunk;
      var $head61=(($59+4)|0);
      HEAP32[(($head61)>>2)]=$or60;
      var $60=$contents_size;
      $remainder_size=$60;
      label = 35; break;
    case 35: 
      $i=0;
      label = 36; break;
    case 36: 
      var $61=$p;
      var $62=$61;
      var $add_ptr64=(($62+8)|0);
      var $63=$i;
      var $64=$marray;
      var $arrayidx65=(($64+($63<<2))|0);
      HEAP32[(($arrayidx65)>>2)]=$add_ptr64;
      var $65=$i;
      var $66=$n_elements_addr;
      var $sub66=((($66)-(1))|0);
      var $cmp67=(($65)|0)!=(($sub66)|0);
      if ($cmp67) { label = 37; break; } else { label = 44; break; }
    case 37: 
      var $67=$element_size;
      var $cmp69=(($67)|0)!=0;
      if ($cmp69) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $68=$element_size;
      $size=$68;
      label = 43; break;
    case 39: 
      var $69=$i;
      var $70=$sizes_addr;
      var $arrayidx72=(($70+($69<<2))|0);
      var $71=HEAP32[(($arrayidx72)>>2)];
      var $cmp73=(($71)>>>0) < 11;
      if ($cmp73) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $cond81 = 16;label = 42; break;
    case 41: 
      var $72=$i;
      var $73=$sizes_addr;
      var $arrayidx76=(($73+($72<<2))|0);
      var $74=HEAP32[(($arrayidx76)>>2)];
      var $add77=((($74)+(4))|0);
      var $add78=((($add77)+(7))|0);
      var $and79=$add78 & -8;
      var $cond81 = $and79;label = 42; break;
    case 42: 
      var $cond81;
      $size=$cond81;
      label = 43; break;
    case 43: 
      var $75=$size;
      var $76=$remainder_size;
      var $sub83=((($76)-($75))|0);
      $remainder_size=$sub83;
      var $77=$size;
      var $or84=$77 | 1;
      var $or85=$or84 | 2;
      var $78=$p;
      var $head86=(($78+4)|0);
      HEAP32[(($head86)>>2)]=$or85;
      var $79=$p;
      var $80=$79;
      var $81=$size;
      var $add_ptr87=(($80+$81)|0);
      var $82=$add_ptr87;
      $p=$82;
      label = 45; break;
    case 44: 
      var $83=$remainder_size;
      var $or89=$83 | 1;
      var $or90=$or89 | 2;
      var $84=$p;
      var $head91=(($84+4)|0);
      HEAP32[(($head91)>>2)]=$or90;
      label = 47; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $85=$i;
      var $inc94=((($85)+(1))|0);
      $i=$inc94;
      label = 36; break;
    case 47: 
      var $86=$marray;
      $retval=$86;
      label = 48; break;
    case 48: 
      var $87=$retval;

      return $87;
    default: assert(0, "bad label: " + label);
  }

}
_ialloc["X"]=1;

function _independent_comalloc($n_elements, $sizes, $chunks) {
  var label = 0;


  var $n_elements_addr;
  var $sizes_addr;
  var $chunks_addr;
  $n_elements_addr=$n_elements;
  $sizes_addr=$sizes;
  $chunks_addr=$chunks;
  var $0=$n_elements_addr;
  var $1=$sizes_addr;
  var $2=$chunks_addr;
  var $call=_ialloc(5387700, $0, $1, 0, $2);

  return $call;
}


function _valloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $pagesz;
      $bytes_addr=$bytes;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=HEAP32[((((5292316)|0))>>2)];
      $pagesz=$2;
      var $3=$pagesz;
      var $4=$bytes_addr;
      var $call1=_memalign($3, $4);

      return $call1;
    default: assert(0, "bad label: " + label);
  }

}


function _pvalloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $pagesz;
      $bytes_addr=$bytes;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=HEAP32[((((5292316)|0))>>2)];
      $pagesz=$2;
      var $3=$pagesz;
      var $4=$bytes_addr;
      var $5=$pagesz;
      var $add=((($4)+($5))|0);
      var $sub=((($add)-(1))|0);
      var $6=$pagesz;
      var $sub1=((($6)-(1))|0);
      var $neg=$sub1 ^ -1;
      var $and=$sub & $neg;
      var $call2=_memalign($3, $and);

      return $call2;
    default: assert(0, "bad label: " + label);
  }

}


function _malloc_trim($pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pad_addr;
      var $result;
      $pad_addr=$pad;
      $result=0;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$pad_addr;
      var $call1=_sys_trim(5387700, $2);
      $result=$call1;
      var $3=$result;

      return $3;
    default: assert(0, "bad label: " + label);
  }

}


function _mallinfo($agg_result) {
  var label = 0;


  _internal_mallinfo($agg_result, 5387700);

  return;
}


function _internal_mallinfo($agg_result, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $nm=__stackBase__;
      var $nfree;
      var $mfree;
      var $sum;
      var $s;
      var $q;
      var $sz;
      $m_addr=$m;
      var $0=$nm;
      for (var $$dest = $0>>2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $1=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { var $2 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $2 = $tobool;label = 4; break;
    case 4: 
      var $2;
      var $lor_ext=(($2)&1);
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp1=(($4)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 21; break; }
    case 5: 
      $nfree=1;
      var $5=$m_addr;
      var $topsize=(($5+12)|0);
      var $6=HEAP32[(($topsize)>>2)];
      var $add=((($6)+(40))|0);
      $mfree=$add;
      var $7=$mfree;
      $sum=$7;
      var $8=$m_addr;
      var $seg=(($8+444)|0);
      $s=$seg;
      label = 6; break;
    case 6: 
      var $9=$s;
      var $cmp2=(($9)|0)!=0;
      if ($cmp2) { label = 7; break; } else { label = 20; break; }
    case 7: 
      var $10=$s;
      var $base=(($10)|0);
      var $11=HEAP32[(($base)>>2)];
      var $12=$s;
      var $base3=(($12)|0);
      var $13=HEAP32[(($base3)>>2)];
      var $add_ptr=(($13+8)|0);
      var $14=$add_ptr;
      var $and=$14 & 7;
      var $cmp4=(($and)|0)==0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $cond = 0;label = 10; break;
    case 9: 
      var $15=$s;
      var $base5=(($15)|0);
      var $16=HEAP32[(($base5)>>2)];
      var $add_ptr6=(($16+8)|0);
      var $17=$add_ptr6;
      var $and7=$17 & 7;
      var $sub=(((8)-($and7))|0);
      var $and8=$sub & 7;
      var $cond = $and8;label = 10; break;
    case 10: 
      var $cond;
      var $add_ptr9=(($11+$cond)|0);
      var $18=$add_ptr9;
      $q=$18;
      label = 11; break;
    case 11: 
      var $19=$q;
      var $20=$19;
      var $21=$s;
      var $base11=(($21)|0);
      var $22=HEAP32[(($base11)>>2)];
      var $cmp12=(($20)>>>0) >= (($22)>>>0);
      if ($cmp12) { label = 12; break; } else { var $34 = 0;label = 15; break; }
    case 12: 
      var $23=$q;
      var $24=$23;
      var $25=$s;
      var $base13=(($25)|0);
      var $26=HEAP32[(($base13)>>2)];
      var $27=$s;
      var $size=(($27+4)|0);
      var $28=HEAP32[(($size)>>2)];
      var $add_ptr14=(($26+$28)|0);
      var $cmp15=(($24)>>>0) < (($add_ptr14)>>>0);
      if ($cmp15) { label = 13; break; } else { var $34 = 0;label = 15; break; }
    case 13: 
      var $29=$q;
      var $30=$m_addr;
      var $top17=(($30+24)|0);
      var $31=HEAP32[(($top17)>>2)];
      var $cmp18=(($29)|0)!=(($31)|0);
      if ($cmp18) { label = 14; break; } else { var $34 = 0;label = 15; break; }
    case 14: 
      var $32=$q;
      var $head=(($32+4)|0);
      var $33=HEAP32[(($head)>>2)];
      var $cmp19=(($33)|0)!=7;
      var $34 = $cmp19;label = 15; break;
    case 15: 
      var $34;
      if ($34) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $35=$q;
      var $head21=(($35+4)|0);
      var $36=HEAP32[(($head21)>>2)];
      var $and22=$36 & -8;
      $sz=$and22;
      var $37=$sz;
      var $38=$sum;
      var $add23=((($38)+($37))|0);
      $sum=$add23;
      var $39=$q;
      var $head24=(($39+4)|0);
      var $40=HEAP32[(($head24)>>2)];
      var $and25=$40 & 3;
      var $cmp26=(($and25)|0)!=1;
      if ($cmp26) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $41=$sz;
      var $42=$mfree;
      var $add28=((($42)+($41))|0);
      $mfree=$add28;
      var $43=$nfree;
      var $inc=((($43)+(1))|0);
      $nfree=$inc;
      label = 18; break;
    case 18: 
      var $44=$q;
      var $45=$44;
      var $46=$q;
      var $head29=(($46+4)|0);
      var $47=HEAP32[(($head29)>>2)];
      var $and30=$47 & -8;
      var $add_ptr31=(($45+$and30)|0);
      var $48=$add_ptr31;
      $q=$48;
      label = 11; break;
    case 19: 
      var $49=$s;
      var $next=(($49+8)|0);
      var $50=HEAP32[(($next)>>2)];
      $s=$50;
      label = 6; break;
    case 20: 
      var $51=$sum;
      var $arena=(($nm)|0);
      HEAP32[(($arena)>>2)]=$51;
      var $52=$nfree;
      var $ordblks=(($nm+4)|0);
      HEAP32[(($ordblks)>>2)]=$52;
      var $53=$m_addr;
      var $footprint=(($53+432)|0);
      var $54=HEAP32[(($footprint)>>2)];
      var $55=$sum;
      var $sub33=((($54)-($55))|0);
      var $hblkhd=(($nm+16)|0);
      HEAP32[(($hblkhd)>>2)]=$sub33;
      var $56=$m_addr;
      var $max_footprint=(($56+436)|0);
      var $57=HEAP32[(($max_footprint)>>2)];
      var $usmblks=(($nm+20)|0);
      HEAP32[(($usmblks)>>2)]=$57;
      var $58=$m_addr;
      var $footprint34=(($58+432)|0);
      var $59=HEAP32[(($footprint34)>>2)];
      var $60=$mfree;
      var $sub35=((($59)-($60))|0);
      var $uordblks=(($nm+28)|0);
      HEAP32[(($uordblks)>>2)]=$sub35;
      var $61=$mfree;
      var $fordblks=(($nm+32)|0);
      HEAP32[(($fordblks)>>2)]=$61;
      var $62=$m_addr;
      var $topsize36=(($62+12)|0);
      var $63=HEAP32[(($topsize36)>>2)];
      var $keepcost=(($nm+36)|0);
      HEAP32[(($keepcost)>>2)]=$63;
      label = 21; break;
    case 21: 
      var $64=$agg_result;
      var $65=$nm;
      assert(40 % 1 === 0);for (var $$src = $65>>2, $$dest = $64>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      };
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_internal_mallinfo["X"]=1;

function _malloc_stats() {
  var label = 0;


  _internal_malloc_stats(5387700);

  return;
}


function _internal_malloc_stats($m) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $maxfp;
      var $fp;
      var $used;
      var $s;
      var $q;
      $m_addr=$m;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      $maxfp=0;
      $fp=0;
      $used=0;
      var $2=$m_addr;
      var $top=(($2+24)|0);
      var $3=HEAP32[(($top)>>2)];
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 21; break; }
    case 5: 
      var $4=$m_addr;
      var $seg=(($4+444)|0);
      $s=$seg;
      var $5=$m_addr;
      var $max_footprint=(($5+436)|0);
      var $6=HEAP32[(($max_footprint)>>2)];
      $maxfp=$6;
      var $7=$m_addr;
      var $footprint=(($7+432)|0);
      var $8=HEAP32[(($footprint)>>2)];
      $fp=$8;
      var $9=$fp;
      var $10=$m_addr;
      var $topsize=(($10+12)|0);
      var $11=HEAP32[(($topsize)>>2)];
      var $add=((($11)+(40))|0);
      var $sub=((($9)-($add))|0);
      $used=$sub;
      label = 6; break;
    case 6: 
      var $12=$s;
      var $cmp2=(($12)|0)!=0;
      if ($cmp2) { label = 7; break; } else { label = 20; break; }
    case 7: 
      var $13=$s;
      var $base=(($13)|0);
      var $14=HEAP32[(($base)>>2)];
      var $15=$s;
      var $base3=(($15)|0);
      var $16=HEAP32[(($base3)>>2)];
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and=$17 & 7;
      var $cmp4=(($and)|0)==0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $cond = 0;label = 10; break;
    case 9: 
      var $18=$s;
      var $base5=(($18)|0);
      var $19=HEAP32[(($base5)>>2)];
      var $add_ptr6=(($19+8)|0);
      var $20=$add_ptr6;
      var $and7=$20 & 7;
      var $sub8=(((8)-($and7))|0);
      var $and9=$sub8 & 7;
      var $cond = $and9;label = 10; break;
    case 10: 
      var $cond;
      var $add_ptr10=(($14+$cond)|0);
      var $21=$add_ptr10;
      $q=$21;
      label = 11; break;
    case 11: 
      var $22=$q;
      var $23=$22;
      var $24=$s;
      var $base12=(($24)|0);
      var $25=HEAP32[(($base12)>>2)];
      var $cmp13=(($23)>>>0) >= (($25)>>>0);
      if ($cmp13) { label = 12; break; } else { var $37 = 0;label = 15; break; }
    case 12: 
      var $26=$q;
      var $27=$26;
      var $28=$s;
      var $base14=(($28)|0);
      var $29=HEAP32[(($base14)>>2)];
      var $30=$s;
      var $size=(($30+4)|0);
      var $31=HEAP32[(($size)>>2)];
      var $add_ptr15=(($29+$31)|0);
      var $cmp16=(($27)>>>0) < (($add_ptr15)>>>0);
      if ($cmp16) { label = 13; break; } else { var $37 = 0;label = 15; break; }
    case 13: 
      var $32=$q;
      var $33=$m_addr;
      var $top18=(($33+24)|0);
      var $34=HEAP32[(($top18)>>2)];
      var $cmp19=(($32)|0)!=(($34)|0);
      if ($cmp19) { label = 14; break; } else { var $37 = 0;label = 15; break; }
    case 14: 
      var $35=$q;
      var $head=(($35+4)|0);
      var $36=HEAP32[(($head)>>2)];
      var $cmp20=(($36)|0)!=7;
      var $37 = $cmp20;label = 15; break;
    case 15: 
      var $37;
      if ($37) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $38=$q;
      var $head22=(($38+4)|0);
      var $39=HEAP32[(($head22)>>2)];
      var $and23=$39 & 3;
      var $cmp24=(($and23)|0)!=1;
      if ($cmp24) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $40=$q;
      var $head26=(($40+4)|0);
      var $41=HEAP32[(($head26)>>2)];
      var $and27=$41 & -8;
      var $42=$used;
      var $sub28=((($42)-($and27))|0);
      $used=$sub28;
      label = 18; break;
    case 18: 
      var $43=$q;
      var $44=$43;
      var $45=$q;
      var $head29=(($45+4)|0);
      var $46=HEAP32[(($head29)>>2)];
      var $and30=$46 & -8;
      var $add_ptr31=(($44+$and30)|0);
      var $47=$add_ptr31;
      $q=$47;
      label = 11; break;
    case 19: 
      var $48=$s;
      var $next=(($48+8)|0);
      var $49=HEAP32[(($next)>>2)];
      $s=$49;
      label = 6; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $50=HEAP32[((_stderr)>>2)];
      var $51=$maxfp;
      var $call34=_fprintf($50, ((5384772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$51,tempInt));
      var $52=HEAP32[((_stderr)>>2)];
      var $53=$fp;
      var $call35=_fprintf($52, ((5386716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$53,tempInt));
      var $54=HEAP32[((_stderr)>>2)];
      var $55=$used;
      var $call36=_fprintf($54, ((5385676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$55,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_internal_malloc_stats["X"]=1;

function _mallopt($param_number, $value) {
  var label = 0;


  var $param_number_addr;
  var $value_addr;
  $param_number_addr=$param_number;
  $value_addr=$value;
  var $0=$param_number_addr;
  var $1=$value_addr;
  var $call=_change_mparam($0, $1);

  return $call;
}


function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $call=_sysconf(8);
      $psize=$call;
      var $1=$psize;
      $gsize=$1;
      var $2=$gsize;
      var $3=$gsize;
      var $sub=((($3)-(1))|0);
      var $and=$2 & $sub;
      var $cmp1=(($and)|0)!=0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$psize;
      var $5=$psize;
      var $sub2=((($5)-(1))|0);
      var $and3=$4 & $sub2;
      var $cmp4=(($and3)|0)!=0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $6=$gsize;
      HEAP32[((((5292320)|0))>>2)]=$6;
      var $7=$psize;
      HEAP32[((((5292316)|0))>>2)]=$7;
      HEAP32[((((5292324)|0))>>2)]=-1;
      HEAP32[((((5292328)|0))>>2)]=2097152;
      HEAP32[((((5292332)|0))>>2)]=0;
      var $8=HEAP32[((((5292332)|0))>>2)];
      HEAP32[((((5388140)|0))>>2)]=$8;
      var $call6=_time(0);
      var $xor=$call6 ^ 1431655765;
      $magic=$xor;
      var $9=$magic;
      var $or=$9 | 8;
      $magic=$or;
      var $10=$magic;
      var $and7=$10 & -8;
      $magic=$and7;
      var $11=$magic;
      HEAP32[((((5292312)|0))>>2)]=$11;
      label = 7; break;
    case 7: 

      return 1;
    default: assert(0, "bad label: " + label);
  }

}


function _malloc_usable_size($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mem_addr;
      var $p;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $head=(($3+4)|0);
      var $4=HEAP32[(($head)>>2)];
      var $and=$4 & 3;
      var $cmp1=(($and)|0)!=1;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$p;
      var $head3=(($5+4)|0);
      var $6=HEAP32[(($head3)>>2)];
      var $and4=$6 & -8;
      var $7=$p;
      var $head5=(($7+4)|0);
      var $8=HEAP32[(($head5)>>2)];
      var $and6=$8 & 3;
      var $cmp7=(($and6)|0)==0;
      var $cond=$cmp7 ? 8 : 4;
      var $sub=((($and4)-($cond))|0);
      $retval=$sub;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $9=$retval;

      return $9;
    default: assert(0, "bad label: " + label);
  }

}


function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldp_addr;
      var $nb_addr;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $m_addr=$m;
      $oldp_addr=$oldp;
      $nb_addr=$nb;
      var $0=$oldp_addr;
      var $head=(($0+4)|0);
      var $1=HEAP32[(($head)>>2)];
      var $and=$1 & -8;
      $oldsize=$and;
      var $2=$nb_addr;
      var $shr=$2 >>> 3;
      var $cmp=(($shr)>>>0) < 32;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $3=$oldsize;
      var $4=$nb_addr;
      var $add=((($4)+(4))|0);
      var $cmp1=(($3)>>>0) >= (($add)>>>0);
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$oldsize;
      var $6=$nb_addr;
      var $sub=((($5)-($6))|0);
      var $7=HEAP32[((((5292320)|0))>>2)];
      var $shl=$7 << 1;
      var $cmp2=(($sub)>>>0) <= (($shl)>>>0);
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$oldp_addr;
      $retval=$8;
      label = 15; break;
    case 7: 
      var $9=$oldp_addr;
      var $prev_foot=(($9)|0);
      var $10=HEAP32[(($prev_foot)>>2)];
      $offset=$10;
      var $11=$oldsize;
      var $12=$offset;
      var $add4=((($11)+($12))|0);
      var $add5=((($add4)+(16))|0);
      $oldmmsize=$add5;
      var $13=$nb_addr;
      var $add6=((($13)+(24))|0);
      var $add7=((($add6)+(7))|0);
      var $14=HEAP32[((((5292316)|0))>>2)];
      var $sub8=((($14)-(1))|0);
      var $add9=((($add7)+($sub8))|0);
      var $15=HEAP32[((((5292316)|0))>>2)];
      var $sub10=((($15)-(1))|0);
      var $neg=$sub10 ^ -1;
      var $and11=$add9 & $neg;
      $newmmsize=$and11;
      $cp=-1;
      var $16=$cp;
      var $cmp12=(($16)|0)!=-1;
      if ($cmp12) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $17=$cp;
      var $18=$offset;
      var $add_ptr=(($17+$18)|0);
      var $19=$add_ptr;
      $newp=$19;
      var $20=$newmmsize;
      var $21=$offset;
      var $sub14=((($20)-($21))|0);
      var $sub15=((($sub14)-(16))|0);
      $psize=$sub15;
      var $22=$psize;
      var $23=$newp;
      var $head16=(($23+4)|0);
      HEAP32[(($head16)>>2)]=$22;
      var $24=$newp;
      var $25=$24;
      var $26=$psize;
      var $add_ptr17=(($25+$26)|0);
      var $27=$add_ptr17;
      var $head18=(($27+4)|0);
      HEAP32[(($head18)>>2)]=7;
      var $28=$newp;
      var $29=$28;
      var $30=$psize;
      var $add19=((($30)+(4))|0);
      var $add_ptr20=(($29+$add19)|0);
      var $31=$add_ptr20;
      var $head21=(($31+4)|0);
      HEAP32[(($head21)>>2)]=0;
      var $32=$cp;
      var $33=$m_addr;
      var $least_addr=(($33+16)|0);
      var $34=HEAP32[(($least_addr)>>2)];
      var $cmp22=(($32)>>>0) < (($34)>>>0);
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $35=$cp;
      var $36=$m_addr;
      var $least_addr24=(($36+16)|0);
      HEAP32[(($least_addr24)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $37=$newmmsize;
      var $38=$oldmmsize;
      var $sub26=((($37)-($38))|0);
      var $39=$m_addr;
      var $footprint=(($39+432)|0);
      var $40=HEAP32[(($footprint)>>2)];
      var $add27=((($40)+($sub26))|0);
      HEAP32[(($footprint)>>2)]=$add27;
      var $41=$m_addr;
      var $max_footprint=(($41+436)|0);
      var $42=HEAP32[(($max_footprint)>>2)];
      var $cmp28=(($add27)>>>0) > (($42)>>>0);
      if ($cmp28) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$m_addr;
      var $footprint30=(($43+432)|0);
      var $44=HEAP32[(($footprint30)>>2)];
      var $45=$m_addr;
      var $max_footprint31=(($45+436)|0);
      HEAP32[(($max_footprint31)>>2)]=$44;
      label = 12; break;
    case 12: 
      var $46=$newp;
      $retval=$46;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $47=$retval;

      return $47;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr;
      var $seg=(($0+444)|0);
      $sp=$seg;
      label = 3; break;
    case 3: 
      var $1=$addr_addr;
      var $2=$sp;
      var $base=(($2)|0);
      var $3=HEAP32[(($base)>>2)];
      var $cmp=(($1)>>>0) >= (($3)>>>0);
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0);
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$sp;
      $retval=$9;
      label = 9; break;
    case 6: 
      var $10=$sp;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $sp=$11;
      var $cmp3=(($11)|0)==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $4=$3;
      var $add_ptr1=(($4+8)|0);
      var $5=$add_ptr1;
      var $and2=$5 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $6=$p_addr;
      var $7=$6;
      var $8=$offset;
      var $add_ptr4=(($7+$8)|0);
      var $9=$add_ptr4;
      $p_addr=$9;
      var $10=$offset;
      var $11=$psize_addr;
      var $sub5=((($11)-($10))|0);
      $psize_addr=$sub5;
      var $12=$p_addr;
      var $13=$m_addr;
      var $top=(($13+24)|0);
      HEAP32[(($top)>>2)]=$12;
      var $14=$psize_addr;
      var $15=$m_addr;
      var $topsize=(($15+12)|0);
      HEAP32[(($topsize)>>2)]=$14;
      var $16=$psize_addr;
      var $or=$16 | 1;
      var $17=$p_addr;
      var $head=(($17+4)|0);
      HEAP32[(($head)>>2)]=$or;
      var $18=$p_addr;
      var $19=$18;
      var $20=$psize_addr;
      var $add_ptr6=(($19+$20)|0);
      var $21=$add_ptr6;
      var $head7=(($21+4)|0);
      HEAP32[(($head7)>>2)]=40;
      var $22=HEAP32[((((5292328)|0))>>2)];
      var $23=$m_addr;
      var $trim_check=(($23+28)|0);
      HEAP32[(($trim_check)>>2)]=$22;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr;
      var $add=((($0)+(24))|0);
      var $add1=((($add)+(7))|0);
      var $1=HEAP32[((((5292316)|0))>>2)];
      var $sub=((($1)-(1))|0);
      var $add2=((($add1)+($sub))|0);
      var $2=HEAP32[((((5292316)|0))>>2)];
      var $sub3=((($2)-(1))|0);
      var $neg=$sub3 ^ -1;
      var $and=$add2 & $neg;
      $mmsize=$and;
      var $3=$mmsize;
      var $4=$nb_addr;
      var $cmp=(($3)>>>0) > (($4)>>>0);
      if ($cmp) { label = 3; break; } else { label = 14; break; }
    case 3: 
      $mm=-1;
      var $5=$mm;
      var $cmp4=(($5)|0)!=-1;
      if ($cmp4) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $6=$mm;
      var $add_ptr=(($6+8)|0);
      var $7=$add_ptr;
      var $and6=$7 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond = 0;label = 7; break;
    case 6: 
      var $8=$mm;
      var $add_ptr8=(($8+8)|0);
      var $9=$add_ptr8;
      var $and9=$9 & 7;
      var $sub10=(((8)-($and9))|0);
      var $and11=$sub10 & 7;
      var $cond = $and11;label = 7; break;
    case 7: 
      var $cond;
      $offset=$cond;
      var $10=$mmsize;
      var $11=$offset;
      var $sub12=((($10)-($11))|0);
      var $sub13=((($sub12)-(16))|0);
      $psize=$sub13;
      var $12=$mm;
      var $13=$offset;
      var $add_ptr14=(($12+$13)|0);
      var $14=$add_ptr14;
      $p=$14;
      var $15=$offset;
      var $16=$p;
      var $prev_foot=(($16)|0);
      HEAP32[(($prev_foot)>>2)]=$15;
      var $17=$psize;
      var $18=$p;
      var $head=(($18+4)|0);
      HEAP32[(($head)>>2)]=$17;
      var $19=$p;
      var $20=$19;
      var $21=$psize;
      var $add_ptr15=(($20+$21)|0);
      var $22=$add_ptr15;
      var $head16=(($22+4)|0);
      HEAP32[(($head16)>>2)]=7;
      var $23=$p;
      var $24=$23;
      var $25=$psize;
      var $add17=((($25)+(4))|0);
      var $add_ptr18=(($24+$add17)|0);
      var $26=$add_ptr18;
      var $head19=(($26+4)|0);
      HEAP32[(($head19)>>2)]=0;
      var $27=$m_addr;
      var $least_addr=(($27+16)|0);
      var $28=HEAP32[(($least_addr)>>2)];
      var $cmp20=(($28)|0)==0;
      if ($cmp20) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $29=$mm;
      var $30=$m_addr;
      var $least_addr21=(($30+16)|0);
      var $31=HEAP32[(($least_addr21)>>2)];
      var $cmp22=(($29)>>>0) < (($31)>>>0);
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$mm;
      var $33=$m_addr;
      var $least_addr24=(($33+16)|0);
      HEAP32[(($least_addr24)>>2)]=$32;
      label = 10; break;
    case 10: 
      var $34=$mmsize;
      var $35=$m_addr;
      var $footprint=(($35+432)|0);
      var $36=HEAP32[(($footprint)>>2)];
      var $add25=((($36)+($34))|0);
      HEAP32[(($footprint)>>2)]=$add25;
      var $37=$m_addr;
      var $max_footprint=(($37+436)|0);
      var $38=HEAP32[(($max_footprint)>>2)];
      var $cmp26=(($add25)>>>0) > (($38)>>>0);
      if ($cmp26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$m_addr;
      var $footprint28=(($39+432)|0);
      var $40=HEAP32[(($footprint28)>>2)];
      var $41=$m_addr;
      var $max_footprint29=(($41+436)|0);
      HEAP32[(($max_footprint29)>>2)]=$40;
      label = 12; break;
    case 12: 
      var $42=$p;
      var $43=$42;
      var $add_ptr31=(($43+8)|0);
      $retval=$add_ptr31;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $44=$retval;

      return $44;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)>>>0) < 32;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $shl=$1 << 1;
      var $2=$m_addr;
      var $smallbins=(($2+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $3=$arrayidx;
      var $4=$3;
      $bin=$4;
      var $5=$bin;
      var $6=$bin;
      var $bk=(($6+12)|0);
      HEAP32[(($bk)>>2)]=$5;
      var $7=$bin;
      var $fd=(($7+8)|0);
      HEAP32[(($fd)>>2)]=$5;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _change_mparam($param_number, $value) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $param_number_addr;
      var $value_addr;
      var $val;
      $param_number_addr=$param_number;
      $value_addr=$value;
      var $0=HEAP32[((((5292312)|0))>>2)];
      var $cmp=(($0)|0)!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|0)!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&1);
      var $2=$value_addr;
      var $cmp1=(($2)|0)==-1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $cond = -1;label = 7; break;
    case 6: 
      var $3=$value_addr;
      var $cond = $3;label = 7; break;
    case 7: 
      var $cond;
      $val=$cond;
      var $4=$param_number_addr;
      if ((($4)|0)==-1) {
        label = 8; break;
      }
      else if ((($4)|0)==-2) {
        label = 9; break;
      }
      else if ((($4)|0)==-3) {
        label = 13; break;
      }
      else {
      label = 14; break;
      }
      
    case 8: 
      var $5=$val;
      HEAP32[((((5292328)|0))>>2)]=$5;
      $retval=1;
      label = 15; break;
    case 9: 
      var $6=$val;
      var $7=HEAP32[((((5292316)|0))>>2)];
      var $cmp3=(($6)>>>0) >= (($7)>>>0);
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $8=$val;
      var $9=$val;
      var $sub=((($9)-(1))|0);
      var $and=$8 & $sub;
      var $cmp4=(($and)|0)==0;
      if ($cmp4) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $10=$val;
      HEAP32[((((5292320)|0))>>2)]=$10;
      $retval=1;
      label = 15; break;
    case 12: 
      $retval=0;
      label = 15; break;
    case 13: 
      var $11=$val;
      HEAP32[((((5292324)|0))>>2)]=$11;
      $retval=1;
      label = 15; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $12=$retval;

      return $12;
    default: assert(0, "bad label: " + label);
  }

}
_change_mparam["X"]=1;

function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F63;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I203;
      var $B205;
      var $F209;
      var $TP235;
      var $H236;
      var $I237;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K290;
      var $C;
      var $F328;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr;
      var $1=$newbase_addr;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$newbase_addr;
      var $add_ptr1=(($3+8)|0);
      var $4=$add_ptr1;
      var $and2=$4 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      var $add_ptr4=(($0+$cond)|0);
      var $5=$add_ptr4;
      $p=$5;
      var $6=$oldbase_addr;
      var $7=$oldbase_addr;
      var $add_ptr5=(($7+8)|0);
      var $8=$add_ptr5;
      var $and6=$8 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond15 = 0;label = 8; break;
    case 7: 
      var $9=$oldbase_addr;
      var $add_ptr10=(($9+8)|0);
      var $10=$add_ptr10;
      var $and11=$10 & 7;
      var $sub12=(((8)-($and11))|0);
      var $and13=$sub12 & 7;
      var $cond15 = $and13;label = 8; break;
    case 8: 
      var $cond15;
      var $add_ptr16=(($6+$cond15)|0);
      var $11=$add_ptr16;
      $oldfirst=$11;
      var $12=$oldfirst;
      var $13=$12;
      var $14=$p;
      var $15=$14;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $16=$p;
      var $17=$16;
      var $18=$nb_addr;
      var $add_ptr17=(($17+$18)|0);
      var $19=$add_ptr17;
      $q=$19;
      var $20=$psize;
      var $21=$nb_addr;
      var $sub18=((($20)-($21))|0);
      $qsize=$sub18;
      var $22=$nb_addr;
      var $or=$22 | 1;
      var $or19=$or | 2;
      var $23=$p;
      var $head=(($23+4)|0);
      HEAP32[(($head)>>2)]=$or19;
      var $24=$oldfirst;
      var $25=$m_addr;
      var $top=(($25+24)|0);
      var $26=HEAP32[(($top)>>2)];
      var $cmp20=(($24)|0)==(($26)|0);
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$qsize;
      var $28=$m_addr;
      var $topsize=(($28+12)|0);
      var $29=HEAP32[(($topsize)>>2)];
      var $add=((($29)+($27))|0);
      HEAP32[(($topsize)>>2)]=$add;
      $tsize=$add;
      var $30=$q;
      var $31=$m_addr;
      var $top21=(($31+24)|0);
      HEAP32[(($top21)>>2)]=$30;
      var $32=$tsize;
      var $or22=$32 | 1;
      var $33=$q;
      var $head23=(($33+4)|0);
      HEAP32[(($head23)>>2)]=$or22;
      label = 110; break;
    case 10: 
      var $34=$oldfirst;
      var $35=$m_addr;
      var $dv=(($35+20)|0);
      var $36=HEAP32[(($dv)>>2)];
      var $cmp24=(($34)|0)==(($36)|0);
      if ($cmp24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$qsize;
      var $38=$m_addr;
      var $dvsize=(($38+8)|0);
      var $39=HEAP32[(($dvsize)>>2)];
      var $add26=((($39)+($37))|0);
      HEAP32[(($dvsize)>>2)]=$add26;
      $dsize=$add26;
      var $40=$q;
      var $41=$m_addr;
      var $dv27=(($41+20)|0);
      HEAP32[(($dv27)>>2)]=$40;
      var $42=$dsize;
      var $or28=$42 | 1;
      var $43=$q;
      var $head29=(($43+4)|0);
      HEAP32[(($head29)>>2)]=$or28;
      var $44=$dsize;
      var $45=$q;
      var $46=$45;
      var $47=$dsize;
      var $add_ptr30=(($46+$47)|0);
      var $48=$add_ptr30;
      var $prev_foot=(($48)|0);
      HEAP32[(($prev_foot)>>2)]=$44;
      label = 109; break;
    case 12: 
      var $49=$oldfirst;
      var $head32=(($49+4)|0);
      var $50=HEAP32[(($head32)>>2)];
      var $and33=$50 & 3;
      var $cmp34=(($and33)|0)!=1;
      if ($cmp34) { label = 73; break; } else { label = 13; break; }
    case 13: 
      var $51=$oldfirst;
      var $head36=(($51+4)|0);
      var $52=HEAP32[(($head36)>>2)];
      var $and37=$52 & -8;
      $nsize=$and37;
      var $53=$nsize;
      var $shr=$53 >>> 3;
      var $cmp38=(($shr)>>>0) < 32;
      if ($cmp38) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $54=$oldfirst;
      var $fd=(($54+8)|0);
      var $55=HEAP32[(($fd)>>2)];
      $F=$55;
      var $56=$oldfirst;
      var $bk=(($56+12)|0);
      var $57=HEAP32[(($bk)>>2)];
      $B=$57;
      var $58=$nsize;
      var $shr40=$58 >>> 3;
      $I=$shr40;
      var $59=$F;
      var $60=$B;
      var $cmp41=(($59)|0)==(($60)|0);
      if ($cmp41) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $61=$I;
      var $shl=1 << $61;
      var $neg=$shl ^ -1;
      var $62=$m_addr;
      var $smallmap=(($62)|0);
      var $63=HEAP32[(($smallmap)>>2)];
      var $and43=$63 & $neg;
      HEAP32[(($smallmap)>>2)]=$and43;
      label = 25; break;
    case 16: 
      var $64=$F;
      var $65=$I;
      var $shl45=$65 << 1;
      var $66=$m_addr;
      var $smallbins=(($66+40)|0);
      var $arrayidx=(($smallbins+($shl45<<2))|0);
      var $67=$arrayidx;
      var $68=$67;
      var $cmp46=(($64)|0)==(($68)|0);
      if ($cmp46) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $69=$F;
      var $70=$69;
      var $71=$m_addr;
      var $least_addr=(($71+16)|0);
      var $72=HEAP32[(($least_addr)>>2)];
      var $cmp47=(($70)>>>0) >= (($72)>>>0);
      if ($cmp47) { label = 18; break; } else { var $83 = 0;label = 21; break; }
    case 18: 
      var $73=$B;
      var $74=$I;
      var $shl48=$74 << 1;
      var $75=$m_addr;
      var $smallbins49=(($75+40)|0);
      var $arrayidx50=(($smallbins49+($shl48<<2))|0);
      var $76=$arrayidx50;
      var $77=$76;
      var $cmp51=(($73)|0)==(($77)|0);
      if ($cmp51) { var $82 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $78=$B;
      var $79=$78;
      var $80=$m_addr;
      var $least_addr52=(($80+16)|0);
      var $81=HEAP32[(($least_addr52)>>2)];
      var $cmp53=(($79)>>>0) >= (($81)>>>0);
      var $82 = $cmp53;label = 20; break;
    case 20: 
      var $82;
      var $83 = $82;label = 21; break;
    case 21: 
      var $83;
      var $land_ext=(($83)&1);
      var $expval=($land_ext);
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $84=$B;
      var $85=$F;
      var $bk55=(($85+12)|0);
      HEAP32[(($bk55)>>2)]=$84;
      var $86=$F;
      var $87=$B;
      var $fd56=(($87+8)|0);
      HEAP32[(($fd56)>>2)]=$86;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      label = 25; break;
    case 25: 
      label = 72; break;
    case 26: 
      var $88=$oldfirst;
      var $89=$88;
      $TP=$89;
      var $90=$TP;
      var $parent=(($90+24)|0);
      var $91=HEAP32[(($parent)>>2)];
      $XP=$91;
      var $92=$TP;
      var $bk60=(($92+12)|0);
      var $93=HEAP32[(($bk60)>>2)];
      var $94=$TP;
      var $cmp61=(($93)|0)!=(($94)|0);
      if ($cmp61) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $95=$TP;
      var $fd64=(($95+8)|0);
      var $96=HEAP32[(($fd64)>>2)];
      $F63=$96;
      var $97=$TP;
      var $bk65=(($97+12)|0);
      var $98=HEAP32[(($bk65)>>2)];
      $R=$98;
      var $99=$F63;
      var $100=$99;
      var $101=$m_addr;
      var $least_addr66=(($101+16)|0);
      var $102=HEAP32[(($least_addr66)>>2)];
      var $cmp67=(($100)>>>0) >= (($102)>>>0);
      var $conv=(($cmp67)&1);
      var $expval68=($conv);
      var $tobool69=(($expval68)|0)!=0;
      if ($tobool69) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $103=$R;
      var $104=$F63;
      var $bk71=(($104+12)|0);
      HEAP32[(($bk71)>>2)]=$103;
      var $105=$F63;
      var $106=$R;
      var $fd72=(($106+8)|0);
      HEAP32[(($fd72)>>2)]=$105;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 43; break;
    case 31: 
      var $107=$TP;
      var $child=(($107+16)|0);
      var $arrayidx76=(($child+4)|0);
      $RP=$arrayidx76;
      var $108=HEAP32[(($arrayidx76)>>2)];
      $R=$108;
      var $cmp77=(($108)|0)!=0;
      if ($cmp77) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $109=$TP;
      var $child80=(($109+16)|0);
      var $arrayidx81=(($child80)|0);
      $RP=$arrayidx81;
      var $110=HEAP32[(($arrayidx81)>>2)];
      $R=$110;
      var $cmp82=(($110)|0)!=0;
      if ($cmp82) { label = 33; break; } else { label = 42; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $111=$R;
      var $child85=(($111+16)|0);
      var $arrayidx86=(($child85+4)|0);
      $CP=$arrayidx86;
      var $112=HEAP32[(($arrayidx86)>>2)];
      var $cmp87=(($112)|0)!=0;
      if ($cmp87) { var $115 = 1;label = 36; break; } else { label = 35; break; }
    case 35: 
      var $113=$R;
      var $child90=(($113+16)|0);
      var $arrayidx91=(($child90)|0);
      $CP=$arrayidx91;
      var $114=HEAP32[(($arrayidx91)>>2)];
      var $cmp92=(($114)|0)!=0;
      var $115 = $cmp92;label = 36; break;
    case 36: 
      var $115;
      if ($115) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $116=$CP;
      $RP=$116;
      var $117=HEAP32[(($116)>>2)];
      $R=$117;
      label = 34; break;
    case 38: 
      var $118=$RP;
      var $119=$118;
      var $120=$m_addr;
      var $least_addr95=(($120+16)|0);
      var $121=HEAP32[(($least_addr95)>>2)];
      var $cmp96=(($119)>>>0) >= (($121)>>>0);
      var $conv97=(($cmp96)&1);
      var $expval98=($conv97);
      var $tobool99=(($expval98)|0)!=0;
      if ($tobool99) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $122=$RP;
      HEAP32[(($122)>>2)]=0;
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $123=$XP;
      var $cmp105=(($123)|0)!=0;
      if ($cmp105) { label = 44; break; } else { label = 71; break; }
    case 44: 
      var $124=$TP;
      var $index=(($124+28)|0);
      var $125=HEAP32[(($index)>>2)];
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx108=(($treebins+($125<<2))|0);
      $H=$arrayidx108;
      var $127=$TP;
      var $128=$H;
      var $129=HEAP32[(($128)>>2)];
      var $cmp109=(($127)|0)==(($129)|0);
      if ($cmp109) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $130=$R;
      var $131=$H;
      HEAP32[(($131)>>2)]=$130;
      var $cmp112=(($130)|0)==0;
      if ($cmp112) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $132=$TP;
      var $index115=(($132+28)|0);
      var $133=HEAP32[(($index115)>>2)];
      var $shl116=1 << $133;
      var $neg117=$shl116 ^ -1;
      var $134=$m_addr;
      var $treemap=(($134+4)|0);
      var $135=HEAP32[(($treemap)>>2)];
      var $and118=$135 & $neg117;
      HEAP32[(($treemap)>>2)]=$and118;
      label = 47; break;
    case 47: 
      label = 55; break;
    case 48: 
      var $136=$XP;
      var $137=$136;
      var $138=$m_addr;
      var $least_addr121=(($138+16)|0);
      var $139=HEAP32[(($least_addr121)>>2)];
      var $cmp122=(($137)>>>0) >= (($139)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if ($tobool125) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $140=$XP;
      var $child127=(($140+16)|0);
      var $arrayidx128=(($child127)|0);
      var $141=HEAP32[(($arrayidx128)>>2)];
      var $142=$TP;
      var $cmp129=(($141)|0)==(($142)|0);
      if ($cmp129) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $143=$R;
      var $144=$XP;
      var $child132=(($144+16)|0);
      var $arrayidx133=(($child132)|0);
      HEAP32[(($arrayidx133)>>2)]=$143;
      label = 52; break;
    case 51: 
      var $145=$R;
      var $146=$XP;
      var $child135=(($146+16)|0);
      var $arrayidx136=(($child135+4)|0);
      HEAP32[(($arrayidx136)>>2)]=$145;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!"
    case 54: 
      label = 55; break;
    case 55: 
      var $147=$R;
      var $cmp141=(($147)|0)!=0;
      if ($cmp141) { label = 56; break; } else { label = 70; break; }
    case 56: 
      var $148=$R;
      var $149=$148;
      var $150=$m_addr;
      var $least_addr144=(($150+16)|0);
      var $151=HEAP32[(($least_addr144)>>2)];
      var $cmp145=(($149)>>>0) >= (($151)>>>0);
      var $conv146=(($cmp145)&1);
      var $expval147=($conv146);
      var $tobool148=(($expval147)|0)!=0;
      if ($tobool148) { label = 57; break; } else { label = 68; break; }
    case 57: 
      var $152=$XP;
      var $153=$R;
      var $parent150=(($153+24)|0);
      HEAP32[(($parent150)>>2)]=$152;
      var $154=$TP;
      var $child151=(($154+16)|0);
      var $arrayidx152=(($child151)|0);
      var $155=HEAP32[(($arrayidx152)>>2)];
      $C0=$155;
      var $cmp153=(($155)|0)!=0;
      if ($cmp153) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $156=$C0;
      var $157=$156;
      var $158=$m_addr;
      var $least_addr156=(($158+16)|0);
      var $159=HEAP32[(($least_addr156)>>2)];
      var $cmp157=(($157)>>>0) >= (($159)>>>0);
      var $conv158=(($cmp157)&1);
      var $expval159=($conv158);
      var $tobool160=(($expval159)|0)!=0;
      if ($tobool160) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $160=$C0;
      var $161=$R;
      var $child162=(($161+16)|0);
      var $arrayidx163=(($child162)|0);
      HEAP32[(($arrayidx163)>>2)]=$160;
      var $162=$R;
      var $163=$C0;
      var $parent164=(($163+24)|0);
      HEAP32[(($parent164)>>2)]=$162;
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!"
    case 61: 
      label = 62; break;
    case 62: 
      var $164=$TP;
      var $child168=(($164+16)|0);
      var $arrayidx169=(($child168+4)|0);
      var $165=HEAP32[(($arrayidx169)>>2)];
      $C1=$165;
      var $cmp170=(($165)|0)!=0;
      if ($cmp170) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $166=$C1;
      var $167=$166;
      var $168=$m_addr;
      var $least_addr173=(($168+16)|0);
      var $169=HEAP32[(($least_addr173)>>2)];
      var $cmp174=(($167)>>>0) >= (($169)>>>0);
      var $conv175=(($cmp174)&1);
      var $expval176=($conv175);
      var $tobool177=(($expval176)|0)!=0;
      if ($tobool177) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $170=$C1;
      var $171=$R;
      var $child179=(($171+16)|0);
      var $arrayidx180=(($child179+4)|0);
      HEAP32[(($arrayidx180)>>2)]=$170;
      var $172=$R;
      var $173=$C1;
      var $parent181=(($173+24)|0);
      HEAP32[(($parent181)>>2)]=$172;
      label = 66; break;
    case 65: 
      _abort();
      throw "Reached an unreachable!"
    case 66: 
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $174=$oldfirst;
      var $175=$174;
      var $176=$nsize;
      var $add_ptr190=(($175+$176)|0);
      var $177=$add_ptr190;
      $oldfirst=$177;
      var $178=$nsize;
      var $179=$qsize;
      var $add191=((($179)+($178))|0);
      $qsize=$add191;
      label = 73; break;
    case 73: 
      var $180=$oldfirst;
      var $head193=(($180+4)|0);
      var $181=HEAP32[(($head193)>>2)];
      var $and194=$181 & -2;
      HEAP32[(($head193)>>2)]=$and194;
      var $182=$qsize;
      var $or195=$182 | 1;
      var $183=$q;
      var $head196=(($183+4)|0);
      HEAP32[(($head196)>>2)]=$or195;
      var $184=$qsize;
      var $185=$q;
      var $186=$185;
      var $187=$qsize;
      var $add_ptr197=(($186+$187)|0);
      var $188=$add_ptr197;
      var $prev_foot198=(($188)|0);
      HEAP32[(($prev_foot198)>>2)]=$184;
      var $189=$qsize;
      var $shr199=$189 >>> 3;
      var $cmp200=(($shr199)>>>0) < 32;
      if ($cmp200) { label = 74; break; } else { label = 81; break; }
    case 74: 
      var $190=$qsize;
      var $shr204=$190 >>> 3;
      $I203=$shr204;
      var $191=$I203;
      var $shl206=$191 << 1;
      var $192=$m_addr;
      var $smallbins207=(($192+40)|0);
      var $arrayidx208=(($smallbins207+($shl206<<2))|0);
      var $193=$arrayidx208;
      var $194=$193;
      $B205=$194;
      var $195=$B205;
      $F209=$195;
      var $196=$m_addr;
      var $smallmap210=(($196)|0);
      var $197=HEAP32[(($smallmap210)>>2)];
      var $198=$I203;
      var $shl211=1 << $198;
      var $and212=$197 & $shl211;
      var $tobool213=(($and212)|0)!=0;
      if ($tobool213) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $199=$I203;
      var $shl215=1 << $199;
      var $200=$m_addr;
      var $smallmap216=(($200)|0);
      var $201=HEAP32[(($smallmap216)>>2)];
      var $or217=$201 | $shl215;
      HEAP32[(($smallmap216)>>2)]=$or217;
      label = 80; break;
    case 76: 
      var $202=$B205;
      var $fd219=(($202+8)|0);
      var $203=HEAP32[(($fd219)>>2)];
      var $204=$203;
      var $205=$m_addr;
      var $least_addr220=(($205+16)|0);
      var $206=HEAP32[(($least_addr220)>>2)];
      var $cmp221=(($204)>>>0) >= (($206)>>>0);
      var $conv222=(($cmp221)&1);
      var $expval223=($conv222);
      var $tobool224=(($expval223)|0)!=0;
      if ($tobool224) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $207=$B205;
      var $fd226=(($207+8)|0);
      var $208=HEAP32[(($fd226)>>2)];
      $F209=$208;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!"
    case 79: 
      label = 80; break;
    case 80: 
      var $209=$q;
      var $210=$B205;
      var $fd230=(($210+8)|0);
      HEAP32[(($fd230)>>2)]=$209;
      var $211=$q;
      var $212=$F209;
      var $bk231=(($212+12)|0);
      HEAP32[(($bk231)>>2)]=$211;
      var $213=$F209;
      var $214=$q;
      var $fd232=(($214+8)|0);
      HEAP32[(($fd232)>>2)]=$213;
      var $215=$B205;
      var $216=$q;
      var $bk233=(($216+12)|0);
      HEAP32[(($bk233)>>2)]=$215;
      label = 108; break;
    case 81: 
      var $217=$q;
      var $218=$217;
      $TP235=$218;
      var $219=$qsize;
      var $shr238=$219 >>> 8;
      $X=$shr238;
      var $220=$X;
      var $cmp239=(($220)|0)==0;
      if ($cmp239) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $I237=0;
      label = 87; break;
    case 83: 
      var $221=$X;
      var $cmp243=(($221)>>>0) > 65535;
      if ($cmp243) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $I237=31;
      label = 86; break;
    case 85: 
      var $222=$X;
      $Y=$222;
      var $223=$Y;
      var $sub247=((($223)-(256))|0);
      var $shr248=$sub247 >>> 16;
      var $and249=$shr248 & 8;
      $N=$and249;
      var $224=$N;
      var $225=$Y;
      var $shl250=$225 << $224;
      $Y=$shl250;
      var $sub251=((($shl250)-(4096))|0);
      var $shr252=$sub251 >>> 16;
      var $and253=$shr252 & 4;
      $K=$and253;
      var $226=$K;
      var $227=$N;
      var $add254=((($227)+($226))|0);
      $N=$add254;
      var $228=$K;
      var $229=$Y;
      var $shl255=$229 << $228;
      $Y=$shl255;
      var $sub256=((($shl255)-(16384))|0);
      var $shr257=$sub256 >>> 16;
      var $and258=$shr257 & 2;
      $K=$and258;
      var $230=$N;
      var $add259=((($230)+($and258))|0);
      $N=$add259;
      var $231=$N;
      var $sub260=(((14)-($231))|0);
      var $232=$K;
      var $233=$Y;
      var $shl261=$233 << $232;
      $Y=$shl261;
      var $shr262=$shl261 >>> 15;
      var $add263=((($sub260)+($shr262))|0);
      $K=$add263;
      var $234=$K;
      var $shl264=$234 << 1;
      var $235=$qsize;
      var $236=$K;
      var $add265=((($236)+(7))|0);
      var $shr266=$235 >>> (($add265)>>>0);
      var $and267=$shr266 & 1;
      var $add268=((($shl264)+($and267))|0);
      $I237=$add268;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $237=$I237;
      var $238=$m_addr;
      var $treebins271=(($238+304)|0);
      var $arrayidx272=(($treebins271+($237<<2))|0);
      $H236=$arrayidx272;
      var $239=$I237;
      var $240=$TP235;
      var $index273=(($240+28)|0);
      HEAP32[(($index273)>>2)]=$239;
      var $241=$TP235;
      var $child274=(($241+16)|0);
      var $arrayidx275=(($child274+4)|0);
      HEAP32[(($arrayidx275)>>2)]=0;
      var $242=$TP235;
      var $child276=(($242+16)|0);
      var $arrayidx277=(($child276)|0);
      HEAP32[(($arrayidx277)>>2)]=0;
      var $243=$m_addr;
      var $treemap278=(($243+4)|0);
      var $244=HEAP32[(($treemap278)>>2)];
      var $245=$I237;
      var $shl279=1 << $245;
      var $and280=$244 & $shl279;
      var $tobool281=(($and280)|0)!=0;
      if ($tobool281) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $246=$I237;
      var $shl283=1 << $246;
      var $247=$m_addr;
      var $treemap284=(($247+4)|0);
      var $248=HEAP32[(($treemap284)>>2)];
      var $or285=$248 | $shl283;
      HEAP32[(($treemap284)>>2)]=$or285;
      var $249=$TP235;
      var $250=$H236;
      HEAP32[(($250)>>2)]=$249;
      var $251=$H236;
      var $252=$251;
      var $253=$TP235;
      var $parent286=(($253+24)|0);
      HEAP32[(($parent286)>>2)]=$252;
      var $254=$TP235;
      var $255=$TP235;
      var $bk287=(($255+12)|0);
      HEAP32[(($bk287)>>2)]=$254;
      var $256=$TP235;
      var $fd288=(($256+8)|0);
      HEAP32[(($fd288)>>2)]=$254;
      label = 107; break;
    case 89: 
      var $257=$H236;
      var $258=HEAP32[(($257)>>2)];
      $T=$258;
      var $259=$qsize;
      var $260=$I237;
      var $cmp291=(($260)|0)==31;
      if ($cmp291) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $cond300 = 0;label = 92; break;
    case 91: 
      var $261=$I237;
      var $shr295=$261 >>> 1;
      var $add296=((($shr295)+(8))|0);
      var $sub297=((($add296)-(2))|0);
      var $sub298=(((31)-($sub297))|0);
      var $cond300 = $sub298;label = 92; break;
    case 92: 
      var $cond300;
      var $shl301=$259 << $cond300;
      $K290=$shl301;
      label = 93; break;
    case 93: 
      var $262=$T;
      var $head302=(($262+4)|0);
      var $263=HEAP32[(($head302)>>2)];
      var $and303=$263 & -8;
      var $264=$qsize;
      var $cmp304=(($and303)|0)!=(($264)|0);
      if ($cmp304) { label = 94; break; } else { label = 100; break; }
    case 94: 
      var $265=$K290;
      var $shr307=$265 >>> 31;
      var $and308=$shr307 & 1;
      var $266=$T;
      var $child309=(($266+16)|0);
      var $arrayidx310=(($child309+($and308<<2))|0);
      $C=$arrayidx310;
      var $267=$K290;
      var $shl311=$267 << 1;
      $K290=$shl311;
      var $268=$C;
      var $269=HEAP32[(($268)>>2)];
      var $cmp312=(($269)|0)!=0;
      if ($cmp312) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $270=$C;
      var $271=HEAP32[(($270)>>2)];
      $T=$271;
      label = 99; break;
    case 96: 
      var $272=$C;
      var $273=$272;
      var $274=$m_addr;
      var $least_addr316=(($274+16)|0);
      var $275=HEAP32[(($least_addr316)>>2)];
      var $cmp317=(($273)>>>0) >= (($275)>>>0);
      var $conv318=(($cmp317)&1);
      var $expval319=($conv318);
      var $tobool320=(($expval319)|0)!=0;
      if ($tobool320) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $276=$TP235;
      var $277=$C;
      HEAP32[(($277)>>2)]=$276;
      var $278=$T;
      var $279=$TP235;
      var $parent322=(($279+24)|0);
      HEAP32[(($parent322)>>2)]=$278;
      var $280=$TP235;
      var $281=$TP235;
      var $bk323=(($281+12)|0);
      HEAP32[(($bk323)>>2)]=$280;
      var $282=$TP235;
      var $fd324=(($282+8)|0);
      HEAP32[(($fd324)>>2)]=$280;
      label = 106; break;
    case 98: 
      _abort();
      throw "Reached an unreachable!"
    case 99: 
      label = 105; break;
    case 100: 
      var $283=$T;
      var $fd329=(($283+8)|0);
      var $284=HEAP32[(($fd329)>>2)];
      $F328=$284;
      var $285=$T;
      var $286=$285;
      var $287=$m_addr;
      var $least_addr330=(($287+16)|0);
      var $288=HEAP32[(($least_addr330)>>2)];
      var $cmp331=(($286)>>>0) >= (($288)>>>0);
      if ($cmp331) { label = 101; break; } else { var $293 = 0;label = 102; break; }
    case 101: 
      var $289=$F328;
      var $290=$289;
      var $291=$m_addr;
      var $least_addr334=(($291+16)|0);
      var $292=HEAP32[(($least_addr334)>>2)];
      var $cmp335=(($290)>>>0) >= (($292)>>>0);
      var $293 = $cmp335;label = 102; break;
    case 102: 
      var $293;
      var $land_ext338=(($293)&1);
      var $expval339=($land_ext338);
      var $tobool340=(($expval339)|0)!=0;
      if ($tobool340) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $294=$TP235;
      var $295=$F328;
      var $bk342=(($295+12)|0);
      HEAP32[(($bk342)>>2)]=$294;
      var $296=$T;
      var $fd343=(($296+8)|0);
      HEAP32[(($fd343)>>2)]=$294;
      var $297=$F328;
      var $298=$TP235;
      var $fd344=(($298+8)|0);
      HEAP32[(($fd344)>>2)]=$297;
      var $299=$T;
      var $300=$TP235;
      var $bk345=(($300+12)|0);
      HEAP32[(($bk345)>>2)]=$299;
      var $301=$TP235;
      var $parent346=(($301+24)|0);
      HEAP32[(($parent346)>>2)]=0;
      label = 106; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!"
    case 105: 
      label = 93; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $302=$p;
      var $303=$302;
      var $add_ptr353=(($303+8)|0);

      return $add_ptr353;
    default: assert(0, "bad label: " + label);
  }

}
_prepend_alloc["X"]=1;

function __ZNKSt9bad_alloc4whatEv($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;

  return ((5385320)|0);
}


function __ZSt15get_new_handlerv() {
  var label = 0;


  var $0=(tempValue=HEAP32[((5388288)>>2)],HEAP32[((5388288)>>2)]=tempValue+0,tempValue);
  var $1=$0;

  return $1;
}


function __ZSt15set_new_handlerPFvvE($handler) {
  var label = 0;


  var $handler_addr;
  $handler_addr=$handler;
  var $0=$handler_addr;
  var $1=$0;
  var $2=(tempValue=HEAP32[((5388288)>>2)],HEAP32[((5388288)>>2)]=$1,tempValue);
  var $3=$2;

  return $3;
}


function __ZNSt9bad_allocC2Ev($this) {
  var label = 0;


  var $this_addr_i;
  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1;
  $this_addr_i=$0;
  var $this1_i=$this_addr_i;
  var $1=$this1_i;
  HEAP32[(($1)>>2)]=((__ZTVSt9exception+8)|0);
  var $2=$this1;
  HEAP32[(($2)>>2)]=((5388176)|0);

  return;
}


function __ZNSt9bad_allocC1Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  __ZNSt9bad_allocC2Ev($this1);

  return;
}


function __ZNSt9bad_allocD1Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  __ZNSt9bad_allocD2Ev($this1);

  return;
}


function __ZdlPv($ptr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ptr_addr;
      $ptr_addr=$ptr;
      var $0=$ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$ptr_addr;
      _free($1);
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  var label = 0;


  var $ptr_addr;
  var $_addr;
  $ptr_addr=$ptr;
  $_addr=$0;
  var $1=$ptr_addr;
  __ZdlPv($1);

  return;
}


function __ZdaPv($ptr) {
  var label = 0;


  var $ptr_addr;
  $ptr_addr=$ptr;
  var $0=$ptr_addr;
  __ZdlPv($0);

  return;
}


function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  var label = 0;


  var $ptr_addr;
  var $_addr;
  $ptr_addr=$ptr;
  $_addr=$0;
  var $1=$ptr_addr;
  __ZdaPv($1);

  return;
}


function __ZNSt9bad_allocD0Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  __ZNSt9bad_allocD1Ev($this1);
  var $0=$this1;
  __ZdlPv($0);

  return;
}


function __ZNSt9bad_allocD2Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1;


  return;
}


function __ZNSt20bad_array_new_lengthC1Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  __ZNSt20bad_array_new_lengthC2Ev($this1);

  return;
}


function __ZNSt20bad_array_new_lengthC2Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1;
  __ZNSt9bad_allocC2Ev($0);
  var $1=$this1;
  HEAP32[(($1)>>2)]=((5388200)|0);

  return;
}


function __ZNSt20bad_array_new_lengthD0Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  __ZNSt20bad_array_new_lengthD1Ev($this1);
  var $0=$this1;
  __ZdlPv($0);

  return;
}


function __ZNSt20bad_array_new_lengthD1Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  __ZNSt20bad_array_new_lengthD2Ev($this1);

  return;
}


function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr;
      var $top=(($0+24)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$1;
      $old_top=$2;
      var $3=$m_addr;
      var $4=$old_top;
      var $call=_segment_holding($3, $4);
      $oldsp=$call;
      var $5=$oldsp;
      var $base=(($5)|0);
      var $6=HEAP32[(($base)>>2)];
      var $7=$oldsp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      $old_end=$add_ptr;
      $ssize=24;
      var $9=$old_end;
      var $10=$ssize;
      var $add=((($10)+(16))|0);
      var $add1=((($add)+(7))|0);
      var $idx_neg=(((-$add1))|0);
      var $add_ptr2=(($9+$idx_neg)|0);
      $rawsp=$add_ptr2;
      var $11=$rawsp;
      var $add_ptr3=(($11+8)|0);
      var $12=$add_ptr3;
      var $and=$12 & 7;
      var $cmp=(($and)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $13=$rawsp;
      var $add_ptr4=(($13+8)|0);
      var $14=$add_ptr4;
      var $and5=$14 & 7;
      var $sub=(((8)-($and5))|0);
      var $and6=$sub & 7;
      var $cond = $and6;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $15=$rawsp;
      var $16=$offset;
      var $add_ptr7=(($15+$16)|0);
      $asp=$add_ptr7;
      var $17=$asp;
      var $18=$old_top;
      var $add_ptr8=(($18+16)|0);
      var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0);
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$old_top;
      var $cond13 = $19;label = 8; break;
    case 7: 
      var $20=$asp;
      var $cond13 = $20;label = 8; break;
    case 8: 
      var $cond13;
      $csp=$cond13;
      var $21=$csp;
      var $22=$21;
      $sp=$22;
      var $23=$sp;
      var $24=$23;
      var $add_ptr14=(($24+8)|0);
      var $25=$add_ptr14;
      $ss=$25;
      var $26=$sp;
      var $27=$26;
      var $28=$ssize;
      var $add_ptr15=(($27+$28)|0);
      var $29=$add_ptr15;
      $tnext=$29;
      var $30=$tnext;
      $p=$30;
      $nfences=0;
      var $31=$m_addr;
      var $32=$tbase_addr;
      var $33=$32;
      var $34=$tsize_addr;
      var $sub16=((($34)-(40))|0);
      _init_top($31, $33, $sub16);
      var $35=$ssize;
      var $or=$35 | 1;
      var $or17=$or | 2;
      var $36=$sp;
      var $head=(($36+4)|0);
      HEAP32[(($head)>>2)]=$or17;
      var $37=$ss;
      var $38=$m_addr;
      var $seg=(($38+444)|0);
      var $39=$37;
      var $40=$seg;
      assert(16 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
      var $41=$tbase_addr;
      var $42=$m_addr;
      var $seg18=(($42+444)|0);
      var $base19=(($seg18)|0);
      HEAP32[(($base19)>>2)]=$41;
      var $43=$tsize_addr;
      var $44=$m_addr;
      var $seg20=(($44+444)|0);
      var $size21=(($seg20+4)|0);
      HEAP32[(($size21)>>2)]=$43;
      var $45=$mmapped_addr;
      var $46=$m_addr;
      var $seg22=(($46+444)|0);
      var $sflags=(($seg22+12)|0);
      HEAP32[(($sflags)>>2)]=$45;
      var $47=$ss;
      var $48=$m_addr;
      var $seg23=(($48+444)|0);
      var $next=(($seg23+8)|0);
      HEAP32[(($next)>>2)]=$47;
      label = 9; break;
    case 9: 
      var $49=$p;
      var $50=$49;
      var $add_ptr24=(($50+4)|0);
      var $51=$add_ptr24;
      $nextp=$51;
      var $52=$p;
      var $head25=(($52+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $53=$nfences;
      var $inc=((($53)+(1))|0);
      $nfences=$inc;
      var $54=$nextp;
      var $head26=(($54+4)|0);
      var $55=$head26;
      var $56=$old_end;
      var $cmp27=(($55)>>>0) < (($56)>>>0);
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $57=$nextp;
      $p=$57;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $58=$csp;
      var $59=$old_top;
      var $cmp28=(($58)|0)!=(($59)|0);
      if ($cmp28) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $60=$old_top;
      var $61=$60;
      $q=$61;
      var $62=$csp;
      var $63=$old_top;
      var $sub_ptr_lhs_cast=$62;
      var $sub_ptr_rhs_cast=$63;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $64=$q;
      var $65=$64;
      var $66=$psize;
      var $add_ptr30=(($65+$66)|0);
      var $67=$add_ptr30;
      $tn=$67;
      var $68=$tn;
      var $head31=(($68+4)|0);
      var $69=HEAP32[(($head31)>>2)];
      var $and32=$69 & -2;
      HEAP32[(($head31)>>2)]=$and32;
      var $70=$psize;
      var $or33=$70 | 1;
      var $71=$q;
      var $head34=(($71+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $72=$psize;
      var $73=$q;
      var $74=$73;
      var $75=$psize;
      var $add_ptr35=(($74+$75)|0);
      var $76=$add_ptr35;
      var $prev_foot=(($76)|0);
      HEAP32[(($prev_foot)>>2)]=$72;
      var $77=$psize;
      var $shr=$77 >>> 3;
      var $cmp36=(($shr)>>>0) < 32;
      if ($cmp36) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $78=$psize;
      var $shr38=$78 >>> 3;
      $I=$shr38;
      var $79=$I;
      var $shl=$79 << 1;
      var $80=$m_addr;
      var $smallbins=(($80+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $81=$arrayidx;
      var $82=$81;
      $B=$82;
      var $83=$B;
      $F=$83;
      var $84=$m_addr;
      var $smallmap=(($84)|0);
      var $85=HEAP32[(($smallmap)>>2)];
      var $86=$I;
      var $shl39=1 << $86;
      var $and40=$85 & $shl39;
      var $tobool=(($and40)|0)!=0;
      if ($tobool) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $87=$I;
      var $shl42=1 << $87;
      var $88=$m_addr;
      var $smallmap43=(($88)|0);
      var $89=HEAP32[(($smallmap43)>>2)];
      var $or44=$89 | $shl42;
      HEAP32[(($smallmap43)>>2)]=$or44;
      label = 21; break;
    case 17: 
      var $90=$B;
      var $fd=(($90+8)|0);
      var $91=HEAP32[(($fd)>>2)];
      var $92=$91;
      var $93=$m_addr;
      var $least_addr=(($93+16)|0);
      var $94=HEAP32[(($least_addr)>>2)];
      var $cmp46=(($92)>>>0) >= (($94)>>>0);
      var $conv=(($cmp46)&1);
      var $expval=($conv);
      var $tobool47=(($expval)|0)!=0;
      if ($tobool47) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$B;
      var $fd49=(($95+8)|0);
      var $96=HEAP32[(($fd49)>>2)];
      $F=$96;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!"
    case 20: 
      label = 21; break;
    case 21: 
      var $97=$q;
      var $98=$B;
      var $fd53=(($98+8)|0);
      HEAP32[(($fd53)>>2)]=$97;
      var $99=$q;
      var $100=$F;
      var $bk=(($100+12)|0);
      HEAP32[(($bk)>>2)]=$99;
      var $101=$F;
      var $102=$q;
      var $fd54=(($102+8)|0);
      HEAP32[(($fd54)>>2)]=$101;
      var $103=$B;
      var $104=$q;
      var $bk55=(($104+12)|0);
      HEAP32[(($bk55)>>2)]=$103;
      label = 49; break;
    case 22: 
      var $105=$q;
      var $106=$105;
      $TP=$106;
      var $107=$psize;
      var $shr58=$107 >>> 8;
      $X=$shr58;
      var $108=$X;
      var $cmp59=(($108)|0)==0;
      if ($cmp59) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I57=0;
      label = 28; break;
    case 24: 
      var $109=$X;
      var $cmp63=(($109)>>>0) > 65535;
      if ($cmp63) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I57=31;
      label = 27; break;
    case 26: 
      var $110=$X;
      $Y=$110;
      var $111=$Y;
      var $sub67=((($111)-(256))|0);
      var $shr68=$sub67 >>> 16;
      var $and69=$shr68 & 8;
      $N=$and69;
      var $112=$N;
      var $113=$Y;
      var $shl70=$113 << $112;
      $Y=$shl70;
      var $sub71=((($shl70)-(4096))|0);
      var $shr72=$sub71 >>> 16;
      var $and73=$shr72 & 4;
      $K=$and73;
      var $114=$K;
      var $115=$N;
      var $add74=((($115)+($114))|0);
      $N=$add74;
      var $116=$K;
      var $117=$Y;
      var $shl75=$117 << $116;
      $Y=$shl75;
      var $sub76=((($shl75)-(16384))|0);
      var $shr77=$sub76 >>> 16;
      var $and78=$shr77 & 2;
      $K=$and78;
      var $118=$N;
      var $add79=((($118)+($and78))|0);
      $N=$add79;
      var $119=$N;
      var $sub80=(((14)-($119))|0);
      var $120=$K;
      var $121=$Y;
      var $shl81=$121 << $120;
      $Y=$shl81;
      var $shr82=$shl81 >>> 15;
      var $add83=((($sub80)+($shr82))|0);
      $K=$add83;
      var $122=$K;
      var $shl84=$122 << 1;
      var $123=$psize;
      var $124=$K;
      var $add85=((($124)+(7))|0);
      var $shr86=$123 >>> (($add85)>>>0);
      var $and87=$shr86 & 1;
      var $add88=((($shl84)+($and87))|0);
      $I57=$add88;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $125=$I57;
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx91=(($treebins+($125<<2))|0);
      $H=$arrayidx91;
      var $127=$I57;
      var $128=$TP;
      var $index=(($128+28)|0);
      HEAP32[(($index)>>2)]=$127;
      var $129=$TP;
      var $child=(($129+16)|0);
      var $arrayidx92=(($child+4)|0);
      HEAP32[(($arrayidx92)>>2)]=0;
      var $130=$TP;
      var $child93=(($130+16)|0);
      var $arrayidx94=(($child93)|0);
      HEAP32[(($arrayidx94)>>2)]=0;
      var $131=$m_addr;
      var $treemap=(($131+4)|0);
      var $132=HEAP32[(($treemap)>>2)];
      var $133=$I57;
      var $shl95=1 << $133;
      var $and96=$132 & $shl95;
      var $tobool97=(($and96)|0)!=0;
      if ($tobool97) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $134=$I57;
      var $shl99=1 << $134;
      var $135=$m_addr;
      var $treemap100=(($135+4)|0);
      var $136=HEAP32[(($treemap100)>>2)];
      var $or101=$136 | $shl99;
      HEAP32[(($treemap100)>>2)]=$or101;
      var $137=$TP;
      var $138=$H;
      HEAP32[(($138)>>2)]=$137;
      var $139=$H;
      var $140=$139;
      var $141=$TP;
      var $parent=(($141+24)|0);
      HEAP32[(($parent)>>2)]=$140;
      var $142=$TP;
      var $143=$TP;
      var $bk102=(($143+12)|0);
      HEAP32[(($bk102)>>2)]=$142;
      var $144=$TP;
      var $fd103=(($144+8)|0);
      HEAP32[(($fd103)>>2)]=$142;
      label = 48; break;
    case 30: 
      var $145=$H;
      var $146=HEAP32[(($145)>>2)];
      $T=$146;
      var $147=$psize;
      var $148=$I57;
      var $cmp106=(($148)|0)==31;
      if ($cmp106) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $cond115 = 0;label = 33; break;
    case 32: 
      var $149=$I57;
      var $shr110=$149 >>> 1;
      var $add111=((($shr110)+(8))|0);
      var $sub112=((($add111)-(2))|0);
      var $sub113=(((31)-($sub112))|0);
      var $cond115 = $sub113;label = 33; break;
    case 33: 
      var $cond115;
      var $shl116=$147 << $cond115;
      $K105=$shl116;
      label = 34; break;
    case 34: 
      var $150=$T;
      var $head118=(($150+4)|0);
      var $151=HEAP32[(($head118)>>2)];
      var $and119=$151 & -8;
      var $152=$psize;
      var $cmp120=(($and119)|0)!=(($152)|0);
      if ($cmp120) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $153=$K105;
      var $shr123=$153 >>> 31;
      var $and124=$shr123 & 1;
      var $154=$T;
      var $child125=(($154+16)|0);
      var $arrayidx126=(($child125+($and124<<2))|0);
      $C=$arrayidx126;
      var $155=$K105;
      var $shl127=$155 << 1;
      $K105=$shl127;
      var $156=$C;
      var $157=HEAP32[(($156)>>2)];
      var $cmp128=(($157)|0)!=0;
      if ($cmp128) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $158=$C;
      var $159=HEAP32[(($158)>>2)];
      $T=$159;
      label = 40; break;
    case 37: 
      var $160=$C;
      var $161=$160;
      var $162=$m_addr;
      var $least_addr132=(($162+16)|0);
      var $163=HEAP32[(($least_addr132)>>2)];
      var $cmp133=(($161)>>>0) >= (($163)>>>0);
      var $conv134=(($cmp133)&1);
      var $expval135=($conv134);
      var $tobool136=(($expval135)|0)!=0;
      if ($tobool136) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $164=$TP;
      var $165=$C;
      HEAP32[(($165)>>2)]=$164;
      var $166=$T;
      var $167=$TP;
      var $parent138=(($167+24)|0);
      HEAP32[(($parent138)>>2)]=$166;
      var $168=$TP;
      var $169=$TP;
      var $bk139=(($169+12)|0);
      HEAP32[(($bk139)>>2)]=$168;
      var $170=$TP;
      var $fd140=(($170+8)|0);
      HEAP32[(($fd140)>>2)]=$168;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 46; break;
    case 41: 
      var $171=$T;
      var $fd145=(($171+8)|0);
      var $172=HEAP32[(($fd145)>>2)];
      $F144=$172;
      var $173=$T;
      var $174=$173;
      var $175=$m_addr;
      var $least_addr146=(($175+16)|0);
      var $176=HEAP32[(($least_addr146)>>2)];
      var $cmp147=(($174)>>>0) >= (($176)>>>0);
      if ($cmp147) { label = 42; break; } else { var $181 = 0;label = 43; break; }
    case 42: 
      var $177=$F144;
      var $178=$177;
      var $179=$m_addr;
      var $least_addr149=(($179+16)|0);
      var $180=HEAP32[(($least_addr149)>>2)];
      var $cmp150=(($178)>>>0) >= (($180)>>>0);
      var $181 = $cmp150;label = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&1);
      var $expval152=($land_ext);
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $182=$TP;
      var $183=$F144;
      var $bk155=(($183+12)|0);
      HEAP32[(($bk155)>>2)]=$182;
      var $184=$T;
      var $fd156=(($184+8)|0);
      HEAP32[(($fd156)>>2)]=$182;
      var $185=$F144;
      var $186=$TP;
      var $fd157=(($186+8)|0);
      HEAP32[(($fd157)>>2)]=$185;
      var $187=$T;
      var $188=$TP;
      var $bk158=(($188+12)|0);
      HEAP32[(($bk158)>>2)]=$187;
      var $189=$TP;
      var $parent159=(($189+24)|0);
      HEAP32[(($parent159)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!"
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_add_segment["X"]=1;

function __Znwj($size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $size_addr;
      var $p;
      var $nh;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      var $0=$size_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $size_addr=1;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$size_addr;
      var $call=_malloc($1);
      $p=$call;
      var $cmp1=(($call)|0)==0;
      if ($cmp1) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $call2=__ZSt15get_new_handlerv();
      $nh=$call2;
      var $2=$nh;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $3=$nh;
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 13; break;
    case 9: 
      var $4$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $4$1 = tempRet0;
      var $5=$4$0;
      $exn_slot=$5;
      var $6=$4$1;
      $ehselector_slot=$6;
      label = 10; break;
    case 10: 
      var $sel=$ehselector_slot;
      var $ehspec_fails=(($sel)|0) < 0;
      if ($ehspec_fails) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $exn=$exn_slot;
      ___cxa_call_unexpected($exn);
      throw "Reached an unreachable!"
    case 12: 
      var $exception=___cxa_allocate_exception(4);
      var $7=$exception;
      __ZNSt9bad_allocC1Ev($7);
      (function() { try { __THREW__ = 0; return ___cxa_throw($exception, 5388260, (38)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 9; break; }
    case 13: 
      label = 5; break;
    case 14: 
      var $8=$p;

      return $8;
    case 15: 
      var $exn5=$exn_slot;
      var $sel6=$ehselector_slot;
      var $lpad_val$0=$exn5;
      var $lpad_val$1=0;
      var $lpad_val7$0=$lpad_val$0;
      var $lpad_val7$1=$sel6;
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) { HEAP32[((_llvm_eh_exception.buf)>>2)]=$lpad_val7$0 } throw $lpad_val7$0;;
    case 16: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}
__Znwj["X"]=1;

function __ZnwjRKSt9nothrow_t($size, $0) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $size_addr;
      var $_addr;
      var $p;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      $_addr=$0;
      $p=0;
      var $1=$size_addr;
      var $call = (function() { try { __THREW__ = 0; return __Znwj($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $p=$call;
      label = 7; break;
    case 4: 
      var $2$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]); $2$1 = tempRet0;
      var $3=$2$0;
      $exn_slot=$3;
      var $4=$2$1;
      $ehselector_slot=$4;
      label = 5; break;
    case 5: 
      var $exn=$exn_slot;
      var $5=___cxa_begin_catch($exn);
      (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$p;

      return $6;
    case 8: 
      var $7$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $7$1 = tempRet0;
      var $8=$7$0;
      $exn_slot=$8;
      var $9=$7$1;
      $ehselector_slot=$9;
      label = 9; break;
    case 9: 
      var $exn3=$exn_slot;
      ___cxa_call_unexpected($exn3);
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}


function __Znaj($size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $size_addr;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      var $0=$size_addr;
      var $call = (function() { try { __THREW__ = 0; return __Znwj($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 

      return $call;
    case 4: 
      var $1$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $1$1 = tempRet0;
      var $2=$1$0;
      $exn_slot=$2;
      var $3=$1$1;
      $ehselector_slot=$3;
      label = 5; break;
    case 5: 
      var $sel=$ehselector_slot;
      var $ehspec_fails=(($sel)|0) < 0;
      if ($ehspec_fails) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $exn=$exn_slot;
      ___cxa_call_unexpected($exn);
      throw "Reached an unreachable!"
    case 7: 
      var $exn1=$exn_slot;
      var $sel2=$ehselector_slot;
      var $lpad_val$0=$exn1;
      var $lpad_val$1=0;
      var $lpad_val3$0=$lpad_val$0;
      var $lpad_val3$1=$sel2;
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) { HEAP32[((_llvm_eh_exception.buf)>>2)]=$lpad_val3$0 } throw $lpad_val3$0;;
    default: assert(0, "bad label: " + label);
  }

}


function __ZnajRKSt9nothrow_t($size, $nothrow) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $size_addr;
      var $nothrow_addr;
      var $p;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      $nothrow_addr=$nothrow;
      $p=0;
      var $0=$size_addr;
      var $call = (function() { try { __THREW__ = 0; return __Znaj($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $p=$call;
      label = 7; break;
    case 4: 
      var $1$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]); $1$1 = tempRet0;
      var $2=$1$0;
      $exn_slot=$2;
      var $3=$1$1;
      $ehselector_slot=$3;
      label = 5; break;
    case 5: 
      var $exn=$exn_slot;
      var $4=___cxa_begin_catch($exn);
      (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $5=$p;

      return $5;
    case 8: 
      var $6$0 = ___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]); $6$1 = tempRet0;
      var $7=$6$0;
      $exn_slot=$7;
      var $8=$6$1;
      $ehselector_slot=$8;
      label = 9; break;
    case 9: 
      var $exn3=$exn_slot;
      ___cxa_call_unexpected($exn3);
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}


function __ZNKSt20bad_array_new_length4whatEv($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;

  return ((5386776)|0);
}


function __ZNSt20bad_array_new_lengthD2Ev($this) {
  var label = 0;


  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1;
  __ZNSt9bad_allocD2Ev($0);

  return;
}


function __ZSt17__throw_bad_allocv() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $exception=___cxa_allocate_exception(4);
      var $0=$exception;
      __ZNSt9bad_allocC1Ev($0);
      ___cxa_throw($exception, 5388260, (38));
      throw "Reached an unreachable!"
    case 3: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_CRC_writeheader","_lame_get_ATHlower","_id3tag_set_userinfo_ucs2","_id3tag_v1_only","_searchGenre","_id3tag_set_fieldvalue","_id3tag_set_comment_latin1","_lame_get_sfscale","_freq2bark","_lame_get_athaa_type","_encodeSideInfo2","_psymodel_init","_calc_target_bits","_lame_set_extension","_hip_set_errorf","_is_lame_global_flags_valid","__ZdlPvRKSt9nothrow_t","_lame_get_VBR_mean_bitrate_kbps","_isFrameIdMatching","_recalc_divide_init","_ResvFrameEnd","_lame_get_scale","_lame_set_free_format","_lame_set_nogap_total","_sizeOfCommentNode","_lame_get_VBR_hard_min","_lame_set_VBR","_reduce_bit_usage","_sys_alloc","_malloc_aligned","_test_tag_spec_flags","_lame_set_allow_diff_short","_tri_calc_sfb_noise_x34","_lame_get_VBR_q","_lame_get_lowpasswidth","_lame_set_preset_expopts","_lame_get_mode_automs","_lame_set_ogg","_lame_get_mode","__ZNSt20bad_array_new_lengthD2Ev","_calc_energy","_putbits_noheaders","__ZNSt20bad_array_new_lengthD1Ev","_lame_set_highpassfreq","_lame_set_short_threshold_lrm","_lame_get_id3v2_tag","_malloc","_gcd","_lame_set_findReplayGain","_init_s3_values","_lame_get_disable_reservoir","_lame_set_sfscale","_lame_get_ogg","_calc_noise_core_c","__ZNSt9bad_allocD2Ev","_calc_scalefac","__ZNSt9bad_allocD0Ev","_lame_get_VBR_quality","_quantize_x34","_penalties","_id3tag_set_textinfo_utf16","_swap_bytes","_drain_into_ancillary","__ZNSt20bad_array_new_lengthC2Ev","_isResamplingNecessary","_window_subband","_blackman","_lame_get_VBR","_lame_decode_headers","_lame_set_quant_comp_short","_lame_encode_flush_nogap","_valloc","_ix_max","_iteration_finish_one","_VBR_old_iteration_loop","_free_id3tag","_setLameTagFrameHeader","_floatcompare","_id3tag_genre_list","_decode1_headersB_clipchoice","_lame_msgf","_lame_print_config","_vbrpsy_compute_fft_l","_CBR_iteration_loop","_ATHformula","_id3tag_init","_internal_memalign","_lame_get_error_protection","_concatSep","_lame_encode_flush","_convert_partition2scalefac_l_to_s","_lame_set_mode","_VBR_encode_frame","_addVbr","_filter_coef","_lame_set_force_short_blocks","_bitcount","_get_lame_url","_lame_bitrate_stereo_mode_hist","_toID3v2TagId","_lame_set_maskingadjust_short","_lame_set_athaa_loudapprox","_hip_decode1_unclipped","_quant_compare","_lame_set_short_threshold","_ms_convert","_malloc_max_footprint","_set_pinfo","_set_frame_custom2","_malloc_footprint","_lame_decode_exit","_inc_subblock_gain","_hip_decode1","_updateStats","_lame_get_in_samplerate","_lame_decode_init","_scale_bitcount","_isMultiFrame","__ZdlPv","_set_4_byte_value","_id3tag_pad_v2","_count_bit_null","_writeLoBytes","_lame_init_params_ppflt","_mallinfo","__ZdaPv","_malloc_stats","_SmpFrqIndex","_vbrpsy_compute_MS_thresholds","_init_mparams","_id3tag_set_comment","_trancate_smallspectrums","_id3tag_set_userinfo_latin1","_lame_get_allow_diff_short","_mdct_short","_id3v2_add_latin1","_convert_partition2scalefac_l","_id3tag_set_track","_internal_mallinfo","_Huffmancode","_writeChars","_fht","_convert_partition2scalefac_s","_toID3v2TagId_ucs2","_isSameDescriptorUcs2","__ZSt15set_new_handlerPFvvE","_lame_encode_buffer_interleaved_ieee_double","_ExtractI4","_lame_set_tune","_format_bitstream","_setLang","_lame_get_emphasis","_lame_set_short_threshold_s","_lame_set_substep","_lame_get_noclipScale","_quantize_lines_xrpow","_calc_noise","_block_sf","_GetTitleGain","_lame_set_noATH","_lame_init_old","_lame_get_ATHshort","_UpdateMusicCRC","_toLittleEndian","_lame_set_lowpasswidth","_init_numline","_lame_set_force_ms","_cutDistribution","_independent_comalloc","_writeMainData","__ZdaPvRKSt9nothrow_t","_putheader_bits","_lame_set_errorf","_free","_lame_get_write_id3tag_automatic","_compute_ath","_lame_set_asm_optimizations","_get_klemm_noise","_init_bit_stream_w","_noquant_count_bits","_tryThatOne","_BitrateIndex","_save_gain_values","_lame_get_athaa_sensitivity","_do_gain_analysis","_IsVbrTag","_lame_get_totalframes","_lame_get_samplerate","_lame_get_noATH","_id3v2_add_ucs2","_hip_set_debugf","_vbrpsy_compute_block_type","_bitpressure_strategy","_isSameDescriptor","__ZSt15get_new_handlerv","_lame_set_num_samples","_lame_debugf","_tmalloc_large","_lame_set_analysis","_get_lame_short_version","_best_huffman_divide","_lame_set_quality","_skipId3v2","_lame_get_version","_lame_get_brate","_lame_set_msgf","_set_text_field","_id3tag_set_pad","_lame_set_athaa_type","_disable_FPE","_mdct_long","_has_SSE","__ZNKSt20bad_array_new_length4whatEv","_lookupGenre","_set_frame_pinfo","_get_framebits","_lame_get_maskingadjust","_lame_get_extension","_lame_set_copyright","_maybeLatin1","_reduce_side","_lame_get_force_ms","_lame_get_force_short_blocks","_lame_get_ReplayGain_input","_lame_set_maskingadjust","_min_int","_lame_report_def","_lame_init","_writeUcs2s","_id3tag_set_title","_set_frame_comment","_convert_partition2scalefac","_lame_get_nogap_currentindex","_ialloc","_lame_get_substep","_huffman_coder_count1","_lame_init_params","_set_scalefacs","_NS_INTERP","_lame_print_internals","_lame_set_brate","_lame_errorf","_get_lame_version_numerical","_lame_get_quant_comp_short","_id3tag_set_fieldvalue_ucs2","_AnalyzeSamples","_id3tag_add_v2","_get_lame_version","_tryGlobalStepsize","_vbrpsy_apply_block_type","_has_SSE2","_long_block_constrain","_id3tag_space_v1","__ZNSt20bad_array_new_lengthD0Ev","_apply_preset","_lame_get_maskingadjust_short","_id3tag_v2_only","_lame_set_preset_notune","_init_log_table","_FindNearestBitrate","_VBR_new_iteration_loop","_pecalc_l","_lame_set_lowpassfreq","_lame_get_bWriteVbrTag","_init_top","_is_lame_internal_flags_valid","_lame_get_findPeakSample","_ShortHuffmancodebits","_lame_set_ReplayGain_input","_hasUcs2ByteOrderMarker","_internal_realloc","_hip_decode_exit","_vbrpsy_calc_mask_index_s","_pecalc_s","_lame_set_decode_on_the_fly","_lame_get_interChRatio","_linear_int","_lame_get_ATHonly","_hip_decode_init","_freegfc","_VBR_old_prepare","_lame_set_compression_ratio","_fast_log2","_sizeOfNode","_filterYule","__ZNSt9bad_allocD1Ev","_calc_sfb_noise_x34","_lame_bitrate_hist","_id3tag_set_fieldvalue_utf16","_lame_set_num_channels","_LongHuffmancodebits","_lame_set_debugf","_lame_set_ATHonly","_lame_encode_buffer_ieee_double","_get_psy_version","_lame_mp3_tags_fid","_id3tag_set_genre","_lame_get_lametag_frame","_filterButter","_lame_bitrate_block_type_hist","_lame_set_preset","_lame_get_VBR_max_bitrate_kbps","_athAdjust","_lame_get_short_threshold_lrm","_lame_get_id3v1_tag","_hip_set_msgf","_lame_set_cwlimit","_lame_get_highpasswidth","_lame_set_ATHshort","_lame_get_exp_nspsytune","_lame_init_bitstream","_sloppyCompared","_lame_get_RadioGain","_vbrpsy_skip_masking_s","_release_unused_segments","_lame_set_VBR_min_bitrate_kbps","_lame_get_noclipGainChange","_local_ucs2_substr","_lame_get_out_samplerate","_init_outer_loop","_compute_flushbits","_lame_set_emphasis","_copy_buffer","__ZNSt9bad_allocC1Ev","_CRC_update_lookup","_hip_decode1_headers","_memalign","_lame_set_interChRatio","_lame_get_compression_ratio","_update_inbuffer_size","_optimum_bandwidth","_short_block_constrain","_init_bins","_find_scalefac_x34","_inc_scalefac_scale","_nextUpperAlpha","_lame_encode_buffer_int","_id3tag_set_artist","_mmap_alloc","_lame_get_copyright","_getframebits","_hip_decode1_headersB","_lame_get_num_samples","_lame_get_msfix","_id3v2AddLameVersion","_set_subblock_gain","_init_xrpow_core_init","_lame_encode_buffer_interleaved_ieee_float","_set_frame_wxxx","_ResvFrameBegin","_get_lame_os_bitness","_id3tag_set_textinfo_ucs2","_guess_scalefac_x34","_s3_func","_lame_decode1_headers","_frame_id_matches","_CRC_update","_lame_get_short_threshold_s","_init_fft","_lame_encode_frame_init","_vec_max_c","_lame_set_exp_nspsytune","_ResetSampleFrequency","_calc_mask_index_l","_count_bit_noESC_from2","_count_bit_noESC_from3","_count_bit_ESC","_k_34_4","_id3tag_write_v2","_scfsi_calc","_id3tag_write_v1","_bin_search_StepSize","_lame_get_framesize","_lame_set_ATHlower","_lame_get_encoder_delay","_hip_decode","_lame_set_decode_only","_lame_set_write_id3tag_automatic","_lame_decode1_headersB","_Xing_seek_table","_ATHformula_GB","_lame_get_nogap_total","_lame_set_subblock_gain","_mallopt","_lame_set_scale_right","_lame_get_quant_comp","_balance_noise","_putbits2","_lame_set_error_protection","_lame_get_padding_type","_lame_set_out_samplerate","_lame_set_ATHtype","_add_segment","_mask_add_delta","_VBR_encode_granule","_free_global_data","_InitGainAnalysis","_lame_get_strict_ISO","_lame_encode_buffer_template","_lame_get_decode_on_the_fly","__ZSt17__throw_bad_allocv","_lame_set_VBR_mean_bitrate_kbps","_ABR_iteration_loop","_hip_decode_headers","_AddVbrFrame","_calcNeeded","_best_scalefac_store","_lame_set_useTemporal","_lame_stereo_mode_hist","_vbrpsy_compute_fft_s","_lame_get_lowpassfreq","_fft_short","_local_char_pos","_lame_set_bWriteVbrTag","_fill_buffer","_do_copy_buffer","_lame_get_decode_only","_malloc_trim","_lame_set_nogap_currentindex","_init_xrpow","_outer_loop","_quantizeAndCountBits","_ATHmdct","_searchGlobalStepsizeMax","_get_lame_tag_encoder_short_version","_lame_set_VBR_hard_min","_fsqr","_lame_encode_buffer_long2","_set_frame_apic","_quantize_lines_xrpow_01","_id3v2AddAudioDuration","_lame_get_scale_left","_lame_get_ATHcurve","_get_lame_very_short_version","_flush_bitstream","_lame_set_VBR_quality","_sys_trim","_lame_decode","_compute_bark_values","_writeheader","__ZNSt20bad_array_new_lengthC1Ev","_find_lowest_scalefac","_pvalloc","__ZNSt9bad_allocC2Ev","_fromLatin1Char","_id3tag_set_textinfo_latin1","_choose_table_nonMMX","_lame_set_VBR_max_bitrate_kbps","_calcFrameLength","_lame_get_no_short_blocks","_vbrpsy_mask_add","_local_strdup_utf16_to_latin1","__ZNKSt9bad_alloc4whatEv","_add_dummy_byte","_vbrpsy_compute_masking_s","_ResvAdjust","_vbrpsy_compute_masking_l","_lame_get_free_format","_lame_get_scale_right","_stereo_demask","_id3tag_set_year","_CreateI4","_get_vbr_preset","_CreateI2","_malloc_usable_size","_GetVbrTag","_get_max_frame_buffer_size_by_constraint","_id3tag_set_albumart","_isSameLang","_lame_decode1","_lame_set_scale","_change_mparam","_lame_set_disable_reservoir","_lame_set_highpasswidth","_lame_bitrate_kbps","_id3tag_set_album","_init_xrpow_core_c","_mpeg2_scale_bitcount","_lame_get_num_channels","_lame_get_athaa_loudapprox","_lame_set_quant_comp","_lame_set_no_short_blocks","_InitVbrTag","_PutVbrTag","_apply_vbr_preset","_local_ucs2_strlen","_free_aligned","_sfDepth","_vbrpsy_attack_detection","_lame_init_qval","_lame_copy_inbuffer","_nearestBitrateFullIndex","_analyzeResult","_count_bit_noESC","_vbrpsy_compute_loudness_approximation_l","_id3tag_set_comment_utf16","_init_mask_add_max_values","_id3tag_set_comment_ucs2","_local_ucs2_pos","_recalc_divide_sub","_max_int","_huffman_init","_findNode","_lame_block_type_hist","_lame_close","__Znwj","_iteration_init","_lame_get_mf_samples_to_encode","_lame_get_quality","_lame_get_AudiophileGain","_sloppySearchGenre","_has_MMX","_independent_calloc","_mdct_sub48","_lame_get_ReplayGain_decode","_outOfBitsStrategy","_lame_set_mode_automs","_mmap_resize","_lame_get_findReplayGain","_lame_encode_finish","_lame_encode_buffer_float","_lame_encode_buffer","_loop_break","_on_pe","_lame_get_bitrate","_prepend_alloc","_L3psycho_anal_vbr","__ZnwjRKSt9nothrow_t","_map2MP3Frequency","_lame_encode_buffer_interleaved","_flattenDistribution","_lame_get_original","_hip_set_pinfo","_calc_xmin","_lame_set_scale_left","_lame_get_highpassfreq","_lame_get_useTemporal","_apply_abr_preset","_quantize_xrpow","_local_ucs2_strdup","_lame_set_ReplayGain_decode","_lame_get_frameNum","_lame_get_PeakSample","_lame_set_athaa_sensitivity","_lame_encode_buffer_sample_t","_lame_get_VBR_min_bitrate_kbps","_lame_get_subblock_gain","_lame_set_in_samplerate","_lame_set_padding_type","_optimum_samplefreq","_lame_get_ATHtype","__Znaj","_id3tag_set_genre_utf16","_internal_malloc_stats","_tmalloc_small","_count_bits","_adjust_ATH","_lame_get_cwlimit","_psfb21_analogsilence","_lame_get_analysis","_calloc","_lame_set_msfix","_lame_set_original","_ResvMaxBits","_lame_set_findPeakSample","_lame_get_experimentalY","_lame_get_experimentalX","_lame_encode_mp3_frame","_lame_get_experimentalZ","_fill_buffer_resample","_psycho_loudness_approx","_local_strdup","_lame_set_ATHcurve","_lame_set_VBR_q","_realloc","_segment_holding","_copyV1ToV2","_sizeOfWxxxNode","_fft_long","_amp_scalefac_bands","_lame_set_experimentalY","_lame_set_experimentalX","_lame_set_experimentalZ","_lame_report_fnc","_appendNode","_mpeg1_scale_bitcount","_lame_encode_buffer_ieee_float","_lame_set_strict_ISO","_lame_encode_buffer_long","_lame_get_size_mp3buffer","_VBR_new_prepare","_PutLameVBR","__ZnajRKSt9nothrow_t","_local_strcasecmp","_lame_get_encoder_padding","_has_3DNow"]


// libmp3lame function wrappers

var BUFSIZE = 8192;

return {
	STEREO: 0, 
	JOINT_STEREO: 1, 
	MONO: 3,

	get_version: Module.cwrap('get_lame_version', 'string'),

	init: Module.cwrap('lame_init', 'number'),
	init_params: Module.cwrap('lame_init_params', 'number', [ 'number' ]),

	set_mode: Module.cwrap('lame_set_mode', 'number', [ 'number', 'number' ]),
	get_mode: Module.cwrap('lame_get_mode', 'number', [ 'number' ]),

	set_num_samples: Module.cwrap('lame_set_num_samples', 'number', [ 'number', 'number' ]),
	get_num_samples: Module.cwrap('lame_get_num_samples', 'number', [ 'number' ]),

	set_num_channels: Module.cwrap('lame_set_num_channels', 'number', [ 'number', 'number' ]),
	get_num_channels: Module.cwrap('lame_get_num_channels', 'number', [ 'number' ]),

	set_in_samplerate: Module.cwrap('lame_set_in_samplerate', 'number', [ 'number', 'number' ]),
	get_in_samplerate: Module.cwrap('lame_get_in_samplerate', 'number', [ 'number' ]),

	set_out_samplerate: Module.cwrap('lame_set_out_samplerate', 'number', [ 'number', 'number' ]),
	get_out_samplerate: Module.cwrap('lame_get_out_samplerate', 'number', [ 'number' ]),

	set_bitrate: Module.cwrap('lame_set_brate', 'number', [ 'number', 'number' ]),
	get_bitrate: Module.cwrap('lame_get_brate', 'number', [ 'number' ]),

	encode_buffer_ieee_float: function(handle, channel_l, channel_r) {
		var outbuf = _malloc(BUFSIZE);
		var inbuf_l = _malloc(channel_l.length * 4);
		var inbuf_r = _malloc(channel_r.length * 4);
		for (var i=0;i<channel_l.length;i++) {
			setValue(inbuf_l + (i*4), channel_l[i], 'float');
		}
		for (var i=0;i<channel_r.length;i++) {
			setValue(inbuf_r + (i*4), channel_r[i], 'float');
		}
		var nread = Module.ccall('lame_encode_buffer_ieee_float', 'number', [ 'number', 'number', 'number', 'number', 'number', 'number' ], [ handle, inbuf_l, inbuf_r, channel_l.length, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		_free(inbuf_l);
		_free(inbuf_r);
		return { size: nread, data: retdata };
	},

	encode_flush: function(handle) {
		var outbuf = _malloc(BUFSIZE);
		var nread = Module.ccall('lame_encode_flush', 'number', [ 'number', 'number', 'number' ], [ handle, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		return { size: nread, data: retdata };
	},

	close: Module.cwrap('lame_close', 'number', [ 'number' ])
};

})();


